# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.4
#
# <auto-generated>
#
# Generated from file `install.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module InstallModule
_M_InstallModule = Ice.openModule('InstallModule')
__name__ = 'InstallModule'

if 'InstallInterface' not in _M_InstallModule.__dict__:
    _M_InstallModule.InstallInterface = Ice.createTempClass()
    class InstallInterface(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_InstallModule.InstallInterface:
                raise RuntimeError('InstallModule.InstallInterface is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::InstallModule::InstallInterface')

        def ice_id(self, current=None):
            return '::InstallModule::InstallInterface'

        def ice_staticId():
            return '::InstallModule::InstallInterface'
        ice_staticId = staticmethod(ice_staticId)

        def install(self, path, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_InstallModule._t_InstallInterface)

        __repr__ = __str__

    _M_InstallModule.InstallInterfacePrx = Ice.createTempClass()
    class InstallInterfacePrx(Ice.ObjectPrx):

        def install(self, path, _ctx=None):
            return _M_InstallModule.InstallInterface._op_install.invoke(self, ((path, ), _ctx))

        def begin_install(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_InstallModule.InstallInterface._op_install.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        def end_install(self, _r):
            return _M_InstallModule.InstallInterface._op_install.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_InstallModule.InstallInterfacePrx.ice_checkedCast(proxy, '::InstallModule::InstallInterface', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_InstallModule.InstallInterfacePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::InstallModule::InstallInterface'
        ice_staticId = staticmethod(ice_staticId)

    _M_InstallModule._t_InstallInterfacePrx = IcePy.defineProxy('::InstallModule::InstallInterface', InstallInterfacePrx)

    _M_InstallModule._t_InstallInterface = IcePy.defineClass('::InstallModule::InstallInterface', InstallInterface, -1, (), True, False, None, (), ())
    InstallInterface._ice_type = _M_InstallModule._t_InstallInterface

    InstallInterface._op_install = IcePy.Operation('install', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())

    _M_InstallModule.InstallInterface = InstallInterface
    del InstallInterface

    _M_InstallModule.InstallInterfacePrx = InstallInterfacePrx
    del InstallInterfacePrx

# End of module InstallModule

# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.4
#
# <auto-generated>
#
# Generated from file `logic.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import utils_ice
import perpcice_ice

# Included module Utils
_M_Utils = Ice.openModule('Utils')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module PerpcIce
_M_PerpcIce = Ice.openModule('PerpcIce')

# Start of module BoxLogic
_M_BoxLogic = Ice.openModule('BoxLogic')
__name__ = 'BoxLogic'

if '_t_MACs' not in _M_BoxLogic.__dict__:
    _M_BoxLogic._t_MACs = IcePy.defineSequence('::BoxLogic::MACs', (), IcePy._t_string)

if 'AgentIdentification' not in _M_BoxLogic.__dict__:
    _M_BoxLogic.AgentIdentification = Ice.createTempClass()
    class AgentIdentification(object):
        def __init__(self, Name='', Hardware=None):
            self.Name = Name
            self.Hardware = Hardware

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.Name)
            if self.Hardware:
                for _i0 in self.Hardware:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_BoxLogic.AgentIdentification):
                return NotImplemented
            else:
                if self.Name is None or other.Name is None:
                    if self.Name != other.Name:
                        return (-1 if self.Name is None else 1)
                else:
                    if self.Name < other.Name:
                        return -1
                    elif self.Name > other.Name:
                        return 1
                if self.Hardware is None or other.Hardware is None:
                    if self.Hardware != other.Hardware:
                        return (-1 if self.Hardware is None else 1)
                else:
                    if self.Hardware < other.Hardware:
                        return -1
                    elif self.Hardware > other.Hardware:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_BoxLogic._t_AgentIdentification)

        __repr__ = __str__

    _M_BoxLogic._t_AgentIdentification = IcePy.defineStruct('::BoxLogic::AgentIdentification', AgentIdentification, (), (
        ('Name', (), IcePy._t_string),
        ('Hardware', (), _M_BoxLogic._t_MACs)
    ))

    _M_BoxLogic.AgentIdentification = AgentIdentification
    del AgentIdentification

if 'DiskType' not in _M_BoxLogic.__dict__:
    _M_BoxLogic.DiskType = Ice.createTempClass()
    class DiskType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    DiskType.RAW = DiskType("RAW", 0)
    DiskType.MBR = DiskType("MBR", 1)
    DiskType.GPT = DiskType("GPT", 2)
    DiskType._enumerators = { 0:DiskType.RAW, 1:DiskType.MBR, 2:DiskType.GPT }

    _M_BoxLogic._t_DiskType = IcePy.defineEnum('::BoxLogic::DiskType', DiskType, (), DiskType._enumerators)

    _M_BoxLogic.DiskType = DiskType
    del DiskType

if 'DiskStatus' not in _M_BoxLogic.__dict__:
    _M_BoxLogic.DiskStatus = Ice.createTempClass()
    class DiskStatus(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    DiskStatus.ErrorOccurred = DiskStatus("ErrorOccurred", 0)
    DiskStatus.Unsupported = DiskStatus("Unsupported", 1)
    DiskStatus.NotExistLastSnapshot = DiskStatus("NotExistLastSnapshot", 2)
    DiskStatus.Backuping = DiskStatus("Backuping", 3)
    DiskStatus.CDPing = DiskStatus("CDPing", 4)
    DiskStatus.LastSnapshotIsNormal = DiskStatus("LastSnapshotIsNormal", 5)
    DiskStatus.LastSnapshotIsCDP = DiskStatus("LastSnapshotIsCDP", 6)
    DiskStatus._enumerators = { 0:DiskStatus.ErrorOccurred, 1:DiskStatus.Unsupported, 2:DiskStatus.NotExistLastSnapshot, 3:DiskStatus.Backuping, 4:DiskStatus.CDPing, 5:DiskStatus.LastSnapshotIsNormal, 6:DiskStatus.LastSnapshotIsCDP }

    _M_BoxLogic._t_DiskStatus = IcePy.defineEnum('::BoxLogic::DiskStatus', DiskStatus, (), DiskStatus._enumerators)

    _M_BoxLogic.DiskStatus = DiskStatus
    del DiskStatus

if 'CDPSnapshot' not in _M_BoxLogic.__dict__:
    _M_BoxLogic.CDPSnapshot = Ice.createTempClass()
    class CDPSnapshot(object):
        def __init__(self, setByRestore=False, token="invalid", seconds=-1, microseconds=-1):
            self.setByRestore = setByRestore
            self.token = token
            self.seconds = seconds
            self.microseconds = microseconds

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.setByRestore)
            _h = 5 * _h + Ice.getHash(self.token)
            _h = 5 * _h + Ice.getHash(self.seconds)
            _h = 5 * _h + Ice.getHash(self.microseconds)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_BoxLogic.CDPSnapshot):
                return NotImplemented
            else:
                if self.setByRestore is None or other.setByRestore is None:
                    if self.setByRestore != other.setByRestore:
                        return (-1 if self.setByRestore is None else 1)
                else:
                    if self.setByRestore < other.setByRestore:
                        return -1
                    elif self.setByRestore > other.setByRestore:
                        return 1
                if self.token is None or other.token is None:
                    if self.token != other.token:
                        return (-1 if self.token is None else 1)
                else:
                    if self.token < other.token:
                        return -1
                    elif self.token > other.token:
                        return 1
                if self.seconds is None or other.seconds is None:
                    if self.seconds != other.seconds:
                        return (-1 if self.seconds is None else 1)
                else:
                    if self.seconds < other.seconds:
                        return -1
                    elif self.seconds > other.seconds:
                        return 1
                if self.microseconds is None or other.microseconds is None:
                    if self.microseconds != other.microseconds:
                        return (-1 if self.microseconds is None else 1)
                else:
                    if self.microseconds < other.microseconds:
                        return -1
                    elif self.microseconds > other.microseconds:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_BoxLogic._t_CDPSnapshot)

        __repr__ = __str__

    _M_BoxLogic._t_CDPSnapshot = IcePy.defineStruct('::BoxLogic::CDPSnapshot', CDPSnapshot, (), (
        ('setByRestore', (), IcePy._t_bool),
        ('token', (), IcePy._t_string),
        ('seconds', (), IcePy._t_long),
        ('microseconds', (), IcePy._t_int)
    ))

    _M_BoxLogic.CDPSnapshot = CDPSnapshot
    del CDPSnapshot

if 'DiskDetail' not in _M_BoxLogic.__dict__:
    _M_BoxLogic.DiskDetail = Ice.createTempClass()
    class DiskDetail(object):
        def __init__(self, name='', status=_M_BoxLogic.DiskStatus.ErrorOccurred, type=_M_BoxLogic.DiskType.RAW, numberOfSectors=0, bootDevice=False, lastSnapshot="invalid", cdpSnapshot=Ice._struct_marker):
            self.name = name
            self.status = status
            self.type = type
            self.numberOfSectors = numberOfSectors
            self.bootDevice = bootDevice
            self.lastSnapshot = lastSnapshot
            if cdpSnapshot is Ice._struct_marker:
                self.cdpSnapshot = _M_BoxLogic.CDPSnapshot()
            else:
                self.cdpSnapshot = cdpSnapshot

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.status)
            _h = 5 * _h + Ice.getHash(self.type)
            _h = 5 * _h + Ice.getHash(self.numberOfSectors)
            _h = 5 * _h + Ice.getHash(self.bootDevice)
            _h = 5 * _h + Ice.getHash(self.lastSnapshot)
            _h = 5 * _h + Ice.getHash(self.cdpSnapshot)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_BoxLogic.DiskDetail):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.status is None or other.status is None:
                    if self.status != other.status:
                        return (-1 if self.status is None else 1)
                else:
                    if self.status < other.status:
                        return -1
                    elif self.status > other.status:
                        return 1
                if self.type is None or other.type is None:
                    if self.type != other.type:
                        return (-1 if self.type is None else 1)
                else:
                    if self.type < other.type:
                        return -1
                    elif self.type > other.type:
                        return 1
                if self.numberOfSectors is None or other.numberOfSectors is None:
                    if self.numberOfSectors != other.numberOfSectors:
                        return (-1 if self.numberOfSectors is None else 1)
                else:
                    if self.numberOfSectors < other.numberOfSectors:
                        return -1
                    elif self.numberOfSectors > other.numberOfSectors:
                        return 1
                if self.bootDevice is None or other.bootDevice is None:
                    if self.bootDevice != other.bootDevice:
                        return (-1 if self.bootDevice is None else 1)
                else:
                    if self.bootDevice < other.bootDevice:
                        return -1
                    elif self.bootDevice > other.bootDevice:
                        return 1
                if self.lastSnapshot is None or other.lastSnapshot is None:
                    if self.lastSnapshot != other.lastSnapshot:
                        return (-1 if self.lastSnapshot is None else 1)
                else:
                    if self.lastSnapshot < other.lastSnapshot:
                        return -1
                    elif self.lastSnapshot > other.lastSnapshot:
                        return 1
                if self.cdpSnapshot is None or other.cdpSnapshot is None:
                    if self.cdpSnapshot != other.cdpSnapshot:
                        return (-1 if self.cdpSnapshot is None else 1)
                else:
                    if self.cdpSnapshot < other.cdpSnapshot:
                        return -1
                    elif self.cdpSnapshot > other.cdpSnapshot:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_BoxLogic._t_DiskDetail)

        __repr__ = __str__

    _M_BoxLogic._t_DiskDetail = IcePy.defineStruct('::BoxLogic::DiskDetail', DiskDetail, (), (
        ('name', (), IcePy._t_string),
        ('status', (), _M_BoxLogic._t_DiskStatus),
        ('type', (), _M_BoxLogic._t_DiskType),
        ('numberOfSectors', (), IcePy._t_long),
        ('bootDevice', (), IcePy._t_bool),
        ('lastSnapshot', (), IcePy._t_string),
        ('cdpSnapshot', (), _M_BoxLogic._t_CDPSnapshot)
    ))

    _M_BoxLogic.DiskDetail = DiskDetail
    del DiskDetail

if 'Disk' not in _M_BoxLogic.__dict__:
    _M_BoxLogic.Disk = Ice.createTempClass()
    class Disk(object):
        def __init__(self, id=0, detail=Ice._struct_marker):
            self.id = id
            if detail is Ice._struct_marker:
                self.detail = _M_BoxLogic.DiskDetail()
            else:
                self.detail = detail

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.id)
            _h = 5 * _h + Ice.getHash(self.detail)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_BoxLogic.Disk):
                return NotImplemented
            else:
                if self.id is None or other.id is None:
                    if self.id != other.id:
                        return (-1 if self.id is None else 1)
                else:
                    if self.id < other.id:
                        return -1
                    elif self.id > other.id:
                        return 1
                if self.detail is None or other.detail is None:
                    if self.detail != other.detail:
                        return (-1 if self.detail is None else 1)
                else:
                    if self.detail < other.detail:
                        return -1
                    elif self.detail > other.detail:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_BoxLogic._t_Disk)

        __repr__ = __str__

    _M_BoxLogic._t_Disk = IcePy.defineStruct('::BoxLogic::Disk', Disk, (), (
        ('id', (), IcePy._t_int),
        ('detail', (), _M_BoxLogic._t_DiskDetail)
    ))

    _M_BoxLogic.Disk = Disk
    del Disk

if '_t_Disks' not in _M_BoxLogic.__dict__:
    _M_BoxLogic._t_Disks = IcePy.defineSequence('::BoxLogic::Disks', (), _M_BoxLogic._t_Disk)

if 'AgentModuleError' not in _M_BoxLogic.__dict__:
    _M_BoxLogic.AgentModuleError = Ice.createTempClass()
    class AgentModuleError(object):
        def __init__(self, moduleName='', description='', debug='', rawCode=0):
            self.moduleName = moduleName
            self.description = description
            self.debug = debug
            self.rawCode = rawCode

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.moduleName)
            _h = 5 * _h + Ice.getHash(self.description)
            _h = 5 * _h + Ice.getHash(self.debug)
            _h = 5 * _h + Ice.getHash(self.rawCode)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_BoxLogic.AgentModuleError):
                return NotImplemented
            else:
                if self.moduleName is None or other.moduleName is None:
                    if self.moduleName != other.moduleName:
                        return (-1 if self.moduleName is None else 1)
                else:
                    if self.moduleName < other.moduleName:
                        return -1
                    elif self.moduleName > other.moduleName:
                        return 1
                if self.description is None or other.description is None:
                    if self.description != other.description:
                        return (-1 if self.description is None else 1)
                else:
                    if self.description < other.description:
                        return -1
                    elif self.description > other.description:
                        return 1
                if self.debug is None or other.debug is None:
                    if self.debug != other.debug:
                        return (-1 if self.debug is None else 1)
                else:
                    if self.debug < other.debug:
                        return -1
                    elif self.debug > other.debug:
                        return 1
                if self.rawCode is None or other.rawCode is None:
                    if self.rawCode != other.rawCode:
                        return (-1 if self.rawCode is None else 1)
                else:
                    if self.rawCode < other.rawCode:
                        return -1
                    elif self.rawCode > other.rawCode:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_BoxLogic._t_AgentModuleError)

        __repr__ = __str__

    _M_BoxLogic._t_AgentModuleError = IcePy.defineStruct('::BoxLogic::AgentModuleError', AgentModuleError, (), (
        ('moduleName', (), IcePy._t_string),
        ('description', (), IcePy._t_string),
        ('debug', (), IcePy._t_string),
        ('rawCode', (), IcePy._t_long)
    ))

    _M_BoxLogic.AgentModuleError = AgentModuleError
    del AgentModuleError

if 'BackupProgressCode' not in _M_BoxLogic.__dict__:
    _M_BoxLogic.BackupProgressCode = Ice.createTempClass()
    class BackupProgressCode(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    BackupProgressCode.UnknownBackupProgressCode = BackupProgressCode("UnknownBackupProgressCode", 0)
    BackupProgressCode.ScanningDuplicateFile = BackupProgressCode("ScanningDuplicateFile", 1)
    BackupProgressCode.AnalyzingDuplicateFile = BackupProgressCode("AnalyzingDuplicateFile", 2)
    BackupProgressCode.CreatingDataBitmap = BackupProgressCode("CreatingDataBitmap", 3)
    BackupProgressCode.CreatingDiskSnapshot = BackupProgressCode("CreatingDiskSnapshot", 4)
    BackupProgressCode.TransitingData = BackupProgressCode("TransitingData", 5)
    BackupProgressCode._enumerators = { 0:BackupProgressCode.UnknownBackupProgressCode, 1:BackupProgressCode.ScanningDuplicateFile, 2:BackupProgressCode.AnalyzingDuplicateFile, 3:BackupProgressCode.CreatingDataBitmap, 4:BackupProgressCode.CreatingDiskSnapshot, 5:BackupProgressCode.TransitingData }

    _M_BoxLogic._t_BackupProgressCode = IcePy.defineEnum('::BoxLogic::BackupProgressCode', BackupProgressCode, (), BackupProgressCode._enumerators)

    _M_BoxLogic.BackupProgressCode = BackupProgressCode
    del BackupProgressCode

if 'BackupProgress' not in _M_BoxLogic.__dict__:
    _M_BoxLogic.BackupProgress = Ice.createTempClass()
    class BackupProgress(object):
        def __init__(self, code=_M_BoxLogic.BackupProgressCode.UnknownBackupProgressCode, progressIndex=0, progressTotal=0):
            self.code = code
            self.progressIndex = progressIndex
            self.progressTotal = progressTotal

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.code)
            _h = 5 * _h + Ice.getHash(self.progressIndex)
            _h = 5 * _h + Ice.getHash(self.progressTotal)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_BoxLogic.BackupProgress):
                return NotImplemented
            else:
                if self.code is None or other.code is None:
                    if self.code != other.code:
                        return (-1 if self.code is None else 1)
                else:
                    if self.code < other.code:
                        return -1
                    elif self.code > other.code:
                        return 1
                if self.progressIndex is None or other.progressIndex is None:
                    if self.progressIndex != other.progressIndex:
                        return (-1 if self.progressIndex is None else 1)
                else:
                    if self.progressIndex < other.progressIndex:
                        return -1
                    elif self.progressIndex > other.progressIndex:
                        return 1
                if self.progressTotal is None or other.progressTotal is None:
                    if self.progressTotal != other.progressTotal:
                        return (-1 if self.progressTotal is None else 1)
                else:
                    if self.progressTotal < other.progressTotal:
                        return -1
                    elif self.progressTotal > other.progressTotal:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_BoxLogic._t_BackupProgress)

        __repr__ = __str__

    _M_BoxLogic._t_BackupProgress = IcePy.defineStruct('::BoxLogic::BackupProgress', BackupProgress, (), (
        ('code', (), _M_BoxLogic._t_BackupProgressCode),
        ('progressIndex', (), IcePy._t_long),
        ('progressTotal', (), IcePy._t_long)
    ))

    _M_BoxLogic.BackupProgress = BackupProgress
    del BackupProgress

if 'BackupFinishCode' not in _M_BoxLogic.__dict__:
    _M_BoxLogic.BackupFinishCode = Ice.createTempClass()
    class BackupFinishCode(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    BackupFinishCode.Successful = BackupFinishCode("Successful", 0)
    BackupFinishCode.UserCancel = BackupFinishCode("UserCancel", 1)
    BackupFinishCode.Failed = BackupFinishCode("Failed", 2)
    BackupFinishCode.Error = BackupFinishCode("Error", 3)
    BackupFinishCode._enumerators = { 0:BackupFinishCode.Successful, 1:BackupFinishCode.UserCancel, 2:BackupFinishCode.Failed, 3:BackupFinishCode.Error }

    _M_BoxLogic._t_BackupFinishCode = IcePy.defineEnum('::BoxLogic::BackupFinishCode', BackupFinishCode, (), BackupFinishCode._enumerators)

    _M_BoxLogic.BackupFinishCode = BackupFinishCode
    del BackupFinishCode

if 'CDPConfig' not in _M_BoxLogic.__dict__:
    _M_BoxLogic.CDPConfig = Ice.createTempClass()
    class CDPConfig(object):
        def __init__(self, mode=0, ip="invalid", port=-1, socketNumber=-1, cacheMaxBytes=-1, netTimeouts=-1, token="invalid"):
            self.mode = mode
            self.ip = ip
            self.port = port
            self.socketNumber = socketNumber
            self.cacheMaxBytes = cacheMaxBytes
            self.netTimeouts = netTimeouts
            self.token = token

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.mode)
            _h = 5 * _h + Ice.getHash(self.ip)
            _h = 5 * _h + Ice.getHash(self.port)
            _h = 5 * _h + Ice.getHash(self.socketNumber)
            _h = 5 * _h + Ice.getHash(self.cacheMaxBytes)
            _h = 5 * _h + Ice.getHash(self.netTimeouts)
            _h = 5 * _h + Ice.getHash(self.token)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_BoxLogic.CDPConfig):
                return NotImplemented
            else:
                if self.mode is None or other.mode is None:
                    if self.mode != other.mode:
                        return (-1 if self.mode is None else 1)
                else:
                    if self.mode < other.mode:
                        return -1
                    elif self.mode > other.mode:
                        return 1
                if self.ip is None or other.ip is None:
                    if self.ip != other.ip:
                        return (-1 if self.ip is None else 1)
                else:
                    if self.ip < other.ip:
                        return -1
                    elif self.ip > other.ip:
                        return 1
                if self.port is None or other.port is None:
                    if self.port != other.port:
                        return (-1 if self.port is None else 1)
                else:
                    if self.port < other.port:
                        return -1
                    elif self.port > other.port:
                        return 1
                if self.socketNumber is None or other.socketNumber is None:
                    if self.socketNumber != other.socketNumber:
                        return (-1 if self.socketNumber is None else 1)
                else:
                    if self.socketNumber < other.socketNumber:
                        return -1
                    elif self.socketNumber > other.socketNumber:
                        return 1
                if self.cacheMaxBytes is None or other.cacheMaxBytes is None:
                    if self.cacheMaxBytes != other.cacheMaxBytes:
                        return (-1 if self.cacheMaxBytes is None else 1)
                else:
                    if self.cacheMaxBytes < other.cacheMaxBytes:
                        return -1
                    elif self.cacheMaxBytes > other.cacheMaxBytes:
                        return 1
                if self.netTimeouts is None or other.netTimeouts is None:
                    if self.netTimeouts != other.netTimeouts:
                        return (-1 if self.netTimeouts is None else 1)
                else:
                    if self.netTimeouts < other.netTimeouts:
                        return -1
                    elif self.netTimeouts > other.netTimeouts:
                        return 1
                if self.token is None or other.token is None:
                    if self.token != other.token:
                        return (-1 if self.token is None else 1)
                else:
                    if self.token < other.token:
                        return -1
                    elif self.token > other.token:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_BoxLogic._t_CDPConfig)

        __repr__ = __str__

    _M_BoxLogic._t_CDPConfig = IcePy.defineStruct('::BoxLogic::CDPConfig', CDPConfig, (), (
        ('mode', (), IcePy._t_byte),
        ('ip', (), IcePy._t_string),
        ('port', (), IcePy._t_short),
        ('socketNumber', (), IcePy._t_int),
        ('cacheMaxBytes', (), IcePy._t_int),
        ('netTimeouts', (), IcePy._t_int),
        ('token', (), IcePy._t_string)
    ))

    _M_BoxLogic.CDPConfig = CDPConfig
    del CDPConfig

if 'RestoreProgress' not in _M_BoxLogic.__dict__:
    _M_BoxLogic.RestoreProgress = Ice.createTempClass()
    class RestoreProgress(object):
        def __init__(self, remainingBytes=0, totalBytes=0):
            self.remainingBytes = remainingBytes
            self.totalBytes = totalBytes

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.remainingBytes)
            _h = 5 * _h + Ice.getHash(self.totalBytes)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_BoxLogic.RestoreProgress):
                return NotImplemented
            else:
                if self.remainingBytes is None or other.remainingBytes is None:
                    if self.remainingBytes != other.remainingBytes:
                        return (-1 if self.remainingBytes is None else 1)
                else:
                    if self.remainingBytes < other.remainingBytes:
                        return -1
                    elif self.remainingBytes > other.remainingBytes:
                        return 1
                if self.totalBytes is None or other.totalBytes is None:
                    if self.totalBytes != other.totalBytes:
                        return (-1 if self.totalBytes is None else 1)
                else:
                    if self.totalBytes < other.totalBytes:
                        return -1
                    elif self.totalBytes > other.totalBytes:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_BoxLogic._t_RestoreProgress)

        __repr__ = __str__

    _M_BoxLogic._t_RestoreProgress = IcePy.defineStruct('::BoxLogic::RestoreProgress', RestoreProgress, (), (
        ('remainingBytes', (), IcePy._t_long),
        ('totalBytes', (), IcePy._t_long)
    ))

    _M_BoxLogic.RestoreProgress = RestoreProgress
    del RestoreProgress

if 'RestoreStageCode' not in _M_BoxLogic.__dict__:
    _M_BoxLogic.RestoreStageCode = Ice.createTempClass()
    class RestoreStageCode(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    RestoreStageCode.FinishFailed = RestoreStageCode("FinishFailed", 0)
    RestoreStageCode.FinishOk = RestoreStageCode("FinishOk", 1)
    RestoreStageCode.UmountAllVolumes = RestoreStageCode("UmountAllVolumes", 2)
    RestoreStageCode.Started = RestoreStageCode("Started", 3)
    RestoreStageCode._enumerators = { 0:RestoreStageCode.FinishFailed, 1:RestoreStageCode.FinishOk, 2:RestoreStageCode.UmountAllVolumes, 3:RestoreStageCode.Started }

    _M_BoxLogic._t_RestoreStageCode = IcePy.defineEnum('::BoxLogic::RestoreStageCode', RestoreStageCode, (), RestoreStageCode._enumerators)

    _M_BoxLogic.RestoreStageCode = RestoreStageCode
    del RestoreStageCode

if 'LastCdpDetail' not in _M_BoxLogic.__dict__:
    _M_BoxLogic.LastCdpDetail = Ice.createTempClass()
    class LastCdpDetail(object):
        def __init__(self, token='', seconds=0, microseconds=0):
            self.token = token
            self.seconds = seconds
            self.microseconds = microseconds

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.token)
            _h = 5 * _h + Ice.getHash(self.seconds)
            _h = 5 * _h + Ice.getHash(self.microseconds)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_BoxLogic.LastCdpDetail):
                return NotImplemented
            else:
                if self.token is None or other.token is None:
                    if self.token != other.token:
                        return (-1 if self.token is None else 1)
                else:
                    if self.token < other.token:
                        return -1
                    elif self.token > other.token:
                        return 1
                if self.seconds is None or other.seconds is None:
                    if self.seconds != other.seconds:
                        return (-1 if self.seconds is None else 1)
                else:
                    if self.seconds < other.seconds:
                        return -1
                    elif self.seconds > other.seconds:
                        return 1
                if self.microseconds is None or other.microseconds is None:
                    if self.microseconds != other.microseconds:
                        return (-1 if self.microseconds is None else 1)
                else:
                    if self.microseconds < other.microseconds:
                        return -1
                    elif self.microseconds > other.microseconds:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_BoxLogic._t_LastCdpDetail)

        __repr__ = __str__

    _M_BoxLogic._t_LastCdpDetail = IcePy.defineStruct('::BoxLogic::LastCdpDetail', LastCdpDetail, (), (
        ('token', (), IcePy._t_string),
        ('seconds', (), IcePy._t_long),
        ('microseconds', (), IcePy._t_int)
    ))

    _M_BoxLogic.LastCdpDetail = LastCdpDetail
    del LastCdpDetail

if '_t_AgentStatus' not in _M_BoxLogic.__dict__:
    _M_BoxLogic._t_AgentStatus = IcePy.defineSequence('::BoxLogic::AgentStatus', (), IcePy._t_string)

if 'Logic' not in _M_BoxLogic.__dict__:
    _M_BoxLogic.Logic = Ice.createTempClass()
    class Logic(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_BoxLogic.Logic:
                raise RuntimeError('BoxLogic.Logic is an abstract class')

        def ice_ids(self, current=None):
            return ('::BoxLogic::Logic', '::Ice::Object')

        def ice_id(self, current=None):
            return '::BoxLogic::Logic'

        def ice_staticId():
            return '::BoxLogic::Logic'
        ice_staticId = staticmethod(ice_staticId)

        def ping(self, current=None):
            pass

        def queryHostName(self, ident, info, current=None):
            pass

        def login(self, hostName, remoteIp, localIp, tunnelIndex, current=None):
            pass

        def logout(self, hostName, current=None):
            pass

        def queryHostSoftIdent(self, hostName, current=None):
            pass

        def reportAgentModuleError(self, hostName, error, current=None):
            pass

        def reportBackupProgress(self, hostName, progress, current=None):
            pass

        def reportBackupFinish(self, hostName, code, current=None):
            pass

        def reportVolumeRestoreStatus(self, peHost, code, msg, debug, current=None):
            pass

        def clearAllHostSession(self, current=None):
            pass

        def peLogin(self, info, remoteIp, localIp, tunnelIndex, moreInfo, current=None):
            pass

        def peLogout(self, peName, current=None):
            pass

        def updateCDPToken(self, token, lastFilePath, current=None):
            pass

        def updateTrafficControl(self, token, ioSession, current=None):
            pass

        def updateRestoreToken(self, updateConfig, current=None):
            pass

        def closeCDPToken(self, token, current=None):
            pass

        def refreshSnapshotToken(self, token, current=None):
            pass

        def reportRestoreStatus(self, token, progress, finished, hostIdent, current=None):
            pass

        def QueryJsonData(self, hostName, inputJson, current=None):
            pass

        def startKvm(self, peHostIdent, current=None):
            pass

        def fetchProxyEndPoints(self, current=None):
            pass

        def queryLastCdpDetailByRestoreToken(self, token, current=None):
            pass

        def queryLastCdpDetailByCdpToken(self, token, hostName, current=None):
            pass

        def queryNetworkTransmissionType(self, info, current=None):
            pass

        def dataQueuingReport(self, jsonContent, current=None):
            pass

        def getHashFilePathByRestoreToken(self, token, current=None):
            pass

        def VmwareAgentReport(self, jsonContent, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_BoxLogic._t_Logic)

        __repr__ = __str__

    _M_BoxLogic.LogicPrx = Ice.createTempClass()
    class LogicPrx(Ice.ObjectPrx):

        def ping(self, _ctx=None):
            return _M_BoxLogic.Logic._op_ping.invoke(self, ((), _ctx))

        def begin_ping(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_ping.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_ping(self, _r):
            return _M_BoxLogic.Logic._op_ping.end(self, _r)

        def queryHostName(self, ident, info, _ctx=None):
            return _M_BoxLogic.Logic._op_queryHostName.invoke(self, ((ident, info), _ctx))

        def begin_queryHostName(self, ident, info, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_queryHostName.begin(self, ((ident, info), _response, _ex, _sent, _ctx))

        def end_queryHostName(self, _r):
            return _M_BoxLogic.Logic._op_queryHostName.end(self, _r)

        def login(self, hostName, remoteIp, localIp, tunnelIndex, _ctx=None):
            return _M_BoxLogic.Logic._op_login.invoke(self, ((hostName, remoteIp, localIp, tunnelIndex), _ctx))

        def begin_login(self, hostName, remoteIp, localIp, tunnelIndex, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_login.begin(self, ((hostName, remoteIp, localIp, tunnelIndex), _response, _ex, _sent, _ctx))

        def end_login(self, _r):
            return _M_BoxLogic.Logic._op_login.end(self, _r)

        def logout(self, hostName, _ctx=None):
            return _M_BoxLogic.Logic._op_logout.invoke(self, ((hostName, ), _ctx))

        def begin_logout(self, hostName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_logout.begin(self, ((hostName, ), _response, _ex, _sent, _ctx))

        def end_logout(self, _r):
            return _M_BoxLogic.Logic._op_logout.end(self, _r)

        def queryHostSoftIdent(self, hostName, _ctx=None):
            return _M_BoxLogic.Logic._op_queryHostSoftIdent.invoke(self, ((hostName, ), _ctx))

        def begin_queryHostSoftIdent(self, hostName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_queryHostSoftIdent.begin(self, ((hostName, ), _response, _ex, _sent, _ctx))

        def end_queryHostSoftIdent(self, _r):
            return _M_BoxLogic.Logic._op_queryHostSoftIdent.end(self, _r)

        def reportAgentModuleError(self, hostName, error, _ctx=None):
            return _M_BoxLogic.Logic._op_reportAgentModuleError.invoke(self, ((hostName, error), _ctx))

        def begin_reportAgentModuleError(self, hostName, error, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_reportAgentModuleError.begin(self, ((hostName, error), _response, _ex, _sent, _ctx))

        def end_reportAgentModuleError(self, _r):
            return _M_BoxLogic.Logic._op_reportAgentModuleError.end(self, _r)

        def reportBackupProgress(self, hostName, progress, _ctx=None):
            return _M_BoxLogic.Logic._op_reportBackupProgress.invoke(self, ((hostName, progress), _ctx))

        def begin_reportBackupProgress(self, hostName, progress, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_reportBackupProgress.begin(self, ((hostName, progress), _response, _ex, _sent, _ctx))

        def end_reportBackupProgress(self, _r):
            return _M_BoxLogic.Logic._op_reportBackupProgress.end(self, _r)

        def reportBackupFinish(self, hostName, code, _ctx=None):
            return _M_BoxLogic.Logic._op_reportBackupFinish.invoke(self, ((hostName, code), _ctx))

        def begin_reportBackupFinish(self, hostName, code, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_reportBackupFinish.begin(self, ((hostName, code), _response, _ex, _sent, _ctx))

        def end_reportBackupFinish(self, _r):
            return _M_BoxLogic.Logic._op_reportBackupFinish.end(self, _r)

        def reportVolumeRestoreStatus(self, peHost, code, msg, debug, _ctx=None):
            return _M_BoxLogic.Logic._op_reportVolumeRestoreStatus.invoke(self, ((peHost, code, msg, debug), _ctx))

        def begin_reportVolumeRestoreStatus(self, peHost, code, msg, debug, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_reportVolumeRestoreStatus.begin(self, ((peHost, code, msg, debug), _response, _ex, _sent, _ctx))

        def end_reportVolumeRestoreStatus(self, _r):
            return _M_BoxLogic.Logic._op_reportVolumeRestoreStatus.end(self, _r)

        def clearAllHostSession(self, _ctx=None):
            return _M_BoxLogic.Logic._op_clearAllHostSession.invoke(self, ((), _ctx))

        def begin_clearAllHostSession(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_clearAllHostSession.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_clearAllHostSession(self, _r):
            return _M_BoxLogic.Logic._op_clearAllHostSession.end(self, _r)

        def peLogin(self, info, remoteIp, localIp, tunnelIndex, moreInfo, _ctx=None):
            return _M_BoxLogic.Logic._op_peLogin.invoke(self, ((info, remoteIp, localIp, tunnelIndex, moreInfo), _ctx))

        def begin_peLogin(self, info, remoteIp, localIp, tunnelIndex, moreInfo, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_peLogin.begin(self, ((info, remoteIp, localIp, tunnelIndex, moreInfo), _response, _ex, _sent, _ctx))

        def end_peLogin(self, _r):
            return _M_BoxLogic.Logic._op_peLogin.end(self, _r)

        def peLogout(self, peName, _ctx=None):
            return _M_BoxLogic.Logic._op_peLogout.invoke(self, ((peName, ), _ctx))

        def begin_peLogout(self, peName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_peLogout.begin(self, ((peName, ), _response, _ex, _sent, _ctx))

        def end_peLogout(self, _r):
            return _M_BoxLogic.Logic._op_peLogout.end(self, _r)

        def updateCDPToken(self, token, lastFilePath, _ctx=None):
            return _M_BoxLogic.Logic._op_updateCDPToken.invoke(self, ((token, lastFilePath), _ctx))

        def begin_updateCDPToken(self, token, lastFilePath, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_updateCDPToken.begin(self, ((token, lastFilePath), _response, _ex, _sent, _ctx))

        def end_updateCDPToken(self, _r):
            return _M_BoxLogic.Logic._op_updateCDPToken.end(self, _r)

        def updateTrafficControl(self, token, ioSession, _ctx=None):
            return _M_BoxLogic.Logic._op_updateTrafficControl.invoke(self, ((token, ioSession), _ctx))

        def begin_updateTrafficControl(self, token, ioSession, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_updateTrafficControl.begin(self, ((token, ioSession), _response, _ex, _sent, _ctx))

        def end_updateTrafficControl(self, _r):
            return _M_BoxLogic.Logic._op_updateTrafficControl.end(self, _r)

        def updateRestoreToken(self, updateConfig, _ctx=None):
            return _M_BoxLogic.Logic._op_updateRestoreToken.invoke(self, ((updateConfig, ), _ctx))

        def begin_updateRestoreToken(self, updateConfig, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_updateRestoreToken.begin(self, ((updateConfig, ), _response, _ex, _sent, _ctx))

        def end_updateRestoreToken(self, _r):
            return _M_BoxLogic.Logic._op_updateRestoreToken.end(self, _r)

        def closeCDPToken(self, token, _ctx=None):
            return _M_BoxLogic.Logic._op_closeCDPToken.invoke(self, ((token, ), _ctx))

        def begin_closeCDPToken(self, token, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_closeCDPToken.begin(self, ((token, ), _response, _ex, _sent, _ctx))

        def end_closeCDPToken(self, _r):
            return _M_BoxLogic.Logic._op_closeCDPToken.end(self, _r)

        def refreshSnapshotToken(self, token, _ctx=None):
            return _M_BoxLogic.Logic._op_refreshSnapshotToken.invoke(self, ((token, ), _ctx))

        def begin_refreshSnapshotToken(self, token, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_refreshSnapshotToken.begin(self, ((token, ), _response, _ex, _sent, _ctx))

        def end_refreshSnapshotToken(self, _r):
            return _M_BoxLogic.Logic._op_refreshSnapshotToken.end(self, _r)

        def reportRestoreStatus(self, token, progress, finished, hostIdent, _ctx=None):
            return _M_BoxLogic.Logic._op_reportRestoreStatus.invoke(self, ((token, progress, finished, hostIdent), _ctx))

        def begin_reportRestoreStatus(self, token, progress, finished, hostIdent, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_reportRestoreStatus.begin(self, ((token, progress, finished, hostIdent), _response, _ex, _sent, _ctx))

        def end_reportRestoreStatus(self, _r):
            return _M_BoxLogic.Logic._op_reportRestoreStatus.end(self, _r)

        def QueryJsonData(self, hostName, inputJson, _ctx=None):
            return _M_BoxLogic.Logic._op_QueryJsonData.invoke(self, ((hostName, inputJson), _ctx))

        def begin_QueryJsonData(self, hostName, inputJson, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_QueryJsonData.begin(self, ((hostName, inputJson), _response, _ex, _sent, _ctx))

        def end_QueryJsonData(self, _r):
            return _M_BoxLogic.Logic._op_QueryJsonData.end(self, _r)

        def startKvm(self, peHostIdent, _ctx=None):
            return _M_BoxLogic.Logic._op_startKvm.invoke(self, ((peHostIdent, ), _ctx))

        def begin_startKvm(self, peHostIdent, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_startKvm.begin(self, ((peHostIdent, ), _response, _ex, _sent, _ctx))

        def end_startKvm(self, _r):
            return _M_BoxLogic.Logic._op_startKvm.end(self, _r)

        def fetchProxyEndPoints(self, _ctx=None):
            return _M_BoxLogic.Logic._op_fetchProxyEndPoints.invoke(self, ((), _ctx))

        def begin_fetchProxyEndPoints(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_fetchProxyEndPoints.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_fetchProxyEndPoints(self, _r):
            return _M_BoxLogic.Logic._op_fetchProxyEndPoints.end(self, _r)

        def queryLastCdpDetailByRestoreToken(self, token, _ctx=None):
            return _M_BoxLogic.Logic._op_queryLastCdpDetailByRestoreToken.invoke(self, ((token, ), _ctx))

        def begin_queryLastCdpDetailByRestoreToken(self, token, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_queryLastCdpDetailByRestoreToken.begin(self, ((token, ), _response, _ex, _sent, _ctx))

        def end_queryLastCdpDetailByRestoreToken(self, _r):
            return _M_BoxLogic.Logic._op_queryLastCdpDetailByRestoreToken.end(self, _r)

        def queryLastCdpDetailByCdpToken(self, token, hostName, _ctx=None):
            return _M_BoxLogic.Logic._op_queryLastCdpDetailByCdpToken.invoke(self, ((token, hostName), _ctx))

        def begin_queryLastCdpDetailByCdpToken(self, token, hostName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_queryLastCdpDetailByCdpToken.begin(self, ((token, hostName), _response, _ex, _sent, _ctx))

        def end_queryLastCdpDetailByCdpToken(self, _r):
            return _M_BoxLogic.Logic._op_queryLastCdpDetailByCdpToken.end(self, _r)

        def queryNetworkTransmissionType(self, info, _ctx=None):
            return _M_BoxLogic.Logic._op_queryNetworkTransmissionType.invoke(self, ((info, ), _ctx))

        def begin_queryNetworkTransmissionType(self, info, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_queryNetworkTransmissionType.begin(self, ((info, ), _response, _ex, _sent, _ctx))

        def end_queryNetworkTransmissionType(self, _r):
            return _M_BoxLogic.Logic._op_queryNetworkTransmissionType.end(self, _r)

        def dataQueuingReport(self, jsonContent, _ctx=None):
            return _M_BoxLogic.Logic._op_dataQueuingReport.invoke(self, ((jsonContent, ), _ctx))

        def begin_dataQueuingReport(self, jsonContent, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_dataQueuingReport.begin(self, ((jsonContent, ), _response, _ex, _sent, _ctx))

        def end_dataQueuingReport(self, _r):
            return _M_BoxLogic.Logic._op_dataQueuingReport.end(self, _r)

        def getHashFilePathByRestoreToken(self, token, _ctx=None):
            return _M_BoxLogic.Logic._op_getHashFilePathByRestoreToken.invoke(self, ((token, ), _ctx))

        def begin_getHashFilePathByRestoreToken(self, token, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_getHashFilePathByRestoreToken.begin(self, ((token, ), _response, _ex, _sent, _ctx))

        def end_getHashFilePathByRestoreToken(self, _r):
            return _M_BoxLogic.Logic._op_getHashFilePathByRestoreToken.end(self, _r)

        def VmwareAgentReport(self, jsonContent, _ctx=None):
            return _M_BoxLogic.Logic._op_VmwareAgentReport.invoke(self, ((jsonContent, ), _ctx))

        def begin_VmwareAgentReport(self, jsonContent, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Logic._op_VmwareAgentReport.begin(self, ((jsonContent, ), _response, _ex, _sent, _ctx))

        def end_VmwareAgentReport(self, _r):
            return _M_BoxLogic.Logic._op_VmwareAgentReport.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_BoxLogic.LogicPrx.ice_checkedCast(proxy, '::BoxLogic::Logic', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_BoxLogic.LogicPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::BoxLogic::Logic'
        ice_staticId = staticmethod(ice_staticId)

    _M_BoxLogic._t_LogicPrx = IcePy.defineProxy('::BoxLogic::Logic', LogicPrx)

    _M_BoxLogic._t_Logic = IcePy.defineClass('::BoxLogic::Logic', Logic, -1, (), True, False, None, (), ())
    Logic._ice_type = _M_BoxLogic._t_Logic

    Logic._op_ping = IcePy.Operation('ping', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Logic._op_queryHostName = IcePy.Operation('queryHostName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_BoxLogic._t_AgentIdentification, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    Logic._op_login = IcePy.Operation('login', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_Utils._t_SystemError,))
    Logic._op_logout = IcePy.Operation('logout', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Logic._op_queryHostSoftIdent = IcePy.Operation('queryHostSoftIdent', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    Logic._op_reportAgentModuleError = IcePy.Operation('reportAgentModuleError', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_BoxLogic._t_AgentModuleError, False, 0)), (), None, ())
    Logic._op_reportBackupProgress = IcePy.Operation('reportBackupProgress', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_BoxLogic._t_BackupProgress, False, 0)), (), None, ())
    Logic._op_reportBackupFinish = IcePy.Operation('reportBackupFinish', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_BoxLogic._t_BackupFinishCode, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Logic._op_reportVolumeRestoreStatus = IcePy.Operation('reportVolumeRestoreStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_BoxLogic._t_RestoreStageCode, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Logic._op_clearAllHostSession = IcePy.Operation('clearAllHostSession', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Logic._op_peLogin = IcePy.Operation('peLogin', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_PerpcIce._t_PeGuestInfo, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, True, 1)), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    Logic._op_peLogout = IcePy.Operation('peLogout', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Logic._op_updateCDPToken = IcePy.Operation('updateCDPToken', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Logic._op_updateTrafficControl = IcePy.Operation('updateTrafficControl', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Logic._op_updateRestoreToken = IcePy.Operation('updateRestoreToken', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    Logic._op_closeCDPToken = IcePy.Operation('closeCDPToken', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    Logic._op_refreshSnapshotToken = IcePy.Operation('refreshSnapshotToken', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    Logic._op_reportRestoreStatus = IcePy.Operation('reportRestoreStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_BoxLogic._t_RestoreProgress, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_string, True, 1)), (), None, (_M_Utils._t_SystemError,))
    Logic._op_QueryJsonData = IcePy.Operation('QueryJsonData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    Logic._op_startKvm = IcePy.Operation('startKvm', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    Logic._op_fetchProxyEndPoints = IcePy.Operation('fetchProxyEndPoints', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_Utils._t_SystemError,))
    Logic._op_queryLastCdpDetailByRestoreToken = IcePy.Operation('queryLastCdpDetailByRestoreToken', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_BoxLogic._t_LastCdpDetail, False, 0), (_M_Utils._t_SystemError,))
    Logic._op_queryLastCdpDetailByCdpToken = IcePy.Operation('queryLastCdpDetailByCdpToken', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (((), _M_BoxLogic._t_LastCdpDetail, False, 0),), ((), IcePy._t_bool, False, 0), (_M_Utils._t_SystemError,))
    Logic._op_queryNetworkTransmissionType = IcePy.Operation('queryNetworkTransmissionType', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    Logic._op_dataQueuingReport = IcePy.Operation('dataQueuingReport', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    Logic._op_getHashFilePathByRestoreToken = IcePy.Operation('getHashFilePathByRestoreToken', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    Logic._op_VmwareAgentReport = IcePy.Operation('VmwareAgentReport', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))

    _M_BoxLogic.Logic = Logic
    del Logic

    _M_BoxLogic.LogicPrx = LogicPrx
    del LogicPrx

if '_t_Paths' not in _M_BoxLogic.__dict__:
    _M_BoxLogic._t_Paths = IcePy.defineSequence('::BoxLogic::Paths', (), IcePy._t_string)

if '_t_StringList' not in _M_BoxLogic.__dict__:
    _M_BoxLogic._t_StringList = IcePy.defineSequence('::BoxLogic::StringList', (), IcePy._t_string)

if 'Hardware' not in _M_BoxLogic.__dict__:
    _M_BoxLogic.Hardware = Ice.createTempClass()
    class Hardware(object):
        def __init__(self, Type='', Vid='', HWIds=None, CompatIds=None):
            self.Type = Type
            self.Vid = Vid
            self.HWIds = HWIds
            self.CompatIds = CompatIds

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.Type)
            _h = 5 * _h + Ice.getHash(self.Vid)
            if self.HWIds:
                for _i0 in self.HWIds:
                    _h = 5 * _h + Ice.getHash(_i0)
            if self.CompatIds:
                for _i1 in self.CompatIds:
                    _h = 5 * _h + Ice.getHash(_i1)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_BoxLogic.Hardware):
                return NotImplemented
            else:
                if self.Type is None or other.Type is None:
                    if self.Type != other.Type:
                        return (-1 if self.Type is None else 1)
                else:
                    if self.Type < other.Type:
                        return -1
                    elif self.Type > other.Type:
                        return 1
                if self.Vid is None or other.Vid is None:
                    if self.Vid != other.Vid:
                        return (-1 if self.Vid is None else 1)
                else:
                    if self.Vid < other.Vid:
                        return -1
                    elif self.Vid > other.Vid:
                        return 1
                if self.HWIds is None or other.HWIds is None:
                    if self.HWIds != other.HWIds:
                        return (-1 if self.HWIds is None else 1)
                else:
                    if self.HWIds < other.HWIds:
                        return -1
                    elif self.HWIds > other.HWIds:
                        return 1
                if self.CompatIds is None or other.CompatIds is None:
                    if self.CompatIds != other.CompatIds:
                        return (-1 if self.CompatIds is None else 1)
                else:
                    if self.CompatIds < other.CompatIds:
                        return -1
                    elif self.CompatIds > other.CompatIds:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_BoxLogic._t_Hardware)

        __repr__ = __str__

    _M_BoxLogic._t_Hardware = IcePy.defineStruct('::BoxLogic::Hardware', Hardware, (), (
        ('Type', (), IcePy._t_string),
        ('Vid', (), IcePy._t_string),
        ('HWIds', (), _M_BoxLogic._t_StringList),
        ('CompatIds', (), _M_BoxLogic._t_StringList)
    ))

    _M_BoxLogic.Hardware = Hardware
    del Hardware

if '_t_Hardwares' not in _M_BoxLogic.__dict__:
    _M_BoxLogic._t_Hardwares = IcePy.defineSequence('::BoxLogic::Hardwares', (), _M_BoxLogic._t_Hardware)

if 'IPConfig' not in _M_BoxLogic.__dict__:
    _M_BoxLogic.IPConfig = Ice.createTempClass()
    class IPConfig(object):
        def __init__(self, ipAddress='', subnetMask='', gateway='', nameServer='', multiInfos='', hardwareConfig=''):
            self.ipAddress = ipAddress
            self.subnetMask = subnetMask
            self.gateway = gateway
            self.nameServer = nameServer
            self.multiInfos = multiInfos
            self.hardwareConfig = hardwareConfig

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.ipAddress)
            _h = 5 * _h + Ice.getHash(self.subnetMask)
            _h = 5 * _h + Ice.getHash(self.gateway)
            _h = 5 * _h + Ice.getHash(self.nameServer)
            _h = 5 * _h + Ice.getHash(self.multiInfos)
            _h = 5 * _h + Ice.getHash(self.hardwareConfig)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_BoxLogic.IPConfig):
                return NotImplemented
            else:
                if self.ipAddress is None or other.ipAddress is None:
                    if self.ipAddress != other.ipAddress:
                        return (-1 if self.ipAddress is None else 1)
                else:
                    if self.ipAddress < other.ipAddress:
                        return -1
                    elif self.ipAddress > other.ipAddress:
                        return 1
                if self.subnetMask is None or other.subnetMask is None:
                    if self.subnetMask != other.subnetMask:
                        return (-1 if self.subnetMask is None else 1)
                else:
                    if self.subnetMask < other.subnetMask:
                        return -1
                    elif self.subnetMask > other.subnetMask:
                        return 1
                if self.gateway is None or other.gateway is None:
                    if self.gateway != other.gateway:
                        return (-1 if self.gateway is None else 1)
                else:
                    if self.gateway < other.gateway:
                        return -1
                    elif self.gateway > other.gateway:
                        return 1
                if self.nameServer is None or other.nameServer is None:
                    if self.nameServer != other.nameServer:
                        return (-1 if self.nameServer is None else 1)
                else:
                    if self.nameServer < other.nameServer:
                        return -1
                    elif self.nameServer > other.nameServer:
                        return 1
                if self.multiInfos is None or other.multiInfos is None:
                    if self.multiInfos != other.multiInfos:
                        return (-1 if self.multiInfos is None else 1)
                else:
                    if self.multiInfos < other.multiInfos:
                        return -1
                    elif self.multiInfos > other.multiInfos:
                        return 1
                if self.hardwareConfig is None or other.hardwareConfig is None:
                    if self.hardwareConfig != other.hardwareConfig:
                        return (-1 if self.hardwareConfig is None else 1)
                else:
                    if self.hardwareConfig < other.hardwareConfig:
                        return -1
                    elif self.hardwareConfig > other.hardwareConfig:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_BoxLogic._t_IPConfig)

        __repr__ = __str__

    _M_BoxLogic._t_IPConfig = IcePy.defineStruct('::BoxLogic::IPConfig', IPConfig, (), (
        ('ipAddress', (), IcePy._t_string),
        ('subnetMask', (), IcePy._t_string),
        ('gateway', (), IcePy._t_string),
        ('nameServer', (), IcePy._t_string),
        ('multiInfos', (), IcePy._t_string),
        ('hardwareConfig', (), IcePy._t_string)
    ))

    _M_BoxLogic.IPConfig = IPConfig
    del IPConfig

if '_t_IPConfigs' not in _M_BoxLogic.__dict__:
    _M_BoxLogic._t_IPConfigs = IcePy.defineSequence('::BoxLogic::IPConfigs', (), _M_BoxLogic._t_IPConfig)

if '_t_BinaryStream' not in _M_BoxLogic.__dict__:
    _M_BoxLogic._t_BinaryStream = IcePy.defineSequence('::BoxLogic::BinaryStream', (), IcePy._t_byte)

if 'LogicInternal' not in _M_BoxLogic.__dict__:
    _M_BoxLogic.LogicInternal = Ice.createTempClass()
    class LogicInternal(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_BoxLogic.LogicInternal:
                raise RuntimeError('BoxLogic.LogicInternal is an abstract class')

        def ice_ids(self, current=None):
            return ('::BoxLogic::LogicInternal', '::Ice::Object')

        def ice_id(self, current=None):
            return '::BoxLogic::LogicInternal'

        def ice_staticId():
            return '::BoxLogic::LogicInternal'
        ice_staticId = staticmethod(ice_staticId)

        def pathJoin(self, paths, current=None):
            pass

        def isFileExist(self, path, current=None):
            pass

        def AllFilesExist(self, paths, current=None):
            pass

        def isFolderExist(self, path, current=None):
            pass

        def makeDirs(self, path, existOk, mode, current=None):
            pass

        def remove(self, path, current=None):
            pass

        def copy(self, params, current=None):
            pass

        def findFiles(self, params, current=None):
            pass

        def queryCdpTimestampRange(self, path, discardDirtyData, current=None):
            pass

        def queryCdpTimestamp(self, path, timestamp, current=None):
            pass

        def formatCdpTimestamp(self, timestamp, current=None):
            pass

        def mergeCdpFile(self, params, current=None):
            pass

        def isHardwareDriverExist(self, hardware, osType, osBit, current=None):
            pass

        def GetDriversVersions(self, hardware, osType, osBit, current=None):
            pass

        def ChkIsSubId(self, hardware, current=None):
            pass

        def GetDriversSubList(self, userSelect, current=None):
            pass

        def generatePeStageIso(self, isoWorkerFolderPath, isoFilePath, hardwares, ipconfigs, pciBusDeviceIds, osType, osBit, driverIds, jsonConfigure, current=None):
            pass

        def runRestoreKvm(self, params, current=None):
            pass

        def getCurrentNetworkInfos(self, current=None):
            pass

        def setNetwork(self, setting, current=None):
            pass

        def enumStorageNodes(self, current=None):
            pass

        def getLocalIqn(self, current=None):
            pass

        def setLocalIqn(self, iqn, current=None):
            pass

        def setGlobalDoubleChap(self, userName, password, current=None):
            pass

        def getGlobalDoubleChap(self, current=None):
            pass

        def loginExternalDevice(self, remoteIp, remotePort, useChap, userName, password, current=None):
            pass

        def logoutExternalDevice(self, iqn, current=None):
            pass

        def refreshExternalDevice(self, iqn, current=None):
            pass

        def formatAndInitializeStorageNode(self, node, current=None):
            pass

        def mountStorageNode(self, node, current=None):
            pass

        def unmountStorageNode(self, node, current=None):
            pass

        def runCmd(self, cmd, shell, current=None):
            pass

        def CmdCtrl(self, cmdinfo, current=None):
            pass

        def setPasswd(self, passwd, current=None):
            pass

        def getPasswd(self, current=None):
            pass

        def calcClusterTime0Hash(self, config, current=None):
            pass

        def generateClusterDiffImages(self, config, current=None):
            pass

        def mergeCdpFiles(self, config, current=None):
            pass

        def cutCdpFile(self, config, current=None):
            pass

        def getRawDiskFiles(self, binpath, destpath, current=None):
            pass

        def NbdFindUnusedReverse(self, current=None):
            pass

        def NbdSetUnused(self, deviceName, current=None):
            pass

        def NbdSetUsed(self, deviceName, current=None):
            pass

        def queryTakeOverHostInfo(self, queryString, current=None):
            pass

        def mergeQcowFile(self, jsonInput, current=None):
            pass

        def startBackupOptimize(self, jsonInput, current=None):
            pass

        def stopBackupOptimize(self, jsonInput, current=None):
            pass

        def mergeHashFile(self, jsonInput, current=None):
            pass

        def generateBitMapFromQcowFile(self, jsonArgs, current=None):
            pass

        def fromMapGetQcowMaxSize(self, mapPath, current=None):
            pass

        def reorganizeHashFile(self, bitmap, jsonInput, current=None):
            pass

        def reorganizeHashFilev2(self, bitmapPath, jsonInput, current=None):
            pass

        def hash2Interval(self, jsonInput, current=None):
            pass

        def exportSnapshot(self, jsonInput, current=None):
            pass

        def getAllTapeJson(self, current=None):
            pass

        def getAllMediumxJson(self, current=None):
            pass

        def archiveMediaOperation(self, jsonInput, current=None):
            pass

        def getArchiveFileMetaData(self, jsonInput, current=None):
            pass

        def genArchiveQcowFile(self, jsonInput, current=None):
            pass

        def fileBackup(self, jsonInput, current=None):
            pass

        def kvmRpc(self, jsonInput, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_BoxLogic._t_LogicInternal)

        __repr__ = __str__

    _M_BoxLogic.LogicInternalPrx = Ice.createTempClass()
    class LogicInternalPrx(Ice.ObjectPrx):

        def pathJoin(self, paths, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_pathJoin.invoke(self, ((paths, ), _ctx))

        def begin_pathJoin(self, paths, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_pathJoin.begin(self, ((paths, ), _response, _ex, _sent, _ctx))

        def end_pathJoin(self, _r):
            return _M_BoxLogic.LogicInternal._op_pathJoin.end(self, _r)

        def isFileExist(self, path, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_isFileExist.invoke(self, ((path, ), _ctx))

        def begin_isFileExist(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_isFileExist.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        def end_isFileExist(self, _r):
            return _M_BoxLogic.LogicInternal._op_isFileExist.end(self, _r)

        def AllFilesExist(self, paths, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_AllFilesExist.invoke(self, ((paths, ), _ctx))

        def begin_AllFilesExist(self, paths, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_AllFilesExist.begin(self, ((paths, ), _response, _ex, _sent, _ctx))

        def end_AllFilesExist(self, _r):
            return _M_BoxLogic.LogicInternal._op_AllFilesExist.end(self, _r)

        def isFolderExist(self, path, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_isFolderExist.invoke(self, ((path, ), _ctx))

        def begin_isFolderExist(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_isFolderExist.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        def end_isFolderExist(self, _r):
            return _M_BoxLogic.LogicInternal._op_isFolderExist.end(self, _r)

        def makeDirs(self, path, existOk, mode, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_makeDirs.invoke(self, ((path, existOk, mode), _ctx))

        def begin_makeDirs(self, path, existOk, mode, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_makeDirs.begin(self, ((path, existOk, mode), _response, _ex, _sent, _ctx))

        def end_makeDirs(self, _r):
            return _M_BoxLogic.LogicInternal._op_makeDirs.end(self, _r)

        def remove(self, path, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_remove.invoke(self, ((path, ), _ctx))

        def begin_remove(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_remove.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        def end_remove(self, _r):
            return _M_BoxLogic.LogicInternal._op_remove.end(self, _r)

        def copy(self, params, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_copy.invoke(self, ((params, ), _ctx))

        def begin_copy(self, params, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_copy.begin(self, ((params, ), _response, _ex, _sent, _ctx))

        def end_copy(self, _r):
            return _M_BoxLogic.LogicInternal._op_copy.end(self, _r)

        def findFiles(self, params, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_findFiles.invoke(self, ((params, ), _ctx))

        def begin_findFiles(self, params, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_findFiles.begin(self, ((params, ), _response, _ex, _sent, _ctx))

        def end_findFiles(self, _r):
            return _M_BoxLogic.LogicInternal._op_findFiles.end(self, _r)

        def queryCdpTimestampRange(self, path, discardDirtyData, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_queryCdpTimestampRange.invoke(self, ((path, discardDirtyData), _ctx))

        def begin_queryCdpTimestampRange(self, path, discardDirtyData, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_queryCdpTimestampRange.begin(self, ((path, discardDirtyData), _response, _ex, _sent, _ctx))

        def end_queryCdpTimestampRange(self, _r):
            return _M_BoxLogic.LogicInternal._op_queryCdpTimestampRange.end(self, _r)

        def queryCdpTimestamp(self, path, timestamp, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_queryCdpTimestamp.invoke(self, ((path, timestamp), _ctx))

        def begin_queryCdpTimestamp(self, path, timestamp, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_queryCdpTimestamp.begin(self, ((path, timestamp), _response, _ex, _sent, _ctx))

        def end_queryCdpTimestamp(self, _r):
            return _M_BoxLogic.LogicInternal._op_queryCdpTimestamp.end(self, _r)

        def formatCdpTimestamp(self, timestamp, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_formatCdpTimestamp.invoke(self, ((timestamp, ), _ctx))

        def begin_formatCdpTimestamp(self, timestamp, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_formatCdpTimestamp.begin(self, ((timestamp, ), _response, _ex, _sent, _ctx))

        def end_formatCdpTimestamp(self, _r):
            return _M_BoxLogic.LogicInternal._op_formatCdpTimestamp.end(self, _r)

        def mergeCdpFile(self, params, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_mergeCdpFile.invoke(self, ((params, ), _ctx))

        def begin_mergeCdpFile(self, params, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_mergeCdpFile.begin(self, ((params, ), _response, _ex, _sent, _ctx))

        def end_mergeCdpFile(self, _r):
            return _M_BoxLogic.LogicInternal._op_mergeCdpFile.end(self, _r)

        def isHardwareDriverExist(self, hardware, osType, osBit, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_isHardwareDriverExist.invoke(self, ((hardware, osType, osBit), _ctx))

        def begin_isHardwareDriverExist(self, hardware, osType, osBit, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_isHardwareDriverExist.begin(self, ((hardware, osType, osBit), _response, _ex, _sent, _ctx))

        def end_isHardwareDriverExist(self, _r):
            return _M_BoxLogic.LogicInternal._op_isHardwareDriverExist.end(self, _r)

        def GetDriversVersions(self, hardware, osType, osBit, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_GetDriversVersions.invoke(self, ((hardware, osType, osBit), _ctx))

        def begin_GetDriversVersions(self, hardware, osType, osBit, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_GetDriversVersions.begin(self, ((hardware, osType, osBit), _response, _ex, _sent, _ctx))

        def end_GetDriversVersions(self, _r):
            return _M_BoxLogic.LogicInternal._op_GetDriversVersions.end(self, _r)

        def ChkIsSubId(self, hardware, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_ChkIsSubId.invoke(self, ((hardware, ), _ctx))

        def begin_ChkIsSubId(self, hardware, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_ChkIsSubId.begin(self, ((hardware, ), _response, _ex, _sent, _ctx))

        def end_ChkIsSubId(self, _r):
            return _M_BoxLogic.LogicInternal._op_ChkIsSubId.end(self, _r)

        def GetDriversSubList(self, userSelect, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_GetDriversSubList.invoke(self, ((userSelect, ), _ctx))

        def begin_GetDriversSubList(self, userSelect, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_GetDriversSubList.begin(self, ((userSelect, ), _response, _ex, _sent, _ctx))

        def end_GetDriversSubList(self, _r):
            return _M_BoxLogic.LogicInternal._op_GetDriversSubList.end(self, _r)

        def generatePeStageIso(self, isoWorkerFolderPath, isoFilePath, hardwares, ipconfigs, pciBusDeviceIds, osType, osBit, driverIds, jsonConfigure, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_generatePeStageIso.invoke(self, ((isoWorkerFolderPath, isoFilePath, hardwares, ipconfigs, pciBusDeviceIds, osType, osBit, driverIds, jsonConfigure), _ctx))

        def begin_generatePeStageIso(self, isoWorkerFolderPath, isoFilePath, hardwares, ipconfigs, pciBusDeviceIds, osType, osBit, driverIds, jsonConfigure, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_generatePeStageIso.begin(self, ((isoWorkerFolderPath, isoFilePath, hardwares, ipconfigs, pciBusDeviceIds, osType, osBit, driverIds, jsonConfigure), _response, _ex, _sent, _ctx))

        def end_generatePeStageIso(self, _r):
            return _M_BoxLogic.LogicInternal._op_generatePeStageIso.end(self, _r)

        def runRestoreKvm(self, params, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_runRestoreKvm.invoke(self, ((params, ), _ctx))

        def begin_runRestoreKvm(self, params, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_runRestoreKvm.begin(self, ((params, ), _response, _ex, _sent, _ctx))

        def end_runRestoreKvm(self, _r):
            return _M_BoxLogic.LogicInternal._op_runRestoreKvm.end(self, _r)

        def getCurrentNetworkInfos(self, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_getCurrentNetworkInfos.invoke(self, ((), _ctx))

        def begin_getCurrentNetworkInfos(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_getCurrentNetworkInfos.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getCurrentNetworkInfos(self, _r):
            return _M_BoxLogic.LogicInternal._op_getCurrentNetworkInfos.end(self, _r)

        def setNetwork(self, setting, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_setNetwork.invoke(self, ((setting, ), _ctx))

        def begin_setNetwork(self, setting, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_setNetwork.begin(self, ((setting, ), _response, _ex, _sent, _ctx))

        def end_setNetwork(self, _r):
            return _M_BoxLogic.LogicInternal._op_setNetwork.end(self, _r)

        def enumStorageNodes(self, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_enumStorageNodes.invoke(self, ((), _ctx))

        def begin_enumStorageNodes(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_enumStorageNodes.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_enumStorageNodes(self, _r):
            return _M_BoxLogic.LogicInternal._op_enumStorageNodes.end(self, _r)

        def getLocalIqn(self, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_getLocalIqn.invoke(self, ((), _ctx))

        def begin_getLocalIqn(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_getLocalIqn.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getLocalIqn(self, _r):
            return _M_BoxLogic.LogicInternal._op_getLocalIqn.end(self, _r)

        def setLocalIqn(self, iqn, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_setLocalIqn.invoke(self, ((iqn, ), _ctx))

        def begin_setLocalIqn(self, iqn, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_setLocalIqn.begin(self, ((iqn, ), _response, _ex, _sent, _ctx))

        def end_setLocalIqn(self, _r):
            return _M_BoxLogic.LogicInternal._op_setLocalIqn.end(self, _r)

        def setGlobalDoubleChap(self, userName, password, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_setGlobalDoubleChap.invoke(self, ((userName, password), _ctx))

        def begin_setGlobalDoubleChap(self, userName, password, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_setGlobalDoubleChap.begin(self, ((userName, password), _response, _ex, _sent, _ctx))

        def end_setGlobalDoubleChap(self, _r):
            return _M_BoxLogic.LogicInternal._op_setGlobalDoubleChap.end(self, _r)

        def getGlobalDoubleChap(self, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_getGlobalDoubleChap.invoke(self, ((), _ctx))

        def begin_getGlobalDoubleChap(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_getGlobalDoubleChap.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getGlobalDoubleChap(self, _r):
            return _M_BoxLogic.LogicInternal._op_getGlobalDoubleChap.end(self, _r)

        def loginExternalDevice(self, remoteIp, remotePort, useChap, userName, password, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_loginExternalDevice.invoke(self, ((remoteIp, remotePort, useChap, userName, password), _ctx))

        def begin_loginExternalDevice(self, remoteIp, remotePort, useChap, userName, password, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_loginExternalDevice.begin(self, ((remoteIp, remotePort, useChap, userName, password), _response, _ex, _sent, _ctx))

        def end_loginExternalDevice(self, _r):
            return _M_BoxLogic.LogicInternal._op_loginExternalDevice.end(self, _r)

        def logoutExternalDevice(self, iqn, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_logoutExternalDevice.invoke(self, ((iqn, ), _ctx))

        def begin_logoutExternalDevice(self, iqn, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_logoutExternalDevice.begin(self, ((iqn, ), _response, _ex, _sent, _ctx))

        def end_logoutExternalDevice(self, _r):
            return _M_BoxLogic.LogicInternal._op_logoutExternalDevice.end(self, _r)

        def refreshExternalDevice(self, iqn, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_refreshExternalDevice.invoke(self, ((iqn, ), _ctx))

        def begin_refreshExternalDevice(self, iqn, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_refreshExternalDevice.begin(self, ((iqn, ), _response, _ex, _sent, _ctx))

        def end_refreshExternalDevice(self, _r):
            return _M_BoxLogic.LogicInternal._op_refreshExternalDevice.end(self, _r)

        def formatAndInitializeStorageNode(self, node, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_formatAndInitializeStorageNode.invoke(self, ((node, ), _ctx))

        def begin_formatAndInitializeStorageNode(self, node, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_formatAndInitializeStorageNode.begin(self, ((node, ), _response, _ex, _sent, _ctx))

        def end_formatAndInitializeStorageNode(self, _r):
            return _M_BoxLogic.LogicInternal._op_formatAndInitializeStorageNode.end(self, _r)

        def mountStorageNode(self, node, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_mountStorageNode.invoke(self, ((node, ), _ctx))

        def begin_mountStorageNode(self, node, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_mountStorageNode.begin(self, ((node, ), _response, _ex, _sent, _ctx))

        def end_mountStorageNode(self, _r):
            return _M_BoxLogic.LogicInternal._op_mountStorageNode.end(self, _r)

        def unmountStorageNode(self, node, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_unmountStorageNode.invoke(self, ((node, ), _ctx))

        def begin_unmountStorageNode(self, node, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_unmountStorageNode.begin(self, ((node, ), _response, _ex, _sent, _ctx))

        def end_unmountStorageNode(self, _r):
            return _M_BoxLogic.LogicInternal._op_unmountStorageNode.end(self, _r)

        def runCmd(self, cmd, shell, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_runCmd.invoke(self, ((cmd, shell), _ctx))

        def begin_runCmd(self, cmd, shell, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_runCmd.begin(self, ((cmd, shell), _response, _ex, _sent, _ctx))

        def end_runCmd(self, _r):
            return _M_BoxLogic.LogicInternal._op_runCmd.end(self, _r)

        def CmdCtrl(self, cmdinfo, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_CmdCtrl.invoke(self, ((cmdinfo, ), _ctx))

        def begin_CmdCtrl(self, cmdinfo, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_CmdCtrl.begin(self, ((cmdinfo, ), _response, _ex, _sent, _ctx))

        def end_CmdCtrl(self, _r):
            return _M_BoxLogic.LogicInternal._op_CmdCtrl.end(self, _r)

        def setPasswd(self, passwd, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_setPasswd.invoke(self, ((passwd, ), _ctx))

        def begin_setPasswd(self, passwd, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_setPasswd.begin(self, ((passwd, ), _response, _ex, _sent, _ctx))

        def end_setPasswd(self, _r):
            return _M_BoxLogic.LogicInternal._op_setPasswd.end(self, _r)

        def getPasswd(self, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_getPasswd.invoke(self, ((), _ctx))

        def begin_getPasswd(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_getPasswd.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getPasswd(self, _r):
            return _M_BoxLogic.LogicInternal._op_getPasswd.end(self, _r)

        def calcClusterTime0Hash(self, config, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_calcClusterTime0Hash.invoke(self, ((config, ), _ctx))

        def begin_calcClusterTime0Hash(self, config, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_calcClusterTime0Hash.begin(self, ((config, ), _response, _ex, _sent, _ctx))

        def end_calcClusterTime0Hash(self, _r):
            return _M_BoxLogic.LogicInternal._op_calcClusterTime0Hash.end(self, _r)

        def generateClusterDiffImages(self, config, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_generateClusterDiffImages.invoke(self, ((config, ), _ctx))

        def begin_generateClusterDiffImages(self, config, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_generateClusterDiffImages.begin(self, ((config, ), _response, _ex, _sent, _ctx))

        def end_generateClusterDiffImages(self, _r):
            return _M_BoxLogic.LogicInternal._op_generateClusterDiffImages.end(self, _r)

        def mergeCdpFiles(self, config, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_mergeCdpFiles.invoke(self, ((config, ), _ctx))

        def begin_mergeCdpFiles(self, config, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_mergeCdpFiles.begin(self, ((config, ), _response, _ex, _sent, _ctx))

        def end_mergeCdpFiles(self, _r):
            return _M_BoxLogic.LogicInternal._op_mergeCdpFiles.end(self, _r)

        def cutCdpFile(self, config, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_cutCdpFile.invoke(self, ((config, ), _ctx))

        def begin_cutCdpFile(self, config, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_cutCdpFile.begin(self, ((config, ), _response, _ex, _sent, _ctx))

        def end_cutCdpFile(self, _r):
            return _M_BoxLogic.LogicInternal._op_cutCdpFile.end(self, _r)

        def getRawDiskFiles(self, binpath, destpath, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_getRawDiskFiles.invoke(self, ((binpath, destpath), _ctx))

        def begin_getRawDiskFiles(self, binpath, destpath, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_getRawDiskFiles.begin(self, ((binpath, destpath), _response, _ex, _sent, _ctx))

        def end_getRawDiskFiles(self, _r):
            return _M_BoxLogic.LogicInternal._op_getRawDiskFiles.end(self, _r)

        def NbdFindUnusedReverse(self, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_NbdFindUnusedReverse.invoke(self, ((), _ctx))

        def begin_NbdFindUnusedReverse(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_NbdFindUnusedReverse.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_NbdFindUnusedReverse(self, _r):
            return _M_BoxLogic.LogicInternal._op_NbdFindUnusedReverse.end(self, _r)

        def NbdSetUnused(self, deviceName, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_NbdSetUnused.invoke(self, ((deviceName, ), _ctx))

        def begin_NbdSetUnused(self, deviceName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_NbdSetUnused.begin(self, ((deviceName, ), _response, _ex, _sent, _ctx))

        def end_NbdSetUnused(self, _r):
            return _M_BoxLogic.LogicInternal._op_NbdSetUnused.end(self, _r)

        def NbdSetUsed(self, deviceName, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_NbdSetUsed.invoke(self, ((deviceName, ), _ctx))

        def begin_NbdSetUsed(self, deviceName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_NbdSetUsed.begin(self, ((deviceName, ), _response, _ex, _sent, _ctx))

        def end_NbdSetUsed(self, _r):
            return _M_BoxLogic.LogicInternal._op_NbdSetUsed.end(self, _r)

        def queryTakeOverHostInfo(self, queryString, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_queryTakeOverHostInfo.invoke(self, ((queryString, ), _ctx))

        def begin_queryTakeOverHostInfo(self, queryString, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_queryTakeOverHostInfo.begin(self, ((queryString, ), _response, _ex, _sent, _ctx))

        def end_queryTakeOverHostInfo(self, _r):
            return _M_BoxLogic.LogicInternal._op_queryTakeOverHostInfo.end(self, _r)

        def mergeQcowFile(self, jsonInput, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_mergeQcowFile.invoke(self, ((jsonInput, ), _ctx))

        def begin_mergeQcowFile(self, jsonInput, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_mergeQcowFile.begin(self, ((jsonInput, ), _response, _ex, _sent, _ctx))

        def end_mergeQcowFile(self, _r):
            return _M_BoxLogic.LogicInternal._op_mergeQcowFile.end(self, _r)

        def startBackupOptimize(self, jsonInput, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_startBackupOptimize.invoke(self, ((jsonInput, ), _ctx))

        def begin_startBackupOptimize(self, jsonInput, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_startBackupOptimize.begin(self, ((jsonInput, ), _response, _ex, _sent, _ctx))

        def end_startBackupOptimize(self, _r):
            return _M_BoxLogic.LogicInternal._op_startBackupOptimize.end(self, _r)

        def stopBackupOptimize(self, jsonInput, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_stopBackupOptimize.invoke(self, ((jsonInput, ), _ctx))

        def begin_stopBackupOptimize(self, jsonInput, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_stopBackupOptimize.begin(self, ((jsonInput, ), _response, _ex, _sent, _ctx))

        def end_stopBackupOptimize(self, _r):
            return _M_BoxLogic.LogicInternal._op_stopBackupOptimize.end(self, _r)

        def mergeHashFile(self, jsonInput, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_mergeHashFile.invoke(self, ((jsonInput, ), _ctx))

        def begin_mergeHashFile(self, jsonInput, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_mergeHashFile.begin(self, ((jsonInput, ), _response, _ex, _sent, _ctx))

        def end_mergeHashFile(self, _r):
            return _M_BoxLogic.LogicInternal._op_mergeHashFile.end(self, _r)

        def generateBitMapFromQcowFile(self, jsonArgs, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_generateBitMapFromQcowFile.invoke(self, ((jsonArgs, ), _ctx))

        def begin_generateBitMapFromQcowFile(self, jsonArgs, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_generateBitMapFromQcowFile.begin(self, ((jsonArgs, ), _response, _ex, _sent, _ctx))

        def end_generateBitMapFromQcowFile(self, _r):
            return _M_BoxLogic.LogicInternal._op_generateBitMapFromQcowFile.end(self, _r)

        def fromMapGetQcowMaxSize(self, mapPath, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_fromMapGetQcowMaxSize.invoke(self, ((mapPath, ), _ctx))

        def begin_fromMapGetQcowMaxSize(self, mapPath, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_fromMapGetQcowMaxSize.begin(self, ((mapPath, ), _response, _ex, _sent, _ctx))

        def end_fromMapGetQcowMaxSize(self, _r):
            return _M_BoxLogic.LogicInternal._op_fromMapGetQcowMaxSize.end(self, _r)

        def reorganizeHashFile(self, bitmap, jsonInput, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_reorganizeHashFile.invoke(self, ((bitmap, jsonInput), _ctx))

        def begin_reorganizeHashFile(self, bitmap, jsonInput, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_reorganizeHashFile.begin(self, ((bitmap, jsonInput), _response, _ex, _sent, _ctx))

        def end_reorganizeHashFile(self, _r):
            return _M_BoxLogic.LogicInternal._op_reorganizeHashFile.end(self, _r)

        def reorganizeHashFilev2(self, bitmapPath, jsonInput, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_reorganizeHashFilev2.invoke(self, ((bitmapPath, jsonInput), _ctx))

        def begin_reorganizeHashFilev2(self, bitmapPath, jsonInput, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_reorganizeHashFilev2.begin(self, ((bitmapPath, jsonInput), _response, _ex, _sent, _ctx))

        def end_reorganizeHashFilev2(self, _r):
            return _M_BoxLogic.LogicInternal._op_reorganizeHashFilev2.end(self, _r)

        def hash2Interval(self, jsonInput, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_hash2Interval.invoke(self, ((jsonInput, ), _ctx))

        def begin_hash2Interval(self, jsonInput, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_hash2Interval.begin(self, ((jsonInput, ), _response, _ex, _sent, _ctx))

        def end_hash2Interval(self, _r):
            return _M_BoxLogic.LogicInternal._op_hash2Interval.end(self, _r)

        def exportSnapshot(self, jsonInput, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_exportSnapshot.invoke(self, ((jsonInput, ), _ctx))

        def begin_exportSnapshot(self, jsonInput, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_exportSnapshot.begin(self, ((jsonInput, ), _response, _ex, _sent, _ctx))

        def end_exportSnapshot(self, _r):
            return _M_BoxLogic.LogicInternal._op_exportSnapshot.end(self, _r)

        def getAllTapeJson(self, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_getAllTapeJson.invoke(self, ((), _ctx))

        def begin_getAllTapeJson(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_getAllTapeJson.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getAllTapeJson(self, _r):
            return _M_BoxLogic.LogicInternal._op_getAllTapeJson.end(self, _r)

        def getAllMediumxJson(self, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_getAllMediumxJson.invoke(self, ((), _ctx))

        def begin_getAllMediumxJson(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_getAllMediumxJson.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getAllMediumxJson(self, _r):
            return _M_BoxLogic.LogicInternal._op_getAllMediumxJson.end(self, _r)

        def archiveMediaOperation(self, jsonInput, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_archiveMediaOperation.invoke(self, ((jsonInput, ), _ctx))

        def begin_archiveMediaOperation(self, jsonInput, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_archiveMediaOperation.begin(self, ((jsonInput, ), _response, _ex, _sent, _ctx))

        def end_archiveMediaOperation(self, _r):
            return _M_BoxLogic.LogicInternal._op_archiveMediaOperation.end(self, _r)

        def getArchiveFileMetaData(self, jsonInput, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_getArchiveFileMetaData.invoke(self, ((jsonInput, ), _ctx))

        def begin_getArchiveFileMetaData(self, jsonInput, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_getArchiveFileMetaData.begin(self, ((jsonInput, ), _response, _ex, _sent, _ctx))

        def end_getArchiveFileMetaData(self, _r):
            return _M_BoxLogic.LogicInternal._op_getArchiveFileMetaData.end(self, _r)

        def genArchiveQcowFile(self, jsonInput, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_genArchiveQcowFile.invoke(self, ((jsonInput, ), _ctx))

        def begin_genArchiveQcowFile(self, jsonInput, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_genArchiveQcowFile.begin(self, ((jsonInput, ), _response, _ex, _sent, _ctx))

        def end_genArchiveQcowFile(self, _r):
            return _M_BoxLogic.LogicInternal._op_genArchiveQcowFile.end(self, _r)

        def fileBackup(self, jsonInput, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_fileBackup.invoke(self, ((jsonInput, ), _ctx))

        def begin_fileBackup(self, jsonInput, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_fileBackup.begin(self, ((jsonInput, ), _response, _ex, _sent, _ctx))

        def end_fileBackup(self, _r):
            return _M_BoxLogic.LogicInternal._op_fileBackup.end(self, _r)

        def kvmRpc(self, jsonInput, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_kvmRpc.invoke(self, ((jsonInput, ), _ctx))

        def begin_kvmRpc(self, jsonInput, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.LogicInternal._op_kvmRpc.begin(self, ((jsonInput, ), _response, _ex, _sent, _ctx))

        def end_kvmRpc(self, _r):
            return _M_BoxLogic.LogicInternal._op_kvmRpc.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_BoxLogic.LogicInternalPrx.ice_checkedCast(proxy, '::BoxLogic::LogicInternal', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_BoxLogic.LogicInternalPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::BoxLogic::LogicInternal'
        ice_staticId = staticmethod(ice_staticId)

    _M_BoxLogic._t_LogicInternalPrx = IcePy.defineProxy('::BoxLogic::LogicInternal', LogicInternalPrx)

    _M_BoxLogic._t_LogicInternal = IcePy.defineClass('::BoxLogic::LogicInternal', LogicInternal, -1, (), True, False, None, (), ())
    LogicInternal._ice_type = _M_BoxLogic._t_LogicInternal

    LogicInternal._op_pathJoin = IcePy.Operation('pathJoin', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_BoxLogic._t_Paths, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    LogicInternal._op_isFileExist = IcePy.Operation('isFileExist', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    LogicInternal._op_AllFilesExist = IcePy.Operation('AllFilesExist', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_BoxLogic._t_Paths, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    LogicInternal._op_isFolderExist = IcePy.Operation('isFolderExist', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    LogicInternal._op_makeDirs = IcePy.Operation('makeDirs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_short, False, 0)), (), None, ())
    LogicInternal._op_remove = IcePy.Operation('remove', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    LogicInternal._op_copy = IcePy.Operation('copy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_findFiles = IcePy.Operation('findFiles', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (((), _M_BoxLogic._t_Paths, False, 0),), None, ())
    LogicInternal._op_queryCdpTimestampRange = IcePy.Operation('queryCdpTimestampRange', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_queryCdpTimestamp = IcePy.Operation('queryCdpTimestamp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_formatCdpTimestamp = IcePy.Operation('formatCdpTimestamp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_mergeCdpFile = IcePy.Operation('mergeCdpFile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_isHardwareDriverExist = IcePy.Operation('isHardwareDriverExist', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_BoxLogic._t_Hardware, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_GetDriversVersions = IcePy.Operation('GetDriversVersions', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_BoxLogic._t_Hardware, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_ChkIsSubId = IcePy.Operation('ChkIsSubId', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_BoxLogic._t_Hardware, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_GetDriversSubList = IcePy.Operation('GetDriversSubList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_generatePeStageIso = IcePy.Operation('generatePeStageIso', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_BoxLogic._t_Hardwares, False, 0), ((), _M_BoxLogic._t_IPConfigs, False, 0), ((), _M_BoxLogic._t_StringList, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_runRestoreKvm = IcePy.Operation('runRestoreKvm', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_getCurrentNetworkInfos = IcePy.Operation('getCurrentNetworkInfos', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_setNetwork = IcePy.Operation('setNetwork', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_enumStorageNodes = IcePy.Operation('enumStorageNodes', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_getLocalIqn = IcePy.Operation('getLocalIqn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_setLocalIqn = IcePy.Operation('setLocalIqn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_setGlobalDoubleChap = IcePy.Operation('setGlobalDoubleChap', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_getGlobalDoubleChap = IcePy.Operation('getGlobalDoubleChap', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), ((), IcePy._t_bool, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_loginExternalDevice = IcePy.Operation('loginExternalDevice', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_logoutExternalDevice = IcePy.Operation('logoutExternalDevice', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_refreshExternalDevice = IcePy.Operation('refreshExternalDevice', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_formatAndInitializeStorageNode = IcePy.Operation('formatAndInitializeStorageNode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_mountStorageNode = IcePy.Operation('mountStorageNode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_unmountStorageNode = IcePy.Operation('unmountStorageNode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_runCmd = IcePy.Operation('runCmd', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_bool, False, 0)), (((), _M_BoxLogic._t_StringList, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_CmdCtrl = IcePy.Operation('CmdCtrl', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_setPasswd = IcePy.Operation('setPasswd', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_getPasswd = IcePy.Operation('getPasswd', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_calcClusterTime0Hash = IcePy.Operation('calcClusterTime0Hash', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_generateClusterDiffImages = IcePy.Operation('generateClusterDiffImages', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_mergeCdpFiles = IcePy.Operation('mergeCdpFiles', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_cutCdpFile = IcePy.Operation('cutCdpFile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_getRawDiskFiles = IcePy.Operation('getRawDiskFiles', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_NbdFindUnusedReverse = IcePy.Operation('NbdFindUnusedReverse', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_NbdSetUnused = IcePy.Operation('NbdSetUnused', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_NbdSetUsed = IcePy.Operation('NbdSetUsed', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_queryTakeOverHostInfo = IcePy.Operation('queryTakeOverHostInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_mergeQcowFile = IcePy.Operation('mergeQcowFile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_startBackupOptimize = IcePy.Operation('startBackupOptimize', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_stopBackupOptimize = IcePy.Operation('stopBackupOptimize', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_mergeHashFile = IcePy.Operation('mergeHashFile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_generateBitMapFromQcowFile = IcePy.Operation('generateBitMapFromQcowFile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_fromMapGetQcowMaxSize = IcePy.Operation('fromMapGetQcowMaxSize', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_long, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_reorganizeHashFile = IcePy.Operation('reorganizeHashFile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_BoxLogic._t_BinaryStream, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_reorganizeHashFilev2 = IcePy.Operation('reorganizeHashFilev2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Utils._t_SystemError,))
    LogicInternal._op_hash2Interval = IcePy.Operation('hash2Interval', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_long, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_exportSnapshot = IcePy.Operation('exportSnapshot', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_getAllTapeJson = IcePy.Operation('getAllTapeJson', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_getAllMediumxJson = IcePy.Operation('getAllMediumxJson', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_archiveMediaOperation = IcePy.Operation('archiveMediaOperation', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_getArchiveFileMetaData = IcePy.Operation('getArchiveFileMetaData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_genArchiveQcowFile = IcePy.Operation('genArchiveQcowFile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_fileBackup = IcePy.Operation('fileBackup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    LogicInternal._op_kvmRpc = IcePy.Operation('kvmRpc', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))

    _M_BoxLogic.LogicInternal = LogicInternal
    del LogicInternal

    _M_BoxLogic.LogicInternalPrx = LogicInternalPrx
    del LogicInternalPrx

if 'Setup' not in _M_BoxLogic.__dict__:
    _M_BoxLogic.Setup = Ice.createTempClass()
    class Setup(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_BoxLogic.Setup:
                raise RuntimeError('BoxLogic.Setup is an abstract class')

        def ice_ids(self, current=None):
            return ('::BoxLogic::Setup', '::Ice::Object')

        def ice_id(self, current=None):
            return '::BoxLogic::Setup'

        def ice_staticId():
            return '::BoxLogic::Setup'
        ice_staticId = staticmethod(ice_staticId)

        def startSetup(self, session, flagJson, current=None):
            pass

        def cancelSetup(self, session, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_BoxLogic._t_Setup)

        __repr__ = __str__

    _M_BoxLogic.SetupPrx = Ice.createTempClass()
    class SetupPrx(Ice.ObjectPrx):

        def startSetup(self, session, flagJson, _ctx=None):
            return _M_BoxLogic.Setup._op_startSetup.invoke(self, ((session, flagJson), _ctx))

        def begin_startSetup(self, session, flagJson, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Setup._op_startSetup.begin(self, ((session, flagJson), _response, _ex, _sent, _ctx))

        def end_startSetup(self, _r):
            return _M_BoxLogic.Setup._op_startSetup.end(self, _r)

        def cancelSetup(self, session, _ctx=None):
            return _M_BoxLogic.Setup._op_cancelSetup.invoke(self, ((session, ), _ctx))

        def begin_cancelSetup(self, session, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_BoxLogic.Setup._op_cancelSetup.begin(self, ((session, ), _response, _ex, _sent, _ctx))

        def end_cancelSetup(self, _r):
            return _M_BoxLogic.Setup._op_cancelSetup.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_BoxLogic.SetupPrx.ice_checkedCast(proxy, '::BoxLogic::Setup', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_BoxLogic.SetupPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::BoxLogic::Setup'
        ice_staticId = staticmethod(ice_staticId)

    _M_BoxLogic._t_SetupPrx = IcePy.defineProxy('::BoxLogic::Setup', SetupPrx)

    _M_BoxLogic._t_Setup = IcePy.defineClass('::BoxLogic::Setup', Setup, -1, (), True, False, None, (), ())
    Setup._ice_type = _M_BoxLogic._t_Setup

    Setup._op_startSetup = IcePy.Operation('startSetup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Setup._op_cancelSetup = IcePy.Operation('cancelSetup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))

    _M_BoxLogic.Setup = Setup
    del Setup

    _M_BoxLogic.SetupPrx = SetupPrx
    del SetupPrx

# End of module BoxLogic

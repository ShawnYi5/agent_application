# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.4
#
# <auto-generated>
#
# Generated from file `duplicate_file.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import Ice_Identity_ice
import utils_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module Utils
_M_Utils = Ice.openModule('Utils')

# Start of module DuplicateFilePool
_M_DuplicateFilePool = Ice.openModule('DuplicateFilePool')
__name__ = 'DuplicateFilePool'

if '_t_BinaryStream' not in _M_DuplicateFilePool.__dict__:
    _M_DuplicateFilePool._t_BinaryStream = IcePy.defineSequence('::DuplicateFilePool::BinaryStream', (), IcePy._t_byte)

if 'FileFromClient' not in _M_DuplicateFilePool.__dict__:
    _M_DuplicateFilePool.FileFromClient = Ice.createTempClass()
    class FileFromClient(object):
        def __init__(self, clientFileIdent=0, fileFullName='', fileBytes=0):
            self.clientFileIdent = clientFileIdent
            self.fileFullName = fileFullName
            self.fileBytes = fileBytes

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.clientFileIdent)
            _h = 5 * _h + Ice.getHash(self.fileFullName)
            _h = 5 * _h + Ice.getHash(self.fileBytes)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_DuplicateFilePool.FileFromClient):
                return NotImplemented
            else:
                if self.clientFileIdent is None or other.clientFileIdent is None:
                    if self.clientFileIdent != other.clientFileIdent:
                        return (-1 if self.clientFileIdent is None else 1)
                else:
                    if self.clientFileIdent < other.clientFileIdent:
                        return -1
                    elif self.clientFileIdent > other.clientFileIdent:
                        return 1
                if self.fileFullName is None or other.fileFullName is None:
                    if self.fileFullName != other.fileFullName:
                        return (-1 if self.fileFullName is None else 1)
                else:
                    if self.fileFullName < other.fileFullName:
                        return -1
                    elif self.fileFullName > other.fileFullName:
                        return 1
                if self.fileBytes is None or other.fileBytes is None:
                    if self.fileBytes != other.fileBytes:
                        return (-1 if self.fileBytes is None else 1)
                else:
                    if self.fileBytes < other.fileBytes:
                        return -1
                    elif self.fileBytes > other.fileBytes:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_DuplicateFilePool._t_FileFromClient)

        __repr__ = __str__

    _M_DuplicateFilePool._t_FileFromClient = IcePy.defineStruct('::DuplicateFilePool::FileFromClient', FileFromClient, (), (
        ('clientFileIdent', (), IcePy._t_int),
        ('fileFullName', (), IcePy._t_string),
        ('fileBytes', (), IcePy._t_long)
    ))

    _M_DuplicateFilePool.FileFromClient = FileFromClient
    del FileFromClient

if 'FileInPool' not in _M_DuplicateFilePool.__dict__:
    _M_DuplicateFilePool.FileInPool = Ice.createTempClass()
    class FileInPool(object):
        def __init__(self, identInPool='', clientFileIdent=0, fileHash='', hashType=0):
            self.identInPool = identInPool
            self.clientFileIdent = clientFileIdent
            self.fileHash = fileHash
            self.hashType = hashType

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.identInPool)
            _h = 5 * _h + Ice.getHash(self.clientFileIdent)
            _h = 5 * _h + Ice.getHash(self.fileHash)
            _h = 5 * _h + Ice.getHash(self.hashType)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_DuplicateFilePool.FileInPool):
                return NotImplemented
            else:
                if self.identInPool is None or other.identInPool is None:
                    if self.identInPool != other.identInPool:
                        return (-1 if self.identInPool is None else 1)
                else:
                    if self.identInPool < other.identInPool:
                        return -1
                    elif self.identInPool > other.identInPool:
                        return 1
                if self.clientFileIdent is None or other.clientFileIdent is None:
                    if self.clientFileIdent != other.clientFileIdent:
                        return (-1 if self.clientFileIdent is None else 1)
                else:
                    if self.clientFileIdent < other.clientFileIdent:
                        return -1
                    elif self.clientFileIdent > other.clientFileIdent:
                        return 1
                if self.fileHash is None or other.fileHash is None:
                    if self.fileHash != other.fileHash:
                        return (-1 if self.fileHash is None else 1)
                else:
                    if self.fileHash < other.fileHash:
                        return -1
                    elif self.fileHash > other.fileHash:
                        return 1
                if self.hashType is None or other.hashType is None:
                    if self.hashType != other.hashType:
                        return (-1 if self.hashType is None else 1)
                else:
                    if self.hashType < other.hashType:
                        return -1
                    elif self.hashType > other.hashType:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_DuplicateFilePool._t_FileInPool)

        __repr__ = __str__

    _M_DuplicateFilePool._t_FileInPool = IcePy.defineStruct('::DuplicateFilePool::FileInPool', FileInPool, (), (
        ('identInPool', (), IcePy._t_string),
        ('clientFileIdent', (), IcePy._t_int),
        ('fileHash', (), IcePy._t_string),
        ('hashType', (), IcePy._t_int)
    ))

    _M_DuplicateFilePool.FileInPool = FileInPool
    del FileInPool

if 'UpdateProgressReceiver' not in _M_DuplicateFilePool.__dict__:
    _M_DuplicateFilePool.UpdateProgressReceiver = Ice.createTempClass()
    class UpdateProgressReceiver(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_DuplicateFilePool.UpdateProgressReceiver:
                raise RuntimeError('DuplicateFilePool.UpdateProgressReceiver is an abstract class')

        def ice_ids(self, current=None):
            return ('::DuplicateFilePool::UpdateProgressReceiver', '::Ice::Object')

        def ice_id(self, current=None):
            return '::DuplicateFilePool::UpdateProgressReceiver'

        def ice_staticId():
            return '::DuplicateFilePool::UpdateProgressReceiver'
        ice_staticId = staticmethod(ice_staticId)

        def ReportProgess(self, finished, totalFileNumber, importedFileNumber, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_DuplicateFilePool._t_UpdateProgressReceiver)

        __repr__ = __str__

    _M_DuplicateFilePool.UpdateProgressReceiverPrx = Ice.createTempClass()
    class UpdateProgressReceiverPrx(Ice.ObjectPrx):

        def ReportProgess(self, finished, totalFileNumber, importedFileNumber, _ctx=None):
            return _M_DuplicateFilePool.UpdateProgressReceiver._op_ReportProgess.invoke(self, ((finished, totalFileNumber, importedFileNumber), _ctx))

        def begin_ReportProgess(self, finished, totalFileNumber, importedFileNumber, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DuplicateFilePool.UpdateProgressReceiver._op_ReportProgess.begin(self, ((finished, totalFileNumber, importedFileNumber), _response, _ex, _sent, _ctx))

        def end_ReportProgess(self, _r):
            return _M_DuplicateFilePool.UpdateProgressReceiver._op_ReportProgess.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_DuplicateFilePool.UpdateProgressReceiverPrx.ice_checkedCast(proxy, '::DuplicateFilePool::UpdateProgressReceiver', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_DuplicateFilePool.UpdateProgressReceiverPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::DuplicateFilePool::UpdateProgressReceiver'
        ice_staticId = staticmethod(ice_staticId)

    _M_DuplicateFilePool._t_UpdateProgressReceiverPrx = IcePy.defineProxy('::DuplicateFilePool::UpdateProgressReceiver', UpdateProgressReceiverPrx)

    _M_DuplicateFilePool._t_UpdateProgressReceiver = IcePy.defineClass('::DuplicateFilePool::UpdateProgressReceiver', UpdateProgressReceiver, -1, (), True, False, None, (), ())
    UpdateProgressReceiver._ice_type = _M_DuplicateFilePool._t_UpdateProgressReceiver

    UpdateProgressReceiver._op_ReportProgess = IcePy.Operation('ReportProgess', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_long, False, 0)), (), None, ())

    _M_DuplicateFilePool.UpdateProgressReceiver = UpdateProgressReceiver
    del UpdateProgressReceiver

    _M_DuplicateFilePool.UpdateProgressReceiverPrx = UpdateProgressReceiverPrx
    del UpdateProgressReceiverPrx

if 'FilePool' not in _M_DuplicateFilePool.__dict__:
    _M_DuplicateFilePool.FilePool = Ice.createTempClass()
    class FilePool(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_DuplicateFilePool.FilePool:
                raise RuntimeError('DuplicateFilePool.FilePool is an abstract class')

        def ice_ids(self, current=None):
            return ('::DuplicateFilePool::FilePool', '::Ice::Object')

        def ice_id(self, current=None):
            return '::DuplicateFilePool::FilePool'

        def ice_staticId():
            return '::DuplicateFilePool::FilePool'
        ice_staticId = staticmethod(ice_staticId)

        def update(self, path, ident, current=None):
            pass

        def queryFilesFromClient(self, inPath, outPath, current=None):
            pass

        def readFile(self, identInPool, byteOffset, bytes, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_DuplicateFilePool._t_FilePool)

        __repr__ = __str__

    _M_DuplicateFilePool.FilePoolPrx = Ice.createTempClass()
    class FilePoolPrx(Ice.ObjectPrx):

        def update(self, path, ident, _ctx=None):
            return _M_DuplicateFilePool.FilePool._op_update.invoke(self, ((path, ident), _ctx))

        def begin_update(self, path, ident, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DuplicateFilePool.FilePool._op_update.begin(self, ((path, ident), _response, _ex, _sent, _ctx))

        def end_update(self, _r):
            return _M_DuplicateFilePool.FilePool._op_update.end(self, _r)

        def queryFilesFromClient(self, inPath, outPath, _ctx=None):
            return _M_DuplicateFilePool.FilePool._op_queryFilesFromClient.invoke(self, ((inPath, outPath), _ctx))

        def begin_queryFilesFromClient(self, inPath, outPath, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DuplicateFilePool.FilePool._op_queryFilesFromClient.begin(self, ((inPath, outPath), _response, _ex, _sent, _ctx))

        def end_queryFilesFromClient(self, _r):
            return _M_DuplicateFilePool.FilePool._op_queryFilesFromClient.end(self, _r)

        def readFile(self, identInPool, byteOffset, bytes, _ctx=None):
            return _M_DuplicateFilePool.FilePool._op_readFile.invoke(self, ((identInPool, byteOffset, bytes), _ctx))

        def begin_readFile(self, identInPool, byteOffset, bytes, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DuplicateFilePool.FilePool._op_readFile.begin(self, ((identInPool, byteOffset, bytes), _response, _ex, _sent, _ctx))

        def end_readFile(self, _r):
            return _M_DuplicateFilePool.FilePool._op_readFile.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_DuplicateFilePool.FilePoolPrx.ice_checkedCast(proxy, '::DuplicateFilePool::FilePool', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_DuplicateFilePool.FilePoolPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::DuplicateFilePool::FilePool'
        ice_staticId = staticmethod(ice_staticId)

    _M_DuplicateFilePool._t_FilePoolPrx = IcePy.defineProxy('::DuplicateFilePool::FilePool', FilePoolPrx)

    _M_DuplicateFilePool._t_FilePool = IcePy.defineClass('::DuplicateFilePool::FilePool', FilePool, -1, (), True, False, None, (), ())
    FilePool._ice_type = _M_DuplicateFilePool._t_FilePool

    FilePool._op_update = IcePy.Operation('update', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_Ice._t_Identity, False, 0)), (), None, (_M_Utils._t_SystemError,))
    FilePool._op_queryFilesFromClient = IcePy.Operation('queryFilesFromClient', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Utils._t_SystemError,))
    FilePool._op_readFile = IcePy.Operation('readFile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_DuplicateFilePool._t_BinaryStream, False, 0), (_M_Utils._t_SystemError,))

    _M_DuplicateFilePool.FilePool = FilePool
    del FilePool

    _M_DuplicateFilePool.FilePoolPrx = FilePoolPrx
    del FilePoolPrx

# End of module DuplicateFilePool

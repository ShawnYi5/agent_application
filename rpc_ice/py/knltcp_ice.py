# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.4
#
# <auto-generated>
#
# Generated from file `knltcp.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import utils_ice
import img_ice

# Included module Utils
_M_Utils = Ice.openModule('Utils')

# Included module IMG
_M_IMG = Ice.openModule('IMG')

# Start of module KTService
_M_KTService = Ice.openModule('KTService')
__name__ = 'KTService'

if '_t_BinaryStream' not in _M_KTService.__dict__:
    _M_KTService._t_BinaryStream = IcePy.defineSequence('::KTService::BinaryStream', (), IcePy._t_byte)

if 'Token' not in _M_KTService.__dict__:
    _M_KTService.Token = Ice.createTempClass()
    class Token(object):
        def __init__(self, token='', snapshot=None, keepAliveIntervalSeconds=3600, expiryMinutes=1440, diskBytes=0):
            self.token = token
            self.snapshot = snapshot
            self.keepAliveIntervalSeconds = keepAliveIntervalSeconds
            self.expiryMinutes = expiryMinutes
            self.diskBytes = diskBytes

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.token)
            if self.snapshot:
                for _i0 in self.snapshot:
                    _h = 5 * _h + Ice.getHash(_i0)
            _h = 5 * _h + Ice.getHash(self.keepAliveIntervalSeconds)
            _h = 5 * _h + Ice.getHash(self.expiryMinutes)
            _h = 5 * _h + Ice.getHash(self.diskBytes)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_KTService.Token):
                return NotImplemented
            else:
                if self.token is None or other.token is None:
                    if self.token != other.token:
                        return (-1 if self.token is None else 1)
                else:
                    if self.token < other.token:
                        return -1
                    elif self.token > other.token:
                        return 1
                if self.snapshot is None or other.snapshot is None:
                    if self.snapshot != other.snapshot:
                        return (-1 if self.snapshot is None else 1)
                else:
                    if self.snapshot < other.snapshot:
                        return -1
                    elif self.snapshot > other.snapshot:
                        return 1
                if self.keepAliveIntervalSeconds is None or other.keepAliveIntervalSeconds is None:
                    if self.keepAliveIntervalSeconds != other.keepAliveIntervalSeconds:
                        return (-1 if self.keepAliveIntervalSeconds is None else 1)
                else:
                    if self.keepAliveIntervalSeconds < other.keepAliveIntervalSeconds:
                        return -1
                    elif self.keepAliveIntervalSeconds > other.keepAliveIntervalSeconds:
                        return 1
                if self.expiryMinutes is None or other.expiryMinutes is None:
                    if self.expiryMinutes != other.expiryMinutes:
                        return (-1 if self.expiryMinutes is None else 1)
                else:
                    if self.expiryMinutes < other.expiryMinutes:
                        return -1
                    elif self.expiryMinutes > other.expiryMinutes:
                        return 1
                if self.diskBytes is None or other.diskBytes is None:
                    if self.diskBytes != other.diskBytes:
                        return (-1 if self.diskBytes is None else 1)
                else:
                    if self.diskBytes < other.diskBytes:
                        return -1
                    elif self.diskBytes > other.diskBytes:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_KTService._t_Token)

        __repr__ = __str__

    _M_KTService._t_Token = IcePy.defineStruct('::KTService::Token', Token, (), (
        ('token', (), IcePy._t_string),
        ('snapshot', (), _M_IMG._t_ImageSnapshotIdents),
        ('keepAliveIntervalSeconds', (), IcePy._t_int),
        ('expiryMinutes', (), IcePy._t_int),
        ('diskBytes', (), IcePy._t_long)
    ))

    _M_KTService.Token = Token
    del Token

if 'KTS' not in _M_KTService.__dict__:
    _M_KTService.KTS = Ice.createTempClass()
    class KTS(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_KTService.KTS:
                raise RuntimeError('KTService.KTS is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::KTService::KTS')

        def ice_id(self, current=None):
            return '::KTService::KTS'

        def ice_staticId():
            return '::KTService::KTS'
        ice_staticId = staticmethod(ice_staticId)

        def ping(self, current=None):
            pass

        def update(self, token, current=None):
            pass

        def updateTrafficControl(self, ioSession, ident, kiloBytesPerSecond, current=None):
            pass

        def refreshNetwork(self, current=None):
            pass

        def setPreReadBitmap(self, token, index, bitmap, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_KTService._t_KTS)

        __repr__ = __str__

    _M_KTService.KTSPrx = Ice.createTempClass()
    class KTSPrx(Ice.ObjectPrx):

        def ping(self, _ctx=None):
            return _M_KTService.KTS._op_ping.invoke(self, ((), _ctx))

        def begin_ping(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_KTService.KTS._op_ping.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_ping(self, _r):
            return _M_KTService.KTS._op_ping.end(self, _r)

        def update(self, token, _ctx=None):
            return _M_KTService.KTS._op_update.invoke(self, ((token, ), _ctx))

        def begin_update(self, token, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_KTService.KTS._op_update.begin(self, ((token, ), _response, _ex, _sent, _ctx))

        def end_update(self, _r):
            return _M_KTService.KTS._op_update.end(self, _r)

        def updateTrafficControl(self, ioSession, ident, kiloBytesPerSecond, _ctx=None):
            return _M_KTService.KTS._op_updateTrafficControl.invoke(self, ((ioSession, ident, kiloBytesPerSecond), _ctx))

        def begin_updateTrafficControl(self, ioSession, ident, kiloBytesPerSecond, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_KTService.KTS._op_updateTrafficControl.begin(self, ((ioSession, ident, kiloBytesPerSecond), _response, _ex, _sent, _ctx))

        def end_updateTrafficControl(self, _r):
            return _M_KTService.KTS._op_updateTrafficControl.end(self, _r)

        def refreshNetwork(self, _ctx=None):
            return _M_KTService.KTS._op_refreshNetwork.invoke(self, ((), _ctx))

        def begin_refreshNetwork(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_KTService.KTS._op_refreshNetwork.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_refreshNetwork(self, _r):
            return _M_KTService.KTS._op_refreshNetwork.end(self, _r)

        def setPreReadBitmap(self, token, index, bitmap, _ctx=None):
            return _M_KTService.KTS._op_setPreReadBitmap.invoke(self, ((token, index, bitmap), _ctx))

        def begin_setPreReadBitmap(self, token, index, bitmap, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_KTService.KTS._op_setPreReadBitmap.begin(self, ((token, index, bitmap), _response, _ex, _sent, _ctx))

        def end_setPreReadBitmap(self, _r):
            return _M_KTService.KTS._op_setPreReadBitmap.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_KTService.KTSPrx.ice_checkedCast(proxy, '::KTService::KTS', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_KTService.KTSPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::KTService::KTS'
        ice_staticId = staticmethod(ice_staticId)

    _M_KTService._t_KTSPrx = IcePy.defineProxy('::KTService::KTS', KTSPrx)

    _M_KTService._t_KTS = IcePy.defineClass('::KTService::KTS', KTS, -1, (), True, False, None, (), ())
    KTS._ice_type = _M_KTService._t_KTS

    KTS._op_ping = IcePy.Operation('ping', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    KTS._op_update = IcePy.Operation('update', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_KTService._t_Token, False, 0),), (), None, (_M_Utils._t_SystemError,))
    KTS._op_updateTrafficControl = IcePy.Operation('updateTrafficControl', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_Utils._t_SystemError,))
    KTS._op_refreshNetwork = IcePy.Operation('refreshNetwork', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    KTS._op_setPreReadBitmap = IcePy.Operation('setPreReadBitmap', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_KTService._t_Token, False, 0), ((), IcePy._t_long, False, 0), ((), _M_KTService._t_BinaryStream, False, 0)), (), None, (_M_Utils._t_SystemError,))

    _M_KTService.KTS = KTS
    del KTS

    _M_KTService.KTSPrx = KTSPrx
    del KTSPrx

# End of module KTService

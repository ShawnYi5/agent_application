# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.4
#
# <auto-generated>
#
# Generated from file `vps_agent.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import Ice_Identity_ice
import utils_ice
import img_ice
import logic_ice
import box_api_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module Utils
_M_Utils = Ice.openModule('Utils')

# Included module IMG
_M_IMG = Ice.openModule('IMG')

# Included module PerpcIce
_M_PerpcIce = Ice.openModule('PerpcIce')

# Included module BoxLogic
_M_BoxLogic = Ice.openModule('BoxLogic')

# Included module Box
_M_Box = Ice.openModule('Box')

# Start of module VpsAgent
_M_VpsAgent = Ice.openModule('VpsAgent')
__name__ = 'VpsAgent'

if 'Services' not in _M_VpsAgent.__dict__:
    _M_VpsAgent.Services = Ice.createTempClass()
    class Services(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_VpsAgent.Services:
                raise RuntimeError('VpsAgent.Services is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::VpsAgent::Services')

        def ice_id(self, current=None):
            return '::VpsAgent::Services'

        def ice_staticId():
            return '::VpsAgent::Services'
        ice_staticId = staticmethod(ice_staticId)

        def ping(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_VpsAgent._t_Services)

        __repr__ = __str__

    _M_VpsAgent.ServicesPrx = Ice.createTempClass()
    class ServicesPrx(Ice.ObjectPrx):

        def ping(self, _ctx=None):
            return _M_VpsAgent.Services._op_ping.invoke(self, ((), _ctx))

        def begin_ping(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Services._op_ping.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_ping(self, _r):
            return _M_VpsAgent.Services._op_ping.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_VpsAgent.ServicesPrx.ice_checkedCast(proxy, '::VpsAgent::Services', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_VpsAgent.ServicesPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::VpsAgent::Services'
        ice_staticId = staticmethod(ice_staticId)

    _M_VpsAgent._t_ServicesPrx = IcePy.defineProxy('::VpsAgent::Services', ServicesPrx)

    _M_VpsAgent._t_Services = IcePy.defineClass('::VpsAgent::Services', Services, -1, (), True, False, None, (), ())
    Services._ice_type = _M_VpsAgent._t_Services

    Services._op_ping = IcePy.Operation('ping', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())

    _M_VpsAgent.Services = Services
    del Services

    _M_VpsAgent.ServicesPrx = ServicesPrx
    del ServicesPrx

if '_t_BinaryStream' not in _M_VpsAgent.__dict__:
    _M_VpsAgent._t_BinaryStream = IcePy.defineSequence('::VpsAgent::BinaryStream', (), IcePy._t_byte)

if 'SectorRange' not in _M_VpsAgent.__dict__:
    _M_VpsAgent.SectorRange = Ice.createTempClass()
    class SectorRange(object):
        def __init__(self, startSectorOffset=0, numberOfSectors=0):
            self.startSectorOffset = startSectorOffset
            self.numberOfSectors = numberOfSectors

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.startSectorOffset)
            _h = 5 * _h + Ice.getHash(self.numberOfSectors)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_VpsAgent.SectorRange):
                return NotImplemented
            else:
                if self.startSectorOffset is None or other.startSectorOffset is None:
                    if self.startSectorOffset != other.startSectorOffset:
                        return (-1 if self.startSectorOffset is None else 1)
                else:
                    if self.startSectorOffset < other.startSectorOffset:
                        return -1
                    elif self.startSectorOffset > other.startSectorOffset:
                        return 1
                if self.numberOfSectors is None or other.numberOfSectors is None:
                    if self.numberOfSectors != other.numberOfSectors:
                        return (-1 if self.numberOfSectors is None else 1)
                else:
                    if self.numberOfSectors < other.numberOfSectors:
                        return -1
                    elif self.numberOfSectors > other.numberOfSectors:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_VpsAgent._t_SectorRange)

        __repr__ = __str__

    _M_VpsAgent._t_SectorRange = IcePy.defineStruct('::VpsAgent::SectorRange', SectorRange, (), (
        ('startSectorOffset', (), IcePy._t_long),
        ('numberOfSectors', (), IcePy._t_int)
    ))

    _M_VpsAgent.SectorRange = SectorRange
    del SectorRange

if 'LargeSectorRange' not in _M_VpsAgent.__dict__:
    _M_VpsAgent.LargeSectorRange = Ice.createTempClass()
    class LargeSectorRange(object):
        def __init__(self, startSectorOffset=0, numberOfSectors=0):
            self.startSectorOffset = startSectorOffset
            self.numberOfSectors = numberOfSectors

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.startSectorOffset)
            _h = 5 * _h + Ice.getHash(self.numberOfSectors)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_VpsAgent.LargeSectorRange):
                return NotImplemented
            else:
                if self.startSectorOffset is None or other.startSectorOffset is None:
                    if self.startSectorOffset != other.startSectorOffset:
                        return (-1 if self.startSectorOffset is None else 1)
                else:
                    if self.startSectorOffset < other.startSectorOffset:
                        return -1
                    elif self.startSectorOffset > other.startSectorOffset:
                        return 1
                if self.numberOfSectors is None or other.numberOfSectors is None:
                    if self.numberOfSectors != other.numberOfSectors:
                        return (-1 if self.numberOfSectors is None else 1)
                else:
                    if self.numberOfSectors < other.numberOfSectors:
                        return -1
                    elif self.numberOfSectors > other.numberOfSectors:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_VpsAgent._t_LargeSectorRange)

        __repr__ = __str__

    _M_VpsAgent._t_LargeSectorRange = IcePy.defineStruct('::VpsAgent::LargeSectorRange', LargeSectorRange, (), (
        ('startSectorOffset', (), IcePy._t_long),
        ('numberOfSectors', (), IcePy._t_long)
    ))

    _M_VpsAgent.LargeSectorRange = LargeSectorRange
    del LargeSectorRange

if 'DataLocation' not in _M_VpsAgent.__dict__:
    _M_VpsAgent.DataLocation = Ice.createTempClass()
    class DataLocation(object):
        def __init__(self, diskIndex=0, diskBlockOffset=0):
            self.diskIndex = diskIndex
            self.diskBlockOffset = diskBlockOffset

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.diskIndex)
            _h = 5 * _h + Ice.getHash(self.diskBlockOffset)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_VpsAgent.DataLocation):
                return NotImplemented
            else:
                if self.diskIndex is None or other.diskIndex is None:
                    if self.diskIndex != other.diskIndex:
                        return (-1 if self.diskIndex is None else 1)
                else:
                    if self.diskIndex < other.diskIndex:
                        return -1
                    elif self.diskIndex > other.diskIndex:
                        return 1
                if self.diskBlockOffset is None or other.diskBlockOffset is None:
                    if self.diskBlockOffset != other.diskBlockOffset:
                        return (-1 if self.diskBlockOffset is None else 1)
                else:
                    if self.diskBlockOffset < other.diskBlockOffset:
                        return -1
                    elif self.diskBlockOffset > other.diskBlockOffset:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_VpsAgent._t_DataLocation)

        __repr__ = __str__

    _M_VpsAgent._t_DataLocation = IcePy.defineStruct('::VpsAgent::DataLocation', DataLocation, (), (
        ('diskIndex', (), IcePy._t_int),
        ('diskBlockOffset', (), IcePy._t_int)
    ))

    _M_VpsAgent.DataLocation = DataLocation
    del DataLocation

if 'DataBlock' not in _M_VpsAgent.__dict__:
    _M_VpsAgent.DataBlock = Ice.createTempClass()
    class DataBlock(object):
        def __init__(self, location=Ice._struct_marker, data=None):
            if location is Ice._struct_marker:
                self.location = _M_VpsAgent.DataLocation()
            else:
                self.location = location
            self.data = data

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.location)
            if self.data:
                for _i0 in self.data:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_VpsAgent.DataBlock):
                return NotImplemented
            else:
                if self.location is None or other.location is None:
                    if self.location != other.location:
                        return (-1 if self.location is None else 1)
                else:
                    if self.location < other.location:
                        return -1
                    elif self.location > other.location:
                        return 1
                if self.data is None or other.data is None:
                    if self.data != other.data:
                        return (-1 if self.data is None else 1)
                else:
                    if self.data < other.data:
                        return -1
                    elif self.data > other.data:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_VpsAgent._t_DataBlock)

        __repr__ = __str__

    _M_VpsAgent._t_DataBlock = IcePy.defineStruct('::VpsAgent::DataBlock', DataBlock, (), (
        ('location', (), _M_VpsAgent._t_DataLocation),
        ('data', (), _M_VpsAgent._t_BinaryStream)
    ))

    _M_VpsAgent.DataBlock = DataBlock
    del DataBlock

if 'PostSector' not in _M_VpsAgent.__dict__:
    _M_VpsAgent.PostSector = Ice.createTempClass()
    class PostSector(object):
        def __init__(self, type=0, diskIndex=0, byteOffsetInBuffer=0, numberOfByteInBuffer=0, sectorOffset=0, numberOfSectors=0):
            self.type = type
            self.diskIndex = diskIndex
            self.byteOffsetInBuffer = byteOffsetInBuffer
            self.numberOfByteInBuffer = numberOfByteInBuffer
            self.sectorOffset = sectorOffset
            self.numberOfSectors = numberOfSectors

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.type)
            _h = 5 * _h + Ice.getHash(self.diskIndex)
            _h = 5 * _h + Ice.getHash(self.byteOffsetInBuffer)
            _h = 5 * _h + Ice.getHash(self.numberOfByteInBuffer)
            _h = 5 * _h + Ice.getHash(self.sectorOffset)
            _h = 5 * _h + Ice.getHash(self.numberOfSectors)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_VpsAgent.PostSector):
                return NotImplemented
            else:
                if self.type is None or other.type is None:
                    if self.type != other.type:
                        return (-1 if self.type is None else 1)
                else:
                    if self.type < other.type:
                        return -1
                    elif self.type > other.type:
                        return 1
                if self.diskIndex is None or other.diskIndex is None:
                    if self.diskIndex != other.diskIndex:
                        return (-1 if self.diskIndex is None else 1)
                else:
                    if self.diskIndex < other.diskIndex:
                        return -1
                    elif self.diskIndex > other.diskIndex:
                        return 1
                if self.byteOffsetInBuffer is None or other.byteOffsetInBuffer is None:
                    if self.byteOffsetInBuffer != other.byteOffsetInBuffer:
                        return (-1 if self.byteOffsetInBuffer is None else 1)
                else:
                    if self.byteOffsetInBuffer < other.byteOffsetInBuffer:
                        return -1
                    elif self.byteOffsetInBuffer > other.byteOffsetInBuffer:
                        return 1
                if self.numberOfByteInBuffer is None or other.numberOfByteInBuffer is None:
                    if self.numberOfByteInBuffer != other.numberOfByteInBuffer:
                        return (-1 if self.numberOfByteInBuffer is None else 1)
                else:
                    if self.numberOfByteInBuffer < other.numberOfByteInBuffer:
                        return -1
                    elif self.numberOfByteInBuffer > other.numberOfByteInBuffer:
                        return 1
                if self.sectorOffset is None or other.sectorOffset is None:
                    if self.sectorOffset != other.sectorOffset:
                        return (-1 if self.sectorOffset is None else 1)
                else:
                    if self.sectorOffset < other.sectorOffset:
                        return -1
                    elif self.sectorOffset > other.sectorOffset:
                        return 1
                if self.numberOfSectors is None or other.numberOfSectors is None:
                    if self.numberOfSectors != other.numberOfSectors:
                        return (-1 if self.numberOfSectors is None else 1)
                else:
                    if self.numberOfSectors < other.numberOfSectors:
                        return -1
                    elif self.numberOfSectors > other.numberOfSectors:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_VpsAgent._t_PostSector)

        __repr__ = __str__

    _M_VpsAgent._t_PostSector = IcePy.defineStruct('::VpsAgent::PostSector', PostSector, (), (
        ('type', (), IcePy._t_int),
        ('diskIndex', (), IcePy._t_int),
        ('byteOffsetInBuffer', (), IcePy._t_int),
        ('numberOfByteInBuffer', (), IcePy._t_int),
        ('sectorOffset', (), IcePy._t_long),
        ('numberOfSectors', (), IcePy._t_short)
    ))

    _M_VpsAgent.PostSector = PostSector
    del PostSector

if '_t_PostSectors' not in _M_VpsAgent.__dict__:
    _M_VpsAgent._t_PostSectors = IcePy.defineSequence('::VpsAgent::PostSectors', (), _M_VpsAgent._t_PostSector)

if 'PostExtData' not in _M_VpsAgent.__dict__:
    _M_VpsAgent.PostExtData = Ice.createTempClass()
    class PostExtData(object):
        def __init__(self, diskIndex=0, sectorOffset=0, numberOfSectors=0, extType=0, extData=None):
            self.diskIndex = diskIndex
            self.sectorOffset = sectorOffset
            self.numberOfSectors = numberOfSectors
            self.extType = extType
            self.extData = extData

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.diskIndex)
            _h = 5 * _h + Ice.getHash(self.sectorOffset)
            _h = 5 * _h + Ice.getHash(self.numberOfSectors)
            _h = 5 * _h + Ice.getHash(self.extType)
            if self.extData:
                for _i0 in self.extData:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_VpsAgent.PostExtData):
                return NotImplemented
            else:
                if self.diskIndex is None or other.diskIndex is None:
                    if self.diskIndex != other.diskIndex:
                        return (-1 if self.diskIndex is None else 1)
                else:
                    if self.diskIndex < other.diskIndex:
                        return -1
                    elif self.diskIndex > other.diskIndex:
                        return 1
                if self.sectorOffset is None or other.sectorOffset is None:
                    if self.sectorOffset != other.sectorOffset:
                        return (-1 if self.sectorOffset is None else 1)
                else:
                    if self.sectorOffset < other.sectorOffset:
                        return -1
                    elif self.sectorOffset > other.sectorOffset:
                        return 1
                if self.numberOfSectors is None or other.numberOfSectors is None:
                    if self.numberOfSectors != other.numberOfSectors:
                        return (-1 if self.numberOfSectors is None else 1)
                else:
                    if self.numberOfSectors < other.numberOfSectors:
                        return -1
                    elif self.numberOfSectors > other.numberOfSectors:
                        return 1
                if self.extType is None or other.extType is None:
                    if self.extType != other.extType:
                        return (-1 if self.extType is None else 1)
                else:
                    if self.extType < other.extType:
                        return -1
                    elif self.extType > other.extType:
                        return 1
                if self.extData is None or other.extData is None:
                    if self.extData != other.extData:
                        return (-1 if self.extData is None else 1)
                else:
                    if self.extData < other.extData:
                        return -1
                    elif self.extData > other.extData:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_VpsAgent._t_PostExtData)

        __repr__ = __str__

    _M_VpsAgent._t_PostExtData = IcePy.defineStruct('::VpsAgent::PostExtData', PostExtData, (), (
        ('diskIndex', (), IcePy._t_int),
        ('sectorOffset', (), IcePy._t_long),
        ('numberOfSectors', (), IcePy._t_short),
        ('extType', (), IcePy._t_int),
        ('extData', (), _M_VpsAgent._t_BinaryStream)
    ))

    _M_VpsAgent.PostExtData = PostExtData
    del PostExtData

if '_t_PostExtDataVector' not in _M_VpsAgent.__dict__:
    _M_VpsAgent._t_PostExtDataVector = IcePy.defineSequence('::VpsAgent::PostExtDataVector', (), _M_VpsAgent._t_PostExtData)

if 'GetExtData' not in _M_VpsAgent.__dict__:
    _M_VpsAgent.GetExtData = Ice.createTempClass()
    class GetExtData(object):
        def __init__(self, diskIndex=0, extType=0, sectorOffset=0, bitCount=0):
            self.diskIndex = diskIndex
            self.extType = extType
            self.sectorOffset = sectorOffset
            self.bitCount = bitCount

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.diskIndex)
            _h = 5 * _h + Ice.getHash(self.extType)
            _h = 5 * _h + Ice.getHash(self.sectorOffset)
            _h = 5 * _h + Ice.getHash(self.bitCount)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_VpsAgent.GetExtData):
                return NotImplemented
            else:
                if self.diskIndex is None or other.diskIndex is None:
                    if self.diskIndex != other.diskIndex:
                        return (-1 if self.diskIndex is None else 1)
                else:
                    if self.diskIndex < other.diskIndex:
                        return -1
                    elif self.diskIndex > other.diskIndex:
                        return 1
                if self.extType is None or other.extType is None:
                    if self.extType != other.extType:
                        return (-1 if self.extType is None else 1)
                else:
                    if self.extType < other.extType:
                        return -1
                    elif self.extType > other.extType:
                        return 1
                if self.sectorOffset is None or other.sectorOffset is None:
                    if self.sectorOffset != other.sectorOffset:
                        return (-1 if self.sectorOffset is None else 1)
                else:
                    if self.sectorOffset < other.sectorOffset:
                        return -1
                    elif self.sectorOffset > other.sectorOffset:
                        return 1
                if self.bitCount is None or other.bitCount is None:
                    if self.bitCount != other.bitCount:
                        return (-1 if self.bitCount is None else 1)
                else:
                    if self.bitCount < other.bitCount:
                        return -1
                    elif self.bitCount > other.bitCount:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_VpsAgent._t_GetExtData)

        __repr__ = __str__

    _M_VpsAgent._t_GetExtData = IcePy.defineStruct('::VpsAgent::GetExtData', GetExtData, (), (
        ('diskIndex', (), IcePy._t_int),
        ('extType', (), IcePy._t_int),
        ('sectorOffset', (), IcePy._t_long),
        ('bitCount', (), IcePy._t_int)
    ))

    _M_VpsAgent.GetExtData = GetExtData
    del GetExtData

if '_t_GetExtDataVector' not in _M_VpsAgent.__dict__:
    _M_VpsAgent._t_GetExtDataVector = IcePy.defineSequence('::VpsAgent::GetExtDataVector', (), _M_VpsAgent._t_GetExtData)

if 'Backup' not in _M_VpsAgent.__dict__:
    _M_VpsAgent.Backup = Ice.createTempClass()
    class Backup(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_VpsAgent.Backup:
                raise RuntimeError('VpsAgent.Backup is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::VpsAgent::Backup')

        def ice_id(self, current=None):
            return '::VpsAgent::Backup'

        def ice_staticId():
            return '::VpsAgent::Backup'
        ice_staticId = staticmethod(ice_staticId)

        def PostSectorData(self, diskIndex, range, data, current=None):
            pass

        def PostSectorDataEx(self, type, diskIndex, range, data, current=None):
            pass

        def PostSectorDataExV2(self, sectors, data, current=None):
            pass

        def PostBakDataExt(self, extDataVector, current=None):
            pass

        def GetBakDataExt(self, extTypeVector, current=None):
            pass

        def PostUsedBlockBitmap(self, diskIndex, bitmap, completed, current=None):
            pass

        def PostDuplicateFileSectors(self, diskIndex, sectors, completed, current=None):
            pass

        def PostCurrentFileList(self, bitmap, completed, current=None):
            pass

        def GetFileListFromDuplicateFilePool(self, current=None):
            pass

        def ReportStatus(self, progress, current=None):
            pass

        def Exit(self, code, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_VpsAgent._t_Backup)

        __repr__ = __str__

    _M_VpsAgent.BackupPrx = Ice.createTempClass()
    class BackupPrx(Ice.ObjectPrx):

        def PostSectorData(self, diskIndex, range, data, _ctx=None):
            return _M_VpsAgent.Backup._op_PostSectorData.invoke(self, ((diskIndex, range, data), _ctx))

        def begin_PostSectorData(self, diskIndex, range, data, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Backup._op_PostSectorData.begin(self, ((diskIndex, range, data), _response, _ex, _sent, _ctx))

        def end_PostSectorData(self, _r):
            return _M_VpsAgent.Backup._op_PostSectorData.end(self, _r)

        def PostSectorDataEx(self, type, diskIndex, range, data, _ctx=None):
            return _M_VpsAgent.Backup._op_PostSectorDataEx.invoke(self, ((type, diskIndex, range, data), _ctx))

        def begin_PostSectorDataEx(self, type, diskIndex, range, data, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Backup._op_PostSectorDataEx.begin(self, ((type, diskIndex, range, data), _response, _ex, _sent, _ctx))

        def end_PostSectorDataEx(self, _r):
            return _M_VpsAgent.Backup._op_PostSectorDataEx.end(self, _r)

        def PostSectorDataExV2(self, sectors, data, _ctx=None):
            return _M_VpsAgent.Backup._op_PostSectorDataExV2.invoke(self, ((sectors, data), _ctx))

        def begin_PostSectorDataExV2(self, sectors, data, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Backup._op_PostSectorDataExV2.begin(self, ((sectors, data), _response, _ex, _sent, _ctx))

        def end_PostSectorDataExV2(self, _r):
            return _M_VpsAgent.Backup._op_PostSectorDataExV2.end(self, _r)

        def PostBakDataExt(self, extDataVector, _ctx=None):
            return _M_VpsAgent.Backup._op_PostBakDataExt.invoke(self, ((extDataVector, ), _ctx))

        def begin_PostBakDataExt(self, extDataVector, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Backup._op_PostBakDataExt.begin(self, ((extDataVector, ), _response, _ex, _sent, _ctx))

        def end_PostBakDataExt(self, _r):
            return _M_VpsAgent.Backup._op_PostBakDataExt.end(self, _r)

        def GetBakDataExt(self, extTypeVector, _ctx=None):
            return _M_VpsAgent.Backup._op_GetBakDataExt.invoke(self, ((extTypeVector, ), _ctx))

        def begin_GetBakDataExt(self, extTypeVector, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Backup._op_GetBakDataExt.begin(self, ((extTypeVector, ), _response, _ex, _sent, _ctx))

        def end_GetBakDataExt(self, _r):
            return _M_VpsAgent.Backup._op_GetBakDataExt.end(self, _r)

        def PostUsedBlockBitmap(self, diskIndex, bitmap, completed, _ctx=None):
            return _M_VpsAgent.Backup._op_PostUsedBlockBitmap.invoke(self, ((diskIndex, bitmap, completed), _ctx))

        def begin_PostUsedBlockBitmap(self, diskIndex, bitmap, completed, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Backup._op_PostUsedBlockBitmap.begin(self, ((diskIndex, bitmap, completed), _response, _ex, _sent, _ctx))

        def end_PostUsedBlockBitmap(self, _r):
            return _M_VpsAgent.Backup._op_PostUsedBlockBitmap.end(self, _r)

        def PostDuplicateFileSectors(self, diskIndex, sectors, completed, _ctx=None):
            return _M_VpsAgent.Backup._op_PostDuplicateFileSectors.invoke(self, ((diskIndex, sectors, completed), _ctx))

        def begin_PostDuplicateFileSectors(self, diskIndex, sectors, completed, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Backup._op_PostDuplicateFileSectors.begin(self, ((diskIndex, sectors, completed), _response, _ex, _sent, _ctx))

        def end_PostDuplicateFileSectors(self, _r):
            return _M_VpsAgent.Backup._op_PostDuplicateFileSectors.end(self, _r)

        def PostCurrentFileList(self, bitmap, completed, _ctx=None):
            return _M_VpsAgent.Backup._op_PostCurrentFileList.invoke(self, ((bitmap, completed), _ctx))

        def begin_PostCurrentFileList(self, bitmap, completed, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Backup._op_PostCurrentFileList.begin(self, ((bitmap, completed), _response, _ex, _sent, _ctx))

        def end_PostCurrentFileList(self, _r):
            return _M_VpsAgent.Backup._op_PostCurrentFileList.end(self, _r)

        def GetFileListFromDuplicateFilePool(self, _ctx=None):
            return _M_VpsAgent.Backup._op_GetFileListFromDuplicateFilePool.invoke(self, ((), _ctx))

        def begin_GetFileListFromDuplicateFilePool(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Backup._op_GetFileListFromDuplicateFilePool.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetFileListFromDuplicateFilePool(self, _r):
            return _M_VpsAgent.Backup._op_GetFileListFromDuplicateFilePool.end(self, _r)

        def ReportStatus(self, progress, _ctx=None):
            return _M_VpsAgent.Backup._op_ReportStatus.invoke(self, ((progress, ), _ctx))

        def begin_ReportStatus(self, progress, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Backup._op_ReportStatus.begin(self, ((progress, ), _response, _ex, _sent, _ctx))

        def end_ReportStatus(self, _r):
            return _M_VpsAgent.Backup._op_ReportStatus.end(self, _r)

        def Exit(self, code, _ctx=None):
            return _M_VpsAgent.Backup._op_Exit.invoke(self, ((code, ), _ctx))

        def begin_Exit(self, code, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Backup._op_Exit.begin(self, ((code, ), _response, _ex, _sent, _ctx))

        def end_Exit(self, _r):
            return _M_VpsAgent.Backup._op_Exit.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_VpsAgent.BackupPrx.ice_checkedCast(proxy, '::VpsAgent::Backup', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_VpsAgent.BackupPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::VpsAgent::Backup'
        ice_staticId = staticmethod(ice_staticId)

    _M_VpsAgent._t_BackupPrx = IcePy.defineProxy('::VpsAgent::Backup', BackupPrx)

    _M_VpsAgent._t_Backup = IcePy.defineClass('::VpsAgent::Backup', Backup, -1, (), True, False, None, (), ())
    Backup._ice_type = _M_VpsAgent._t_Backup

    Backup._op_PostSectorData = IcePy.Operation('PostSectorData', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_VpsAgent._t_SectorRange, False, 0), ((), _M_VpsAgent._t_BinaryStream, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Backup._op_PostSectorDataEx = IcePy.Operation('PostSectorDataEx', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), _M_VpsAgent._t_SectorRange, False, 0), ((), _M_VpsAgent._t_BinaryStream, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Backup._op_PostSectorDataExV2 = IcePy.Operation('PostSectorDataExV2', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_VpsAgent._t_PostSectors, False, 0), ((), _M_VpsAgent._t_BinaryStream, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Backup._op_PostBakDataExt = IcePy.Operation('PostBakDataExt', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_VpsAgent._t_PostExtDataVector, False, 0),), (), None, (_M_Utils._t_SystemError,))
    Backup._op_GetBakDataExt = IcePy.Operation('GetBakDataExt', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_VpsAgent._t_GetExtDataVector, False, 0),), (((), _M_VpsAgent._t_PostExtDataVector, False, 0),), ((), IcePy._t_bool, False, 0), (_M_Utils._t_SystemError,))
    Backup._op_PostUsedBlockBitmap = IcePy.Operation('PostUsedBlockBitmap', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_VpsAgent._t_BinaryStream, False, 0), ((), IcePy._t_bool, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Backup._op_PostDuplicateFileSectors = IcePy.Operation('PostDuplicateFileSectors', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_IMG._t_DuplicateFileSectors, False, 0), ((), IcePy._t_bool, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Backup._op_PostCurrentFileList = IcePy.Operation('PostCurrentFileList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_VpsAgent._t_BinaryStream, False, 0), ((), IcePy._t_bool, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Backup._op_GetFileListFromDuplicateFilePool = IcePy.Operation('GetFileListFromDuplicateFilePool', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (((), _M_VpsAgent._t_BinaryStream, False, 0),), ((), IcePy._t_bool, False, 0), (_M_Utils._t_SystemError, _M_Utils._t_NeedRetryLaterError))
    Backup._op_ReportStatus = IcePy.Operation('ReportStatus', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_BoxLogic._t_BackupProgress, False, 0),), (), None, (_M_Utils._t_SystemError,))
    Backup._op_Exit = IcePy.Operation('Exit', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_BoxLogic._t_BackupFinishCode, False, 0),), (), None, (_M_Utils._t_SystemError,))

    _M_VpsAgent.Backup = Backup
    del Backup

    _M_VpsAgent.BackupPrx = BackupPrx
    del BackupPrx

if 'Restore' not in _M_VpsAgent.__dict__:
    _M_VpsAgent.Restore = Ice.createTempClass()
    class Restore(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_VpsAgent.Restore:
                raise RuntimeError('VpsAgent.Restore is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::VpsAgent::Restore')

        def ice_id(self, current=None):
            return '::VpsAgent::Restore'

        def ice_staticId():
            return '::VpsAgent::Restore'
        ice_staticId = staticmethod(ice_staticId)

        def getUesdBlockBitmap(self, token, index, current=None):
            pass

        def reportStatus(self, code, msg, debug, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_VpsAgent._t_Restore)

        __repr__ = __str__

    _M_VpsAgent.RestorePrx = Ice.createTempClass()
    class RestorePrx(Ice.ObjectPrx):

        def getUesdBlockBitmap(self, token, index, _ctx=None):
            return _M_VpsAgent.Restore._op_getUesdBlockBitmap.invoke(self, ((token, index), _ctx))

        def begin_getUesdBlockBitmap(self, token, index, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Restore._op_getUesdBlockBitmap.begin(self, ((token, index), _response, _ex, _sent, _ctx))

        def end_getUesdBlockBitmap(self, _r):
            return _M_VpsAgent.Restore._op_getUesdBlockBitmap.end(self, _r)

        def reportStatus(self, code, msg, debug, _ctx=None):
            return _M_VpsAgent.Restore._op_reportStatus.invoke(self, ((code, msg, debug), _ctx))

        def begin_reportStatus(self, code, msg, debug, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Restore._op_reportStatus.begin(self, ((code, msg, debug), _response, _ex, _sent, _ctx))

        def end_reportStatus(self, _r):
            return _M_VpsAgent.Restore._op_reportStatus.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_VpsAgent.RestorePrx.ice_checkedCast(proxy, '::VpsAgent::Restore', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_VpsAgent.RestorePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::VpsAgent::Restore'
        ice_staticId = staticmethod(ice_staticId)

    _M_VpsAgent._t_RestorePrx = IcePy.defineProxy('::VpsAgent::Restore', RestorePrx)

    _M_VpsAgent._t_Restore = IcePy.defineClass('::VpsAgent::Restore', Restore, -1, (), True, False, None, (), ())
    Restore._ice_type = _M_VpsAgent._t_Restore

    Restore._op_getUesdBlockBitmap = IcePy.Operation('getUesdBlockBitmap', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (((), _M_VpsAgent._t_BinaryStream, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    Restore._op_reportStatus = IcePy.Operation('reportStatus', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_BoxLogic._t_RestoreStageCode, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Utils._t_SystemError,))

    _M_VpsAgent.Restore = Restore
    del Restore

    _M_VpsAgent.RestorePrx = RestorePrx
    del RestorePrx

if 'AgentModuleError' not in _M_VpsAgent.__dict__:
    _M_VpsAgent.AgentModuleError = Ice.createTempClass()
    class AgentModuleError(_M_Utils.SystemError):
        """
        关键模块发生错误
        """
        def __init__(self, description='', debug='', rawCode=0, moduleName=''):
            _M_Utils.SystemError.__init__(self, description, debug, rawCode)
            self.moduleName = moduleName

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'VpsAgent::AgentModuleError'

    _M_VpsAgent._t_AgentModuleError = IcePy.defineException('::VpsAgent::AgentModuleError', AgentModuleError, (), False, _M_Utils._t_SystemError, (('moduleName', (), IcePy._t_string, False, 0),))
    AgentModuleError._ice_type = _M_VpsAgent._t_AgentModuleError

    _M_VpsAgent.AgentModuleError = AgentModuleError
    del AgentModuleError

if 'SnapshotName' not in _M_VpsAgent.__dict__:
    _M_VpsAgent.SnapshotName = Ice.createTempClass()
    class SnapshotName(object):
        def __init__(self, diskIndex=0, diskIdent='', snapshot='', startCDP=False, cdpConfig=Ice._struct_marker):
            self.diskIndex = diskIndex
            self.diskIdent = diskIdent
            self.snapshot = snapshot
            self.startCDP = startCDP
            if cdpConfig is Ice._struct_marker:
                self.cdpConfig = _M_BoxLogic.CDPConfig()
            else:
                self.cdpConfig = cdpConfig

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.diskIndex)
            _h = 5 * _h + Ice.getHash(self.diskIdent)
            _h = 5 * _h + Ice.getHash(self.snapshot)
            _h = 5 * _h + Ice.getHash(self.startCDP)
            _h = 5 * _h + Ice.getHash(self.cdpConfig)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_VpsAgent.SnapshotName):
                return NotImplemented
            else:
                if self.diskIndex is None or other.diskIndex is None:
                    if self.diskIndex != other.diskIndex:
                        return (-1 if self.diskIndex is None else 1)
                else:
                    if self.diskIndex < other.diskIndex:
                        return -1
                    elif self.diskIndex > other.diskIndex:
                        return 1
                if self.diskIdent is None or other.diskIdent is None:
                    if self.diskIdent != other.diskIdent:
                        return (-1 if self.diskIdent is None else 1)
                else:
                    if self.diskIdent < other.diskIdent:
                        return -1
                    elif self.diskIdent > other.diskIdent:
                        return 1
                if self.snapshot is None or other.snapshot is None:
                    if self.snapshot != other.snapshot:
                        return (-1 if self.snapshot is None else 1)
                else:
                    if self.snapshot < other.snapshot:
                        return -1
                    elif self.snapshot > other.snapshot:
                        return 1
                if self.startCDP is None or other.startCDP is None:
                    if self.startCDP != other.startCDP:
                        return (-1 if self.startCDP is None else 1)
                else:
                    if self.startCDP < other.startCDP:
                        return -1
                    elif self.startCDP > other.startCDP:
                        return 1
                if self.cdpConfig is None or other.cdpConfig is None:
                    if self.cdpConfig != other.cdpConfig:
                        return (-1 if self.cdpConfig is None else 1)
                else:
                    if self.cdpConfig < other.cdpConfig:
                        return -1
                    elif self.cdpConfig > other.cdpConfig:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_VpsAgent._t_SnapshotName)

        __repr__ = __str__

    _M_VpsAgent._t_SnapshotName = IcePy.defineStruct('::VpsAgent::SnapshotName', SnapshotName, (), (
        ('diskIndex', (), IcePy._t_int),
        ('diskIdent', (), IcePy._t_string),
        ('snapshot', (), IcePy._t_string),
        ('startCDP', (), IcePy._t_bool),
        ('cdpConfig', (), _M_BoxLogic._t_CDPConfig)
    ))

    _M_VpsAgent.SnapshotName = SnapshotName
    del SnapshotName

if '_t_SnapshotNames' not in _M_VpsAgent.__dict__:
    _M_VpsAgent._t_SnapshotNames = IcePy.defineSequence('::VpsAgent::SnapshotNames', (), _M_VpsAgent._t_SnapshotName)

if 'SnapshotConfig' not in _M_VpsAgent.__dict__:
    _M_VpsAgent.SnapshotConfig = Ice.createTempClass()
    class SnapshotConfig(object):
        def __init__(self, diskIndex=0, jsonConfig=''):
            self.diskIndex = diskIndex
            self.jsonConfig = jsonConfig

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.diskIndex)
            _h = 5 * _h + Ice.getHash(self.jsonConfig)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_VpsAgent.SnapshotConfig):
                return NotImplemented
            else:
                if self.diskIndex is None or other.diskIndex is None:
                    if self.diskIndex != other.diskIndex:
                        return (-1 if self.diskIndex is None else 1)
                else:
                    if self.diskIndex < other.diskIndex:
                        return -1
                    elif self.diskIndex > other.diskIndex:
                        return 1
                if self.jsonConfig is None or other.jsonConfig is None:
                    if self.jsonConfig != other.jsonConfig:
                        return (-1 if self.jsonConfig is None else 1)
                else:
                    if self.jsonConfig < other.jsonConfig:
                        return -1
                    elif self.jsonConfig > other.jsonConfig:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_VpsAgent._t_SnapshotConfig)

        __repr__ = __str__

    _M_VpsAgent._t_SnapshotConfig = IcePy.defineStruct('::VpsAgent::SnapshotConfig', SnapshotConfig, (), (
        ('diskIndex', (), IcePy._t_int),
        ('jsonConfig', (), IcePy._t_string)
    ))

    _M_VpsAgent.SnapshotConfig = SnapshotConfig
    del SnapshotConfig

if '_t_SnapshotConfigs' not in _M_VpsAgent.__dict__:
    _M_VpsAgent._t_SnapshotConfigs = IcePy.defineSequence('::VpsAgent::SnapshotConfigs', (), _M_VpsAgent._t_SnapshotConfig)

if 'BackupErrorType' not in _M_VpsAgent.__dict__:
    _M_VpsAgent.BackupErrorType = Ice.createTempClass()
    class BackupErrorType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    BackupErrorType.SystemError = BackupErrorType("SystemError", 1)
    BackupErrorType.SbdError = BackupErrorType("SbdError", 2)
    BackupErrorType.NetError = BackupErrorType("NetError", 3)
    BackupErrorType.DriverError = BackupErrorType("DriverError", 4)
    BackupErrorType._enumerators = { 1:BackupErrorType.SystemError, 2:BackupErrorType.SbdError, 3:BackupErrorType.NetError, 4:BackupErrorType.DriverError }

    _M_VpsAgent._t_BackupErrorType = IcePy.defineEnum('::VpsAgent::BackupErrorType', BackupErrorType, (), BackupErrorType._enumerators)

    _M_VpsAgent.BackupErrorType = BackupErrorType
    del BackupErrorType

if 'AgentReceiver' not in _M_VpsAgent.__dict__:
    _M_VpsAgent.AgentReceiver = Ice.createTempClass()
    class AgentReceiver(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_VpsAgent.AgentReceiver:
                raise RuntimeError('VpsAgent.AgentReceiver is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::VpsAgent::AgentReceiver')

        def ice_id(self, current=None):
            return '::VpsAgent::AgentReceiver'

        def ice_staticId():
            return '::VpsAgent::AgentReceiver'
        ice_staticId = staticmethod(ice_staticId)

        def check(self, current=None):
            pass

        def JsonFunc(self, InputParam, current=None):
            pass

        def QuerySystemInfo(self, current=None):
            pass

        def QueryDisksStatus(self, current=None):
            pass

        def DoBackup(self, snapshots, prx, current=None):
            pass

        def DoBackupEx(self, snapshots, configs, prx, jsonConfig, current=None):
            pass

        def GetLastBackupError(self, current=None):
            pass

        def GetLastCdpError(self, current=None):
            pass

        def StartAgentPe(self, current=None):
            pass

        def CancelBackup(self, current=None):
            pass

        def NotifyHighPriority(self, diskIdent, byteOffset, current=None):
            pass

        def GetStatus(self, current=None):
            pass

        def StopCdpStatus(self, current=None):
            pass

        def PackDebugFiles(self, current=None):
            pass

        def FetchDebugPacket(self, index, current=None):
            pass

        def DoRestore(self, json, prx, current=None):
            pass

        def CancelRestore(self, current=None):
            pass

        def GetServiceList(self, current=None):
            pass

        def GetTcpListenList(self, portList, current=None):
            pass

        def StartServiceSync(self, ServiceName, current=None):
            pass

        def StopServiceSync(self, ServiceName, current=None):
            pass

        def StartHttpDServiceAsync(self, port, bs, current=None):
            pass

        def GetHttpDServiceListSync(self, current=None):
            pass

        def StopAllHttpDServiceSync(self, current=None):
            pass

        def testdisk(self, diskIndex, sectorOffset, numberOfSectors, current=None):
            pass

        def readdisk(self, diskIndex, sectorOffset, numberOfSectors, current=None):
            pass

        def writedisk(self, diskIndex, sectorOffset, numberOfSector, bs, current=None):
            pass

        def JsonFuncV2(self, inputJson, inputBs, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_VpsAgent._t_AgentReceiver)

        __repr__ = __str__

    _M_VpsAgent.AgentReceiverPrx = Ice.createTempClass()
    class AgentReceiverPrx(Ice.ObjectPrx):

        def check(self, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_check.invoke(self, ((), _ctx))

        def begin_check(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_check.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_check(self, _r):
            return _M_VpsAgent.AgentReceiver._op_check.end(self, _r)

        def JsonFunc(self, InputParam, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_JsonFunc.invoke(self, ((InputParam, ), _ctx))

        def begin_JsonFunc(self, InputParam, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_JsonFunc.begin(self, ((InputParam, ), _response, _ex, _sent, _ctx))

        def end_JsonFunc(self, _r):
            return _M_VpsAgent.AgentReceiver._op_JsonFunc.end(self, _r)

        def QuerySystemInfo(self, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_QuerySystemInfo.invoke(self, ((), _ctx))

        def begin_QuerySystemInfo(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_QuerySystemInfo.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_QuerySystemInfo(self, _r):
            return _M_VpsAgent.AgentReceiver._op_QuerySystemInfo.end(self, _r)

        def QueryDisksStatus(self, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_QueryDisksStatus.invoke(self, ((), _ctx))

        def begin_QueryDisksStatus(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_QueryDisksStatus.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_QueryDisksStatus(self, _r):
            return _M_VpsAgent.AgentReceiver._op_QueryDisksStatus.end(self, _r)

        def DoBackup(self, snapshots, prx, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_DoBackup.invoke(self, ((snapshots, prx), _ctx))

        def begin_DoBackup(self, snapshots, prx, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_DoBackup.begin(self, ((snapshots, prx), _response, _ex, _sent, _ctx))

        def end_DoBackup(self, _r):
            return _M_VpsAgent.AgentReceiver._op_DoBackup.end(self, _r)

        def DoBackupEx(self, snapshots, configs, prx, jsonConfig, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_DoBackupEx.invoke(self, ((snapshots, configs, prx, jsonConfig), _ctx))

        def begin_DoBackupEx(self, snapshots, configs, prx, jsonConfig, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_DoBackupEx.begin(self, ((snapshots, configs, prx, jsonConfig), _response, _ex, _sent, _ctx))

        def end_DoBackupEx(self, _r):
            return _M_VpsAgent.AgentReceiver._op_DoBackupEx.end(self, _r)

        def GetLastBackupError(self, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_GetLastBackupError.invoke(self, ((), _ctx))

        def begin_GetLastBackupError(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_GetLastBackupError.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetLastBackupError(self, _r):
            return _M_VpsAgent.AgentReceiver._op_GetLastBackupError.end(self, _r)

        def GetLastCdpError(self, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_GetLastCdpError.invoke(self, ((), _ctx))

        def begin_GetLastCdpError(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_GetLastCdpError.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetLastCdpError(self, _r):
            return _M_VpsAgent.AgentReceiver._op_GetLastCdpError.end(self, _r)

        def StartAgentPe(self, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_StartAgentPe.invoke(self, ((), _ctx))

        def begin_StartAgentPe(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_StartAgentPe.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_StartAgentPe(self, _r):
            return _M_VpsAgent.AgentReceiver._op_StartAgentPe.end(self, _r)

        def CancelBackup(self, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_CancelBackup.invoke(self, ((), _ctx))

        def begin_CancelBackup(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_CancelBackup.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_CancelBackup(self, _r):
            return _M_VpsAgent.AgentReceiver._op_CancelBackup.end(self, _r)

        def NotifyHighPriority(self, diskIdent, byteOffset, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_NotifyHighPriority.invoke(self, ((diskIdent, byteOffset), _ctx))

        def begin_NotifyHighPriority(self, diskIdent, byteOffset, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_NotifyHighPriority.begin(self, ((diskIdent, byteOffset), _response, _ex, _sent, _ctx))

        def end_NotifyHighPriority(self, _r):
            return _M_VpsAgent.AgentReceiver._op_NotifyHighPriority.end(self, _r)

        def GetStatus(self, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_GetStatus.invoke(self, ((), _ctx))

        def begin_GetStatus(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_GetStatus.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetStatus(self, _r):
            return _M_VpsAgent.AgentReceiver._op_GetStatus.end(self, _r)

        def StopCdpStatus(self, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_StopCdpStatus.invoke(self, ((), _ctx))

        def begin_StopCdpStatus(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_StopCdpStatus.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_StopCdpStatus(self, _r):
            return _M_VpsAgent.AgentReceiver._op_StopCdpStatus.end(self, _r)

        def PackDebugFiles(self, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_PackDebugFiles.invoke(self, ((), _ctx))

        def begin_PackDebugFiles(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_PackDebugFiles.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_PackDebugFiles(self, _r):
            return _M_VpsAgent.AgentReceiver._op_PackDebugFiles.end(self, _r)

        def FetchDebugPacket(self, index, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_FetchDebugPacket.invoke(self, ((index, ), _ctx))

        def begin_FetchDebugPacket(self, index, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_FetchDebugPacket.begin(self, ((index, ), _response, _ex, _sent, _ctx))

        def end_FetchDebugPacket(self, _r):
            return _M_VpsAgent.AgentReceiver._op_FetchDebugPacket.end(self, _r)

        def DoRestore(self, json, prx, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_DoRestore.invoke(self, ((json, prx), _ctx))

        def begin_DoRestore(self, json, prx, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_DoRestore.begin(self, ((json, prx), _response, _ex, _sent, _ctx))

        def end_DoRestore(self, _r):
            return _M_VpsAgent.AgentReceiver._op_DoRestore.end(self, _r)

        def CancelRestore(self, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_CancelRestore.invoke(self, ((), _ctx))

        def begin_CancelRestore(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_CancelRestore.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_CancelRestore(self, _r):
            return _M_VpsAgent.AgentReceiver._op_CancelRestore.end(self, _r)

        def GetServiceList(self, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_GetServiceList.invoke(self, ((), _ctx))

        def begin_GetServiceList(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_GetServiceList.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetServiceList(self, _r):
            return _M_VpsAgent.AgentReceiver._op_GetServiceList.end(self, _r)

        def GetTcpListenList(self, portList, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_GetTcpListenList.invoke(self, ((portList, ), _ctx))

        def begin_GetTcpListenList(self, portList, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_GetTcpListenList.begin(self, ((portList, ), _response, _ex, _sent, _ctx))

        def end_GetTcpListenList(self, _r):
            return _M_VpsAgent.AgentReceiver._op_GetTcpListenList.end(self, _r)

        def StartServiceSync(self, ServiceName, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_StartServiceSync.invoke(self, ((ServiceName, ), _ctx))

        def begin_StartServiceSync(self, ServiceName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_StartServiceSync.begin(self, ((ServiceName, ), _response, _ex, _sent, _ctx))

        def end_StartServiceSync(self, _r):
            return _M_VpsAgent.AgentReceiver._op_StartServiceSync.end(self, _r)

        def StopServiceSync(self, ServiceName, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_StopServiceSync.invoke(self, ((ServiceName, ), _ctx))

        def begin_StopServiceSync(self, ServiceName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_StopServiceSync.begin(self, ((ServiceName, ), _response, _ex, _sent, _ctx))

        def end_StopServiceSync(self, _r):
            return _M_VpsAgent.AgentReceiver._op_StopServiceSync.end(self, _r)

        def StartHttpDServiceAsync(self, port, bs, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_StartHttpDServiceAsync.invoke(self, ((port, bs), _ctx))

        def begin_StartHttpDServiceAsync(self, port, bs, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_StartHttpDServiceAsync.begin(self, ((port, bs), _response, _ex, _sent, _ctx))

        def end_StartHttpDServiceAsync(self, _r):
            return _M_VpsAgent.AgentReceiver._op_StartHttpDServiceAsync.end(self, _r)

        def GetHttpDServiceListSync(self, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_GetHttpDServiceListSync.invoke(self, ((), _ctx))

        def begin_GetHttpDServiceListSync(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_GetHttpDServiceListSync.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetHttpDServiceListSync(self, _r):
            return _M_VpsAgent.AgentReceiver._op_GetHttpDServiceListSync.end(self, _r)

        def StopAllHttpDServiceSync(self, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_StopAllHttpDServiceSync.invoke(self, ((), _ctx))

        def begin_StopAllHttpDServiceSync(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_StopAllHttpDServiceSync.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_StopAllHttpDServiceSync(self, _r):
            return _M_VpsAgent.AgentReceiver._op_StopAllHttpDServiceSync.end(self, _r)

        def testdisk(self, diskIndex, sectorOffset, numberOfSectors, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_testdisk.invoke(self, ((diskIndex, sectorOffset, numberOfSectors), _ctx))

        def begin_testdisk(self, diskIndex, sectorOffset, numberOfSectors, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_testdisk.begin(self, ((diskIndex, sectorOffset, numberOfSectors), _response, _ex, _sent, _ctx))

        def end_testdisk(self, _r):
            return _M_VpsAgent.AgentReceiver._op_testdisk.end(self, _r)

        def readdisk(self, diskIndex, sectorOffset, numberOfSectors, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_readdisk.invoke(self, ((diskIndex, sectorOffset, numberOfSectors), _ctx))

        def begin_readdisk(self, diskIndex, sectorOffset, numberOfSectors, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_readdisk.begin(self, ((diskIndex, sectorOffset, numberOfSectors), _response, _ex, _sent, _ctx))

        def end_readdisk(self, _r):
            return _M_VpsAgent.AgentReceiver._op_readdisk.end(self, _r)

        def writedisk(self, diskIndex, sectorOffset, numberOfSector, bs, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_writedisk.invoke(self, ((diskIndex, sectorOffset, numberOfSector, bs), _ctx))

        def begin_writedisk(self, diskIndex, sectorOffset, numberOfSector, bs, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_writedisk.begin(self, ((diskIndex, sectorOffset, numberOfSector, bs), _response, _ex, _sent, _ctx))

        def end_writedisk(self, _r):
            return _M_VpsAgent.AgentReceiver._op_writedisk.end(self, _r)

        def JsonFuncV2(self, inputJson, inputBs, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_JsonFuncV2.invoke(self, ((inputJson, inputBs), _ctx))

        def begin_JsonFuncV2(self, inputJson, inputBs, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.AgentReceiver._op_JsonFuncV2.begin(self, ((inputJson, inputBs), _response, _ex, _sent, _ctx))

        def end_JsonFuncV2(self, _r):
            return _M_VpsAgent.AgentReceiver._op_JsonFuncV2.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_VpsAgent.AgentReceiverPrx.ice_checkedCast(proxy, '::VpsAgent::AgentReceiver', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_VpsAgent.AgentReceiverPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::VpsAgent::AgentReceiver'
        ice_staticId = staticmethod(ice_staticId)

    _M_VpsAgent._t_AgentReceiverPrx = IcePy.defineProxy('::VpsAgent::AgentReceiver', AgentReceiverPrx)

    _M_VpsAgent._t_AgentReceiver = IcePy.defineClass('::VpsAgent::AgentReceiver', AgentReceiver, -1, (), True, False, None, (), ())
    AgentReceiver._ice_type = _M_VpsAgent._t_AgentReceiver

    AgentReceiver._op_check = IcePy.Operation('check', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, (_M_VpsAgent._t_AgentModuleError,))
    AgentReceiver._op_JsonFunc = IcePy.Operation('JsonFunc', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    AgentReceiver._op_QuerySystemInfo = IcePy.Operation('QuerySystemInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    AgentReceiver._op_QueryDisksStatus = IcePy.Operation('QueryDisksStatus', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (((), _M_BoxLogic._t_Disks, False, 0), ((), IcePy._t_string, True, 1)), None, (_M_Utils._t_SystemError,))
    AgentReceiver._op_DoBackup = IcePy.Operation('DoBackup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_VpsAgent._t_SnapshotNames, False, 0), ((), _M_VpsAgent._t_BackupPrx, False, 0)), (), None, (_M_Utils._t_SystemError,))
    AgentReceiver._op_DoBackupEx = IcePy.Operation('DoBackupEx', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_VpsAgent._t_SnapshotNames, False, 0), ((), _M_VpsAgent._t_SnapshotConfigs, False, 0), ((), _M_VpsAgent._t_BackupPrx, False, 0), ((), IcePy._t_string, True, 1)), (), None, (_M_Utils._t_SystemError,))
    AgentReceiver._op_GetLastBackupError = IcePy.Operation('GetLastBackupError', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    AgentReceiver._op_GetLastCdpError = IcePy.Operation('GetLastCdpError', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    AgentReceiver._op_StartAgentPe = IcePy.Operation('StartAgentPe', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (((), IcePy._t_string, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    AgentReceiver._op_CancelBackup = IcePy.Operation('CancelBackup', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, (_M_Utils._t_SystemError,))
    AgentReceiver._op_NotifyHighPriority = IcePy.Operation('NotifyHighPriority', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0)), (), None, (_M_Utils._t_SystemError,))
    AgentReceiver._op_GetStatus = IcePy.Operation('GetStatus', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_BoxLogic._t_AgentStatus, False, 0), ())
    AgentReceiver._op_StopCdpStatus = IcePy.Operation('StopCdpStatus', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())
    AgentReceiver._op_PackDebugFiles = IcePy.Operation('PackDebugFiles', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    AgentReceiver._op_FetchDebugPacket = IcePy.Operation('FetchDebugPacket', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (((), _M_VpsAgent._t_BinaryStream, False, 0),), ((), IcePy._t_int, False, 0), ())
    AgentReceiver._op_DoRestore = IcePy.Operation('DoRestore', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_VpsAgent._t_RestorePrx, False, 0)), (), None, (_M_Utils._t_SystemError,))
    AgentReceiver._op_CancelRestore = IcePy.Operation('CancelRestore', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, (_M_Utils._t_SystemError,))
    AgentReceiver._op_GetServiceList = IcePy.Operation('GetServiceList', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (((), _M_Box._t_ServiceInfoStatusS, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    AgentReceiver._op_GetTcpListenList = IcePy.Operation('GetTcpListenList', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_Box._t_vectorINT, False, 0),), (((), _M_Box._t_vectorINT, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    AgentReceiver._op_StartServiceSync = IcePy.Operation('StartServiceSync', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    AgentReceiver._op_StopServiceSync = IcePy.Operation('StopServiceSync', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    AgentReceiver._op_StartHttpDServiceAsync = IcePy.Operation('StartHttpDServiceAsync', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_VpsAgent._t_BinaryStream, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    AgentReceiver._op_GetHttpDServiceListSync = IcePy.Operation('GetHttpDServiceListSync', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (((), _M_Box._t_vectorINT, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    AgentReceiver._op_StopAllHttpDServiceSync = IcePy.Operation('StopAllHttpDServiceSync', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    AgentReceiver._op_testdisk = IcePy.Operation('testdisk', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_short, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    AgentReceiver._op_readdisk = IcePy.Operation('readdisk', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_short, False, 0)), (((), _M_VpsAgent._t_BinaryStream, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    AgentReceiver._op_writedisk = IcePy.Operation('writedisk', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_short, False, 0), ((), _M_VpsAgent._t_BinaryStream, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    AgentReceiver._op_JsonFuncV2 = IcePy.Operation('JsonFuncV2', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_VpsAgent._t_BinaryStream, False, 0)), (((), _M_VpsAgent._t_BinaryStream, False, 0),), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))

    _M_VpsAgent.AgentReceiver = AgentReceiver
    del AgentReceiver

    _M_VpsAgent.AgentReceiverPrx = AgentReceiverPrx
    del AgentReceiverPrx

if 'Session' not in _M_VpsAgent.__dict__:
    _M_VpsAgent.Session = Ice.createTempClass()
    class Session(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_VpsAgent.Session:
                raise RuntimeError('VpsAgent.Session is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::VpsAgent::Session')

        def ice_id(self, current=None):
            return '::VpsAgent::Session'

        def ice_staticId():
            return '::VpsAgent::Session'
        ice_staticId = staticmethod(ice_staticId)

        def QueryName(self, current=None):
            pass

        def QueryIdentity(self, current=None):
            pass

        def QuerySoftIdent(self, current=None):
            pass

        def QueryJsonData(self, inputJson, current=None):
            pass

        def destroy(self, current=None):
            pass

        def initiateReceiver(self, ident, current=None):
            pass

        def refresh(self, current=None):
            pass

        def reportRestoreStatus(self, token, progress, finished, current=None):
            pass

        def queryLastCdpDetailByRestoreToken(self, token, current=None):
            pass

        def queryLastCdpDetailByCdpToken(self, token, current=None):
            pass

        def setPreReadBitmap(self, token, index, bitmap, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_VpsAgent._t_Session)

        __repr__ = __str__

    _M_VpsAgent.SessionPrx = Ice.createTempClass()
    class SessionPrx(Ice.ObjectPrx):

        def QueryName(self, _ctx=None):
            return _M_VpsAgent.Session._op_QueryName.invoke(self, ((), _ctx))

        def begin_QueryName(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Session._op_QueryName.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_QueryName(self, _r):
            return _M_VpsAgent.Session._op_QueryName.end(self, _r)

        def QueryIdentity(self, _ctx=None):
            return _M_VpsAgent.Session._op_QueryIdentity.invoke(self, ((), _ctx))

        def begin_QueryIdentity(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Session._op_QueryIdentity.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_QueryIdentity(self, _r):
            return _M_VpsAgent.Session._op_QueryIdentity.end(self, _r)

        def QuerySoftIdent(self, _ctx=None):
            return _M_VpsAgent.Session._op_QuerySoftIdent.invoke(self, ((), _ctx))

        def begin_QuerySoftIdent(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Session._op_QuerySoftIdent.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_QuerySoftIdent(self, _r):
            return _M_VpsAgent.Session._op_QuerySoftIdent.end(self, _r)

        def QueryJsonData(self, inputJson, _ctx=None):
            return _M_VpsAgent.Session._op_QueryJsonData.invoke(self, ((inputJson, ), _ctx))

        def begin_QueryJsonData(self, inputJson, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Session._op_QueryJsonData.begin(self, ((inputJson, ), _response, _ex, _sent, _ctx))

        def end_QueryJsonData(self, _r):
            return _M_VpsAgent.Session._op_QueryJsonData.end(self, _r)

        def destroy(self, _ctx=None):
            return _M_VpsAgent.Session._op_destroy.invoke(self, ((), _ctx))

        def begin_destroy(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Session._op_destroy.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_destroy(self, _r):
            return _M_VpsAgent.Session._op_destroy.end(self, _r)

        def initiateReceiver(self, ident, _ctx=None):
            return _M_VpsAgent.Session._op_initiateReceiver.invoke(self, ((ident, ), _ctx))

        def begin_initiateReceiver(self, ident, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Session._op_initiateReceiver.begin(self, ((ident, ), _response, _ex, _sent, _ctx))

        def end_initiateReceiver(self, _r):
            return _M_VpsAgent.Session._op_initiateReceiver.end(self, _r)

        def refresh(self, _ctx=None):
            return _M_VpsAgent.Session._op_refresh.invoke(self, ((), _ctx))

        def begin_refresh(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Session._op_refresh.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_refresh(self, _r):
            return _M_VpsAgent.Session._op_refresh.end(self, _r)

        def reportRestoreStatus(self, token, progress, finished, _ctx=None):
            return _M_VpsAgent.Session._op_reportRestoreStatus.invoke(self, ((token, progress, finished), _ctx))

        def begin_reportRestoreStatus(self, token, progress, finished, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Session._op_reportRestoreStatus.begin(self, ((token, progress, finished), _response, _ex, _sent, _ctx))

        def end_reportRestoreStatus(self, _r):
            return _M_VpsAgent.Session._op_reportRestoreStatus.end(self, _r)

        def queryLastCdpDetailByRestoreToken(self, token, _ctx=None):
            return _M_VpsAgent.Session._op_queryLastCdpDetailByRestoreToken.invoke(self, ((token, ), _ctx))

        def begin_queryLastCdpDetailByRestoreToken(self, token, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Session._op_queryLastCdpDetailByRestoreToken.begin(self, ((token, ), _response, _ex, _sent, _ctx))

        def end_queryLastCdpDetailByRestoreToken(self, _r):
            return _M_VpsAgent.Session._op_queryLastCdpDetailByRestoreToken.end(self, _r)

        def queryLastCdpDetailByCdpToken(self, token, _ctx=None):
            return _M_VpsAgent.Session._op_queryLastCdpDetailByCdpToken.invoke(self, ((token, ), _ctx))

        def begin_queryLastCdpDetailByCdpToken(self, token, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Session._op_queryLastCdpDetailByCdpToken.begin(self, ((token, ), _response, _ex, _sent, _ctx))

        def end_queryLastCdpDetailByCdpToken(self, _r):
            return _M_VpsAgent.Session._op_queryLastCdpDetailByCdpToken.end(self, _r)

        def setPreReadBitmap(self, token, index, bitmap, _ctx=None):
            return _M_VpsAgent.Session._op_setPreReadBitmap.invoke(self, ((token, index, bitmap), _ctx))

        def begin_setPreReadBitmap(self, token, index, bitmap, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.Session._op_setPreReadBitmap.begin(self, ((token, index, bitmap), _response, _ex, _sent, _ctx))

        def end_setPreReadBitmap(self, _r):
            return _M_VpsAgent.Session._op_setPreReadBitmap.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_VpsAgent.SessionPrx.ice_checkedCast(proxy, '::VpsAgent::Session', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_VpsAgent.SessionPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::VpsAgent::Session'
        ice_staticId = staticmethod(ice_staticId)

    _M_VpsAgent._t_SessionPrx = IcePy.defineProxy('::VpsAgent::Session', SessionPrx)

    _M_VpsAgent._t_Session = IcePy.defineClass('::VpsAgent::Session', Session, -1, (), True, False, None, (), ())
    Session._ice_type = _M_VpsAgent._t_Session

    Session._op_QueryName = IcePy.Operation('QueryName', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Session._op_QueryIdentity = IcePy.Operation('QueryIdentity', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Session._op_QuerySoftIdent = IcePy.Operation('QuerySoftIdent', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Session._op_QueryJsonData = IcePy.Operation('QueryJsonData', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    Session._op_destroy = IcePy.Operation('destroy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Session._op_initiateReceiver = IcePy.Operation('initiateReceiver', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_Identity, False, 0),), (), None, (_M_Utils._t_SystemError,))
    Session._op_refresh = IcePy.Operation('refresh', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())
    Session._op_reportRestoreStatus = IcePy.Operation('reportRestoreStatus', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_BoxLogic._t_RestoreProgress, False, 0), ((), IcePy._t_bool, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Session._op_queryLastCdpDetailByRestoreToken = IcePy.Operation('queryLastCdpDetailByRestoreToken', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_BoxLogic._t_LastCdpDetail, False, 0), (_M_Utils._t_SystemError,))
    Session._op_queryLastCdpDetailByCdpToken = IcePy.Operation('queryLastCdpDetailByCdpToken', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (((), _M_BoxLogic._t_LastCdpDetail, False, 0),), ((), IcePy._t_bool, False, 0), (_M_Utils._t_SystemError,))
    Session._op_setPreReadBitmap = IcePy.Operation('setPreReadBitmap', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0), ((), _M_VpsAgent._t_BinaryStream, False, 0)), (), None, (_M_Utils._t_SystemError,))

    _M_VpsAgent.Session = Session
    del Session

    _M_VpsAgent.SessionPrx = SessionPrx
    del SessionPrx

if 'AgentIdentification' not in _M_VpsAgent.__dict__:
    _M_VpsAgent.AgentIdentification = Ice.createTempClass()
    class AgentIdentification(object):
        def __init__(self, ident=Ice._struct_marker, Identity=''):
            if ident is Ice._struct_marker:
                self.ident = _M_BoxLogic.AgentIdentification()
            else:
                self.ident = ident
            self.Identity = Identity

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.ident)
            _h = 5 * _h + Ice.getHash(self.Identity)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_VpsAgent.AgentIdentification):
                return NotImplemented
            else:
                if self.ident is None or other.ident is None:
                    if self.ident != other.ident:
                        return (-1 if self.ident is None else 1)
                else:
                    if self.ident < other.ident:
                        return -1
                    elif self.ident > other.ident:
                        return 1
                if self.Identity is None or other.Identity is None:
                    if self.Identity != other.Identity:
                        return (-1 if self.Identity is None else 1)
                else:
                    if self.Identity < other.Identity:
                        return -1
                    elif self.Identity > other.Identity:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_VpsAgent._t_AgentIdentification)

        __repr__ = __str__

    _M_VpsAgent._t_AgentIdentification = IcePy.defineStruct('::VpsAgent::AgentIdentification', AgentIdentification, (), (
        ('ident', (), _M_BoxLogic._t_AgentIdentification),
        ('Identity', (), IcePy._t_string)
    ))

    _M_VpsAgent.AgentIdentification = AgentIdentification
    del AgentIdentification

if 'SessionFactory' not in _M_VpsAgent.__dict__:
    _M_VpsAgent.SessionFactory = Ice.createTempClass()
    class SessionFactory(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_VpsAgent.SessionFactory:
                raise RuntimeError('VpsAgent.SessionFactory is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::VpsAgent::SessionFactory')

        def ice_id(self, current=None):
            return '::VpsAgent::SessionFactory'

        def ice_staticId():
            return '::VpsAgent::SessionFactory'
        ice_staticId = staticmethod(ice_staticId)

        def create(self, id, info, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_VpsAgent._t_SessionFactory)

        __repr__ = __str__

    _M_VpsAgent.SessionFactoryPrx = Ice.createTempClass()
    class SessionFactoryPrx(Ice.ObjectPrx):

        def create(self, id, info, _ctx=None):
            return _M_VpsAgent.SessionFactory._op_create.invoke(self, ((id, info), _ctx))

        def begin_create(self, id, info, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_VpsAgent.SessionFactory._op_create.begin(self, ((id, info), _response, _ex, _sent, _ctx))

        def end_create(self, _r):
            return _M_VpsAgent.SessionFactory._op_create.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_VpsAgent.SessionFactoryPrx.ice_checkedCast(proxy, '::VpsAgent::SessionFactory', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_VpsAgent.SessionFactoryPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::VpsAgent::SessionFactory'
        ice_staticId = staticmethod(ice_staticId)

    _M_VpsAgent._t_SessionFactoryPrx = IcePy.defineProxy('::VpsAgent::SessionFactory', SessionFactoryPrx)

    _M_VpsAgent._t_SessionFactory = IcePy.defineClass('::VpsAgent::SessionFactory', SessionFactory, -1, (), True, False, None, (), ())
    SessionFactory._ice_type = _M_VpsAgent._t_SessionFactory

    SessionFactory._op_create = IcePy.Operation('create', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_VpsAgent._t_AgentIdentification, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_VpsAgent._t_SessionPrx, False, 0), (_M_Utils._t_SystemError,))

    _M_VpsAgent.SessionFactory = SessionFactory
    del SessionFactory

    _M_VpsAgent.SessionFactoryPrx = SessionFactoryPrx
    del SessionFactoryPrx

# End of module VpsAgent

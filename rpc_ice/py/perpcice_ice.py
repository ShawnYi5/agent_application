# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.4
#
# <auto-generated>
#
# Generated from file `perpcice.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import Ice_Identity_ice
import utils_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module Utils
_M_Utils = Ice.openModule('Utils')

# Start of module PerpcIce
_M_PerpcIce = Ice.openModule('PerpcIce')
__name__ = 'PerpcIce'

if '_t_BinaryStream' not in _M_PerpcIce.__dict__:
    _M_PerpcIce._t_BinaryStream = IcePy.defineSequence('::PerpcIce::BinaryStream', (), IcePy._t_byte)

if 'ExcludeBrokenBlock' not in _M_PerpcIce.__dict__:
    _M_PerpcIce.ExcludeBrokenBlock = Ice.createTempClass()
    class ExcludeBrokenBlock(object):
        def __init__(self, diskToken='', blockOffset=0, bitmap=None):
            self.diskToken = diskToken
            self.blockOffset = blockOffset
            self.bitmap = bitmap

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.diskToken)
            _h = 5 * _h + Ice.getHash(self.blockOffset)
            if self.bitmap:
                for _i0 in self.bitmap:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_PerpcIce.ExcludeBrokenBlock):
                return NotImplemented
            else:
                if self.diskToken is None or other.diskToken is None:
                    if self.diskToken != other.diskToken:
                        return (-1 if self.diskToken is None else 1)
                else:
                    if self.diskToken < other.diskToken:
                        return -1
                    elif self.diskToken > other.diskToken:
                        return 1
                if self.blockOffset is None or other.blockOffset is None:
                    if self.blockOffset != other.blockOffset:
                        return (-1 if self.blockOffset is None else 1)
                else:
                    if self.blockOffset < other.blockOffset:
                        return -1
                    elif self.blockOffset > other.blockOffset:
                        return 1
                if self.bitmap is None or other.bitmap is None:
                    if self.bitmap != other.bitmap:
                        return (-1 if self.bitmap is None else 1)
                else:
                    if self.bitmap < other.bitmap:
                        return -1
                    elif self.bitmap > other.bitmap:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_PerpcIce._t_ExcludeBrokenBlock)

        __repr__ = __str__

    _M_PerpcIce._t_ExcludeBrokenBlock = IcePy.defineStruct('::PerpcIce::ExcludeBrokenBlock', ExcludeBrokenBlock, (), (
        ('diskToken', (), IcePy._t_string),
        ('blockOffset', (), IcePy._t_long),
        ('bitmap', (), _M_PerpcIce._t_BinaryStream)
    ))

    _M_PerpcIce.ExcludeBrokenBlock = ExcludeBrokenBlock
    del ExcludeBrokenBlock

if '_t_ExcludeBrokenBlocks' not in _M_PerpcIce.__dict__:
    _M_PerpcIce._t_ExcludeBrokenBlocks = IcePy.defineSequence('::PerpcIce::ExcludeBrokenBlocks', (), _M_PerpcIce._t_ExcludeBrokenBlock)

if 'ExcludeBlockRun' not in _M_PerpcIce.__dict__:
    _M_PerpcIce.ExcludeBlockRun = Ice.createTempClass()
    class ExcludeBlockRun(object):
        def __init__(self, diskToken='', blockOffset=0, blockCount=0):
            self.diskToken = diskToken
            self.blockOffset = blockOffset
            self.blockCount = blockCount

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.diskToken)
            _h = 5 * _h + Ice.getHash(self.blockOffset)
            _h = 5 * _h + Ice.getHash(self.blockCount)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_PerpcIce.ExcludeBlockRun):
                return NotImplemented
            else:
                if self.diskToken is None or other.diskToken is None:
                    if self.diskToken != other.diskToken:
                        return (-1 if self.diskToken is None else 1)
                else:
                    if self.diskToken < other.diskToken:
                        return -1
                    elif self.diskToken > other.diskToken:
                        return 1
                if self.blockOffset is None or other.blockOffset is None:
                    if self.blockOffset != other.blockOffset:
                        return (-1 if self.blockOffset is None else 1)
                else:
                    if self.blockOffset < other.blockOffset:
                        return -1
                    elif self.blockOffset > other.blockOffset:
                        return 1
                if self.blockCount is None or other.blockCount is None:
                    if self.blockCount != other.blockCount:
                        return (-1 if self.blockCount is None else 1)
                else:
                    if self.blockCount < other.blockCount:
                        return -1
                    elif self.blockCount > other.blockCount:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_PerpcIce._t_ExcludeBlockRun)

        __repr__ = __str__

    _M_PerpcIce._t_ExcludeBlockRun = IcePy.defineStruct('::PerpcIce::ExcludeBlockRun', ExcludeBlockRun, (), (
        ('diskToken', (), IcePy._t_string),
        ('blockOffset', (), IcePy._t_long),
        ('blockCount', (), IcePy._t_long)
    ))

    _M_PerpcIce.ExcludeBlockRun = ExcludeBlockRun
    del ExcludeBlockRun

if '_t_ExcludeBlockRuns' not in _M_PerpcIce.__dict__:
    _M_PerpcIce._t_ExcludeBlockRuns = IcePy.defineSequence('::PerpcIce::ExcludeBlockRuns', (), _M_PerpcIce._t_ExcludeBlockRun)

if 'PeDiskInfo' not in _M_PerpcIce.__dict__:
    _M_PerpcIce.PeDiskInfo = Ice.createTempClass()
    class PeDiskInfo(object):
        def __init__(self, diskID=0, diskSecCount=0):
            self.diskID = diskID
            self.diskSecCount = diskSecCount

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.diskID)
            _h = 5 * _h + Ice.getHash(self.diskSecCount)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_PerpcIce.PeDiskInfo):
                return NotImplemented
            else:
                if self.diskID is None or other.diskID is None:
                    if self.diskID != other.diskID:
                        return (-1 if self.diskID is None else 1)
                else:
                    if self.diskID < other.diskID:
                        return -1
                    elif self.diskID > other.diskID:
                        return 1
                if self.diskSecCount is None or other.diskSecCount is None:
                    if self.diskSecCount != other.diskSecCount:
                        return (-1 if self.diskSecCount is None else 1)
                else:
                    if self.diskSecCount < other.diskSecCount:
                        return -1
                    elif self.diskSecCount > other.diskSecCount:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_PerpcIce._t_PeDiskInfo)

        __repr__ = __str__

    _M_PerpcIce._t_PeDiskInfo = IcePy.defineStruct('::PerpcIce::PeDiskInfo', PeDiskInfo, (), (
        ('diskID', (), IcePy._t_int),
        ('diskSecCount', (), IcePy._t_long)
    ))

    _M_PerpcIce.PeDiskInfo = PeDiskInfo
    del PeDiskInfo

if '_t_PeDiskInfos' not in _M_PerpcIce.__dict__:
    _M_PerpcIce._t_PeDiskInfos = IcePy.defineSequence('::PerpcIce::PeDiskInfos', (), _M_PerpcIce._t_PeDiskInfo)

if 'PeGuestInfo' not in _M_PerpcIce.__dict__:
    _M_PerpcIce.PeGuestInfo = Ice.createTempClass()
    class PeGuestInfo(object):
        def __init__(self, diskInfos=None, bootDiskId=0, loginType=0):
            self.diskInfos = diskInfos
            self.bootDiskId = bootDiskId
            self.loginType = loginType

        def __hash__(self):
            _h = 0
            if self.diskInfos:
                for _i0 in self.diskInfos:
                    _h = 5 * _h + Ice.getHash(_i0)
            _h = 5 * _h + Ice.getHash(self.bootDiskId)
            _h = 5 * _h + Ice.getHash(self.loginType)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_PerpcIce.PeGuestInfo):
                return NotImplemented
            else:
                if self.diskInfos is None or other.diskInfos is None:
                    if self.diskInfos != other.diskInfos:
                        return (-1 if self.diskInfos is None else 1)
                else:
                    if self.diskInfos < other.diskInfos:
                        return -1
                    elif self.diskInfos > other.diskInfos:
                        return 1
                if self.bootDiskId is None or other.bootDiskId is None:
                    if self.bootDiskId != other.bootDiskId:
                        return (-1 if self.bootDiskId is None else 1)
                else:
                    if self.bootDiskId < other.bootDiskId:
                        return -1
                    elif self.bootDiskId > other.bootDiskId:
                        return 1
                if self.loginType is None or other.loginType is None:
                    if self.loginType != other.loginType:
                        return (-1 if self.loginType is None else 1)
                else:
                    if self.loginType < other.loginType:
                        return -1
                    elif self.loginType > other.loginType:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_PerpcIce._t_PeGuestInfo)

        __repr__ = __str__

    _M_PerpcIce._t_PeGuestInfo = IcePy.defineStruct('::PerpcIce::PeGuestInfo', PeGuestInfo, (), (
        ('diskInfos', (), _M_PerpcIce._t_PeDiskInfos),
        ('bootDiskId', (), IcePy._t_int),
        ('loginType', (), IcePy._t_int)
    ))

    _M_PerpcIce.PeGuestInfo = PeGuestInfo
    del PeGuestInfo

if 'PeDiskToken' not in _M_PerpcIce.__dict__:
    _M_PerpcIce.PeDiskToken = Ice.createTempClass()
    class PeDiskToken(object):
        def __init__(self, diskID=0, token='', diskGUID=''):
            self.diskID = diskID
            self.token = token
            self.diskGUID = diskGUID

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.diskID)
            _h = 5 * _h + Ice.getHash(self.token)
            _h = 5 * _h + Ice.getHash(self.diskGUID)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_PerpcIce.PeDiskToken):
                return NotImplemented
            else:
                if self.diskID is None or other.diskID is None:
                    if self.diskID != other.diskID:
                        return (-1 if self.diskID is None else 1)
                else:
                    if self.diskID < other.diskID:
                        return -1
                    elif self.diskID > other.diskID:
                        return 1
                if self.token is None or other.token is None:
                    if self.token != other.token:
                        return (-1 if self.token is None else 1)
                else:
                    if self.token < other.token:
                        return -1
                    elif self.token > other.token:
                        return 1
                if self.diskGUID is None or other.diskGUID is None:
                    if self.diskGUID != other.diskGUID:
                        return (-1 if self.diskGUID is None else 1)
                else:
                    if self.diskGUID < other.diskGUID:
                        return -1
                    elif self.diskGUID > other.diskGUID:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_PerpcIce._t_PeDiskToken)

        __repr__ = __str__

    _M_PerpcIce._t_PeDiskToken = IcePy.defineStruct('::PerpcIce::PeDiskToken', PeDiskToken, (), (
        ('diskID', (), IcePy._t_int),
        ('token', (), IcePy._t_string),
        ('diskGUID', (), IcePy._t_string)
    ))

    _M_PerpcIce.PeDiskToken = PeDiskToken
    del PeDiskToken

if '_t_PeDiskTokens' not in _M_PerpcIce.__dict__:
    _M_PerpcIce._t_PeDiskTokens = IcePy.defineSequence('::PerpcIce::PeDiskTokens', (), _M_PerpcIce._t_PeDiskToken)

if 'PeRestoreInfo' not in _M_PerpcIce.__dict__:
    _M_PerpcIce.PeRestoreInfo = Ice.createTempClass()
    class PeRestoreInfo(object):
        def __init__(self, szServerIPAddr='', dwServerPortNumber=0, dwSocketConnectCount=0, dwOsDiskID=0, tokens=None):
            self.szServerIPAddr = szServerIPAddr
            self.dwServerPortNumber = dwServerPortNumber
            self.dwSocketConnectCount = dwSocketConnectCount
            self.dwOsDiskID = dwOsDiskID
            self.tokens = tokens

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.szServerIPAddr)
            _h = 5 * _h + Ice.getHash(self.dwServerPortNumber)
            _h = 5 * _h + Ice.getHash(self.dwSocketConnectCount)
            _h = 5 * _h + Ice.getHash(self.dwOsDiskID)
            if self.tokens:
                for _i0 in self.tokens:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_PerpcIce.PeRestoreInfo):
                return NotImplemented
            else:
                if self.szServerIPAddr is None or other.szServerIPAddr is None:
                    if self.szServerIPAddr != other.szServerIPAddr:
                        return (-1 if self.szServerIPAddr is None else 1)
                else:
                    if self.szServerIPAddr < other.szServerIPAddr:
                        return -1
                    elif self.szServerIPAddr > other.szServerIPAddr:
                        return 1
                if self.dwServerPortNumber is None or other.dwServerPortNumber is None:
                    if self.dwServerPortNumber != other.dwServerPortNumber:
                        return (-1 if self.dwServerPortNumber is None else 1)
                else:
                    if self.dwServerPortNumber < other.dwServerPortNumber:
                        return -1
                    elif self.dwServerPortNumber > other.dwServerPortNumber:
                        return 1
                if self.dwSocketConnectCount is None or other.dwSocketConnectCount is None:
                    if self.dwSocketConnectCount != other.dwSocketConnectCount:
                        return (-1 if self.dwSocketConnectCount is None else 1)
                else:
                    if self.dwSocketConnectCount < other.dwSocketConnectCount:
                        return -1
                    elif self.dwSocketConnectCount > other.dwSocketConnectCount:
                        return 1
                if self.dwOsDiskID is None or other.dwOsDiskID is None:
                    if self.dwOsDiskID != other.dwOsDiskID:
                        return (-1 if self.dwOsDiskID is None else 1)
                else:
                    if self.dwOsDiskID < other.dwOsDiskID:
                        return -1
                    elif self.dwOsDiskID > other.dwOsDiskID:
                        return 1
                if self.tokens is None or other.tokens is None:
                    if self.tokens != other.tokens:
                        return (-1 if self.tokens is None else 1)
                else:
                    if self.tokens < other.tokens:
                        return -1
                    elif self.tokens > other.tokens:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_PerpcIce._t_PeRestoreInfo)

        __repr__ = __str__

    _M_PerpcIce._t_PeRestoreInfo = IcePy.defineStruct('::PerpcIce::PeRestoreInfo', PeRestoreInfo, (), (
        ('szServerIPAddr', (), IcePy._t_string),
        ('dwServerPortNumber', (), IcePy._t_int),
        ('dwSocketConnectCount', (), IcePy._t_int),
        ('dwOsDiskID', (), IcePy._t_int),
        ('tokens', (), _M_PerpcIce._t_PeDiskTokens)
    ))

    _M_PerpcIce.PeRestoreInfo = PeRestoreInfo
    del PeRestoreInfo

if '_t_HardwareIds' not in _M_PerpcIce.__dict__:
    _M_PerpcIce._t_HardwareIds = IcePy.defineSequence('::PerpcIce::HardwareIds', (), IcePy._t_string)

if '_t_HardwareCompatIds' not in _M_PerpcIce.__dict__:
    _M_PerpcIce._t_HardwareCompatIds = IcePy.defineSequence('::PerpcIce::HardwareCompatIds', (), IcePy._t_string)

if 'HWInfo' not in _M_PerpcIce.__dict__:
    _M_PerpcIce.HWInfo = Ice.createTempClass()
    class HWInfo(object):
        def __init__(self, szDeviceInstanceID='', szDescription='', szLocationInfo='', szContainerID='', szMacAddress='', szService='', parentDevLevel=0, Address=0, UINumber=0, HWIds=None, CompatIds=None):
            self.szDeviceInstanceID = szDeviceInstanceID
            self.szDescription = szDescription
            self.szLocationInfo = szLocationInfo
            self.szContainerID = szContainerID
            self.szMacAddress = szMacAddress
            self.szService = szService
            self.parentDevLevel = parentDevLevel
            self.Address = Address
            self.UINumber = UINumber
            self.HWIds = HWIds
            self.CompatIds = CompatIds

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.szDeviceInstanceID)
            _h = 5 * _h + Ice.getHash(self.szDescription)
            _h = 5 * _h + Ice.getHash(self.szLocationInfo)
            _h = 5 * _h + Ice.getHash(self.szContainerID)
            _h = 5 * _h + Ice.getHash(self.szMacAddress)
            _h = 5 * _h + Ice.getHash(self.szService)
            _h = 5 * _h + Ice.getHash(self.parentDevLevel)
            _h = 5 * _h + Ice.getHash(self.Address)
            _h = 5 * _h + Ice.getHash(self.UINumber)
            if self.HWIds:
                for _i0 in self.HWIds:
                    _h = 5 * _h + Ice.getHash(_i0)
            if self.CompatIds:
                for _i1 in self.CompatIds:
                    _h = 5 * _h + Ice.getHash(_i1)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_PerpcIce.HWInfo):
                return NotImplemented
            else:
                if self.szDeviceInstanceID is None or other.szDeviceInstanceID is None:
                    if self.szDeviceInstanceID != other.szDeviceInstanceID:
                        return (-1 if self.szDeviceInstanceID is None else 1)
                else:
                    if self.szDeviceInstanceID < other.szDeviceInstanceID:
                        return -1
                    elif self.szDeviceInstanceID > other.szDeviceInstanceID:
                        return 1
                if self.szDescription is None or other.szDescription is None:
                    if self.szDescription != other.szDescription:
                        return (-1 if self.szDescription is None else 1)
                else:
                    if self.szDescription < other.szDescription:
                        return -1
                    elif self.szDescription > other.szDescription:
                        return 1
                if self.szLocationInfo is None or other.szLocationInfo is None:
                    if self.szLocationInfo != other.szLocationInfo:
                        return (-1 if self.szLocationInfo is None else 1)
                else:
                    if self.szLocationInfo < other.szLocationInfo:
                        return -1
                    elif self.szLocationInfo > other.szLocationInfo:
                        return 1
                if self.szContainerID is None or other.szContainerID is None:
                    if self.szContainerID != other.szContainerID:
                        return (-1 if self.szContainerID is None else 1)
                else:
                    if self.szContainerID < other.szContainerID:
                        return -1
                    elif self.szContainerID > other.szContainerID:
                        return 1
                if self.szMacAddress is None or other.szMacAddress is None:
                    if self.szMacAddress != other.szMacAddress:
                        return (-1 if self.szMacAddress is None else 1)
                else:
                    if self.szMacAddress < other.szMacAddress:
                        return -1
                    elif self.szMacAddress > other.szMacAddress:
                        return 1
                if self.szService is None or other.szService is None:
                    if self.szService != other.szService:
                        return (-1 if self.szService is None else 1)
                else:
                    if self.szService < other.szService:
                        return -1
                    elif self.szService > other.szService:
                        return 1
                if self.parentDevLevel is None or other.parentDevLevel is None:
                    if self.parentDevLevel != other.parentDevLevel:
                        return (-1 if self.parentDevLevel is None else 1)
                else:
                    if self.parentDevLevel < other.parentDevLevel:
                        return -1
                    elif self.parentDevLevel > other.parentDevLevel:
                        return 1
                if self.Address is None or other.Address is None:
                    if self.Address != other.Address:
                        return (-1 if self.Address is None else 1)
                else:
                    if self.Address < other.Address:
                        return -1
                    elif self.Address > other.Address:
                        return 1
                if self.UINumber is None or other.UINumber is None:
                    if self.UINumber != other.UINumber:
                        return (-1 if self.UINumber is None else 1)
                else:
                    if self.UINumber < other.UINumber:
                        return -1
                    elif self.UINumber > other.UINumber:
                        return 1
                if self.HWIds is None or other.HWIds is None:
                    if self.HWIds != other.HWIds:
                        return (-1 if self.HWIds is None else 1)
                else:
                    if self.HWIds < other.HWIds:
                        return -1
                    elif self.HWIds > other.HWIds:
                        return 1
                if self.CompatIds is None or other.CompatIds is None:
                    if self.CompatIds != other.CompatIds:
                        return (-1 if self.CompatIds is None else 1)
                else:
                    if self.CompatIds < other.CompatIds:
                        return -1
                    elif self.CompatIds > other.CompatIds:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_PerpcIce._t_HWInfo)

        __repr__ = __str__

    _M_PerpcIce._t_HWInfo = IcePy.defineStruct('::PerpcIce::HWInfo', HWInfo, (), (
        ('szDeviceInstanceID', (), IcePy._t_string),
        ('szDescription', (), IcePy._t_string),
        ('szLocationInfo', (), IcePy._t_string),
        ('szContainerID', (), IcePy._t_string),
        ('szMacAddress', (), IcePy._t_string),
        ('szService', (), IcePy._t_string),
        ('parentDevLevel', (), IcePy._t_int),
        ('Address', (), IcePy._t_int),
        ('UINumber', (), IcePy._t_int),
        ('HWIds', (), _M_PerpcIce._t_HardwareIds),
        ('CompatIds', (), _M_PerpcIce._t_HardwareCompatIds)
    ))

    _M_PerpcIce.HWInfo = HWInfo
    del HWInfo

if '_t_HWInfos' not in _M_PerpcIce.__dict__:
    _M_PerpcIce._t_HWInfos = IcePy.defineSequence('::PerpcIce::HWInfos', (), _M_PerpcIce._t_HWInfo)

if 'NetAdapterInfo' not in _M_PerpcIce.__dict__:
    _M_PerpcIce.NetAdapterInfo = Ice.createTempClass()
    class NetAdapterInfo(object):
        def __init__(self, szDeviceInstanceID='', szDescription='', szGuid='', szNetType='', szMacAddress='', isConnected=False):
            self.szDeviceInstanceID = szDeviceInstanceID
            self.szDescription = szDescription
            self.szGuid = szGuid
            self.szNetType = szNetType
            self.szMacAddress = szMacAddress
            self.isConnected = isConnected

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.szDeviceInstanceID)
            _h = 5 * _h + Ice.getHash(self.szDescription)
            _h = 5 * _h + Ice.getHash(self.szGuid)
            _h = 5 * _h + Ice.getHash(self.szNetType)
            _h = 5 * _h + Ice.getHash(self.szMacAddress)
            _h = 5 * _h + Ice.getHash(self.isConnected)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_PerpcIce.NetAdapterInfo):
                return NotImplemented
            else:
                if self.szDeviceInstanceID is None or other.szDeviceInstanceID is None:
                    if self.szDeviceInstanceID != other.szDeviceInstanceID:
                        return (-1 if self.szDeviceInstanceID is None else 1)
                else:
                    if self.szDeviceInstanceID < other.szDeviceInstanceID:
                        return -1
                    elif self.szDeviceInstanceID > other.szDeviceInstanceID:
                        return 1
                if self.szDescription is None or other.szDescription is None:
                    if self.szDescription != other.szDescription:
                        return (-1 if self.szDescription is None else 1)
                else:
                    if self.szDescription < other.szDescription:
                        return -1
                    elif self.szDescription > other.szDescription:
                        return 1
                if self.szGuid is None or other.szGuid is None:
                    if self.szGuid != other.szGuid:
                        return (-1 if self.szGuid is None else 1)
                else:
                    if self.szGuid < other.szGuid:
                        return -1
                    elif self.szGuid > other.szGuid:
                        return 1
                if self.szNetType is None or other.szNetType is None:
                    if self.szNetType != other.szNetType:
                        return (-1 if self.szNetType is None else 1)
                else:
                    if self.szNetType < other.szNetType:
                        return -1
                    elif self.szNetType > other.szNetType:
                        return 1
                if self.szMacAddress is None or other.szMacAddress is None:
                    if self.szMacAddress != other.szMacAddress:
                        return (-1 if self.szMacAddress is None else 1)
                else:
                    if self.szMacAddress < other.szMacAddress:
                        return -1
                    elif self.szMacAddress > other.szMacAddress:
                        return 1
                if self.isConnected is None or other.isConnected is None:
                    if self.isConnected != other.isConnected:
                        return (-1 if self.isConnected is None else 1)
                else:
                    if self.isConnected < other.isConnected:
                        return -1
                    elif self.isConnected > other.isConnected:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_PerpcIce._t_NetAdapterInfo)

        __repr__ = __str__

    _M_PerpcIce._t_NetAdapterInfo = IcePy.defineStruct('::PerpcIce::NetAdapterInfo', NetAdapterInfo, (), (
        ('szDeviceInstanceID', (), IcePy._t_string),
        ('szDescription', (), IcePy._t_string),
        ('szGuid', (), IcePy._t_string),
        ('szNetType', (), IcePy._t_string),
        ('szMacAddress', (), IcePy._t_string),
        ('isConnected', (), IcePy._t_bool)
    ))

    _M_PerpcIce.NetAdapterInfo = NetAdapterInfo
    del NetAdapterInfo

if '_t_NetAdapterInfos' not in _M_PerpcIce.__dict__:
    _M_PerpcIce._t_NetAdapterInfos = IcePy.defineSequence('::PerpcIce::NetAdapterInfos', (), _M_PerpcIce._t_NetAdapterInfo)

if 'PeGuestReceiver' not in _M_PerpcIce.__dict__:
    _M_PerpcIce.PeGuestReceiver = Ice.createTempClass()
    class PeGuestReceiver(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_PerpcIce.PeGuestReceiver:
                raise RuntimeError('PerpcIce.PeGuestReceiver is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::PerpcIce::PeGuestReceiver')

        def ice_id(self, current=None):
            return '::PerpcIce::PeGuestReceiver'

        def ice_staticId():
            return '::PerpcIce::PeGuestReceiver'
        ice_staticId = staticmethod(ice_staticId)

        def ReadDisk(self, token, LBA, dwSectorCount, current=None):
            pass

        def WriteDisk(self, token, LBA, dwSectorCount, pBuf, current=None):
            pass

        def SetRestoreExcludeInfo(self, brokenBlocks, blockRuns, current=None):
            pass

        def KvmEnd(self, current=None):
            pass

        def GetClassHWInfo(self, classname, requestParentLevel, current=None):
            pass

        def GetNetAdapterInfo(self, current=None):
            pass

        def SetRestoreInfo(self, restoreInfo, current=None):
            pass

        def JsonFunc(self, inputJson, inputBs, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_PerpcIce._t_PeGuestReceiver)

        __repr__ = __str__

    _M_PerpcIce.PeGuestReceiverPrx = Ice.createTempClass()
    class PeGuestReceiverPrx(Ice.ObjectPrx):

        def ReadDisk(self, token, LBA, dwSectorCount, _ctx=None):
            return _M_PerpcIce.PeGuestReceiver._op_ReadDisk.invoke(self, ((token, LBA, dwSectorCount), _ctx))

        def begin_ReadDisk(self, token, LBA, dwSectorCount, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeGuestReceiver._op_ReadDisk.begin(self, ((token, LBA, dwSectorCount), _response, _ex, _sent, _ctx))

        def end_ReadDisk(self, _r):
            return _M_PerpcIce.PeGuestReceiver._op_ReadDisk.end(self, _r)

        def WriteDisk(self, token, LBA, dwSectorCount, pBuf, _ctx=None):
            return _M_PerpcIce.PeGuestReceiver._op_WriteDisk.invoke(self, ((token, LBA, dwSectorCount, pBuf), _ctx))

        def begin_WriteDisk(self, token, LBA, dwSectorCount, pBuf, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeGuestReceiver._op_WriteDisk.begin(self, ((token, LBA, dwSectorCount, pBuf), _response, _ex, _sent, _ctx))

        def end_WriteDisk(self, _r):
            return _M_PerpcIce.PeGuestReceiver._op_WriteDisk.end(self, _r)

        def SetRestoreExcludeInfo(self, brokenBlocks, blockRuns, _ctx=None):
            return _M_PerpcIce.PeGuestReceiver._op_SetRestoreExcludeInfo.invoke(self, ((brokenBlocks, blockRuns), _ctx))

        def begin_SetRestoreExcludeInfo(self, brokenBlocks, blockRuns, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeGuestReceiver._op_SetRestoreExcludeInfo.begin(self, ((brokenBlocks, blockRuns), _response, _ex, _sent, _ctx))

        def end_SetRestoreExcludeInfo(self, _r):
            return _M_PerpcIce.PeGuestReceiver._op_SetRestoreExcludeInfo.end(self, _r)

        def KvmEnd(self, _ctx=None):
            return _M_PerpcIce.PeGuestReceiver._op_KvmEnd.invoke(self, ((), _ctx))

        def begin_KvmEnd(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeGuestReceiver._op_KvmEnd.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_KvmEnd(self, _r):
            return _M_PerpcIce.PeGuestReceiver._op_KvmEnd.end(self, _r)

        def GetClassHWInfo(self, classname, requestParentLevel, _ctx=None):
            return _M_PerpcIce.PeGuestReceiver._op_GetClassHWInfo.invoke(self, ((classname, requestParentLevel), _ctx))

        def begin_GetClassHWInfo(self, classname, requestParentLevel, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeGuestReceiver._op_GetClassHWInfo.begin(self, ((classname, requestParentLevel), _response, _ex, _sent, _ctx))

        def end_GetClassHWInfo(self, _r):
            return _M_PerpcIce.PeGuestReceiver._op_GetClassHWInfo.end(self, _r)

        def GetNetAdapterInfo(self, _ctx=None):
            return _M_PerpcIce.PeGuestReceiver._op_GetNetAdapterInfo.invoke(self, ((), _ctx))

        def begin_GetNetAdapterInfo(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeGuestReceiver._op_GetNetAdapterInfo.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetNetAdapterInfo(self, _r):
            return _M_PerpcIce.PeGuestReceiver._op_GetNetAdapterInfo.end(self, _r)

        def SetRestoreInfo(self, restoreInfo, _ctx=None):
            return _M_PerpcIce.PeGuestReceiver._op_SetRestoreInfo.invoke(self, ((restoreInfo, ), _ctx))

        def begin_SetRestoreInfo(self, restoreInfo, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeGuestReceiver._op_SetRestoreInfo.begin(self, ((restoreInfo, ), _response, _ex, _sent, _ctx))

        def end_SetRestoreInfo(self, _r):
            return _M_PerpcIce.PeGuestReceiver._op_SetRestoreInfo.end(self, _r)

        def JsonFunc(self, inputJson, inputBs, _ctx=None):
            return _M_PerpcIce.PeGuestReceiver._op_JsonFunc.invoke(self, ((inputJson, inputBs), _ctx))

        def begin_JsonFunc(self, inputJson, inputBs, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeGuestReceiver._op_JsonFunc.begin(self, ((inputJson, inputBs), _response, _ex, _sent, _ctx))

        def end_JsonFunc(self, _r):
            return _M_PerpcIce.PeGuestReceiver._op_JsonFunc.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_PerpcIce.PeGuestReceiverPrx.ice_checkedCast(proxy, '::PerpcIce::PeGuestReceiver', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_PerpcIce.PeGuestReceiverPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::PerpcIce::PeGuestReceiver'
        ice_staticId = staticmethod(ice_staticId)

    _M_PerpcIce._t_PeGuestReceiverPrx = IcePy.defineProxy('::PerpcIce::PeGuestReceiver', PeGuestReceiverPrx)

    _M_PerpcIce._t_PeGuestReceiver = IcePy.defineClass('::PerpcIce::PeGuestReceiver', PeGuestReceiver, -1, (), True, False, None, (), ())
    PeGuestReceiver._ice_type = _M_PerpcIce._t_PeGuestReceiver

    PeGuestReceiver._op_ReadDisk = IcePy.Operation('ReadDisk', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0)), (((), _M_PerpcIce._t_BinaryStream, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    PeGuestReceiver._op_WriteDisk = IcePy.Operation('WriteDisk', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0), ((), _M_PerpcIce._t_BinaryStream, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    PeGuestReceiver._op_SetRestoreExcludeInfo = IcePy.Operation('SetRestoreExcludeInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_PerpcIce._t_ExcludeBrokenBlocks, False, 0), ((), _M_PerpcIce._t_ExcludeBlockRuns, False, 0)), (), None, (_M_Utils._t_SystemError,))
    PeGuestReceiver._op_KvmEnd = IcePy.Operation('KvmEnd', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, (_M_Utils._t_SystemError,))
    PeGuestReceiver._op_GetClassHWInfo = IcePy.Operation('GetClassHWInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (((), _M_PerpcIce._t_HWInfos, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    PeGuestReceiver._op_GetNetAdapterInfo = IcePy.Operation('GetNetAdapterInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (((), _M_PerpcIce._t_NetAdapterInfos, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    PeGuestReceiver._op_SetRestoreInfo = IcePy.Operation('SetRestoreInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_PerpcIce._t_PeRestoreInfo, False, 0),), (), None, (_M_Utils._t_SystemError,))
    PeGuestReceiver._op_JsonFunc = IcePy.Operation('JsonFunc', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_PerpcIce._t_BinaryStream, False, 0)), (((), _M_PerpcIce._t_BinaryStream, False, 0),), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))

    _M_PerpcIce.PeGuestReceiver = PeGuestReceiver
    del PeGuestReceiver

    _M_PerpcIce.PeGuestReceiverPrx = PeGuestReceiverPrx
    del PeGuestReceiverPrx

if 'PeSession' not in _M_PerpcIce.__dict__:
    _M_PerpcIce.PeSession = Ice.createTempClass()
    class PeSession(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_PerpcIce.PeSession:
                raise RuntimeError('PerpcIce.PeSession is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::PerpcIce::PeSession')

        def ice_id(self, current=None):
            return '::PerpcIce::PeSession'

        def ice_staticId():
            return '::PerpcIce::PeSession'
        ice_staticId = staticmethod(ice_staticId)

        def InitiatePeReceiver(self, ident, current=None):
            pass

        def GetPeHostIdent(self, current=None):
            pass

        def UnInit(self, dwStatus, current=None):
            pass

        def GetBootList(self, index, current=None):
            pass

        def GetKvmBitmapFile(self, index, current=None):
            pass

        def ReadDiskData(self, token, LBA, dwSectorCount, current=None):
            pass

        def ReadKvmBootData(self, threadIndex, blockIndex, current=None):
            pass

        def getUesdBlockBitmap(self, token, index, current=None):
            pass

        def Refresh(self, current=None):
            pass

        def StartKvm(self, current=None):
            pass

        def destroy(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_PerpcIce._t_PeSession)

        __repr__ = __str__

    _M_PerpcIce.PeSessionPrx = Ice.createTempClass()
    class PeSessionPrx(Ice.ObjectPrx):

        def InitiatePeReceiver(self, ident, _ctx=None):
            return _M_PerpcIce.PeSession._op_InitiatePeReceiver.invoke(self, ((ident, ), _ctx))

        def begin_InitiatePeReceiver(self, ident, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeSession._op_InitiatePeReceiver.begin(self, ((ident, ), _response, _ex, _sent, _ctx))

        def end_InitiatePeReceiver(self, _r):
            return _M_PerpcIce.PeSession._op_InitiatePeReceiver.end(self, _r)

        def GetPeHostIdent(self, _ctx=None):
            return _M_PerpcIce.PeSession._op_GetPeHostIdent.invoke(self, ((), _ctx))

        def begin_GetPeHostIdent(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeSession._op_GetPeHostIdent.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetPeHostIdent(self, _r):
            return _M_PerpcIce.PeSession._op_GetPeHostIdent.end(self, _r)

        def UnInit(self, dwStatus, _ctx=None):
            return _M_PerpcIce.PeSession._op_UnInit.invoke(self, ((dwStatus, ), _ctx))

        def begin_UnInit(self, dwStatus, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeSession._op_UnInit.begin(self, ((dwStatus, ), _response, _ex, _sent, _ctx))

        def end_UnInit(self, _r):
            return _M_PerpcIce.PeSession._op_UnInit.end(self, _r)

        def GetBootList(self, index, _ctx=None):
            return _M_PerpcIce.PeSession._op_GetBootList.invoke(self, ((index, ), _ctx))

        def begin_GetBootList(self, index, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeSession._op_GetBootList.begin(self, ((index, ), _response, _ex, _sent, _ctx))

        def end_GetBootList(self, _r):
            return _M_PerpcIce.PeSession._op_GetBootList.end(self, _r)

        def GetKvmBitmapFile(self, index, _ctx=None):
            return _M_PerpcIce.PeSession._op_GetKvmBitmapFile.invoke(self, ((index, ), _ctx))

        def begin_GetKvmBitmapFile(self, index, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeSession._op_GetKvmBitmapFile.begin(self, ((index, ), _response, _ex, _sent, _ctx))

        def end_GetKvmBitmapFile(self, _r):
            return _M_PerpcIce.PeSession._op_GetKvmBitmapFile.end(self, _r)

        def ReadDiskData(self, token, LBA, dwSectorCount, _ctx=None):
            return _M_PerpcIce.PeSession._op_ReadDiskData.invoke(self, ((token, LBA, dwSectorCount), _ctx))

        def begin_ReadDiskData(self, token, LBA, dwSectorCount, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeSession._op_ReadDiskData.begin(self, ((token, LBA, dwSectorCount), _response, _ex, _sent, _ctx))

        def end_ReadDiskData(self, _r):
            return _M_PerpcIce.PeSession._op_ReadDiskData.end(self, _r)

        def ReadKvmBootData(self, threadIndex, blockIndex, _ctx=None):
            return _M_PerpcIce.PeSession._op_ReadKvmBootData.invoke(self, ((threadIndex, blockIndex), _ctx))

        def begin_ReadKvmBootData(self, threadIndex, blockIndex, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeSession._op_ReadKvmBootData.begin(self, ((threadIndex, blockIndex), _response, _ex, _sent, _ctx))

        def end_ReadKvmBootData(self, _r):
            return _M_PerpcIce.PeSession._op_ReadKvmBootData.end(self, _r)

        def getUesdBlockBitmap(self, token, index, _ctx=None):
            return _M_PerpcIce.PeSession._op_getUesdBlockBitmap.invoke(self, ((token, index), _ctx))

        def begin_getUesdBlockBitmap(self, token, index, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeSession._op_getUesdBlockBitmap.begin(self, ((token, index), _response, _ex, _sent, _ctx))

        def end_getUesdBlockBitmap(self, _r):
            return _M_PerpcIce.PeSession._op_getUesdBlockBitmap.end(self, _r)

        def Refresh(self, _ctx=None):
            return _M_PerpcIce.PeSession._op_Refresh.invoke(self, ((), _ctx))

        def begin_Refresh(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeSession._op_Refresh.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_Refresh(self, _r):
            return _M_PerpcIce.PeSession._op_Refresh.end(self, _r)

        def StartKvm(self, _ctx=None):
            return _M_PerpcIce.PeSession._op_StartKvm.invoke(self, ((), _ctx))

        def begin_StartKvm(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeSession._op_StartKvm.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_StartKvm(self, _r):
            return _M_PerpcIce.PeSession._op_StartKvm.end(self, _r)

        def destroy(self, _ctx=None):
            return _M_PerpcIce.PeSession._op_destroy.invoke(self, ((), _ctx))

        def begin_destroy(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeSession._op_destroy.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_destroy(self, _r):
            return _M_PerpcIce.PeSession._op_destroy.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_PerpcIce.PeSessionPrx.ice_checkedCast(proxy, '::PerpcIce::PeSession', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_PerpcIce.PeSessionPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::PerpcIce::PeSession'
        ice_staticId = staticmethod(ice_staticId)

    _M_PerpcIce._t_PeSessionPrx = IcePy.defineProxy('::PerpcIce::PeSession', PeSessionPrx)

    _M_PerpcIce._t_PeSession = IcePy.defineClass('::PerpcIce::PeSession', PeSession, -1, (), True, False, None, (), ())
    PeSession._ice_type = _M_PerpcIce._t_PeSession

    PeSession._op_InitiatePeReceiver = IcePy.Operation('InitiatePeReceiver', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_Identity, False, 0),), (), None, (_M_Utils._t_SystemError,))
    PeSession._op_GetPeHostIdent = IcePy.Operation('GetPeHostIdent', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (((), IcePy._t_string, False, 0),), None, ())
    PeSession._op_UnInit = IcePy.Operation('UnInit', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    PeSession._op_GetBootList = IcePy.Operation('GetBootList', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (((), IcePy._t_string, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError, _M_Utils._t_NeedRetryLaterError))
    PeSession._op_GetKvmBitmapFile = IcePy.Operation('GetKvmBitmapFile', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (((), _M_PerpcIce._t_BinaryStream, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError, _M_Utils._t_NeedRetryLaterError))
    PeSession._op_ReadDiskData = IcePy.Operation('ReadDiskData', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0)), (((), _M_PerpcIce._t_BinaryStream, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    PeSession._op_ReadKvmBootData = IcePy.Operation('ReadKvmBootData', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0), ((), _M_PerpcIce._t_BinaryStream, False, 0)), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    PeSession._op_getUesdBlockBitmap = IcePy.Operation('getUesdBlockBitmap', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (((), _M_PerpcIce._t_BinaryStream, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    PeSession._op_Refresh = IcePy.Operation('Refresh', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())
    PeSession._op_StartKvm = IcePy.Operation('StartKvm', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    PeSession._op_destroy = IcePy.Operation('destroy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_PerpcIce.PeSession = PeSession
    del PeSession

    _M_PerpcIce.PeSessionPrx = PeSessionPrx
    del PeSessionPrx

if 'PeSessionFactory' not in _M_PerpcIce.__dict__:
    _M_PerpcIce.PeSessionFactory = Ice.createTempClass()
    class PeSessionFactory(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_PerpcIce.PeSessionFactory:
                raise RuntimeError('PerpcIce.PeSessionFactory is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::PerpcIce::PeSessionFactory')

        def ice_id(self, current=None):
            return '::PerpcIce::PeSessionFactory'

        def ice_staticId():
            return '::PerpcIce::PeSessionFactory'
        ice_staticId = staticmethod(ice_staticId)

        def CreateSession(self, guestInfo, kvmSocketCount, moreInfo, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_PerpcIce._t_PeSessionFactory)

        __repr__ = __str__

    _M_PerpcIce.PeSessionFactoryPrx = Ice.createTempClass()
    class PeSessionFactoryPrx(Ice.ObjectPrx):

        def CreateSession(self, guestInfo, kvmSocketCount, moreInfo, _ctx=None):
            return _M_PerpcIce.PeSessionFactory._op_CreateSession.invoke(self, ((guestInfo, kvmSocketCount, moreInfo), _ctx))

        def begin_CreateSession(self, guestInfo, kvmSocketCount, moreInfo, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_PerpcIce.PeSessionFactory._op_CreateSession.begin(self, ((guestInfo, kvmSocketCount, moreInfo), _response, _ex, _sent, _ctx))

        def end_CreateSession(self, _r):
            return _M_PerpcIce.PeSessionFactory._op_CreateSession.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_PerpcIce.PeSessionFactoryPrx.ice_checkedCast(proxy, '::PerpcIce::PeSessionFactory', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_PerpcIce.PeSessionFactoryPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::PerpcIce::PeSessionFactory'
        ice_staticId = staticmethod(ice_staticId)

    _M_PerpcIce._t_PeSessionFactoryPrx = IcePy.defineProxy('::PerpcIce::PeSessionFactory', PeSessionFactoryPrx)

    _M_PerpcIce._t_PeSessionFactory = IcePy.defineClass('::PerpcIce::PeSessionFactory', PeSessionFactory, -1, (), True, False, None, (), ())
    PeSessionFactory._ice_type = _M_PerpcIce._t_PeSessionFactory

    PeSessionFactory._op_CreateSession = IcePy.Operation('CreateSession', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_PerpcIce._t_PeGuestInfo, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, True, 1)), (), ((), _M_PerpcIce._t_PeSessionPrx, False, 0), (_M_Utils._t_SystemError,))

    _M_PerpcIce.PeSessionFactory = PeSessionFactory
    del PeSessionFactory

    _M_PerpcIce.PeSessionFactoryPrx = PeSessionFactoryPrx
    del PeSessionFactoryPrx

# End of module PerpcIce

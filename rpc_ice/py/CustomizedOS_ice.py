# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.4
#
# <auto-generated>
#
# Generated from file `CustomizedOS.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import utils_ice
import Ice_Identity_ice

# Included module Utils
_M_Utils = Ice.openModule('Utils')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module CustomizedOS
_M_CustomizedOS = Ice.openModule('CustomizedOS')
__name__ = 'CustomizedOS'

if '_t_BinaryStream' not in _M_CustomizedOS.__dict__:
    _M_CustomizedOS._t_BinaryStream = IcePy.defineSequence('::CustomizedOS::BinaryStream', (), IcePy._t_byte)

if 'MiniLoader' not in _M_CustomizedOS.__dict__:
    _M_CustomizedOS.MiniLoader = Ice.createTempClass()
    class MiniLoader(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_CustomizedOS.MiniLoader:
                raise RuntimeError('CustomizedOS.MiniLoader is an abstract class')

        def ice_ids(self, current=None):
            return ('::CustomizedOS::MiniLoader', '::Ice::Object')

        def ice_id(self, current=None):
            return '::CustomizedOS::MiniLoader'

        def ice_staticId():
            return '::CustomizedOS::MiniLoader'
        ice_staticId = staticmethod(ice_staticId)

        def popen(self, jsonParams, current=None):
            pass

        def rwFile(self, inputJson, inputBs, current=None):
            pass

        def getRunPath(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_CustomizedOS._t_MiniLoader)

        __repr__ = __str__

    _M_CustomizedOS.MiniLoaderPrx = Ice.createTempClass()
    class MiniLoaderPrx(Ice.ObjectPrx):

        def popen(self, jsonParams, _ctx=None):
            return _M_CustomizedOS.MiniLoader._op_popen.invoke(self, ((jsonParams, ), _ctx))

        def begin_popen(self, jsonParams, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_CustomizedOS.MiniLoader._op_popen.begin(self, ((jsonParams, ), _response, _ex, _sent, _ctx))

        def end_popen(self, _r):
            return _M_CustomizedOS.MiniLoader._op_popen.end(self, _r)

        def rwFile(self, inputJson, inputBs, _ctx=None):
            return _M_CustomizedOS.MiniLoader._op_rwFile.invoke(self, ((inputJson, inputBs), _ctx))

        def begin_rwFile(self, inputJson, inputBs, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_CustomizedOS.MiniLoader._op_rwFile.begin(self, ((inputJson, inputBs), _response, _ex, _sent, _ctx))

        def end_rwFile(self, _r):
            return _M_CustomizedOS.MiniLoader._op_rwFile.end(self, _r)

        def getRunPath(self, _ctx=None):
            return _M_CustomizedOS.MiniLoader._op_getRunPath.invoke(self, ((), _ctx))

        def begin_getRunPath(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_CustomizedOS.MiniLoader._op_getRunPath.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getRunPath(self, _r):
            return _M_CustomizedOS.MiniLoader._op_getRunPath.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_CustomizedOS.MiniLoaderPrx.ice_checkedCast(proxy, '::CustomizedOS::MiniLoader', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_CustomizedOS.MiniLoaderPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::CustomizedOS::MiniLoader'
        ice_staticId = staticmethod(ice_staticId)

    _M_CustomizedOS._t_MiniLoaderPrx = IcePy.defineProxy('::CustomizedOS::MiniLoader', MiniLoaderPrx)

    _M_CustomizedOS._t_MiniLoader = IcePy.defineClass('::CustomizedOS::MiniLoader', MiniLoader, -1, (), True, False, None, (), ())
    MiniLoader._ice_type = _M_CustomizedOS._t_MiniLoader

    MiniLoader._op_popen = IcePy.Operation('popen', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    MiniLoader._op_rwFile = IcePy.Operation('rwFile', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_CustomizedOS._t_BinaryStream, False, 0)), (((), _M_CustomizedOS._t_BinaryStream, False, 0),), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    MiniLoader._op_getRunPath = IcePy.Operation('getRunPath', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))

    _M_CustomizedOS.MiniLoader = MiniLoader
    del MiniLoader

    _M_CustomizedOS.MiniLoaderPrx = MiniLoaderPrx
    del MiniLoaderPrx

if 'CallbackSender' not in _M_CustomizedOS.__dict__:
    _M_CustomizedOS.CallbackSender = Ice.createTempClass()
    class CallbackSender(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_CustomizedOS.CallbackSender:
                raise RuntimeError('CustomizedOS.CallbackSender is an abstract class')

        def ice_ids(self, current=None):
            return ('::CustomizedOS::CallbackSender', '::Ice::Object')

        def ice_id(self, current=None):
            return '::CustomizedOS::CallbackSender'

        def ice_staticId():
            return '::CustomizedOS::CallbackSender'
        ice_staticId = staticmethod(ice_staticId)

        def addClient(self, ident, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_CustomizedOS._t_CallbackSender)

        __repr__ = __str__

    _M_CustomizedOS.CallbackSenderPrx = Ice.createTempClass()
    class CallbackSenderPrx(Ice.ObjectPrx):

        def addClient(self, ident, _ctx=None):
            return _M_CustomizedOS.CallbackSender._op_addClient.invoke(self, ((ident, ), _ctx))

        def begin_addClient(self, ident, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_CustomizedOS.CallbackSender._op_addClient.begin(self, ((ident, ), _response, _ex, _sent, _ctx))

        def end_addClient(self, _r):
            return _M_CustomizedOS.CallbackSender._op_addClient.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_CustomizedOS.CallbackSenderPrx.ice_checkedCast(proxy, '::CustomizedOS::CallbackSender', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_CustomizedOS.CallbackSenderPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::CustomizedOS::CallbackSender'
        ice_staticId = staticmethod(ice_staticId)

    _M_CustomizedOS._t_CallbackSenderPrx = IcePy.defineProxy('::CustomizedOS::CallbackSender', CallbackSenderPrx)

    _M_CustomizedOS._t_CallbackSender = IcePy.defineClass('::CustomizedOS::CallbackSender', CallbackSender, -1, (), True, False, None, (), ())
    CallbackSender._ice_type = _M_CustomizedOS._t_CallbackSender

    CallbackSender._op_addClient = IcePy.Operation('addClient', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_Identity, False, 0),), (), None, (_M_Utils._t_SystemError,))

    _M_CustomizedOS.CallbackSender = CallbackSender
    del CallbackSender

    _M_CustomizedOS.CallbackSenderPrx = CallbackSenderPrx
    del CallbackSenderPrx

# End of module CustomizedOS

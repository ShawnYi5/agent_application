# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.4
#
# <auto-generated>
#
# Generated from file `data_queuing.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import Ice_Identity_ice
import utils_ice
import img_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module Utils
_M_Utils = Ice.openModule('Utils')

# Included module IMG
_M_IMG = Ice.openModule('IMG')

# Start of module DataQueuingIce
_M_DataQueuingIce = Ice.openModule('DataQueuingIce')
__name__ = 'DataQueuingIce'

if '_t_BinaryStream' not in _M_DataQueuingIce.__dict__:
    _M_DataQueuingIce._t_BinaryStream = IcePy.defineSequence('::DataQueuingIce::BinaryStream', (), IcePy._t_byte)

if 'DiskBitmap' not in _M_DataQueuingIce.__dict__:
    _M_DataQueuingIce.DiskBitmap = Ice.createTempClass()
    class DiskBitmap(object):
        def __init__(self, token='', bitmap=None):
            self.token = token
            self.bitmap = bitmap

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.token)
            if self.bitmap:
                for _i0 in self.bitmap:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_DataQueuingIce.DiskBitmap):
                return NotImplemented
            else:
                if self.token is None or other.token is None:
                    if self.token != other.token:
                        return (-1 if self.token is None else 1)
                else:
                    if self.token < other.token:
                        return -1
                    elif self.token > other.token:
                        return 1
                if self.bitmap is None or other.bitmap is None:
                    if self.bitmap != other.bitmap:
                        return (-1 if self.bitmap is None else 1)
                else:
                    if self.bitmap < other.bitmap:
                        return -1
                    elif self.bitmap > other.bitmap:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_DataQueuingIce._t_DiskBitmap)

        __repr__ = __str__

    _M_DataQueuingIce._t_DiskBitmap = IcePy.defineStruct('::DataQueuingIce::DiskBitmap', DiskBitmap, (), (
        ('token', (), IcePy._t_string),
        ('bitmap', (), _M_DataQueuingIce._t_BinaryStream)
    ))

    _M_DataQueuingIce.DiskBitmap = DiskBitmap
    del DiskBitmap

if 'DiskBitmapv2' not in _M_DataQueuingIce.__dict__:
    _M_DataQueuingIce.DiskBitmapv2 = Ice.createTempClass()
    class DiskBitmapv2(object):
        def __init__(self, token='', bitmapPath=''):
            self.token = token
            self.bitmapPath = bitmapPath

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.token)
            _h = 5 * _h + Ice.getHash(self.bitmapPath)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_DataQueuingIce.DiskBitmapv2):
                return NotImplemented
            else:
                if self.token is None or other.token is None:
                    if self.token != other.token:
                        return (-1 if self.token is None else 1)
                else:
                    if self.token < other.token:
                        return -1
                    elif self.token > other.token:
                        return 1
                if self.bitmapPath is None or other.bitmapPath is None:
                    if self.bitmapPath != other.bitmapPath:
                        return (-1 if self.bitmapPath is None else 1)
                else:
                    if self.bitmapPath < other.bitmapPath:
                        return -1
                    elif self.bitmapPath > other.bitmapPath:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_DataQueuingIce._t_DiskBitmapv2)

        __repr__ = __str__

    _M_DataQueuingIce._t_DiskBitmapv2 = IcePy.defineStruct('::DataQueuingIce::DiskBitmapv2', DiskBitmapv2, (), (
        ('token', (), IcePy._t_string),
        ('bitmapPath', (), IcePy._t_string)
    ))

    _M_DataQueuingIce.DiskBitmapv2 = DiskBitmapv2
    del DiskBitmapv2

if '_t_DiskBitmaps' not in _M_DataQueuingIce.__dict__:
    _M_DataQueuingIce._t_DiskBitmaps = IcePy.defineSequence('::DataQueuingIce::DiskBitmaps', (), _M_DataQueuingIce._t_DiskBitmap)

if 'ExcludeRun' not in _M_DataQueuingIce.__dict__:
    _M_DataQueuingIce.ExcludeRun = Ice.createTempClass()
    class ExcludeRun(object):
        def __init__(self, byteOffset=0, bytes=0):
            self.byteOffset = byteOffset
            self.bytes = bytes

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.byteOffset)
            _h = 5 * _h + Ice.getHash(self.bytes)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_DataQueuingIce.ExcludeRun):
                return NotImplemented
            else:
                if self.byteOffset is None or other.byteOffset is None:
                    if self.byteOffset != other.byteOffset:
                        return (-1 if self.byteOffset is None else 1)
                else:
                    if self.byteOffset < other.byteOffset:
                        return -1
                    elif self.byteOffset > other.byteOffset:
                        return 1
                if self.bytes is None or other.bytes is None:
                    if self.bytes != other.bytes:
                        return (-1 if self.bytes is None else 1)
                else:
                    if self.bytes < other.bytes:
                        return -1
                    elif self.bytes > other.bytes:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_DataQueuingIce._t_ExcludeRun)

        __repr__ = __str__

    _M_DataQueuingIce._t_ExcludeRun = IcePy.defineStruct('::DataQueuingIce::ExcludeRun', ExcludeRun, (), (
        ('byteOffset', (), IcePy._t_long),
        ('bytes', (), IcePy._t_long)
    ))

    _M_DataQueuingIce.ExcludeRun = ExcludeRun
    del ExcludeRun

if '_t_ExcludeRuns' not in _M_DataQueuingIce.__dict__:
    _M_DataQueuingIce._t_ExcludeRuns = IcePy.defineSequence('::DataQueuingIce::ExcludeRuns', (), _M_DataQueuingIce._t_ExcludeRun)

if 'WorkType' not in _M_DataQueuingIce.__dict__:
    _M_DataQueuingIce.WorkType = Ice.createTempClass()
    class WorkType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    WorkType.noneWork = WorkType("noneWork", 0)
    WorkType.cdpWork = WorkType("cdpWork", 1)
    WorkType.qemuWork = WorkType("qemuWork", 2)
    WorkType._enumerators = { 0:WorkType.noneWork, 1:WorkType.cdpWork, 2:WorkType.qemuWork }

    _M_DataQueuingIce._t_WorkType = IcePy.defineEnum('::DataQueuingIce::WorkType', WorkType, (), WorkType._enumerators)

    _M_DataQueuingIce.WorkType = WorkType
    del WorkType

if 'DataCreator' not in _M_DataQueuingIce.__dict__:
    _M_DataQueuingIce.DataCreator = Ice.createTempClass()
    class DataCreator(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_DataQueuingIce.DataCreator:
                raise RuntimeError('DataQueuingIce.DataCreator is an abstract class')

        def ice_ids(self, current=None):
            return ('::DataQueuingIce::DataCreator', '::Ice::Object')

        def ice_id(self, current=None):
            return '::DataQueuingIce::DataCreator'

        def ice_staticId():
            return '::DataQueuingIce::DataCreator'
        ice_staticId = staticmethod(ice_staticId)

        def StartCDPWork(self, task, token, cdpFileName, startTime, watch, excludeRuns, current=None):
            pass

        def StartQemuWorkForBitmap(self, task, token, snapshot, bitmap, excludeRuns, current=None):
            pass

        def StartQemuWorkForBitmapv2(self, task, token, snapshot, bitmapPath, excludeRuns, current=None):
            pass

        def StartQemuWork(self, task, token, snapshot, excludeRuns, current=None):
            pass

        def QueryQemuProgress(self, task, token, current=None):
            pass

        def QueryCDPProgress(self, task, token, current=None):
            pass

        def QueryWorkStatus(self, task, token, current=None):
            pass

        def StopQemuWork(self, task, token, current=None):
            pass

        def StopQemuWorkv2(self, task, token, current=None):
            pass

        def StopCDPWork(self, task, token, current=None):
            pass

        def SetRestoreBitmap(self, task, diskBitmap, current=None):
            pass

        def SetRestoreBitmapv2(self, task, diskBitmap, current=None):
            pass

        def EndTask(self, task, current=None):
            pass

        def CloseTask(self, task, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_DataQueuingIce._t_DataCreator)

        __repr__ = __str__

    _M_DataQueuingIce.DataCreatorPrx = Ice.createTempClass()
    class DataCreatorPrx(Ice.ObjectPrx):

        def StartCDPWork(self, task, token, cdpFileName, startTime, watch, excludeRuns, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_StartCDPWork.invoke(self, ((task, token, cdpFileName, startTime, watch, excludeRuns), _ctx))

        def begin_StartCDPWork(self, task, token, cdpFileName, startTime, watch, excludeRuns, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_StartCDPWork.begin(self, ((task, token, cdpFileName, startTime, watch, excludeRuns), _response, _ex, _sent, _ctx))

        def end_StartCDPWork(self, _r):
            return _M_DataQueuingIce.DataCreator._op_StartCDPWork.end(self, _r)

        def StartQemuWorkForBitmap(self, task, token, snapshot, bitmap, excludeRuns, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_StartQemuWorkForBitmap.invoke(self, ((task, token, snapshot, bitmap, excludeRuns), _ctx))

        def begin_StartQemuWorkForBitmap(self, task, token, snapshot, bitmap, excludeRuns, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_StartQemuWorkForBitmap.begin(self, ((task, token, snapshot, bitmap, excludeRuns), _response, _ex, _sent, _ctx))

        def end_StartQemuWorkForBitmap(self, _r):
            return _M_DataQueuingIce.DataCreator._op_StartQemuWorkForBitmap.end(self, _r)

        def StartQemuWorkForBitmapv2(self, task, token, snapshot, bitmapPath, excludeRuns, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_StartQemuWorkForBitmapv2.invoke(self, ((task, token, snapshot, bitmapPath, excludeRuns), _ctx))

        def begin_StartQemuWorkForBitmapv2(self, task, token, snapshot, bitmapPath, excludeRuns, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_StartQemuWorkForBitmapv2.begin(self, ((task, token, snapshot, bitmapPath, excludeRuns), _response, _ex, _sent, _ctx))

        def end_StartQemuWorkForBitmapv2(self, _r):
            return _M_DataQueuingIce.DataCreator._op_StartQemuWorkForBitmapv2.end(self, _r)

        def StartQemuWork(self, task, token, snapshot, excludeRuns, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_StartQemuWork.invoke(self, ((task, token, snapshot, excludeRuns), _ctx))

        def begin_StartQemuWork(self, task, token, snapshot, excludeRuns, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_StartQemuWork.begin(self, ((task, token, snapshot, excludeRuns), _response, _ex, _sent, _ctx))

        def end_StartQemuWork(self, _r):
            return _M_DataQueuingIce.DataCreator._op_StartQemuWork.end(self, _r)

        def QueryQemuProgress(self, task, token, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_QueryQemuProgress.invoke(self, ((task, token), _ctx))

        def begin_QueryQemuProgress(self, task, token, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_QueryQemuProgress.begin(self, ((task, token), _response, _ex, _sent, _ctx))

        def end_QueryQemuProgress(self, _r):
            return _M_DataQueuingIce.DataCreator._op_QueryQemuProgress.end(self, _r)

        def QueryCDPProgress(self, task, token, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_QueryCDPProgress.invoke(self, ((task, token), _ctx))

        def begin_QueryCDPProgress(self, task, token, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_QueryCDPProgress.begin(self, ((task, token), _response, _ex, _sent, _ctx))

        def end_QueryCDPProgress(self, _r):
            return _M_DataQueuingIce.DataCreator._op_QueryCDPProgress.end(self, _r)

        def QueryWorkStatus(self, task, token, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_QueryWorkStatus.invoke(self, ((task, token), _ctx))

        def begin_QueryWorkStatus(self, task, token, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_QueryWorkStatus.begin(self, ((task, token), _response, _ex, _sent, _ctx))

        def end_QueryWorkStatus(self, _r):
            return _M_DataQueuingIce.DataCreator._op_QueryWorkStatus.end(self, _r)

        def StopQemuWork(self, task, token, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_StopQemuWork.invoke(self, ((task, token), _ctx))

        def begin_StopQemuWork(self, task, token, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_StopQemuWork.begin(self, ((task, token), _response, _ex, _sent, _ctx))

        def end_StopQemuWork(self, _r):
            return _M_DataQueuingIce.DataCreator._op_StopQemuWork.end(self, _r)

        def StopQemuWorkv2(self, task, token, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_StopQemuWorkv2.invoke(self, ((task, token), _ctx))

        def begin_StopQemuWorkv2(self, task, token, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_StopQemuWorkv2.begin(self, ((task, token), _response, _ex, _sent, _ctx))

        def end_StopQemuWorkv2(self, _r):
            return _M_DataQueuingIce.DataCreator._op_StopQemuWorkv2.end(self, _r)

        def StopCDPWork(self, task, token, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_StopCDPWork.invoke(self, ((task, token), _ctx))

        def begin_StopCDPWork(self, task, token, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_StopCDPWork.begin(self, ((task, token), _response, _ex, _sent, _ctx))

        def end_StopCDPWork(self, _r):
            return _M_DataQueuingIce.DataCreator._op_StopCDPWork.end(self, _r)

        def SetRestoreBitmap(self, task, diskBitmap, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_SetRestoreBitmap.invoke(self, ((task, diskBitmap), _ctx))

        def begin_SetRestoreBitmap(self, task, diskBitmap, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_SetRestoreBitmap.begin(self, ((task, diskBitmap), _response, _ex, _sent, _ctx))

        def end_SetRestoreBitmap(self, _r):
            return _M_DataQueuingIce.DataCreator._op_SetRestoreBitmap.end(self, _r)

        def SetRestoreBitmapv2(self, task, diskBitmap, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_SetRestoreBitmapv2.invoke(self, ((task, diskBitmap), _ctx))

        def begin_SetRestoreBitmapv2(self, task, diskBitmap, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_SetRestoreBitmapv2.begin(self, ((task, diskBitmap), _response, _ex, _sent, _ctx))

        def end_SetRestoreBitmapv2(self, _r):
            return _M_DataQueuingIce.DataCreator._op_SetRestoreBitmapv2.end(self, _r)

        def EndTask(self, task, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_EndTask.invoke(self, ((task, ), _ctx))

        def begin_EndTask(self, task, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_EndTask.begin(self, ((task, ), _response, _ex, _sent, _ctx))

        def end_EndTask(self, _r):
            return _M_DataQueuingIce.DataCreator._op_EndTask.end(self, _r)

        def CloseTask(self, task, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_CloseTask.invoke(self, ((task, ), _ctx))

        def begin_CloseTask(self, task, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataCreator._op_CloseTask.begin(self, ((task, ), _response, _ex, _sent, _ctx))

        def end_CloseTask(self, _r):
            return _M_DataQueuingIce.DataCreator._op_CloseTask.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_DataQueuingIce.DataCreatorPrx.ice_checkedCast(proxy, '::DataQueuingIce::DataCreator', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_DataQueuingIce.DataCreatorPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::DataQueuingIce::DataCreator'
        ice_staticId = staticmethod(ice_staticId)

    _M_DataQueuingIce._t_DataCreatorPrx = IcePy.defineProxy('::DataQueuingIce::DataCreator', DataCreatorPrx)

    _M_DataQueuingIce._t_DataCreator = IcePy.defineClass('::DataQueuingIce::DataCreator', DataCreator, -1, (), True, False, None, (), ())
    DataCreator._ice_type = _M_DataQueuingIce._t_DataCreator

    DataCreator._op_StartCDPWork = IcePy.Operation('StartCDPWork', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_bool, False, 0), ((), _M_DataQueuingIce._t_ExcludeRuns, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    DataCreator._op_StartQemuWorkForBitmap = IcePy.Operation('StartQemuWorkForBitmap', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_IMG._t_ImageSnapshotIdents, False, 0), ((), _M_DataQueuingIce._t_BinaryStream, False, 0), ((), _M_DataQueuingIce._t_ExcludeRuns, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    DataCreator._op_StartQemuWorkForBitmapv2 = IcePy.Operation('StartQemuWorkForBitmapv2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_IMG._t_ImageSnapshotIdents, False, 0), ((), IcePy._t_string, False, 0), ((), _M_DataQueuingIce._t_ExcludeRuns, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    DataCreator._op_StartQemuWork = IcePy.Operation('StartQemuWork', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_IMG._t_ImageSnapshotIdents, False, 0), ((), _M_DataQueuingIce._t_ExcludeRuns, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    DataCreator._op_QueryQemuProgress = IcePy.Operation('QueryQemuProgress', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (((), IcePy._t_long, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0)), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    DataCreator._op_QueryCDPProgress = IcePy.Operation('QueryCDPProgress', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    DataCreator._op_QueryWorkStatus = IcePy.Operation('QueryWorkStatus', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (((), _M_DataQueuingIce._t_WorkType, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    DataCreator._op_StopQemuWork = IcePy.Operation('StopQemuWork', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (((), _M_DataQueuingIce._t_BinaryStream, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    DataCreator._op_StopQemuWorkv2 = IcePy.Operation('StopQemuWorkv2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    DataCreator._op_StopCDPWork = IcePy.Operation('StopCDPWork', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (((), IcePy._t_string, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    DataCreator._op_SetRestoreBitmap = IcePy.Operation('SetRestoreBitmap', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_DataQueuingIce._t_DiskBitmap, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    DataCreator._op_SetRestoreBitmapv2 = IcePy.Operation('SetRestoreBitmapv2', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_DataQueuingIce._t_DiskBitmapv2, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    DataCreator._op_EndTask = IcePy.Operation('EndTask', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    DataCreator._op_CloseTask = IcePy.Operation('CloseTask', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))

    _M_DataQueuingIce.DataCreator = DataCreator
    del DataCreator

    _M_DataQueuingIce.DataCreatorPrx = DataCreatorPrx
    del DataCreatorPrx

if 'DataGuest' not in _M_DataQueuingIce.__dict__:
    _M_DataQueuingIce.DataGuest = Ice.createTempClass()
    class DataGuest(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_DataQueuingIce.DataGuest:
                raise RuntimeError('DataQueuingIce.DataGuest is an abstract class')

        def ice_ids(self, current=None):
            return ('::DataQueuingIce::DataGuest', '::Ice::Object')

        def ice_id(self, current=None):
            return '::DataQueuingIce::DataGuest'

        def ice_staticId():
            return '::DataQueuingIce::DataGuest'
        ice_staticId = staticmethod(ice_staticId)

        def InitGuest(self, task, QueueIdent, current=None):
            pass

        def GetData(self, task, QueueIdent, current=None):
            pass

        def GetDataEx(self, task, QueueIdent, CompletedDataIdent, current=None):
            pass

        def DataCompleted(self, task, QueueIdent, DataIdent, current=None):
            pass

        def GetBitmapInfo(self, task, current=None):
            pass

        def GetBitmapData(self, task, bitmapId, bitmapOffset, maxbytes, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_DataQueuingIce._t_DataGuest)

        __repr__ = __str__

    _M_DataQueuingIce.DataGuestPrx = Ice.createTempClass()
    class DataGuestPrx(Ice.ObjectPrx):

        def InitGuest(self, task, QueueIdent, _ctx=None):
            return _M_DataQueuingIce.DataGuest._op_InitGuest.invoke(self, ((task, QueueIdent), _ctx))

        def begin_InitGuest(self, task, QueueIdent, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataGuest._op_InitGuest.begin(self, ((task, QueueIdent), _response, _ex, _sent, _ctx))

        def end_InitGuest(self, _r):
            return _M_DataQueuingIce.DataGuest._op_InitGuest.end(self, _r)

        def GetData(self, task, QueueIdent, _ctx=None):
            return _M_DataQueuingIce.DataGuest._op_GetData.invoke(self, ((task, QueueIdent), _ctx))

        def begin_GetData(self, task, QueueIdent, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataGuest._op_GetData.begin(self, ((task, QueueIdent), _response, _ex, _sent, _ctx))

        def end_GetData(self, _r):
            return _M_DataQueuingIce.DataGuest._op_GetData.end(self, _r)

        def GetDataEx(self, task, QueueIdent, CompletedDataIdent, _ctx=None):
            return _M_DataQueuingIce.DataGuest._op_GetDataEx.invoke(self, ((task, QueueIdent, CompletedDataIdent), _ctx))

        def begin_GetDataEx(self, task, QueueIdent, CompletedDataIdent, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataGuest._op_GetDataEx.begin(self, ((task, QueueIdent, CompletedDataIdent), _response, _ex, _sent, _ctx))

        def end_GetDataEx(self, _r):
            return _M_DataQueuingIce.DataGuest._op_GetDataEx.end(self, _r)

        def DataCompleted(self, task, QueueIdent, DataIdent, _ctx=None):
            return _M_DataQueuingIce.DataGuest._op_DataCompleted.invoke(self, ((task, QueueIdent, DataIdent), _ctx))

        def begin_DataCompleted(self, task, QueueIdent, DataIdent, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataGuest._op_DataCompleted.begin(self, ((task, QueueIdent, DataIdent), _response, _ex, _sent, _ctx))

        def end_DataCompleted(self, _r):
            return _M_DataQueuingIce.DataGuest._op_DataCompleted.end(self, _r)

        def GetBitmapInfo(self, task, _ctx=None):
            return _M_DataQueuingIce.DataGuest._op_GetBitmapInfo.invoke(self, ((task, ), _ctx))

        def begin_GetBitmapInfo(self, task, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataGuest._op_GetBitmapInfo.begin(self, ((task, ), _response, _ex, _sent, _ctx))

        def end_GetBitmapInfo(self, _r):
            return _M_DataQueuingIce.DataGuest._op_GetBitmapInfo.end(self, _r)

        def GetBitmapData(self, task, bitmapId, bitmapOffset, maxbytes, _ctx=None):
            return _M_DataQueuingIce.DataGuest._op_GetBitmapData.invoke(self, ((task, bitmapId, bitmapOffset, maxbytes), _ctx))

        def begin_GetBitmapData(self, task, bitmapId, bitmapOffset, maxbytes, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_DataQueuingIce.DataGuest._op_GetBitmapData.begin(self, ((task, bitmapId, bitmapOffset, maxbytes), _response, _ex, _sent, _ctx))

        def end_GetBitmapData(self, _r):
            return _M_DataQueuingIce.DataGuest._op_GetBitmapData.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_DataQueuingIce.DataGuestPrx.ice_checkedCast(proxy, '::DataQueuingIce::DataGuest', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_DataQueuingIce.DataGuestPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::DataQueuingIce::DataGuest'
        ice_staticId = staticmethod(ice_staticId)

    _M_DataQueuingIce._t_DataGuestPrx = IcePy.defineProxy('::DataQueuingIce::DataGuest', DataGuestPrx)

    _M_DataQueuingIce._t_DataGuest = IcePy.defineClass('::DataQueuingIce::DataGuest', DataGuest, -1, (), True, False, None, (), ())
    DataGuest._ice_type = _M_DataQueuingIce._t_DataGuest

    DataGuest._op_InitGuest = IcePy.Operation('InitGuest', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    DataGuest._op_GetData = IcePy.Operation('GetData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (((), IcePy._t_long, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0), ((), _M_DataQueuingIce._t_BinaryStream, False, 0), ((), IcePy._t_bool, False, 0)), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    DataGuest._op_GetDataEx = IcePy.Operation('GetDataEx', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_long, False, 0)), (((), IcePy._t_long, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0), ((), _M_DataQueuingIce._t_BinaryStream, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    DataGuest._op_DataCompleted = IcePy.Operation('DataCompleted', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    DataGuest._op_GetBitmapInfo = IcePy.Operation('GetBitmapInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (((), IcePy._t_int, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    DataGuest._op_GetBitmapData = IcePy.Operation('GetBitmapData', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (((), IcePy._t_string, False, 0), ((), _M_DataQueuingIce._t_BinaryStream, False, 0), ((), IcePy._t_bool, False, 0)), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))

    _M_DataQueuingIce.DataGuest = DataGuest
    del DataGuest

    _M_DataQueuingIce.DataGuestPrx = DataGuestPrx
    del DataGuestPrx

# End of module DataQueuingIce

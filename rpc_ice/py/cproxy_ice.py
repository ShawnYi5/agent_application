# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.4
#
# <auto-generated>
#
# Generated from file `cproxy.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import utils_ice

# Included module Utils
_M_Utils = Ice.openModule('Utils')

# Start of module CProxy
_M_CProxy = Ice.openModule('CProxy')
__name__ = 'CProxy'

if 'EndPoint' not in _M_CProxy.__dict__:
    _M_CProxy.EndPoint = Ice.createTempClass()
    class EndPoint(object):
        def __init__(self, Index=0, IpAddress='', Port=0):
            self.Index = Index
            self.IpAddress = IpAddress
            self.Port = Port

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.Index)
            _h = 5 * _h + Ice.getHash(self.IpAddress)
            _h = 5 * _h + Ice.getHash(self.Port)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_CProxy.EndPoint):
                return NotImplemented
            else:
                if self.Index is None or other.Index is None:
                    if self.Index != other.Index:
                        return (-1 if self.Index is None else 1)
                else:
                    if self.Index < other.Index:
                        return -1
                    elif self.Index > other.Index:
                        return 1
                if self.IpAddress is None or other.IpAddress is None:
                    if self.IpAddress != other.IpAddress:
                        return (-1 if self.IpAddress is None else 1)
                else:
                    if self.IpAddress < other.IpAddress:
                        return -1
                    elif self.IpAddress > other.IpAddress:
                        return 1
                if self.Port is None or other.Port is None:
                    if self.Port != other.Port:
                        return (-1 if self.Port is None else 1)
                else:
                    if self.Port < other.Port:
                        return -1
                    elif self.Port > other.Port:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_CProxy._t_EndPoint)

        __repr__ = __str__

    _M_CProxy._t_EndPoint = IcePy.defineStruct('::CProxy::EndPoint', EndPoint, (), (
        ('Index', (), IcePy._t_int),
        ('IpAddress', (), IcePy._t_string),
        ('Port', (), IcePy._t_int)
    ))

    _M_CProxy.EndPoint = EndPoint
    del EndPoint

if '_t_EndPoints' not in _M_CProxy.__dict__:
    _M_CProxy._t_EndPoints = IcePy.defineSequence('::CProxy::EndPoints', (), _M_CProxy._t_EndPoint)

if 'TunnelManager' not in _M_CProxy.__dict__:
    _M_CProxy.TunnelManager = Ice.createTempClass()
    class TunnelManager(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_CProxy.TunnelManager:
                raise RuntimeError('CProxy.TunnelManager is an abstract class')

        def ice_ids(self, current=None):
            return ('::CProxy::TunnelManager', '::Ice::Object')

        def ice_id(self, current=None):
            return '::CProxy::TunnelManager'

        def ice_staticId():
            return '::CProxy::TunnelManager'
        ice_staticId = staticmethod(ice_staticId)

        def Update(self, endPoints, current=None):
            pass

        def QueryIndexByInternalLinkSourcePort(self, port, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_CProxy._t_TunnelManager)

        __repr__ = __str__

    _M_CProxy.TunnelManagerPrx = Ice.createTempClass()
    class TunnelManagerPrx(Ice.ObjectPrx):

        def Update(self, endPoints, _ctx=None):
            return _M_CProxy.TunnelManager._op_Update.invoke(self, ((endPoints, ), _ctx))

        def begin_Update(self, endPoints, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_CProxy.TunnelManager._op_Update.begin(self, ((endPoints, ), _response, _ex, _sent, _ctx))

        def end_Update(self, _r):
            return _M_CProxy.TunnelManager._op_Update.end(self, _r)

        def QueryIndexByInternalLinkSourcePort(self, port, _ctx=None):
            return _M_CProxy.TunnelManager._op_QueryIndexByInternalLinkSourcePort.invoke(self, ((port, ), _ctx))

        def begin_QueryIndexByInternalLinkSourcePort(self, port, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_CProxy.TunnelManager._op_QueryIndexByInternalLinkSourcePort.begin(self, ((port, ), _response, _ex, _sent, _ctx))

        def end_QueryIndexByInternalLinkSourcePort(self, _r):
            return _M_CProxy.TunnelManager._op_QueryIndexByInternalLinkSourcePort.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_CProxy.TunnelManagerPrx.ice_checkedCast(proxy, '::CProxy::TunnelManager', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_CProxy.TunnelManagerPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::CProxy::TunnelManager'
        ice_staticId = staticmethod(ice_staticId)

    _M_CProxy._t_TunnelManagerPrx = IcePy.defineProxy('::CProxy::TunnelManager', TunnelManagerPrx)

    _M_CProxy._t_TunnelManager = IcePy.defineClass('::CProxy::TunnelManager', TunnelManager, -1, (), True, False, None, (), ())
    TunnelManager._ice_type = _M_CProxy._t_TunnelManager

    TunnelManager._op_Update = IcePy.Operation('Update', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_CProxy._t_EndPoints, False, 0),), (), None, (_M_Utils._t_SystemError,))
    TunnelManager._op_QueryIndexByInternalLinkSourcePort = IcePy.Operation('QueryIndexByInternalLinkSourcePort', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))

    _M_CProxy.TunnelManager = TunnelManager
    del TunnelManager

    _M_CProxy.TunnelManagerPrx = TunnelManagerPrx
    del TunnelManagerPrx

# End of module CProxy

# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.4
#
# <auto-generated>
#
# Generated from file `box_api.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import utils_ice
import perpcice_ice
import logic_ice
import img_ice
import Ice_BuiltinSequences_ice

# Included module Utils
_M_Utils = Ice.openModule('Utils')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module PerpcIce
_M_PerpcIce = Ice.openModule('PerpcIce')

# Included module BoxLogic
_M_BoxLogic = Ice.openModule('BoxLogic')

# Included module IMG
_M_IMG = Ice.openModule('IMG')

# Start of module Box
_M_Box = Ice.openModule('Box')
__name__ = 'Box'

if '_t_BinaryStream' not in _M_Box.__dict__:
    _M_Box._t_BinaryStream = IcePy.defineSequence('::Box::BinaryStream', (), IcePy._t_byte)

if 'BackupFile' not in _M_Box.__dict__:
    _M_Box.BackupFile = Ice.createTempClass()
    class BackupFile(object):
        def __init__(self, diskIndex=0, diskIdent='', snapshot=Ice._struct_marker, lastSnapshot=None, diskByteSize=0, enableCDP=False, cdpConfig=Ice._struct_marker, jsonConfig=''):
            self.diskIndex = diskIndex
            self.diskIdent = diskIdent
            if snapshot is Ice._struct_marker:
                self.snapshot = _M_IMG.ImageSnapshotIdent()
            else:
                self.snapshot = snapshot
            self.lastSnapshot = lastSnapshot
            self.diskByteSize = diskByteSize
            self.enableCDP = enableCDP
            if cdpConfig is Ice._struct_marker:
                self.cdpConfig = _M_BoxLogic.CDPConfig()
            else:
                self.cdpConfig = cdpConfig
            self.jsonConfig = jsonConfig

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.diskIndex)
            _h = 5 * _h + Ice.getHash(self.diskIdent)
            _h = 5 * _h + Ice.getHash(self.snapshot)
            if self.lastSnapshot:
                for _i0 in self.lastSnapshot:
                    _h = 5 * _h + Ice.getHash(_i0)
            _h = 5 * _h + Ice.getHash(self.diskByteSize)
            _h = 5 * _h + Ice.getHash(self.enableCDP)
            _h = 5 * _h + Ice.getHash(self.cdpConfig)
            _h = 5 * _h + Ice.getHash(self.jsonConfig)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Box.BackupFile):
                return NotImplemented
            else:
                if self.diskIndex is None or other.diskIndex is None:
                    if self.diskIndex != other.diskIndex:
                        return (-1 if self.diskIndex is None else 1)
                else:
                    if self.diskIndex < other.diskIndex:
                        return -1
                    elif self.diskIndex > other.diskIndex:
                        return 1
                if self.diskIdent is None or other.diskIdent is None:
                    if self.diskIdent != other.diskIdent:
                        return (-1 if self.diskIdent is None else 1)
                else:
                    if self.diskIdent < other.diskIdent:
                        return -1
                    elif self.diskIdent > other.diskIdent:
                        return 1
                if self.snapshot is None or other.snapshot is None:
                    if self.snapshot != other.snapshot:
                        return (-1 if self.snapshot is None else 1)
                else:
                    if self.snapshot < other.snapshot:
                        return -1
                    elif self.snapshot > other.snapshot:
                        return 1
                if self.lastSnapshot is None or other.lastSnapshot is None:
                    if self.lastSnapshot != other.lastSnapshot:
                        return (-1 if self.lastSnapshot is None else 1)
                else:
                    if self.lastSnapshot < other.lastSnapshot:
                        return -1
                    elif self.lastSnapshot > other.lastSnapshot:
                        return 1
                if self.diskByteSize is None or other.diskByteSize is None:
                    if self.diskByteSize != other.diskByteSize:
                        return (-1 if self.diskByteSize is None else 1)
                else:
                    if self.diskByteSize < other.diskByteSize:
                        return -1
                    elif self.diskByteSize > other.diskByteSize:
                        return 1
                if self.enableCDP is None or other.enableCDP is None:
                    if self.enableCDP != other.enableCDP:
                        return (-1 if self.enableCDP is None else 1)
                else:
                    if self.enableCDP < other.enableCDP:
                        return -1
                    elif self.enableCDP > other.enableCDP:
                        return 1
                if self.cdpConfig is None or other.cdpConfig is None:
                    if self.cdpConfig != other.cdpConfig:
                        return (-1 if self.cdpConfig is None else 1)
                else:
                    if self.cdpConfig < other.cdpConfig:
                        return -1
                    elif self.cdpConfig > other.cdpConfig:
                        return 1
                if self.jsonConfig is None or other.jsonConfig is None:
                    if self.jsonConfig != other.jsonConfig:
                        return (-1 if self.jsonConfig is None else 1)
                else:
                    if self.jsonConfig < other.jsonConfig:
                        return -1
                    elif self.jsonConfig > other.jsonConfig:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Box._t_BackupFile)

        __repr__ = __str__

    _M_Box._t_BackupFile = IcePy.defineStruct('::Box::BackupFile', BackupFile, (), (
        ('diskIndex', (), IcePy._t_int),
        ('diskIdent', (), IcePy._t_string),
        ('snapshot', (), _M_IMG._t_ImageSnapshotIdent),
        ('lastSnapshot', (), _M_IMG._t_ImageSnapshotIdents),
        ('diskByteSize', (), IcePy._t_long),
        ('enableCDP', (), IcePy._t_bool),
        ('cdpConfig', (), _M_BoxLogic._t_CDPConfig),
        ('jsonConfig', (), IcePy._t_string)
    ))

    _M_Box.BackupFile = BackupFile
    del BackupFile

if '_t_BackupFiles' not in _M_Box.__dict__:
    _M_Box._t_BackupFiles = IcePy.defineSequence('::Box::BackupFiles', (), _M_Box._t_BackupFile)

if 'RestoreFile' not in _M_Box.__dict__:
    _M_Box.RestoreFile = Ice.createTempClass()
    class RestoreFile(object):
        def __init__(self, diskIndex=0, diskBytes=0, snapshot=None):
            self.diskIndex = diskIndex
            self.diskBytes = diskBytes
            self.snapshot = snapshot

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.diskIndex)
            _h = 5 * _h + Ice.getHash(self.diskBytes)
            if self.snapshot:
                for _i0 in self.snapshot:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Box.RestoreFile):
                return NotImplemented
            else:
                if self.diskIndex is None or other.diskIndex is None:
                    if self.diskIndex != other.diskIndex:
                        return (-1 if self.diskIndex is None else 1)
                else:
                    if self.diskIndex < other.diskIndex:
                        return -1
                    elif self.diskIndex > other.diskIndex:
                        return 1
                if self.diskBytes is None or other.diskBytes is None:
                    if self.diskBytes != other.diskBytes:
                        return (-1 if self.diskBytes is None else 1)
                else:
                    if self.diskBytes < other.diskBytes:
                        return -1
                    elif self.diskBytes > other.diskBytes:
                        return 1
                if self.snapshot is None or other.snapshot is None:
                    if self.snapshot != other.snapshot:
                        return (-1 if self.snapshot is None else 1)
                else:
                    if self.snapshot < other.snapshot:
                        return -1
                    elif self.snapshot > other.snapshot:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Box._t_RestoreFile)

        __repr__ = __str__

    _M_Box._t_RestoreFile = IcePy.defineStruct('::Box::RestoreFile', RestoreFile, (), (
        ('diskIndex', (), IcePy._t_int),
        ('diskBytes', (), IcePy._t_long),
        ('snapshot', (), _M_IMG._t_ImageSnapshotIdents)
    ))

    _M_Box.RestoreFile = RestoreFile
    del RestoreFile

if '_t_RestoreFiles' not in _M_Box.__dict__:
    _M_Box._t_RestoreFiles = IcePy.defineSequence('::Box::RestoreFiles', (), _M_Box._t_RestoreFile)

if 'ServiceInfoStatus' not in _M_Box.__dict__:
    _M_Box.ServiceInfoStatus = Ice.createTempClass()
    class ServiceInfoStatus(object):
        def __init__(self, lpDisplayName='', lpServiceName='', dwServiceType=0, dwCurrentState=0, dwWin32ExitCode=0, dwServiceSpecificExitCode=0, dwProcessId=0, dwServiceFlags=0):
            self.lpDisplayName = lpDisplayName
            self.lpServiceName = lpServiceName
            self.dwServiceType = dwServiceType
            self.dwCurrentState = dwCurrentState
            self.dwWin32ExitCode = dwWin32ExitCode
            self.dwServiceSpecificExitCode = dwServiceSpecificExitCode
            self.dwProcessId = dwProcessId
            self.dwServiceFlags = dwServiceFlags

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.lpDisplayName)
            _h = 5 * _h + Ice.getHash(self.lpServiceName)
            _h = 5 * _h + Ice.getHash(self.dwServiceType)
            _h = 5 * _h + Ice.getHash(self.dwCurrentState)
            _h = 5 * _h + Ice.getHash(self.dwWin32ExitCode)
            _h = 5 * _h + Ice.getHash(self.dwServiceSpecificExitCode)
            _h = 5 * _h + Ice.getHash(self.dwProcessId)
            _h = 5 * _h + Ice.getHash(self.dwServiceFlags)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Box.ServiceInfoStatus):
                return NotImplemented
            else:
                if self.lpDisplayName is None or other.lpDisplayName is None:
                    if self.lpDisplayName != other.lpDisplayName:
                        return (-1 if self.lpDisplayName is None else 1)
                else:
                    if self.lpDisplayName < other.lpDisplayName:
                        return -1
                    elif self.lpDisplayName > other.lpDisplayName:
                        return 1
                if self.lpServiceName is None or other.lpServiceName is None:
                    if self.lpServiceName != other.lpServiceName:
                        return (-1 if self.lpServiceName is None else 1)
                else:
                    if self.lpServiceName < other.lpServiceName:
                        return -1
                    elif self.lpServiceName > other.lpServiceName:
                        return 1
                if self.dwServiceType is None or other.dwServiceType is None:
                    if self.dwServiceType != other.dwServiceType:
                        return (-1 if self.dwServiceType is None else 1)
                else:
                    if self.dwServiceType < other.dwServiceType:
                        return -1
                    elif self.dwServiceType > other.dwServiceType:
                        return 1
                if self.dwCurrentState is None or other.dwCurrentState is None:
                    if self.dwCurrentState != other.dwCurrentState:
                        return (-1 if self.dwCurrentState is None else 1)
                else:
                    if self.dwCurrentState < other.dwCurrentState:
                        return -1
                    elif self.dwCurrentState > other.dwCurrentState:
                        return 1
                if self.dwWin32ExitCode is None or other.dwWin32ExitCode is None:
                    if self.dwWin32ExitCode != other.dwWin32ExitCode:
                        return (-1 if self.dwWin32ExitCode is None else 1)
                else:
                    if self.dwWin32ExitCode < other.dwWin32ExitCode:
                        return -1
                    elif self.dwWin32ExitCode > other.dwWin32ExitCode:
                        return 1
                if self.dwServiceSpecificExitCode is None or other.dwServiceSpecificExitCode is None:
                    if self.dwServiceSpecificExitCode != other.dwServiceSpecificExitCode:
                        return (-1 if self.dwServiceSpecificExitCode is None else 1)
                else:
                    if self.dwServiceSpecificExitCode < other.dwServiceSpecificExitCode:
                        return -1
                    elif self.dwServiceSpecificExitCode > other.dwServiceSpecificExitCode:
                        return 1
                if self.dwProcessId is None or other.dwProcessId is None:
                    if self.dwProcessId != other.dwProcessId:
                        return (-1 if self.dwProcessId is None else 1)
                else:
                    if self.dwProcessId < other.dwProcessId:
                        return -1
                    elif self.dwProcessId > other.dwProcessId:
                        return 1
                if self.dwServiceFlags is None or other.dwServiceFlags is None:
                    if self.dwServiceFlags != other.dwServiceFlags:
                        return (-1 if self.dwServiceFlags is None else 1)
                else:
                    if self.dwServiceFlags < other.dwServiceFlags:
                        return -1
                    elif self.dwServiceFlags > other.dwServiceFlags:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Box._t_ServiceInfoStatus)

        __repr__ = __str__

    _M_Box._t_ServiceInfoStatus = IcePy.defineStruct('::Box::ServiceInfoStatus', ServiceInfoStatus, (), (
        ('lpDisplayName', (), IcePy._t_string),
        ('lpServiceName', (), IcePy._t_string),
        ('dwServiceType', (), IcePy._t_int),
        ('dwCurrentState', (), IcePy._t_int),
        ('dwWin32ExitCode', (), IcePy._t_int),
        ('dwServiceSpecificExitCode', (), IcePy._t_int),
        ('dwProcessId', (), IcePy._t_int),
        ('dwServiceFlags', (), IcePy._t_int)
    ))

    _M_Box.ServiceInfoStatus = ServiceInfoStatus
    del ServiceInfoStatus

if '_t_ServiceInfoStatusS' not in _M_Box.__dict__:
    _M_Box._t_ServiceInfoStatusS = IcePy.defineSequence('::Box::ServiceInfoStatusS', (), _M_Box._t_ServiceInfoStatus)

if '_t_vectorINT' not in _M_Box.__dict__:
    _M_Box._t_vectorINT = IcePy.defineSequence('::Box::vectorINT', (), IcePy._t_int)

if 'Apis' not in _M_Box.__dict__:
    _M_Box.Apis = Ice.createTempClass()
    class Apis(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Box.Apis:
                raise RuntimeError('Box.Apis is an abstract class')

        def ice_ids(self, current=None):
            return ('::Box::Apis', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Box::Apis'

        def ice_staticId():
            return '::Box::Apis'
        ice_staticId = staticmethod(ice_staticId)

        def ping(self, current=None):
            pass

        def reloginAllHostSession(self, delaySeconds, current=None):
            pass

        def isAgentLinked(self, hostName, current=None):
            pass

        def GetStatus(self, hostName, current=None):
            pass

        def queryDisksStatus(self, hostName, current=None):
            pass

        def JsonFunc(self, hostName, inputParam, current=None):
            pass

        def querySystemInfo(self, hostName, current=None):
            pass

        def backup(self, hostName, images, kiloBytesPerSecond, jsonConfig, current=None):
            pass

        def forceCloseBackupFiles(self, files, current=None):
            pass

        def getBackupInfo(self, hostName, inputJson, current=None):
            pass

        def setBackupInfo(self, hostName, inputJson, current=None):
            pass

        def queryLastBackupError(self, hostName, current=None):
            pass

        def queryLastCdpError(self, hostName, current=None):
            pass

        def stopCdpStatus(self, hostName, current=None):
            pass

        def volumeRestore(self, hostName, jsonConfig, images, dummyHost, current=None):
            pass

        def restore(self, hostName, info, images, jsonConfig, current=None):
            pass

        def setBootDataList(self, hostName, filePath, current=None):
            pass

        def notifyHighPriority(self, imageFileHandle, byteOffset, current=None):
            pass

        def ReadDiskWithPeHost(self, peHostIdent, token, sectorOffset, sectors, current=None):
            pass

        def WriteDiskWithPeHost(self, peHostIdent, token, sectorOffset, sectors, data, current=None):
            pass

        def QueryRWDiskWithPeHost(self, peHostIdent, current=None):
            pass

        def KvmStopped(self, peHostIdent, current=None):
            pass

        def GetPeHostClassHWInfo(self, peHostIdent, classname, parentLevel, current=None):
            pass

        def GetPeHostNetAdapterInfo(self, peHostIdent, current=None):
            pass

        def isPeHostLinked(self, peHostName, current=None):
            pass

        def StartAgentPe(self, hostName, current=None):
            pass

        def fetchAgentDebugFile(self, hostName, path, current=None):
            pass

        def queryRunnerAbsPathOnAgentSetup(self, session, current=None):
            pass

        def prepareInfoOnAgentSetup(self, session, flagJson, current=None):
            pass

        def getFileInfoOnAgentSetup(self, session, fileName, flagJson, current=None):
            pass

        def searchBootFileAbsPathOnAgentSetup(self, session, current=None):
            pass

        def generateKeyInfosOnAgentSetup(self, session, absFilePath, flagJson, current=None):
            pass

        def openOnAgentSetup(self, session, absFilePath, flagJson, current=None):
            pass

        def preadOnAgentSetup(self, session, handle, byteOffset, bytes, current=None):
            pass

        def pwriteOnAgentSetup(self, session, handle, byteOffset, bytes, data, current=None):
            pass

        def closeOnAgentSetup(self, session, handle, current=None):
            pass

        def extractFileOnAgentSetup(self, session, absSourceFilePath, absDestinationPath, flagJson, current=None):
            pass

        def executeCommandOnAgentSetup(self, session, cmd, flagJson, current=None):
            pass

        def reportStatusOnAgentSetup(self, session, contentJson, current=None):
            pass

        def exitOnAgentSetup(self, session, returnCode, current=None):
            pass

        def forceOfflineAgent(self, hostName, current=None):
            pass

        def forceOfflinePeHost(self, peHostIdent, current=None):
            pass

        def refreshNetwork(self, current=None):
            pass

        def GetServiceList(self, hostName, current=None):
            pass

        def GetTcpListenList(self, hostName, portList, current=None):
            pass

        def StartServiceSync(self, hostName, ServiceName, current=None):
            pass

        def StopServiceSync(self, hostName, ServiceName, current=None):
            pass

        def StartHttpDServiceAsync(self, hostName, port, bs, current=None):
            pass

        def GetHttpDServiceListSync(self, hostName, current=None):
            pass

        def StopAllHttpDServiceSync(self, hostName, current=None):
            pass

        def testDisk(self, hostName, diskIndex, sectorOffset, numberOfSectors, current=None):
            pass

        def readDisk(self, hostName, diskIndex, sectorOffset, numberOfSectors, current=None):
            pass

        def writeDisk(self, hostName, diskIndex, sectorOffset, numberOfSector, bs, current=None):
            pass

        def JsonFuncV2(self, hostName, inputJson, inputBs, current=None):
            pass

        def PEJsonFunc(self, peHostIdent, inputJson, inputBs, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Box._t_Apis)

        __repr__ = __str__

    _M_Box.ApisPrx = Ice.createTempClass()
    class ApisPrx(Ice.ObjectPrx):

        def ping(self, _ctx=None):
            return _M_Box.Apis._op_ping.invoke(self, ((), _ctx))

        def begin_ping(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_ping.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_ping(self, _r):
            return _M_Box.Apis._op_ping.end(self, _r)

        def reloginAllHostSession(self, delaySeconds, _ctx=None):
            return _M_Box.Apis._op_reloginAllHostSession.invoke(self, ((delaySeconds, ), _ctx))

        def begin_reloginAllHostSession(self, delaySeconds, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_reloginAllHostSession.begin(self, ((delaySeconds, ), _response, _ex, _sent, _ctx))

        def end_reloginAllHostSession(self, _r):
            return _M_Box.Apis._op_reloginAllHostSession.end(self, _r)

        def isAgentLinked(self, hostName, _ctx=None):
            return _M_Box.Apis._op_isAgentLinked.invoke(self, ((hostName, ), _ctx))

        def begin_isAgentLinked(self, hostName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_isAgentLinked.begin(self, ((hostName, ), _response, _ex, _sent, _ctx))

        def end_isAgentLinked(self, _r):
            return _M_Box.Apis._op_isAgentLinked.end(self, _r)

        def GetStatus(self, hostName, _ctx=None):
            return _M_Box.Apis._op_GetStatus.invoke(self, ((hostName, ), _ctx))

        def begin_GetStatus(self, hostName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_GetStatus.begin(self, ((hostName, ), _response, _ex, _sent, _ctx))

        def end_GetStatus(self, _r):
            return _M_Box.Apis._op_GetStatus.end(self, _r)

        def queryDisksStatus(self, hostName, _ctx=None):
            return _M_Box.Apis._op_queryDisksStatus.invoke(self, ((hostName, ), _ctx))

        def begin_queryDisksStatus(self, hostName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_queryDisksStatus.begin(self, ((hostName, ), _response, _ex, _sent, _ctx))

        def end_queryDisksStatus(self, _r):
            return _M_Box.Apis._op_queryDisksStatus.end(self, _r)

        def JsonFunc(self, hostName, inputParam, _ctx=None):
            return _M_Box.Apis._op_JsonFunc.invoke(self, ((hostName, inputParam), _ctx))

        def begin_JsonFunc(self, hostName, inputParam, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_JsonFunc.begin(self, ((hostName, inputParam), _response, _ex, _sent, _ctx))

        def end_JsonFunc(self, _r):
            return _M_Box.Apis._op_JsonFunc.end(self, _r)

        def querySystemInfo(self, hostName, _ctx=None):
            return _M_Box.Apis._op_querySystemInfo.invoke(self, ((hostName, ), _ctx))

        def begin_querySystemInfo(self, hostName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_querySystemInfo.begin(self, ((hostName, ), _response, _ex, _sent, _ctx))

        def end_querySystemInfo(self, _r):
            return _M_Box.Apis._op_querySystemInfo.end(self, _r)

        def backup(self, hostName, images, kiloBytesPerSecond, jsonConfig, _ctx=None):
            return _M_Box.Apis._op_backup.invoke(self, ((hostName, images, kiloBytesPerSecond, jsonConfig), _ctx))

        def begin_backup(self, hostName, images, kiloBytesPerSecond, jsonConfig, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_backup.begin(self, ((hostName, images, kiloBytesPerSecond, jsonConfig), _response, _ex, _sent, _ctx))

        def end_backup(self, _r):
            return _M_Box.Apis._op_backup.end(self, _r)

        def forceCloseBackupFiles(self, files, _ctx=None):
            return _M_Box.Apis._op_forceCloseBackupFiles.invoke(self, ((files, ), _ctx))

        def begin_forceCloseBackupFiles(self, files, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_forceCloseBackupFiles.begin(self, ((files, ), _response, _ex, _sent, _ctx))

        def end_forceCloseBackupFiles(self, _r):
            return _M_Box.Apis._op_forceCloseBackupFiles.end(self, _r)

        def getBackupInfo(self, hostName, inputJson, _ctx=None):
            return _M_Box.Apis._op_getBackupInfo.invoke(self, ((hostName, inputJson), _ctx))

        def begin_getBackupInfo(self, hostName, inputJson, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_getBackupInfo.begin(self, ((hostName, inputJson), _response, _ex, _sent, _ctx))

        def end_getBackupInfo(self, _r):
            return _M_Box.Apis._op_getBackupInfo.end(self, _r)

        def setBackupInfo(self, hostName, inputJson, _ctx=None):
            return _M_Box.Apis._op_setBackupInfo.invoke(self, ((hostName, inputJson), _ctx))

        def begin_setBackupInfo(self, hostName, inputJson, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_setBackupInfo.begin(self, ((hostName, inputJson), _response, _ex, _sent, _ctx))

        def end_setBackupInfo(self, _r):
            return _M_Box.Apis._op_setBackupInfo.end(self, _r)

        def queryLastBackupError(self, hostName, _ctx=None):
            return _M_Box.Apis._op_queryLastBackupError.invoke(self, ((hostName, ), _ctx))

        def begin_queryLastBackupError(self, hostName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_queryLastBackupError.begin(self, ((hostName, ), _response, _ex, _sent, _ctx))

        def end_queryLastBackupError(self, _r):
            return _M_Box.Apis._op_queryLastBackupError.end(self, _r)

        def queryLastCdpError(self, hostName, _ctx=None):
            return _M_Box.Apis._op_queryLastCdpError.invoke(self, ((hostName, ), _ctx))

        def begin_queryLastCdpError(self, hostName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_queryLastCdpError.begin(self, ((hostName, ), _response, _ex, _sent, _ctx))

        def end_queryLastCdpError(self, _r):
            return _M_Box.Apis._op_queryLastCdpError.end(self, _r)

        def stopCdpStatus(self, hostName, _ctx=None):
            return _M_Box.Apis._op_stopCdpStatus.invoke(self, ((hostName, ), _ctx))

        def begin_stopCdpStatus(self, hostName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_stopCdpStatus.begin(self, ((hostName, ), _response, _ex, _sent, _ctx))

        def end_stopCdpStatus(self, _r):
            return _M_Box.Apis._op_stopCdpStatus.end(self, _r)

        def volumeRestore(self, hostName, jsonConfig, images, dummyHost, _ctx=None):
            return _M_Box.Apis._op_volumeRestore.invoke(self, ((hostName, jsonConfig, images, dummyHost), _ctx))

        def begin_volumeRestore(self, hostName, jsonConfig, images, dummyHost, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_volumeRestore.begin(self, ((hostName, jsonConfig, images, dummyHost), _response, _ex, _sent, _ctx))

        def end_volumeRestore(self, _r):
            return _M_Box.Apis._op_volumeRestore.end(self, _r)

        def restore(self, hostName, info, images, jsonConfig, _ctx=None):
            return _M_Box.Apis._op_restore.invoke(self, ((hostName, info, images, jsonConfig), _ctx))

        def begin_restore(self, hostName, info, images, jsonConfig, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_restore.begin(self, ((hostName, info, images, jsonConfig), _response, _ex, _sent, _ctx))

        def end_restore(self, _r):
            return _M_Box.Apis._op_restore.end(self, _r)

        def setBootDataList(self, hostName, filePath, _ctx=None):
            return _M_Box.Apis._op_setBootDataList.invoke(self, ((hostName, filePath), _ctx))

        def begin_setBootDataList(self, hostName, filePath, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_setBootDataList.begin(self, ((hostName, filePath), _response, _ex, _sent, _ctx))

        def end_setBootDataList(self, _r):
            return _M_Box.Apis._op_setBootDataList.end(self, _r)

        def notifyHighPriority(self, imageFileHandle, byteOffset, _ctx=None):
            return _M_Box.Apis._op_notifyHighPriority.invoke(self, ((imageFileHandle, byteOffset), _ctx))

        def begin_notifyHighPriority(self, imageFileHandle, byteOffset, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_notifyHighPriority.begin(self, ((imageFileHandle, byteOffset), _response, _ex, _sent, _ctx))

        def end_notifyHighPriority(self, _r):
            return _M_Box.Apis._op_notifyHighPriority.end(self, _r)

        def ReadDiskWithPeHost(self, peHostIdent, token, sectorOffset, sectors, _ctx=None):
            return _M_Box.Apis._op_ReadDiskWithPeHost.invoke(self, ((peHostIdent, token, sectorOffset, sectors), _ctx))

        def begin_ReadDiskWithPeHost(self, peHostIdent, token, sectorOffset, sectors, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_ReadDiskWithPeHost.begin(self, ((peHostIdent, token, sectorOffset, sectors), _response, _ex, _sent, _ctx))

        def end_ReadDiskWithPeHost(self, _r):
            return _M_Box.Apis._op_ReadDiskWithPeHost.end(self, _r)

        def WriteDiskWithPeHost(self, peHostIdent, token, sectorOffset, sectors, data, _ctx=None):
            return _M_Box.Apis._op_WriteDiskWithPeHost.invoke(self, ((peHostIdent, token, sectorOffset, sectors, data), _ctx))

        def begin_WriteDiskWithPeHost(self, peHostIdent, token, sectorOffset, sectors, data, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_WriteDiskWithPeHost.begin(self, ((peHostIdent, token, sectorOffset, sectors, data), _response, _ex, _sent, _ctx))

        def end_WriteDiskWithPeHost(self, _r):
            return _M_Box.Apis._op_WriteDiskWithPeHost.end(self, _r)

        def QueryRWDiskWithPeHost(self, peHostIdent, _ctx=None):
            return _M_Box.Apis._op_QueryRWDiskWithPeHost.invoke(self, ((peHostIdent, ), _ctx))

        def begin_QueryRWDiskWithPeHost(self, peHostIdent, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_QueryRWDiskWithPeHost.begin(self, ((peHostIdent, ), _response, _ex, _sent, _ctx))

        def end_QueryRWDiskWithPeHost(self, _r):
            return _M_Box.Apis._op_QueryRWDiskWithPeHost.end(self, _r)

        def KvmStopped(self, peHostIdent, _ctx=None):
            return _M_Box.Apis._op_KvmStopped.invoke(self, ((peHostIdent, ), _ctx))

        def begin_KvmStopped(self, peHostIdent, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_KvmStopped.begin(self, ((peHostIdent, ), _response, _ex, _sent, _ctx))

        def end_KvmStopped(self, _r):
            return _M_Box.Apis._op_KvmStopped.end(self, _r)

        def GetPeHostClassHWInfo(self, peHostIdent, classname, parentLevel, _ctx=None):
            return _M_Box.Apis._op_GetPeHostClassHWInfo.invoke(self, ((peHostIdent, classname, parentLevel), _ctx))

        def begin_GetPeHostClassHWInfo(self, peHostIdent, classname, parentLevel, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_GetPeHostClassHWInfo.begin(self, ((peHostIdent, classname, parentLevel), _response, _ex, _sent, _ctx))

        def end_GetPeHostClassHWInfo(self, _r):
            return _M_Box.Apis._op_GetPeHostClassHWInfo.end(self, _r)

        def GetPeHostNetAdapterInfo(self, peHostIdent, _ctx=None):
            return _M_Box.Apis._op_GetPeHostNetAdapterInfo.invoke(self, ((peHostIdent, ), _ctx))

        def begin_GetPeHostNetAdapterInfo(self, peHostIdent, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_GetPeHostNetAdapterInfo.begin(self, ((peHostIdent, ), _response, _ex, _sent, _ctx))

        def end_GetPeHostNetAdapterInfo(self, _r):
            return _M_Box.Apis._op_GetPeHostNetAdapterInfo.end(self, _r)

        def isPeHostLinked(self, peHostName, _ctx=None):
            return _M_Box.Apis._op_isPeHostLinked.invoke(self, ((peHostName, ), _ctx))

        def begin_isPeHostLinked(self, peHostName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_isPeHostLinked.begin(self, ((peHostName, ), _response, _ex, _sent, _ctx))

        def end_isPeHostLinked(self, _r):
            return _M_Box.Apis._op_isPeHostLinked.end(self, _r)

        def StartAgentPe(self, hostName, _ctx=None):
            return _M_Box.Apis._op_StartAgentPe.invoke(self, ((hostName, ), _ctx))

        def begin_StartAgentPe(self, hostName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_StartAgentPe.begin(self, ((hostName, ), _response, _ex, _sent, _ctx))

        def end_StartAgentPe(self, _r):
            return _M_Box.Apis._op_StartAgentPe.end(self, _r)

        def fetchAgentDebugFile(self, hostName, path, _ctx=None):
            return _M_Box.Apis._op_fetchAgentDebugFile.invoke(self, ((hostName, path), _ctx))

        def begin_fetchAgentDebugFile(self, hostName, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_fetchAgentDebugFile.begin(self, ((hostName, path), _response, _ex, _sent, _ctx))

        def end_fetchAgentDebugFile(self, _r):
            return _M_Box.Apis._op_fetchAgentDebugFile.end(self, _r)

        def queryRunnerAbsPathOnAgentSetup(self, session, _ctx=None):
            return _M_Box.Apis._op_queryRunnerAbsPathOnAgentSetup.invoke(self, ((session, ), _ctx))

        def begin_queryRunnerAbsPathOnAgentSetup(self, session, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_queryRunnerAbsPathOnAgentSetup.begin(self, ((session, ), _response, _ex, _sent, _ctx))

        def end_queryRunnerAbsPathOnAgentSetup(self, _r):
            return _M_Box.Apis._op_queryRunnerAbsPathOnAgentSetup.end(self, _r)

        def prepareInfoOnAgentSetup(self, session, flagJson, _ctx=None):
            return _M_Box.Apis._op_prepareInfoOnAgentSetup.invoke(self, ((session, flagJson), _ctx))

        def begin_prepareInfoOnAgentSetup(self, session, flagJson, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_prepareInfoOnAgentSetup.begin(self, ((session, flagJson), _response, _ex, _sent, _ctx))

        def end_prepareInfoOnAgentSetup(self, _r):
            return _M_Box.Apis._op_prepareInfoOnAgentSetup.end(self, _r)

        def getFileInfoOnAgentSetup(self, session, fileName, flagJson, _ctx=None):
            return _M_Box.Apis._op_getFileInfoOnAgentSetup.invoke(self, ((session, fileName, flagJson), _ctx))

        def begin_getFileInfoOnAgentSetup(self, session, fileName, flagJson, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_getFileInfoOnAgentSetup.begin(self, ((session, fileName, flagJson), _response, _ex, _sent, _ctx))

        def end_getFileInfoOnAgentSetup(self, _r):
            return _M_Box.Apis._op_getFileInfoOnAgentSetup.end(self, _r)

        def searchBootFileAbsPathOnAgentSetup(self, session, _ctx=None):
            return _M_Box.Apis._op_searchBootFileAbsPathOnAgentSetup.invoke(self, ((session, ), _ctx))

        def begin_searchBootFileAbsPathOnAgentSetup(self, session, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_searchBootFileAbsPathOnAgentSetup.begin(self, ((session, ), _response, _ex, _sent, _ctx))

        def end_searchBootFileAbsPathOnAgentSetup(self, _r):
            return _M_Box.Apis._op_searchBootFileAbsPathOnAgentSetup.end(self, _r)

        def generateKeyInfosOnAgentSetup(self, session, absFilePath, flagJson, _ctx=None):
            return _M_Box.Apis._op_generateKeyInfosOnAgentSetup.invoke(self, ((session, absFilePath, flagJson), _ctx))

        def begin_generateKeyInfosOnAgentSetup(self, session, absFilePath, flagJson, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_generateKeyInfosOnAgentSetup.begin(self, ((session, absFilePath, flagJson), _response, _ex, _sent, _ctx))

        def end_generateKeyInfosOnAgentSetup(self, _r):
            return _M_Box.Apis._op_generateKeyInfosOnAgentSetup.end(self, _r)

        def openOnAgentSetup(self, session, absFilePath, flagJson, _ctx=None):
            return _M_Box.Apis._op_openOnAgentSetup.invoke(self, ((session, absFilePath, flagJson), _ctx))

        def begin_openOnAgentSetup(self, session, absFilePath, flagJson, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_openOnAgentSetup.begin(self, ((session, absFilePath, flagJson), _response, _ex, _sent, _ctx))

        def end_openOnAgentSetup(self, _r):
            return _M_Box.Apis._op_openOnAgentSetup.end(self, _r)

        def preadOnAgentSetup(self, session, handle, byteOffset, bytes, _ctx=None):
            return _M_Box.Apis._op_preadOnAgentSetup.invoke(self, ((session, handle, byteOffset, bytes), _ctx))

        def begin_preadOnAgentSetup(self, session, handle, byteOffset, bytes, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_preadOnAgentSetup.begin(self, ((session, handle, byteOffset, bytes), _response, _ex, _sent, _ctx))

        def end_preadOnAgentSetup(self, _r):
            return _M_Box.Apis._op_preadOnAgentSetup.end(self, _r)

        def pwriteOnAgentSetup(self, session, handle, byteOffset, bytes, data, _ctx=None):
            return _M_Box.Apis._op_pwriteOnAgentSetup.invoke(self, ((session, handle, byteOffset, bytes, data), _ctx))

        def begin_pwriteOnAgentSetup(self, session, handle, byteOffset, bytes, data, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_pwriteOnAgentSetup.begin(self, ((session, handle, byteOffset, bytes, data), _response, _ex, _sent, _ctx))

        def end_pwriteOnAgentSetup(self, _r):
            return _M_Box.Apis._op_pwriteOnAgentSetup.end(self, _r)

        def closeOnAgentSetup(self, session, handle, _ctx=None):
            return _M_Box.Apis._op_closeOnAgentSetup.invoke(self, ((session, handle), _ctx))

        def begin_closeOnAgentSetup(self, session, handle, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_closeOnAgentSetup.begin(self, ((session, handle), _response, _ex, _sent, _ctx))

        def end_closeOnAgentSetup(self, _r):
            return _M_Box.Apis._op_closeOnAgentSetup.end(self, _r)

        def extractFileOnAgentSetup(self, session, absSourceFilePath, absDestinationPath, flagJson, _ctx=None):
            return _M_Box.Apis._op_extractFileOnAgentSetup.invoke(self, ((session, absSourceFilePath, absDestinationPath, flagJson), _ctx))

        def begin_extractFileOnAgentSetup(self, session, absSourceFilePath, absDestinationPath, flagJson, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_extractFileOnAgentSetup.begin(self, ((session, absSourceFilePath, absDestinationPath, flagJson), _response, _ex, _sent, _ctx))

        def end_extractFileOnAgentSetup(self, _r):
            return _M_Box.Apis._op_extractFileOnAgentSetup.end(self, _r)

        def executeCommandOnAgentSetup(self, session, cmd, flagJson, _ctx=None):
            return _M_Box.Apis._op_executeCommandOnAgentSetup.invoke(self, ((session, cmd, flagJson), _ctx))

        def begin_executeCommandOnAgentSetup(self, session, cmd, flagJson, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_executeCommandOnAgentSetup.begin(self, ((session, cmd, flagJson), _response, _ex, _sent, _ctx))

        def end_executeCommandOnAgentSetup(self, _r):
            return _M_Box.Apis._op_executeCommandOnAgentSetup.end(self, _r)

        def reportStatusOnAgentSetup(self, session, contentJson, _ctx=None):
            return _M_Box.Apis._op_reportStatusOnAgentSetup.invoke(self, ((session, contentJson), _ctx))

        def begin_reportStatusOnAgentSetup(self, session, contentJson, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_reportStatusOnAgentSetup.begin(self, ((session, contentJson), _response, _ex, _sent, _ctx))

        def end_reportStatusOnAgentSetup(self, _r):
            return _M_Box.Apis._op_reportStatusOnAgentSetup.end(self, _r)

        def exitOnAgentSetup(self, session, returnCode, _ctx=None):
            return _M_Box.Apis._op_exitOnAgentSetup.invoke(self, ((session, returnCode), _ctx))

        def begin_exitOnAgentSetup(self, session, returnCode, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_exitOnAgentSetup.begin(self, ((session, returnCode), _response, _ex, _sent, _ctx))

        def end_exitOnAgentSetup(self, _r):
            return _M_Box.Apis._op_exitOnAgentSetup.end(self, _r)

        def forceOfflineAgent(self, hostName, _ctx=None):
            return _M_Box.Apis._op_forceOfflineAgent.invoke(self, ((hostName, ), _ctx))

        def begin_forceOfflineAgent(self, hostName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_forceOfflineAgent.begin(self, ((hostName, ), _response, _ex, _sent, _ctx))

        def end_forceOfflineAgent(self, _r):
            return _M_Box.Apis._op_forceOfflineAgent.end(self, _r)

        def forceOfflinePeHost(self, peHostIdent, _ctx=None):
            return _M_Box.Apis._op_forceOfflinePeHost.invoke(self, ((peHostIdent, ), _ctx))

        def begin_forceOfflinePeHost(self, peHostIdent, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_forceOfflinePeHost.begin(self, ((peHostIdent, ), _response, _ex, _sent, _ctx))

        def end_forceOfflinePeHost(self, _r):
            return _M_Box.Apis._op_forceOfflinePeHost.end(self, _r)

        def refreshNetwork(self, _ctx=None):
            return _M_Box.Apis._op_refreshNetwork.invoke(self, ((), _ctx))

        def begin_refreshNetwork(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_refreshNetwork.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_refreshNetwork(self, _r):
            return _M_Box.Apis._op_refreshNetwork.end(self, _r)

        def GetServiceList(self, hostName, _ctx=None):
            return _M_Box.Apis._op_GetServiceList.invoke(self, ((hostName, ), _ctx))

        def begin_GetServiceList(self, hostName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_GetServiceList.begin(self, ((hostName, ), _response, _ex, _sent, _ctx))

        def end_GetServiceList(self, _r):
            return _M_Box.Apis._op_GetServiceList.end(self, _r)

        def GetTcpListenList(self, hostName, portList, _ctx=None):
            return _M_Box.Apis._op_GetTcpListenList.invoke(self, ((hostName, portList), _ctx))

        def begin_GetTcpListenList(self, hostName, portList, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_GetTcpListenList.begin(self, ((hostName, portList), _response, _ex, _sent, _ctx))

        def end_GetTcpListenList(self, _r):
            return _M_Box.Apis._op_GetTcpListenList.end(self, _r)

        def StartServiceSync(self, hostName, ServiceName, _ctx=None):
            return _M_Box.Apis._op_StartServiceSync.invoke(self, ((hostName, ServiceName), _ctx))

        def begin_StartServiceSync(self, hostName, ServiceName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_StartServiceSync.begin(self, ((hostName, ServiceName), _response, _ex, _sent, _ctx))

        def end_StartServiceSync(self, _r):
            return _M_Box.Apis._op_StartServiceSync.end(self, _r)

        def StopServiceSync(self, hostName, ServiceName, _ctx=None):
            return _M_Box.Apis._op_StopServiceSync.invoke(self, ((hostName, ServiceName), _ctx))

        def begin_StopServiceSync(self, hostName, ServiceName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_StopServiceSync.begin(self, ((hostName, ServiceName), _response, _ex, _sent, _ctx))

        def end_StopServiceSync(self, _r):
            return _M_Box.Apis._op_StopServiceSync.end(self, _r)

        def StartHttpDServiceAsync(self, hostName, port, bs, _ctx=None):
            return _M_Box.Apis._op_StartHttpDServiceAsync.invoke(self, ((hostName, port, bs), _ctx))

        def begin_StartHttpDServiceAsync(self, hostName, port, bs, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_StartHttpDServiceAsync.begin(self, ((hostName, port, bs), _response, _ex, _sent, _ctx))

        def end_StartHttpDServiceAsync(self, _r):
            return _M_Box.Apis._op_StartHttpDServiceAsync.end(self, _r)

        def GetHttpDServiceListSync(self, hostName, _ctx=None):
            return _M_Box.Apis._op_GetHttpDServiceListSync.invoke(self, ((hostName, ), _ctx))

        def begin_GetHttpDServiceListSync(self, hostName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_GetHttpDServiceListSync.begin(self, ((hostName, ), _response, _ex, _sent, _ctx))

        def end_GetHttpDServiceListSync(self, _r):
            return _M_Box.Apis._op_GetHttpDServiceListSync.end(self, _r)

        def StopAllHttpDServiceSync(self, hostName, _ctx=None):
            return _M_Box.Apis._op_StopAllHttpDServiceSync.invoke(self, ((hostName, ), _ctx))

        def begin_StopAllHttpDServiceSync(self, hostName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_StopAllHttpDServiceSync.begin(self, ((hostName, ), _response, _ex, _sent, _ctx))

        def end_StopAllHttpDServiceSync(self, _r):
            return _M_Box.Apis._op_StopAllHttpDServiceSync.end(self, _r)

        def testDisk(self, hostName, diskIndex, sectorOffset, numberOfSectors, _ctx=None):
            return _M_Box.Apis._op_testDisk.invoke(self, ((hostName, diskIndex, sectorOffset, numberOfSectors), _ctx))

        def begin_testDisk(self, hostName, diskIndex, sectorOffset, numberOfSectors, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_testDisk.begin(self, ((hostName, diskIndex, sectorOffset, numberOfSectors), _response, _ex, _sent, _ctx))

        def end_testDisk(self, _r):
            return _M_Box.Apis._op_testDisk.end(self, _r)

        def readDisk(self, hostName, diskIndex, sectorOffset, numberOfSectors, _ctx=None):
            return _M_Box.Apis._op_readDisk.invoke(self, ((hostName, diskIndex, sectorOffset, numberOfSectors), _ctx))

        def begin_readDisk(self, hostName, diskIndex, sectorOffset, numberOfSectors, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_readDisk.begin(self, ((hostName, diskIndex, sectorOffset, numberOfSectors), _response, _ex, _sent, _ctx))

        def end_readDisk(self, _r):
            return _M_Box.Apis._op_readDisk.end(self, _r)

        def writeDisk(self, hostName, diskIndex, sectorOffset, numberOfSector, bs, _ctx=None):
            return _M_Box.Apis._op_writeDisk.invoke(self, ((hostName, diskIndex, sectorOffset, numberOfSector, bs), _ctx))

        def begin_writeDisk(self, hostName, diskIndex, sectorOffset, numberOfSector, bs, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_writeDisk.begin(self, ((hostName, diskIndex, sectorOffset, numberOfSector, bs), _response, _ex, _sent, _ctx))

        def end_writeDisk(self, _r):
            return _M_Box.Apis._op_writeDisk.end(self, _r)

        def JsonFuncV2(self, hostName, inputJson, inputBs, _ctx=None):
            return _M_Box.Apis._op_JsonFuncV2.invoke(self, ((hostName, inputJson, inputBs), _ctx))

        def begin_JsonFuncV2(self, hostName, inputJson, inputBs, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_JsonFuncV2.begin(self, ((hostName, inputJson, inputBs), _response, _ex, _sent, _ctx))

        def end_JsonFuncV2(self, _r):
            return _M_Box.Apis._op_JsonFuncV2.end(self, _r)

        def PEJsonFunc(self, peHostIdent, inputJson, inputBs, _ctx=None):
            return _M_Box.Apis._op_PEJsonFunc.invoke(self, ((peHostIdent, inputJson, inputBs), _ctx))

        def begin_PEJsonFunc(self, peHostIdent, inputJson, inputBs, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Box.Apis._op_PEJsonFunc.begin(self, ((peHostIdent, inputJson, inputBs), _response, _ex, _sent, _ctx))

        def end_PEJsonFunc(self, _r):
            return _M_Box.Apis._op_PEJsonFunc.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Box.ApisPrx.ice_checkedCast(proxy, '::Box::Apis', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Box.ApisPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Box::Apis'
        ice_staticId = staticmethod(ice_staticId)

    _M_Box._t_ApisPrx = IcePy.defineProxy('::Box::Apis', ApisPrx)

    _M_Box._t_Apis = IcePy.defineClass('::Box::Apis', Apis, -1, (), True, False, None, (), ())
    Apis._ice_type = _M_Box._t_Apis

    Apis._op_ping = IcePy.Operation('ping', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Apis._op_reloginAllHostSession = IcePy.Operation('reloginAllHostSession', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Apis._op_isAgentLinked = IcePy.Operation('isAgentLinked', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    Apis._op_GetStatus = IcePy.Operation('GetStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_BoxLogic._t_AgentStatus, False, 0), ())
    Apis._op_queryDisksStatus = IcePy.Operation('queryDisksStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (((), _M_BoxLogic._t_Disks, False, 0), ((), IcePy._t_string, True, 1)), None, (_M_Utils._t_SystemError,))
    Apis._op_JsonFunc = IcePy.Operation('JsonFunc', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_querySystemInfo = IcePy.Operation('querySystemInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_backup = IcePy.Operation('backup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_Box._t_BackupFiles, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, True, 1)), (), None, (_M_Utils._t_SystemError, _M_Utils._t_CreateSnapshotImageError))
    Apis._op_forceCloseBackupFiles = IcePy.Operation('forceCloseBackupFiles', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_StringSeq, False, 0),), (), None, ())
    Apis._op_getBackupInfo = IcePy.Operation('getBackupInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_setBackupInfo = IcePy.Operation('setBackupInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Apis._op_queryLastBackupError = IcePy.Operation('queryLastBackupError', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    Apis._op_queryLastCdpError = IcePy.Operation('queryLastCdpError', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    Apis._op_stopCdpStatus = IcePy.Operation('stopCdpStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    Apis._op_volumeRestore = IcePy.Operation('volumeRestore', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_Box._t_RestoreFiles, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Apis._op_restore = IcePy.Operation('restore', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_PerpcIce._t_PeRestoreInfo, False, 0), ((), _M_Box._t_RestoreFiles, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Apis._op_setBootDataList = IcePy.Operation('setBootDataList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Apis._op_notifyHighPriority = IcePy.Operation('notifyHighPriority', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_long, False, 0), ((), IcePy._t_long, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Apis._op_ReadDiskWithPeHost = IcePy.Operation('ReadDiskWithPeHost', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0)), (((), _M_Box._t_BinaryStream, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_WriteDiskWithPeHost = IcePy.Operation('WriteDiskWithPeHost', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0), ((), _M_Box._t_BinaryStream, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_QueryRWDiskWithPeHost = IcePy.Operation('QueryRWDiskWithPeHost', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (((), IcePy._t_long, False, 0), ((), IcePy._t_long, False, 0)), ((), IcePy._t_bool, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_KvmStopped = IcePy.Operation('KvmStopped', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    Apis._op_GetPeHostClassHWInfo = IcePy.Operation('GetPeHostClassHWInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (((), _M_PerpcIce._t_HWInfos, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_GetPeHostNetAdapterInfo = IcePy.Operation('GetPeHostNetAdapterInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (((), _M_PerpcIce._t_NetAdapterInfos, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_isPeHostLinked = IcePy.Operation('isPeHostLinked', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    Apis._op_StartAgentPe = IcePy.Operation('StartAgentPe', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_fetchAgentDebugFile = IcePy.Operation('fetchAgentDebugFile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Apis._op_queryRunnerAbsPathOnAgentSetup = IcePy.Operation('queryRunnerAbsPathOnAgentSetup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_prepareInfoOnAgentSetup = IcePy.Operation('prepareInfoOnAgentSetup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_getFileInfoOnAgentSetup = IcePy.Operation('getFileInfoOnAgentSetup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_searchBootFileAbsPathOnAgentSetup = IcePy.Operation('searchBootFileAbsPathOnAgentSetup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_generateKeyInfosOnAgentSetup = IcePy.Operation('generateKeyInfosOnAgentSetup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Apis._op_openOnAgentSetup = IcePy.Operation('openOnAgentSetup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_preadOnAgentSetup = IcePy.Operation('preadOnAgentSetup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_Ice._t_ByteSeq, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_pwriteOnAgentSetup = IcePy.Operation('pwriteOnAgentSetup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0), ((), _M_Ice._t_ByteSeq, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Apis._op_closeOnAgentSetup = IcePy.Operation('closeOnAgentSetup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Apis._op_extractFileOnAgentSetup = IcePy.Operation('extractFileOnAgentSetup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Apis._op_executeCommandOnAgentSetup = IcePy.Operation('executeCommandOnAgentSetup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (((), _M_Ice._t_StringSeq, False, 0), ((), _M_Ice._t_StringSeq, False, 0)), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_reportStatusOnAgentSetup = IcePy.Operation('reportStatusOnAgentSetup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Apis._op_exitOnAgentSetup = IcePy.Operation('exitOnAgentSetup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_Utils._t_SystemError,))
    Apis._op_forceOfflineAgent = IcePy.Operation('forceOfflineAgent', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    Apis._op_forceOfflinePeHost = IcePy.Operation('forceOfflinePeHost', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    Apis._op_refreshNetwork = IcePy.Operation('refreshNetwork', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Apis._op_GetServiceList = IcePy.Operation('GetServiceList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (((), _M_Box._t_ServiceInfoStatusS, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_GetTcpListenList = IcePy.Operation('GetTcpListenList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_Box._t_vectorINT, False, 0)), (((), _M_Box._t_vectorINT, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_StartServiceSync = IcePy.Operation('StartServiceSync', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_StopServiceSync = IcePy.Operation('StopServiceSync', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_StartHttpDServiceAsync = IcePy.Operation('StartHttpDServiceAsync', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), _M_Box._t_BinaryStream, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_GetHttpDServiceListSync = IcePy.Operation('GetHttpDServiceListSync', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (((), _M_Box._t_vectorINT, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_StopAllHttpDServiceSync = IcePy.Operation('StopAllHttpDServiceSync', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_testDisk = IcePy.Operation('testDisk', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_short, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_readDisk = IcePy.Operation('readDisk', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_short, False, 0)), (((), _M_Box._t_BinaryStream, False, 0),), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_writeDisk = IcePy.Operation('writeDisk', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_short, False, 0), ((), _M_Box._t_BinaryStream, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_JsonFuncV2 = IcePy.Operation('JsonFuncV2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_Box._t_BinaryStream, False, 0)), (((), _M_Box._t_BinaryStream, False, 0),), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    Apis._op_PEJsonFunc = IcePy.Operation('PEJsonFunc', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_Box._t_BinaryStream, False, 0)), (((), _M_Box._t_BinaryStream, False, 0),), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError, _M_Utils._t_OperationNotExistError))

    _M_Box.Apis = Apis
    del Apis

    _M_Box.ApisPrx = ApisPrx
    del ApisPrx

# End of module Box

# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.4
#
# <auto-generated>
#
# Generated from file `file_backup_logic.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import utils_ice

# Included module Utils
_M_Utils = Ice.openModule('Utils')

# Start of module FileBackup
_M_FileBackup = Ice.openModule('FileBackup')
__name__ = 'FileBackup'

if 'Logic' not in _M_FileBackup.__dict__:
    _M_FileBackup.Logic = Ice.createTempClass()
    class Logic(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_FileBackup.Logic:
                raise RuntimeError('FileBackup.Logic is an abstract class')

        def ice_ids(self, current=None):
            return ('::FileBackup::Logic', '::Ice::Object')

        def ice_id(self, current=None):
            return '::FileBackup::Logic'

        def ice_staticId():
            return '::FileBackup::Logic'
        ice_staticId = staticmethod(ice_staticId)

        def MountNas(self, jsonParams, current=None):
            pass

        def UmountNas(self, jsonParams, current=None):
            pass

        def MountBackup(self, jsonParams, current=None):
            pass

        def UmountBackup(self, jsonParams, current=None):
            pass

        def Backup(self, jsonParams, current=None):
            pass

        def CancleBackup(self, jsonParams, current=None):
            pass

        def QueryBackupStatus(self, current=None):
            pass

        def Shutdown(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_FileBackup._t_Logic)

        __repr__ = __str__

    _M_FileBackup.LogicPrx = Ice.createTempClass()
    class LogicPrx(Ice.ObjectPrx):

        def MountNas(self, jsonParams, _ctx=None):
            return _M_FileBackup.Logic._op_MountNas.invoke(self, ((jsonParams, ), _ctx))

        def begin_MountNas(self, jsonParams, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_FileBackup.Logic._op_MountNas.begin(self, ((jsonParams, ), _response, _ex, _sent, _ctx))

        def end_MountNas(self, _r):
            return _M_FileBackup.Logic._op_MountNas.end(self, _r)

        def UmountNas(self, jsonParams, _ctx=None):
            return _M_FileBackup.Logic._op_UmountNas.invoke(self, ((jsonParams, ), _ctx))

        def begin_UmountNas(self, jsonParams, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_FileBackup.Logic._op_UmountNas.begin(self, ((jsonParams, ), _response, _ex, _sent, _ctx))

        def end_UmountNas(self, _r):
            return _M_FileBackup.Logic._op_UmountNas.end(self, _r)

        def MountBackup(self, jsonParams, _ctx=None):
            return _M_FileBackup.Logic._op_MountBackup.invoke(self, ((jsonParams, ), _ctx))

        def begin_MountBackup(self, jsonParams, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_FileBackup.Logic._op_MountBackup.begin(self, ((jsonParams, ), _response, _ex, _sent, _ctx))

        def end_MountBackup(self, _r):
            return _M_FileBackup.Logic._op_MountBackup.end(self, _r)

        def UmountBackup(self, jsonParams, _ctx=None):
            return _M_FileBackup.Logic._op_UmountBackup.invoke(self, ((jsonParams, ), _ctx))

        def begin_UmountBackup(self, jsonParams, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_FileBackup.Logic._op_UmountBackup.begin(self, ((jsonParams, ), _response, _ex, _sent, _ctx))

        def end_UmountBackup(self, _r):
            return _M_FileBackup.Logic._op_UmountBackup.end(self, _r)

        def Backup(self, jsonParams, _ctx=None):
            return _M_FileBackup.Logic._op_Backup.invoke(self, ((jsonParams, ), _ctx))

        def begin_Backup(self, jsonParams, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_FileBackup.Logic._op_Backup.begin(self, ((jsonParams, ), _response, _ex, _sent, _ctx))

        def end_Backup(self, _r):
            return _M_FileBackup.Logic._op_Backup.end(self, _r)

        def CancleBackup(self, jsonParams, _ctx=None):
            return _M_FileBackup.Logic._op_CancleBackup.invoke(self, ((jsonParams, ), _ctx))

        def begin_CancleBackup(self, jsonParams, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_FileBackup.Logic._op_CancleBackup.begin(self, ((jsonParams, ), _response, _ex, _sent, _ctx))

        def end_CancleBackup(self, _r):
            return _M_FileBackup.Logic._op_CancleBackup.end(self, _r)

        def QueryBackupStatus(self, _ctx=None):
            return _M_FileBackup.Logic._op_QueryBackupStatus.invoke(self, ((), _ctx))

        def begin_QueryBackupStatus(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_FileBackup.Logic._op_QueryBackupStatus.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_QueryBackupStatus(self, _r):
            return _M_FileBackup.Logic._op_QueryBackupStatus.end(self, _r)

        def Shutdown(self, _ctx=None):
            return _M_FileBackup.Logic._op_Shutdown.invoke(self, ((), _ctx))

        def begin_Shutdown(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_FileBackup.Logic._op_Shutdown.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_Shutdown(self, _r):
            return _M_FileBackup.Logic._op_Shutdown.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_FileBackup.LogicPrx.ice_checkedCast(proxy, '::FileBackup::Logic', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_FileBackup.LogicPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::FileBackup::Logic'
        ice_staticId = staticmethod(ice_staticId)

    _M_FileBackup._t_LogicPrx = IcePy.defineProxy('::FileBackup::Logic', LogicPrx)

    _M_FileBackup._t_Logic = IcePy.defineClass('::FileBackup::Logic', Logic, -1, (), True, False, None, (), ())
    Logic._ice_type = _M_FileBackup._t_Logic

    Logic._op_MountNas = IcePy.Operation('MountNas', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    Logic._op_UmountNas = IcePy.Operation('UmountNas', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_Utils._t_SystemError,))
    Logic._op_MountBackup = IcePy.Operation('MountBackup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    Logic._op_UmountBackup = IcePy.Operation('UmountBackup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    Logic._op_Backup = IcePy.Operation('Backup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    Logic._op_CancleBackup = IcePy.Operation('CancleBackup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Utils._t_SystemError,))
    Logic._op_QueryBackupStatus = IcePy.Operation('QueryBackupStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), (_M_Utils._t_SystemError,))
    Logic._op_Shutdown = IcePy.Operation('Shutdown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_FileBackup.Logic = Logic
    del Logic

    _M_FileBackup.LogicPrx = LogicPrx
    del LogicPrx

# End of module FileBackup

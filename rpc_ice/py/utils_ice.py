# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.4
#
# <auto-generated>
#
# Generated from file `utils.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Utils
_M_Utils = Ice.openModule('Utils')
__name__ = 'Utils'

if 'ErrorBase' not in _M_Utils.__dict__:
    _M_Utils.ErrorBase = Ice.createTempClass()
    class ErrorBase(Ice.UserException):
        def __init__(self, description='', debug=''):
            self.description = description
            self.debug = debug

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Utils::ErrorBase'

    _M_Utils._t_ErrorBase = IcePy.defineException('::Utils::ErrorBase', ErrorBase, (), False, None, (
        ('description', (), IcePy._t_string, False, 0),
        ('debug', (), IcePy._t_string, False, 0)
    ))
    ErrorBase._ice_type = _M_Utils._t_ErrorBase

    _M_Utils.ErrorBase = ErrorBase
    del ErrorBase

if 'SystemError' not in _M_Utils.__dict__:
    _M_Utils.SystemError = Ice.createTempClass()
    class SystemError(_M_Utils.ErrorBase):
        """
        系统调用失败错误
        """
        def __init__(self, description='', debug='', rawCode=0):
            _M_Utils.ErrorBase.__init__(self, description, debug)
            self.rawCode = rawCode

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Utils::SystemError'

    _M_Utils._t_SystemError = IcePy.defineException('::Utils::SystemError', SystemError, (), False, _M_Utils._t_ErrorBase, (('rawCode', (), IcePy._t_long, False, 0),))
    SystemError._ice_type = _M_Utils._t_SystemError

    _M_Utils.SystemError = SystemError
    del SystemError

if 'NeedRetryLaterError' not in _M_Utils.__dict__:
    _M_Utils.NeedRetryLaterError = Ice.createTempClass()
    class NeedRetryLaterError(_M_Utils.ErrorBase):
        def __init__(self, description='', debug=''):
            _M_Utils.ErrorBase.__init__(self, description, debug)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Utils::NeedRetryLaterError'

    _M_Utils._t_NeedRetryLaterError = IcePy.defineException('::Utils::NeedRetryLaterError', NeedRetryLaterError, (), False, _M_Utils._t_ErrorBase, ())
    NeedRetryLaterError._ice_type = _M_Utils._t_NeedRetryLaterError

    _M_Utils.NeedRetryLaterError = NeedRetryLaterError
    del NeedRetryLaterError

if 'CreateSnapshotImageError' not in _M_Utils.__dict__:
    _M_Utils.CreateSnapshotImageError = Ice.createTempClass()
    class CreateSnapshotImageError(_M_Utils.SystemError):
        def __init__(self, description='', debug='', rawCode=0):
            _M_Utils.SystemError.__init__(self, description, debug, rawCode)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Utils::CreateSnapshotImageError'

    _M_Utils._t_CreateSnapshotImageError = IcePy.defineException('::Utils::CreateSnapshotImageError', CreateSnapshotImageError, (), False, _M_Utils._t_SystemError, ())
    CreateSnapshotImageError._ice_type = _M_Utils._t_CreateSnapshotImageError

    _M_Utils.CreateSnapshotImageError = CreateSnapshotImageError
    del CreateSnapshotImageError

if 'OperationNotExistError' not in _M_Utils.__dict__:
    _M_Utils.OperationNotExistError = Ice.createTempClass()
    class OperationNotExistError(_M_Utils.ErrorBase):
        def __init__(self, description='', debug=''):
            _M_Utils.ErrorBase.__init__(self, description, debug)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Utils::OperationNotExistError'

    _M_Utils._t_OperationNotExistError = IcePy.defineException('::Utils::OperationNotExistError', OperationNotExistError, (), False, _M_Utils._t_ErrorBase, ())
    OperationNotExistError._ice_type = _M_Utils._t_OperationNotExistError

    _M_Utils.OperationNotExistError = OperationNotExistError
    del OperationNotExistError

if '_t_BinaryStream' not in _M_Utils.__dict__:
    _M_Utils._t_BinaryStream = IcePy.defineSequence('::Utils::BinaryStream', (), IcePy._t_byte)

if 'Callable' not in _M_Utils.__dict__:
    _M_Utils.Callable = Ice.createTempClass()
    class Callable(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Utils.Callable:
                raise RuntimeError('Utils.Callable is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Utils::Callable')

        def ice_id(self, current=None):
            return '::Utils::Callable'

        def ice_staticId():
            return '::Utils::Callable'
        ice_staticId = staticmethod(ice_staticId)

        def execute(self, callJson, inputJson, inputBs, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Utils._t_Callable)

        __repr__ = __str__

    _M_Utils.CallablePrx = Ice.createTempClass()
    class CallablePrx(Ice.ObjectPrx):

        def execute(self, callJson, inputJson, inputBs, _ctx=None):
            return _M_Utils.Callable._op_execute.invoke(self, ((callJson, inputJson, inputBs), _ctx))

        def begin_execute(self, callJson, inputJson, inputBs, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Utils.Callable._op_execute.begin(self, ((callJson, inputJson, inputBs), _response, _ex, _sent, _ctx))

        def end_execute(self, _r):
            return _M_Utils.Callable._op_execute.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Utils.CallablePrx.ice_checkedCast(proxy, '::Utils::Callable', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Utils.CallablePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Utils::Callable'
        ice_staticId = staticmethod(ice_staticId)

    _M_Utils._t_CallablePrx = IcePy.defineProxy('::Utils::Callable', CallablePrx)

    _M_Utils._t_Callable = IcePy.defineClass('::Utils::Callable', Callable, -1, (), True, False, None, (), ())
    Callable._ice_type = _M_Utils._t_Callable

    Callable._op_execute = IcePy.Operation('execute', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_Utils._t_BinaryStream, False, 0)), (((), IcePy._t_string, False, 0), ((), _M_Utils._t_BinaryStream, False, 0)), None, (_M_Utils._t_SystemError,))

    _M_Utils.Callable = Callable
    del Callable

    _M_Utils.CallablePrx = CallablePrx
    del CallablePrx

# End of module Utils

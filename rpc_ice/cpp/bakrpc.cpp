// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `bakrpc.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <bakrpc.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __bakrpc__BackupRPC__callFunction_name = "callFunction";

}

namespace
{

const ::std::string __kvm4remote__KVM__SetRemoteCallable_name = "SetRemoteCallable";

const ::std::string __kvm4remote__KVM__CleanRemoteCallable_name = "CleanRemoteCallable";

const ::std::string __kvm4remote__KVM__getKVMCallable_name = "getKVMCallable";

}
::IceProxy::Ice::Object* ::IceProxy::bakrpc::upCast(::IceProxy::bakrpc::BackupRPC* p) { return p; }

void
::IceProxy::bakrpc::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::bakrpc::BackupRPC>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::bakrpc::BackupRPC;
        v->__copyFrom(proxy);
    }
}

::Ice::Int
IceProxy::bakrpc::BackupRPC::callFunction(const ::std::string& __p_callJson, const ::std::string& __p_inJson, const ::bakrpc::BinaryStream& __p_inRaw, ::std::string& __p_outJson, ::bakrpc::BinaryStream& __p_outRaw, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__bakrpc__BackupRPC__callFunction_name);
    ::IceInternal::Outgoing __og(this, __bakrpc__BackupRPC__callFunction_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_callJson);
        __os->write(__p_inJson);
        __os->write(__p_inRaw);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_outJson);
    __is->read(__p_outRaw);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::bakrpc::BackupRPC::begin_callFunction(const ::std::string& __p_callJson, const ::std::string& __p_inJson, const ::bakrpc::BinaryStream& __p_inRaw, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__bakrpc__BackupRPC__callFunction_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __bakrpc__BackupRPC__callFunction_name, __del, __cookie);
    try
    {
        __result->prepare(__bakrpc__BackupRPC__callFunction_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_callJson);
        __os->write(__p_inJson);
        __os->write(__p_inRaw);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::bakrpc::BackupRPC::__begin_callFunction(const ::std::string& __p_callJson, const ::std::string& __p_inJson, const ::bakrpc::BinaryStream& __p_inRaw, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&, const ::bakrpc::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int, const ::std::string&, const ::bakrpc::BinaryStream&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::bakrpc::BackupRPCPrx __proxy = ::bakrpc::BackupRPCPrx::uncheckedCast(__result->getProxy());
            ::std::string __p_outJson;
            ::bakrpc::BinaryStream __p_outRaw;
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_callFunction(__p_outJson, __p_outRaw, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_outJson, __p_outRaw);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int, const ::std::string&, const ::bakrpc::BinaryStream&)> _response;
    };
    return begin_callFunction(__p_callJson, __p_inJson, __p_inRaw, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::bakrpc::BackupRPC::end_callFunction(::std::string& __p_outJson, ::bakrpc::BinaryStream& __p_outRaw, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __bakrpc__BackupRPC__callFunction_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_outJson);
    __is->read(__p_outRaw);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::bakrpc::BackupRPC::ice_staticId()
{
    return ::bakrpc::BackupRPC::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::bakrpc::BackupRPC::__newInstance() const
{
    return new BackupRPC;
}
::IceProxy::Ice::Object* ::IceProxy::kvm4remote::upCast(::IceProxy::kvm4remote::KVM* p) { return p; }

void
::IceProxy::kvm4remote::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::kvm4remote::KVM>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::kvm4remote::KVM;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::kvm4remote::KVM::SetRemoteCallable(const ::std::string& __p_ident, const ::Utils::CallablePrx& __p_callable, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__kvm4remote__KVM__SetRemoteCallable_name);
    ::IceInternal::Outgoing __og(this, __kvm4remote__KVM__SetRemoteCallable_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __os->write(__p_callable);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::kvm4remote::KVM::begin_SetRemoteCallable(const ::std::string& __p_ident, const ::Utils::CallablePrx& __p_callable, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__kvm4remote__KVM__SetRemoteCallable_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __kvm4remote__KVM__SetRemoteCallable_name, __del, __cookie);
    try
    {
        __result->prepare(__kvm4remote__KVM__SetRemoteCallable_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __os->write(__p_callable);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::kvm4remote::KVM::__begin_SetRemoteCallable(const ::std::string& __p_ident, const ::Utils::CallablePrx& __p_callable, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::kvm4remote::KVMPrx __proxy = ::kvm4remote::KVMPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_SetRemoteCallable(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_SetRemoteCallable(__p_ident, __p_callable, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::kvm4remote::KVM::end_SetRemoteCallable(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __kvm4remote__KVM__SetRemoteCallable_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::kvm4remote::KVM::CleanRemoteCallable(const ::std::string& __p_ident, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __kvm4remote__KVM__CleanRemoteCallable_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::kvm4remote::KVM::begin_CleanRemoteCallable(const ::std::string& __p_ident, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __kvm4remote__KVM__CleanRemoteCallable_name, __del, __cookie);
    try
    {
        __result->prepare(__kvm4remote__KVM__CleanRemoteCallable_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::kvm4remote::KVM::end_CleanRemoteCallable(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __kvm4remote__KVM__CleanRemoteCallable_name);
}

::Utils::CallablePrx
IceProxy::kvm4remote::KVM::getKVMCallable(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__kvm4remote__KVM__getKVMCallable_name);
    ::IceInternal::Outgoing __og(this, __kvm4remote__KVM__getKVMCallable_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Utils::CallablePrx __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::kvm4remote::KVM::begin_getKVMCallable(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__kvm4remote__KVM__getKVMCallable_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __kvm4remote__KVM__getKVMCallable_name, __del, __cookie);
    try
    {
        __result->prepare(__kvm4remote__KVM__getKVMCallable_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::kvm4remote::KVM::__begin_getKVMCallable(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Utils::CallablePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Utils::CallablePrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::kvm4remote::KVMPrx __proxy = ::kvm4remote::KVMPrx::uncheckedCast(__result->getProxy());
            ::Utils::CallablePrx __ret;
            try
            {
                __ret = __proxy->end_getKVMCallable(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::Utils::CallablePrx&)> _response;
    };
    return begin_getKVMCallable(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Utils::CallablePrx
IceProxy::kvm4remote::KVM::end_getKVMCallable(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __kvm4remote__KVM__getKVMCallable_name);
    ::Utils::CallablePrx __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::kvm4remote::KVM::ice_staticId()
{
    return ::kvm4remote::KVM::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::kvm4remote::KVM::__newInstance() const
{
    return new KVM;
}

::Ice::Object* bakrpc::upCast(::bakrpc::BackupRPC* p) { return p; }

namespace
{
const ::std::string __bakrpc__BackupRPC_ids[2] =
{
    "::Ice::Object",
    "::bakrpc::BackupRPC"
};

}

bool
bakrpc::BackupRPC::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__bakrpc__BackupRPC_ids, __bakrpc__BackupRPC_ids + 2, _s);
}

::std::vector< ::std::string>
bakrpc::BackupRPC::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__bakrpc__BackupRPC_ids[0], &__bakrpc__BackupRPC_ids[2]);
}

const ::std::string&
bakrpc::BackupRPC::ice_id(const ::Ice::Current&) const
{
    return __bakrpc__BackupRPC_ids[1];
}

const ::std::string&
bakrpc::BackupRPC::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::bakrpc::BackupRPC";
    return typeId;
#else
    return __bakrpc__BackupRPC_ids[1];
#endif
}

::Ice::DispatchStatus
bakrpc::BackupRPC::___callFunction(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_callJson;
    ::std::string __p_inJson;
    ::bakrpc::BinaryStream __p_inRaw;
    __is->read(__p_callJson);
    __is->read(__p_inJson);
    __is->read(__p_inRaw);
    __inS.endReadParams();
    ::std::string __p_outJson;
    ::bakrpc::BinaryStream __p_outRaw;
    try
    {
        ::Ice::Int __ret = callFunction(__p_callJson, __p_inJson, __p_inRaw, __p_outJson, __p_outRaw, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_outJson);
        __os->write(__p_outRaw);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __bakrpc__BackupRPC_all[] =
{
    "callFunction",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
bakrpc::BackupRPC::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__bakrpc__BackupRPC_all, __bakrpc__BackupRPC_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __bakrpc__BackupRPC_all)
    {
        case 0:
        {
            return ___callFunction(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
bakrpc::BackupRPC::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
bakrpc::BackupRPC::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
bakrpc::__patch(BackupRPCPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::bakrpc::BackupRPCPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::bakrpc::BackupRPC::ice_staticId(), v);
    }
}

::Ice::Object* kvm4remote::upCast(::kvm4remote::KVM* p) { return p; }

namespace
{
const ::std::string __kvm4remote__KVM_ids[2] =
{
    "::Ice::Object",
    "::kvm4remote::KVM"
};

}

bool
kvm4remote::KVM::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__kvm4remote__KVM_ids, __kvm4remote__KVM_ids + 2, _s);
}

::std::vector< ::std::string>
kvm4remote::KVM::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__kvm4remote__KVM_ids[0], &__kvm4remote__KVM_ids[2]);
}

const ::std::string&
kvm4remote::KVM::ice_id(const ::Ice::Current&) const
{
    return __kvm4remote__KVM_ids[1];
}

const ::std::string&
kvm4remote::KVM::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::kvm4remote::KVM";
    return typeId;
#else
    return __kvm4remote__KVM_ids[1];
#endif
}

::Ice::DispatchStatus
kvm4remote::KVM::___SetRemoteCallable(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_ident;
    ::Utils::CallablePrx __p_callable;
    __is->read(__p_ident);
    __is->read(__p_callable);
    __inS.endReadParams();
    try
    {
        SetRemoteCallable(__p_ident, __p_callable, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
kvm4remote::KVM::___CleanRemoteCallable(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_ident;
    __is->read(__p_ident);
    __inS.endReadParams();
    CleanRemoteCallable(__p_ident, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
kvm4remote::KVM::___getKVMCallable(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    try
    {
        ::Utils::CallablePrx __ret = getKVMCallable(__current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __kvm4remote__KVM_all[] =
{
    "CleanRemoteCallable",
    "SetRemoteCallable",
    "getKVMCallable",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
kvm4remote::KVM::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__kvm4remote__KVM_all, __kvm4remote__KVM_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __kvm4remote__KVM_all)
    {
        case 0:
        {
            return ___CleanRemoteCallable(in, current);
        }
        case 1:
        {
            return ___SetRemoteCallable(in, current);
        }
        case 2:
        {
            return ___getKVMCallable(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
kvm4remote::KVM::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
kvm4remote::KVM::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
kvm4remote::__patch(KVMPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::kvm4remote::KVMPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::kvm4remote::KVM::ice_staticId(), v);
    }
}

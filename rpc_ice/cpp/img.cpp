// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `img.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <img.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __IMG__ImgService__create_name = "create";

const ::std::string __IMG__ImgService__setUsedBlockBitmap_name = "setUsedBlockBitmap";

const ::std::string __IMG__ImgService__cleanUsedBlockBitmap_name = "cleanUsedBlockBitmap";

const ::std::string __IMG__ImgService__setDuplicateFileSectors_name = "setDuplicateFileSectors";

const ::std::string __IMG__ImgService__open_name = "open";

const ::std::string __IMG__ImgService__getTotalUesdBlockBitmap_name = "getTotalUesdBlockBitmap";

const ::std::string __IMG__ImgService__getAllFileSectors_name = "getAllFileSectors";

const ::std::string __IMG__ImgService__read_name = "read";

const ::std::string __IMG__ImgService__readEx_name = "readEx";

const ::std::string __IMG__ImgService__write_name = "write";

const ::std::string __IMG__ImgService__writeCdp_name = "writeCdp";

const ::std::string __IMG__ImgService__writeCdpByIndex_name = "writeCdpByIndex";

const ::std::string __IMG__ImgService__writeCdpByTmeAndIndex_name = "writeCdpByTmeAndIndex";

const ::std::string __IMG__ImgService__close_name = "close";

const ::std::string __IMG__ImgService__GetSnSize_name = "GetSnSize";

const ::std::string __IMG__ImgService__DelSnaport_name = "DelSnaport";

const ::std::string __IMG__ImgService__RenameSnapshot_name = "RenameSnapshot";

const ::std::string __IMG__ImgService__GetOnSnMapFile_name = "GetOnSnMapFile";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::IMG::upCast(::IceProxy::IMG::ImgService* p) { return p; }

void
::IceProxy::IMG::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::IMG::ImgService>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::IMG::ImgService;
        v->__copyFrom(proxy);
    }
}

::Ice::Long
IceProxy::IMG::ImgService::create(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IMG::ImageSnapshotIdents& __p_lastSnapshot, ::Ice::Long __p_diskByteSize, const ::std::string& __p_flag, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__IMG__ImgService__create_name);
    ::IceInternal::Outgoing __og(this, __IMG__ImgService__create_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __os->write(__p_lastSnapshot);
        __os->write(__p_diskByteSize);
        __os->write(__p_flag);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Long __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_create(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IMG::ImageSnapshotIdents& __p_lastSnapshot, ::Ice::Long __p_diskByteSize, const ::std::string& __p_flag, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__create_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__create_name, __del, __cookie);
    try
    {
        __result->prepare(__IMG__ImgService__create_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __os->write(__p_lastSnapshot);
        __os->write(__p_diskByteSize);
        __os->write(__p_flag);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::__begin_create(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IMG::ImageSnapshotIdents& __p_lastSnapshot, ::Ice::Long __p_diskByteSize, const ::std::string& __p_flag, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
            ::Ice::Long __ret;
            try
            {
                __ret = __proxy->end_create(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Long)> _response;
    };
    return begin_create(__p_ident, __p_lastSnapshot, __p_diskByteSize, __p_flag, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Long
IceProxy::IMG::ImgService::end_create(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__create_name);
    ::Ice::Long __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::IMG::ImgService::setUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__IMG__ImgService__setUsedBlockBitmap_name);
    ::IceInternal::Outgoing __og(this, __IMG__ImgService__setUsedBlockBitmap_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_bitmap);
        __os->write(__p_completed);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_setUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__setUsedBlockBitmap_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__setUsedBlockBitmap_name, __del, __cookie);
    try
    {
        __result->prepare(__IMG__ImgService__setUsedBlockBitmap_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_bitmap);
        __os->write(__p_completed);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::__begin_setUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_setUsedBlockBitmap(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_setUsedBlockBitmap(__p_handle, __p_bitmap, __p_completed, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::IMG::ImgService::end_setUsedBlockBitmap(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__setUsedBlockBitmap_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::IMG::ImgService::cleanUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BlockIndexes& __p_indexes, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__IMG__ImgService__cleanUsedBlockBitmap_name);
    ::IceInternal::Outgoing __og(this, __IMG__ImgService__cleanUsedBlockBitmap_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_indexes);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_cleanUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BlockIndexes& __p_indexes, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__cleanUsedBlockBitmap_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__cleanUsedBlockBitmap_name, __del, __cookie);
    try
    {
        __result->prepare(__IMG__ImgService__cleanUsedBlockBitmap_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_indexes);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::__begin_cleanUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BlockIndexes& __p_indexes, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_cleanUsedBlockBitmap(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_cleanUsedBlockBitmap(__p_handle, __p_indexes, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::IMG::ImgService::end_cleanUsedBlockBitmap(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__cleanUsedBlockBitmap_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::IMG::ImgService::setDuplicateFileSectors(::Ice::Long __p_handle, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__IMG__ImgService__setDuplicateFileSectors_name);
    ::IceInternal::Outgoing __og(this, __IMG__ImgService__setDuplicateFileSectors_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_sectors);
        __os->write(__p_completed);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_setDuplicateFileSectors(::Ice::Long __p_handle, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__setDuplicateFileSectors_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__setDuplicateFileSectors_name, __del, __cookie);
    try
    {
        __result->prepare(__IMG__ImgService__setDuplicateFileSectors_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_sectors);
        __os->write(__p_completed);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::__begin_setDuplicateFileSectors(::Ice::Long __p_handle, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_setDuplicateFileSectors(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_setDuplicateFileSectors(__p_handle, __p_sectors, __p_completed, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::IMG::ImgService::end_setDuplicateFileSectors(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__setDuplicateFileSectors_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Long
IceProxy::IMG::ImgService::open(const ::IMG::ImageSnapshotIdents& __p_ident, const ::std::string& __p_flag, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__IMG__ImgService__open_name);
    ::IceInternal::Outgoing __og(this, __IMG__ImgService__open_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __os->write(__p_flag);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Long __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_open(const ::IMG::ImageSnapshotIdents& __p_ident, const ::std::string& __p_flag, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__open_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__open_name, __del, __cookie);
    try
    {
        __result->prepare(__IMG__ImgService__open_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __os->write(__p_flag);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::__begin_open(const ::IMG::ImageSnapshotIdents& __p_ident, const ::std::string& __p_flag, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
            ::Ice::Long __ret;
            try
            {
                __ret = __proxy->end_open(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Long)> _response;
    };
    return begin_open(__p_ident, __p_flag, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Long
IceProxy::IMG::ImgService::end_open(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__open_name);
    ::Ice::Long __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::IMG::ImgService::getTotalUesdBlockBitmap(::Ice::Long __p_handle, ::Ice::Int __p_index, ::IMG::BinaryStream& __p_bitmap, bool& __p_finish, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__IMG__ImgService__getTotalUesdBlockBitmap_name);
    ::IceInternal::Outgoing __og(this, __IMG__ImgService__getTotalUesdBlockBitmap_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_index);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_bitmap);
    __is->read(__p_finish);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_getTotalUesdBlockBitmap(::Ice::Long __p_handle, ::Ice::Int __p_index, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__getTotalUesdBlockBitmap_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__getTotalUesdBlockBitmap_name, __del, __cookie);
    try
    {
        __result->prepare(__IMG__ImgService__getTotalUesdBlockBitmap_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_index);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::__begin_getTotalUesdBlockBitmap(::Ice::Long __p_handle, ::Ice::Int __p_index, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::IMG::BinaryStream&, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int, const ::IMG::BinaryStream&, bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
            ::IMG::BinaryStream __p_bitmap;
            bool __p_finish;
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_getTotalUesdBlockBitmap(__p_bitmap, __p_finish, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_bitmap, __p_finish);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int, const ::IMG::BinaryStream&, bool)> _response;
    };
    return begin_getTotalUesdBlockBitmap(__p_handle, __p_index, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::IMG::ImgService::end_getTotalUesdBlockBitmap(::IMG::BinaryStream& __p_bitmap, bool& __p_finish, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__getTotalUesdBlockBitmap_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_bitmap);
    __is->read(__p_finish);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Long
IceProxy::IMG::ImgService::getAllFileSectors(::Ice::Long __p_handle, ::Ice::Long __p_index, ::IMG::FileSectors& __p_sectors, bool& __p_finish, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__IMG__ImgService__getAllFileSectors_name);
    ::IceInternal::Outgoing __og(this, __IMG__ImgService__getAllFileSectors_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_index);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Long __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_sectors);
    __is->read(__p_finish);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_getAllFileSectors(::Ice::Long __p_handle, ::Ice::Long __p_index, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__getAllFileSectors_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__getAllFileSectors_name, __del, __cookie);
    try
    {
        __result->prepare(__IMG__ImgService__getAllFileSectors_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_index);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::__begin_getAllFileSectors(::Ice::Long __p_handle, ::Ice::Long __p_index, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long, const ::IMG::FileSectors&, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Long, const ::IMG::FileSectors&, bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
            ::IMG::FileSectors __p_sectors;
            bool __p_finish;
            ::Ice::Long __ret;
            try
            {
                __ret = __proxy->end_getAllFileSectors(__p_sectors, __p_finish, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_sectors, __p_finish);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Long, const ::IMG::FileSectors&, bool)> _response;
    };
    return begin_getAllFileSectors(__p_handle, __p_index, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Long
IceProxy::IMG::ImgService::end_getAllFileSectors(::IMG::FileSectors& __p_sectors, bool& __p_finish, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__getAllFileSectors_name);
    ::Ice::Long __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_sectors);
    __is->read(__p_finish);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::IMG::ImgService::read(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, ::IMG::BinaryStream& __p_data, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__IMG__ImgService__read_name);
    ::IceInternal::Outgoing __og(this, __IMG__ImgService__read_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_byteOffset);
        __os->write(__p_byteSize);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_data);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_read(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__read_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__read_name, __del, __cookie);
    try
    {
        __result->prepare(__IMG__ImgService__read_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_byteOffset);
        __os->write(__p_byteSize);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::__begin_read(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::IMG::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int, const ::IMG::BinaryStream&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
            ::IMG::BinaryStream __p_data;
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_read(__p_data, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_data);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int, const ::IMG::BinaryStream&)> _response;
    };
    return begin_read(__p_handle, __p_byteOffset, __p_byteSize, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::IMG::ImgService::end_read(::IMG::BinaryStream& __p_data, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__read_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_data);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::IMG::ImgService::readEx(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, ::IMG::BinaryStream& __p_data, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__IMG__ImgService__readEx_name);
    ::IceInternal::Outgoing __og(this, __IMG__ImgService__readEx_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_byteOffset);
        __os->write(__p_byteSize);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_data);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_readEx(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__readEx_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__readEx_name, __del, __cookie);
    try
    {
        __result->prepare(__IMG__ImgService__readEx_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_byteOffset);
        __os->write(__p_byteSize);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::__begin_readEx(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::IMG::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int, const ::IMG::BinaryStream&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
            ::IMG::BinaryStream __p_data;
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_readEx(__p_data, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_data);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int, const ::IMG::BinaryStream&)> _response;
    };
    return begin_readEx(__p_handle, __p_byteOffset, __p_byteSize, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::IMG::ImgService::end_readEx(::IMG::BinaryStream& __p_data, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__readEx_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_data);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::IMG::ImgService::write(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__IMG__ImgService__write_name);
    ::IceInternal::Outgoing __og(this, __IMG__ImgService__write_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_byteOffset);
        __os->write(__p_data);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_write(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__write_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__write_name, __del, __cookie);
    try
    {
        __result->prepare(__IMG__ImgService__write_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_byteOffset);
        __os->write(__p_data);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::__begin_write(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_write(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_write(__p_handle, __p_byteOffset, __p_data, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::IMG::ImgService::end_write(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__write_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::IMG::ImgService::writeCdp(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__IMG__ImgService__writeCdp_name);
    ::IceInternal::Outgoing __og(this, __IMG__ImgService__writeCdp_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_byteOffset);
        __os->write(__p_data);
        __os->write(__p_enableTime);
        __os->write(__p_timeSeconds);
        __os->write(__p_timeMicroseconds);
        __os->write(__p_IgnoreQuota);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_writeCdp(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__writeCdp_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__writeCdp_name, __del, __cookie);
    try
    {
        __result->prepare(__IMG__ImgService__writeCdp_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_byteOffset);
        __os->write(__p_data);
        __os->write(__p_enableTime);
        __os->write(__p_timeSeconds);
        __os->write(__p_timeMicroseconds);
        __os->write(__p_IgnoreQuota);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::__begin_writeCdp(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_writeCdp(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_writeCdp(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::IMG::ImgService::end_writeCdp(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__writeCdp_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::IMG::ImgService::writeCdpByIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__IMG__ImgService__writeCdpByIndex_name);
    ::IceInternal::Outgoing __og(this, __IMG__ImgService__writeCdpByIndex_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_byteOffset);
        __os->write(__p_data);
        __os->write(__p_index);
        __os->write(__p_rev1);
        __os->write(__p_rev2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_writeCdpByIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__writeCdpByIndex_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__writeCdpByIndex_name, __del, __cookie);
    try
    {
        __result->prepare(__IMG__ImgService__writeCdpByIndex_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_byteOffset);
        __os->write(__p_data);
        __os->write(__p_index);
        __os->write(__p_rev1);
        __os->write(__p_rev2);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::__begin_writeCdpByIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_writeCdpByIndex(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_writeCdpByIndex(__p_handle, __p_byteOffset, __p_data, __p_index, __p_rev1, __p_rev2, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::IMG::ImgService::end_writeCdpByIndex(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__writeCdpByIndex_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::IMG::ImgService::writeCdpByTmeAndIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__IMG__ImgService__writeCdpByTmeAndIndex_name);
    ::IceInternal::Outgoing __og(this, __IMG__ImgService__writeCdpByTmeAndIndex_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_byteOffset);
        __os->write(__p_data);
        __os->write(__p_enableTime);
        __os->write(__p_timeSeconds);
        __os->write(__p_timeMicroseconds);
        __os->write(__p_IgnoreQuota);
        __os->write(__p_index);
        __os->write(__p_rev1);
        __os->write(__p_rev2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_writeCdpByTmeAndIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__writeCdpByTmeAndIndex_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__writeCdpByTmeAndIndex_name, __del, __cookie);
    try
    {
        __result->prepare(__IMG__ImgService__writeCdpByTmeAndIndex_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_byteOffset);
        __os->write(__p_data);
        __os->write(__p_enableTime);
        __os->write(__p_timeSeconds);
        __os->write(__p_timeMicroseconds);
        __os->write(__p_IgnoreQuota);
        __os->write(__p_index);
        __os->write(__p_rev1);
        __os->write(__p_rev2);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::__begin_writeCdpByTmeAndIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_writeCdpByTmeAndIndex(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_writeCdpByTmeAndIndex(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, __p_index, __p_rev1, __p_rev2, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::IMG::ImgService::end_writeCdpByTmeAndIndex(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__writeCdpByTmeAndIndex_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::IMG::ImgService::close(::Ice::Long __p_handle, bool __p_success, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__IMG__ImgService__close_name);
    ::IceInternal::Outgoing __og(this, __IMG__ImgService__close_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_success);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_close(::Ice::Long __p_handle, bool __p_success, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__close_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__close_name, __del, __cookie);
    try
    {
        __result->prepare(__IMG__ImgService__close_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_success);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::__begin_close(::Ice::Long __p_handle, bool __p_success, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_close(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_close(__p_handle, __p_success, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::IMG::ImgService::end_close(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__close_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

::Ice::Long
IceProxy::IMG::ImgService::GetSnSize(::Ice::Long __p_handle, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__IMG__ImgService__GetSnSize_name);
    ::IceInternal::Outgoing __og(this, __IMG__ImgService__GetSnSize_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Long __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_GetSnSize(::Ice::Long __p_handle, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__GetSnSize_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__GetSnSize_name, __del, __cookie);
    try
    {
        __result->prepare(__IMG__ImgService__GetSnSize_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::__begin_GetSnSize(::Ice::Long __p_handle, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
            ::Ice::Long __ret;
            try
            {
                __ret = __proxy->end_GetSnSize(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Long)> _response;
    };
    return begin_GetSnSize(__p_handle, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Long
IceProxy::IMG::ImgService::end_GetSnSize(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__GetSnSize_name);
    ::Ice::Long __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::IMG::ImgService::DelSnaport(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__IMG__ImgService__DelSnaport_name);
    ::IceInternal::Outgoing __og(this, __IMG__ImgService__DelSnaport_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_DelSnaport(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__DelSnaport_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__DelSnaport_name, __del, __cookie);
    try
    {
        __result->prepare(__IMG__ImgService__DelSnaport_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::__begin_DelSnaport(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_DelSnaport(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_DelSnaport(__p_ident, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::IMG::ImgService::end_DelSnaport(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__DelSnaport_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::IMG::ImgService::RenameSnapshot(const ::IMG::ImageSnapshotIdent& __p_ident, const ::std::string& __p_newSnapshot, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__IMG__ImgService__RenameSnapshot_name);
    ::IceInternal::Outgoing __og(this, __IMG__ImgService__RenameSnapshot_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __os->write(__p_newSnapshot);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_RenameSnapshot(const ::IMG::ImageSnapshotIdent& __p_ident, const ::std::string& __p_newSnapshot, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__RenameSnapshot_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__RenameSnapshot_name, __del, __cookie);
    try
    {
        __result->prepare(__IMG__ImgService__RenameSnapshot_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __os->write(__p_newSnapshot);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::__begin_RenameSnapshot(const ::IMG::ImageSnapshotIdent& __p_ident, const ::std::string& __p_newSnapshot, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_RenameSnapshot(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_RenameSnapshot(__p_ident, __p_newSnapshot, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::IMG::ImgService::end_RenameSnapshot(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__RenameSnapshot_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::std::string
IceProxy::IMG::ImgService::GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__IMG__ImgService__GetOnSnMapFile_name);
    ::IceInternal::Outgoing __og(this, __IMG__ImgService__GetOnSnMapFile_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::std::string __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__GetOnSnMapFile_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__GetOnSnMapFile_name, __del, __cookie);
    try
    {
        __result->prepare(__IMG__ImgService__GetOnSnMapFile_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::__begin_GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
            ::std::string __ret;
            try
            {
                __ret = __proxy->end_GetOnSnMapFile(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_GetOnSnMapFile(__p_ident, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::std::string
IceProxy::IMG::ImgService::end_GetOnSnMapFile(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__GetOnSnMapFile_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::IMG::ImgService::ice_staticId()
{
    return ::IMG::ImgService::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::IMG::ImgService::__newInstance() const
{
    return new ImgService;
}

::Ice::Object* IMG::upCast(::IMG::ImgService* p) { return p; }

namespace
{
const ::std::string __IMG__ImgService_ids[2] =
{
    "::IMG::ImgService",
    "::Ice::Object"
};

}

bool
IMG::ImgService::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__IMG__ImgService_ids, __IMG__ImgService_ids + 2, _s);
}

::std::vector< ::std::string>
IMG::ImgService::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__IMG__ImgService_ids[0], &__IMG__ImgService_ids[2]);
}

const ::std::string&
IMG::ImgService::ice_id(const ::Ice::Current&) const
{
    return __IMG__ImgService_ids[0];
}

const ::std::string&
IMG::ImgService::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::IMG::ImgService";
    return typeId;
#else
    return __IMG__ImgService_ids[0];
#endif
}

::Ice::DispatchStatus
IMG::ImgService::___create(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::IMG::ImageSnapshotIdent __p_ident;
    ::IMG::ImageSnapshotIdents __p_lastSnapshot;
    ::Ice::Long __p_diskByteSize;
    ::std::string __p_flag;
    __is->read(__p_ident);
    __is->read(__p_lastSnapshot);
    __is->read(__p_diskByteSize);
    __is->read(__p_flag);
    __inS.endReadParams();
    try
    {
        ::Ice::Long __ret = create(__p_ident, __p_lastSnapshot, __p_diskByteSize, __p_flag, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___setUsedBlockBitmap(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long __p_handle;
    ::IMG::BinaryStream __p_bitmap;
    bool __p_completed;
    __is->read(__p_handle);
    __is->read(__p_bitmap);
    __is->read(__p_completed);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = setUsedBlockBitmap(__p_handle, __p_bitmap, __p_completed, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___cleanUsedBlockBitmap(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long __p_handle;
    ::IMG::BlockIndexes __p_indexes;
    __is->read(__p_handle);
    __is->read(__p_indexes);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = cleanUsedBlockBitmap(__p_handle, __p_indexes, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___setDuplicateFileSectors(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long __p_handle;
    ::IMG::DuplicateFileSectors __p_sectors;
    bool __p_completed;
    __is->read(__p_handle);
    __is->read(__p_sectors);
    __is->read(__p_completed);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = setDuplicateFileSectors(__p_handle, __p_sectors, __p_completed, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___open(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::IMG::ImageSnapshotIdents __p_ident;
    ::std::string __p_flag;
    __is->read(__p_ident);
    __is->read(__p_flag);
    __inS.endReadParams();
    try
    {
        ::Ice::Long __ret = open(__p_ident, __p_flag, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___getTotalUesdBlockBitmap(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long __p_handle;
    ::Ice::Int __p_index;
    __is->read(__p_handle);
    __is->read(__p_index);
    __inS.endReadParams();
    ::IMG::BinaryStream __p_bitmap;
    bool __p_finish;
    try
    {
        ::Ice::Int __ret = getTotalUesdBlockBitmap(__p_handle, __p_index, __p_bitmap, __p_finish, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_bitmap);
        __os->write(__p_finish);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___getAllFileSectors(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long __p_handle;
    ::Ice::Long __p_index;
    __is->read(__p_handle);
    __is->read(__p_index);
    __inS.endReadParams();
    ::IMG::FileSectors __p_sectors;
    bool __p_finish;
    try
    {
        ::Ice::Long __ret = getAllFileSectors(__p_handle, __p_index, __p_sectors, __p_finish, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_sectors);
        __os->write(__p_finish);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___read(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long __p_handle;
    ::Ice::Long __p_byteOffset;
    ::Ice::Int __p_byteSize;
    __is->read(__p_handle);
    __is->read(__p_byteOffset);
    __is->read(__p_byteSize);
    __inS.endReadParams();
    ::IMG::BinaryStream __p_data;
    try
    {
        ::Ice::Int __ret = read(__p_handle, __p_byteOffset, __p_byteSize, __p_data, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_data);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___readEx(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long __p_handle;
    ::Ice::Long __p_byteOffset;
    ::Ice::Int __p_byteSize;
    __is->read(__p_handle);
    __is->read(__p_byteOffset);
    __is->read(__p_byteSize);
    __inS.endReadParams();
    ::IMG::BinaryStream __p_data;
    try
    {
        ::Ice::Int __ret = readEx(__p_handle, __p_byteOffset, __p_byteSize, __p_data, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_data);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___write(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long __p_handle;
    ::Ice::Long __p_byteOffset;
    ::IMG::BinaryStream __p_data;
    __is->read(__p_handle);
    __is->read(__p_byteOffset);
    __is->read(__p_data);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = write(__p_handle, __p_byteOffset, __p_data, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___writeCdp(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long __p_handle;
    ::Ice::Long __p_byteOffset;
    ::IMG::BinaryStream __p_data;
    bool __p_enableTime;
    ::Ice::Long __p_timeSeconds;
    ::Ice::Int __p_timeMicroseconds;
    bool __p_IgnoreQuota;
    __is->read(__p_handle);
    __is->read(__p_byteOffset);
    __is->read(__p_data);
    __is->read(__p_enableTime);
    __is->read(__p_timeSeconds);
    __is->read(__p_timeMicroseconds);
    __is->read(__p_IgnoreQuota);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = writeCdp(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___writeCdpByIndex(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long __p_handle;
    ::Ice::Long __p_byteOffset;
    ::IMG::BinaryStream __p_data;
    ::Ice::Long __p_index;
    ::Ice::Long __p_rev1;
    ::Ice::Long __p_rev2;
    __is->read(__p_handle);
    __is->read(__p_byteOffset);
    __is->read(__p_data);
    __is->read(__p_index);
    __is->read(__p_rev1);
    __is->read(__p_rev2);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = writeCdpByIndex(__p_handle, __p_byteOffset, __p_data, __p_index, __p_rev1, __p_rev2, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___writeCdpByTmeAndIndex(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long __p_handle;
    ::Ice::Long __p_byteOffset;
    ::IMG::BinaryStream __p_data;
    bool __p_enableTime;
    ::Ice::Long __p_timeSeconds;
    ::Ice::Int __p_timeMicroseconds;
    bool __p_IgnoreQuota;
    ::Ice::Long __p_index;
    ::Ice::Long __p_rev1;
    ::Ice::Long __p_rev2;
    __is->read(__p_handle);
    __is->read(__p_byteOffset);
    __is->read(__p_data);
    __is->read(__p_enableTime);
    __is->read(__p_timeSeconds);
    __is->read(__p_timeMicroseconds);
    __is->read(__p_IgnoreQuota);
    __is->read(__p_index);
    __is->read(__p_rev1);
    __is->read(__p_rev2);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = writeCdpByTmeAndIndex(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, __p_index, __p_rev1, __p_rev2, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___close(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long __p_handle;
    bool __p_success;
    __is->read(__p_handle);
    __is->read(__p_success);
    __inS.endReadParams();
    try
    {
        close(__p_handle, __p_success, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___GetSnSize(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long __p_handle;
    __is->read(__p_handle);
    __inS.endReadParams();
    try
    {
        ::Ice::Long __ret = GetSnSize(__p_handle, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___DelSnaport(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::IMG::ImageSnapshotIdent __p_ident;
    __is->read(__p_ident);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = DelSnaport(__p_ident, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___RenameSnapshot(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::IMG::ImageSnapshotIdent __p_ident;
    ::std::string __p_newSnapshot;
    __is->read(__p_ident);
    __is->read(__p_newSnapshot);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = RenameSnapshot(__p_ident, __p_newSnapshot, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___GetOnSnMapFile(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::IMG::ImageSnapshotIdent __p_ident;
    __is->read(__p_ident);
    __inS.endReadParams();
    try
    {
        ::std::string __ret = GetOnSnMapFile(__p_ident, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __IMG__ImgService_all[] =
{
    "DelSnaport",
    "GetOnSnMapFile",
    "GetSnSize",
    "RenameSnapshot",
    "cleanUsedBlockBitmap",
    "close",
    "create",
    "getAllFileSectors",
    "getTotalUesdBlockBitmap",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "open",
    "read",
    "readEx",
    "setDuplicateFileSectors",
    "setUsedBlockBitmap",
    "write",
    "writeCdp",
    "writeCdpByIndex",
    "writeCdpByTmeAndIndex"
};

}

::Ice::DispatchStatus
IMG::ImgService::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__IMG__ImgService_all, __IMG__ImgService_all + 22, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __IMG__ImgService_all)
    {
        case 0:
        {
            return ___DelSnaport(in, current);
        }
        case 1:
        {
            return ___GetOnSnMapFile(in, current);
        }
        case 2:
        {
            return ___GetSnSize(in, current);
        }
        case 3:
        {
            return ___RenameSnapshot(in, current);
        }
        case 4:
        {
            return ___cleanUsedBlockBitmap(in, current);
        }
        case 5:
        {
            return ___close(in, current);
        }
        case 6:
        {
            return ___create(in, current);
        }
        case 7:
        {
            return ___getAllFileSectors(in, current);
        }
        case 8:
        {
            return ___getTotalUesdBlockBitmap(in, current);
        }
        case 9:
        {
            return ___ice_id(in, current);
        }
        case 10:
        {
            return ___ice_ids(in, current);
        }
        case 11:
        {
            return ___ice_isA(in, current);
        }
        case 12:
        {
            return ___ice_ping(in, current);
        }
        case 13:
        {
            return ___open(in, current);
        }
        case 14:
        {
            return ___read(in, current);
        }
        case 15:
        {
            return ___readEx(in, current);
        }
        case 16:
        {
            return ___setDuplicateFileSectors(in, current);
        }
        case 17:
        {
            return ___setUsedBlockBitmap(in, current);
        }
        case 18:
        {
            return ___write(in, current);
        }
        case 19:
        {
            return ___writeCdp(in, current);
        }
        case 20:
        {
            return ___writeCdpByIndex(in, current);
        }
        case 21:
        {
            return ___writeCdpByTmeAndIndex(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
IMG::ImgService::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
IMG::ImgService::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
IMG::__patch(ImgServicePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::IMG::ImgServicePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::IMG::ImgService::ice_staticId(), v);
    }
}

// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `data_queuing.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <data_queuing.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __DataQueuingIce__DataCreator__StartCDPWork_name = "StartCDPWork";

const ::std::string __DataQueuingIce__DataCreator__StartQemuWorkForBitmap_name = "StartQemuWorkForBitmap";

const ::std::string __DataQueuingIce__DataCreator__StartQemuWorkForBitmapv2_name = "StartQemuWorkForBitmapv2";

const ::std::string __DataQueuingIce__DataCreator__StartQemuWork_name = "StartQemuWork";

const ::std::string __DataQueuingIce__DataCreator__QueryQemuProgress_name = "QueryQemuProgress";

const ::std::string __DataQueuingIce__DataCreator__QueryCDPProgress_name = "QueryCDPProgress";

const ::std::string __DataQueuingIce__DataCreator__QueryWorkStatus_name = "QueryWorkStatus";

const ::std::string __DataQueuingIce__DataCreator__StopQemuWork_name = "StopQemuWork";

const ::std::string __DataQueuingIce__DataCreator__StopQemuWorkv2_name = "StopQemuWorkv2";

const ::std::string __DataQueuingIce__DataCreator__StopCDPWork_name = "StopCDPWork";

const ::std::string __DataQueuingIce__DataCreator__SetRestoreBitmap_name = "SetRestoreBitmap";

const ::std::string __DataQueuingIce__DataCreator__SetRestoreBitmapv2_name = "SetRestoreBitmapv2";

const ::std::string __DataQueuingIce__DataCreator__EndTask_name = "EndTask";

const ::std::string __DataQueuingIce__DataCreator__CloseTask_name = "CloseTask";

const ::std::string __DataQueuingIce__DataGuest__InitGuest_name = "InitGuest";

const ::std::string __DataQueuingIce__DataGuest__GetData_name = "GetData";

const ::std::string __DataQueuingIce__DataGuest__GetDataEx_name = "GetDataEx";

const ::std::string __DataQueuingIce__DataGuest__DataCompleted_name = "DataCompleted";

const ::std::string __DataQueuingIce__DataGuest__GetBitmapInfo_name = "GetBitmapInfo";

const ::std::string __DataQueuingIce__DataGuest__GetBitmapData_name = "GetBitmapData";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::DataQueuingIce::upCast(::IceProxy::DataQueuingIce::DataCreator* p) { return p; }

void
::IceProxy::DataQueuingIce::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::DataQueuingIce::DataCreator>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::DataQueuingIce::DataCreator;
        v->__copyFrom(proxy);
    }
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::StartCDPWork(const ::std::string& __p_task, const ::std::string& __p_token, const ::std::string& __p_cdpFileName, const ::std::string& __p_startTime, bool __p_watch, const ::DataQueuingIce::ExcludeRuns& __p_excludeRuns, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataCreator__StartCDPWork_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataCreator__StartCDPWork_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __os->write(__p_cdpFileName);
        __os->write(__p_startTime);
        __os->write(__p_watch);
        __os->write(__p_excludeRuns);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_StartCDPWork(const ::std::string& __p_task, const ::std::string& __p_token, const ::std::string& __p_cdpFileName, const ::std::string& __p_startTime, bool __p_watch, const ::DataQueuingIce::ExcludeRuns& __p_excludeRuns, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__StartCDPWork_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__StartCDPWork_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataCreator__StartCDPWork_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __os->write(__p_cdpFileName);
        __os->write(__p_startTime);
        __os->write(__p_watch);
        __os->write(__p_excludeRuns);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::__begin_StartCDPWork(const ::std::string& __p_task, const ::std::string& __p_token, const ::std::string& __p_cdpFileName, const ::std::string& __p_startTime, bool __p_watch, const ::DataQueuingIce::ExcludeRuns& __p_excludeRuns, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_StartCDPWork(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_StartCDPWork(__p_task, __p_token, __p_cdpFileName, __p_startTime, __p_watch, __p_excludeRuns, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_StartCDPWork(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__StartCDPWork_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::StartQemuWorkForBitmap(const ::std::string& __p_task, const ::std::string& __p_token, const ::IMG::ImageSnapshotIdents& __p_snapshot, const ::DataQueuingIce::BinaryStream& __p_bitmap, const ::DataQueuingIce::ExcludeRuns& __p_excludeRuns, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataCreator__StartQemuWorkForBitmap_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataCreator__StartQemuWorkForBitmap_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __os->write(__p_snapshot);
        __os->write(__p_bitmap);
        __os->write(__p_excludeRuns);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_StartQemuWorkForBitmap(const ::std::string& __p_task, const ::std::string& __p_token, const ::IMG::ImageSnapshotIdents& __p_snapshot, const ::DataQueuingIce::BinaryStream& __p_bitmap, const ::DataQueuingIce::ExcludeRuns& __p_excludeRuns, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__StartQemuWorkForBitmap_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__StartQemuWorkForBitmap_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataCreator__StartQemuWorkForBitmap_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __os->write(__p_snapshot);
        __os->write(__p_bitmap);
        __os->write(__p_excludeRuns);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::__begin_StartQemuWorkForBitmap(const ::std::string& __p_task, const ::std::string& __p_token, const ::IMG::ImageSnapshotIdents& __p_snapshot, const ::DataQueuingIce::BinaryStream& __p_bitmap, const ::DataQueuingIce::ExcludeRuns& __p_excludeRuns, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_StartQemuWorkForBitmap(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_StartQemuWorkForBitmap(__p_task, __p_token, __p_snapshot, __p_bitmap, __p_excludeRuns, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_StartQemuWorkForBitmap(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__StartQemuWorkForBitmap_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::StartQemuWorkForBitmapv2(const ::std::string& __p_task, const ::std::string& __p_token, const ::IMG::ImageSnapshotIdents& __p_snapshot, const ::std::string& __p_bitmapPath, const ::DataQueuingIce::ExcludeRuns& __p_excludeRuns, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataCreator__StartQemuWorkForBitmapv2_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataCreator__StartQemuWorkForBitmapv2_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __os->write(__p_snapshot);
        __os->write(__p_bitmapPath);
        __os->write(__p_excludeRuns);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_StartQemuWorkForBitmapv2(const ::std::string& __p_task, const ::std::string& __p_token, const ::IMG::ImageSnapshotIdents& __p_snapshot, const ::std::string& __p_bitmapPath, const ::DataQueuingIce::ExcludeRuns& __p_excludeRuns, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__StartQemuWorkForBitmapv2_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__StartQemuWorkForBitmapv2_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataCreator__StartQemuWorkForBitmapv2_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __os->write(__p_snapshot);
        __os->write(__p_bitmapPath);
        __os->write(__p_excludeRuns);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::__begin_StartQemuWorkForBitmapv2(const ::std::string& __p_task, const ::std::string& __p_token, const ::IMG::ImageSnapshotIdents& __p_snapshot, const ::std::string& __p_bitmapPath, const ::DataQueuingIce::ExcludeRuns& __p_excludeRuns, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_StartQemuWorkForBitmapv2(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_StartQemuWorkForBitmapv2(__p_task, __p_token, __p_snapshot, __p_bitmapPath, __p_excludeRuns, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_StartQemuWorkForBitmapv2(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__StartQemuWorkForBitmapv2_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::StartQemuWork(const ::std::string& __p_task, const ::std::string& __p_token, const ::IMG::ImageSnapshotIdents& __p_snapshot, const ::DataQueuingIce::ExcludeRuns& __p_excludeRuns, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataCreator__StartQemuWork_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataCreator__StartQemuWork_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __os->write(__p_snapshot);
        __os->write(__p_excludeRuns);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_StartQemuWork(const ::std::string& __p_task, const ::std::string& __p_token, const ::IMG::ImageSnapshotIdents& __p_snapshot, const ::DataQueuingIce::ExcludeRuns& __p_excludeRuns, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__StartQemuWork_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__StartQemuWork_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataCreator__StartQemuWork_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __os->write(__p_snapshot);
        __os->write(__p_excludeRuns);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::__begin_StartQemuWork(const ::std::string& __p_task, const ::std::string& __p_token, const ::IMG::ImageSnapshotIdents& __p_snapshot, const ::DataQueuingIce::ExcludeRuns& __p_excludeRuns, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_StartQemuWork(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_StartQemuWork(__p_task, __p_token, __p_snapshot, __p_excludeRuns, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_StartQemuWork(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__StartQemuWork_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::QueryQemuProgress(const ::std::string& __p_task, const ::std::string& __p_token, ::Ice::Long& __p_totalBytes, ::Ice::Long& __p_completedBytes, ::Ice::Int& __p_queueLen, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataCreator__QueryQemuProgress_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataCreator__QueryQemuProgress_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_totalBytes);
    __is->read(__p_completedBytes);
    __is->read(__p_queueLen);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_QueryQemuProgress(const ::std::string& __p_task, const ::std::string& __p_token, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__QueryQemuProgress_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__QueryQemuProgress_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataCreator__QueryQemuProgress_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::__begin_QueryQemuProgress(const ::std::string& __p_task, const ::std::string& __p_token, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long, ::Ice::Long, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int, ::Ice::Long, ::Ice::Long, ::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
            ::Ice::Long __p_totalBytes;
            ::Ice::Long __p_completedBytes;
            ::Ice::Int __p_queueLen;
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_QueryQemuProgress(__p_totalBytes, __p_completedBytes, __p_queueLen, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_totalBytes, __p_completedBytes, __p_queueLen);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int, ::Ice::Long, ::Ice::Long, ::Ice::Int)> _response;
    };
    return begin_QueryQemuProgress(__p_task, __p_token, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_QueryQemuProgress(::Ice::Long& __p_totalBytes, ::Ice::Long& __p_completedBytes, ::Ice::Int& __p_queueLen, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__QueryQemuProgress_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_totalBytes);
    __is->read(__p_completedBytes);
    __is->read(__p_queueLen);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::QueryCDPProgress(const ::std::string& __p_task, const ::std::string& __p_token, ::std::string& __p_lastTime, ::Ice::Int& __p_queueLen, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataCreator__QueryCDPProgress_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataCreator__QueryCDPProgress_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_lastTime);
    __is->read(__p_queueLen);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_QueryCDPProgress(const ::std::string& __p_task, const ::std::string& __p_token, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__QueryCDPProgress_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__QueryCDPProgress_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataCreator__QueryCDPProgress_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::__begin_QueryCDPProgress(const ::std::string& __p_task, const ::std::string& __p_token, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int, const ::std::string&, ::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
            ::std::string __p_lastTime;
            ::Ice::Int __p_queueLen;
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_QueryCDPProgress(__p_lastTime, __p_queueLen, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_lastTime, __p_queueLen);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int, const ::std::string&, ::Ice::Int)> _response;
    };
    return begin_QueryCDPProgress(__p_task, __p_token, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_QueryCDPProgress(::std::string& __p_lastTime, ::Ice::Int& __p_queueLen, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__QueryCDPProgress_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_lastTime);
    __is->read(__p_queueLen);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::QueryWorkStatus(const ::std::string& __p_task, const ::std::string& __p_token, ::DataQueuingIce::WorkType& __p_workType, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataCreator__QueryWorkStatus_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataCreator__QueryWorkStatus_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_workType);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_QueryWorkStatus(const ::std::string& __p_task, const ::std::string& __p_token, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__QueryWorkStatus_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__QueryWorkStatus_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataCreator__QueryWorkStatus_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::__begin_QueryWorkStatus(const ::std::string& __p_task, const ::std::string& __p_token, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, ::DataQueuingIce::WorkType)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int, ::DataQueuingIce::WorkType)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
            ::DataQueuingIce::WorkType __p_workType;
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_QueryWorkStatus(__p_workType, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_workType);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int, ::DataQueuingIce::WorkType)> _response;
    };
    return begin_QueryWorkStatus(__p_task, __p_token, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_QueryWorkStatus(::DataQueuingIce::WorkType& __p_workType, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__QueryWorkStatus_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_workType);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::StopQemuWork(const ::std::string& __p_task, const ::std::string& __p_token, ::DataQueuingIce::BinaryStream& __p_bitmap, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataCreator__StopQemuWork_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataCreator__StopQemuWork_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_bitmap);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_StopQemuWork(const ::std::string& __p_task, const ::std::string& __p_token, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__StopQemuWork_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__StopQemuWork_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataCreator__StopQemuWork_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::__begin_StopQemuWork(const ::std::string& __p_task, const ::std::string& __p_token, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::DataQueuingIce::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int, const ::DataQueuingIce::BinaryStream&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
            ::DataQueuingIce::BinaryStream __p_bitmap;
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_StopQemuWork(__p_bitmap, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_bitmap);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int, const ::DataQueuingIce::BinaryStream&)> _response;
    };
    return begin_StopQemuWork(__p_task, __p_token, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_StopQemuWork(::DataQueuingIce::BinaryStream& __p_bitmap, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__StopQemuWork_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_bitmap);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::StopQemuWorkv2(const ::std::string& __p_task, const ::std::string& __p_token, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataCreator__StopQemuWorkv2_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataCreator__StopQemuWorkv2_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_StopQemuWorkv2(const ::std::string& __p_task, const ::std::string& __p_token, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__StopQemuWorkv2_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__StopQemuWorkv2_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataCreator__StopQemuWorkv2_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::__begin_StopQemuWorkv2(const ::std::string& __p_task, const ::std::string& __p_token, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_StopQemuWorkv2(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_StopQemuWorkv2(__p_task, __p_token, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_StopQemuWorkv2(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__StopQemuWorkv2_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::StopCDPWork(const ::std::string& __p_task, const ::std::string& __p_token, ::std::string& __p_lastTime, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataCreator__StopCDPWork_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataCreator__StopCDPWork_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_lastTime);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_StopCDPWork(const ::std::string& __p_task, const ::std::string& __p_token, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__StopCDPWork_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__StopCDPWork_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataCreator__StopCDPWork_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_token);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::__begin_StopCDPWork(const ::std::string& __p_task, const ::std::string& __p_token, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int, const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
            ::std::string __p_lastTime;
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_StopCDPWork(__p_lastTime, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_lastTime);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int, const ::std::string&)> _response;
    };
    return begin_StopCDPWork(__p_task, __p_token, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_StopCDPWork(::std::string& __p_lastTime, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__StopCDPWork_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_lastTime);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::SetRestoreBitmap(const ::std::string& __p_task, const ::DataQueuingIce::DiskBitmap& __p_diskBitmap, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataCreator__SetRestoreBitmap_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataCreator__SetRestoreBitmap_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_diskBitmap);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_SetRestoreBitmap(const ::std::string& __p_task, const ::DataQueuingIce::DiskBitmap& __p_diskBitmap, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__SetRestoreBitmap_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__SetRestoreBitmap_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataCreator__SetRestoreBitmap_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_diskBitmap);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::__begin_SetRestoreBitmap(const ::std::string& __p_task, const ::DataQueuingIce::DiskBitmap& __p_diskBitmap, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_SetRestoreBitmap(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_SetRestoreBitmap(__p_task, __p_diskBitmap, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_SetRestoreBitmap(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__SetRestoreBitmap_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::SetRestoreBitmapv2(const ::std::string& __p_task, const ::DataQueuingIce::DiskBitmapv2& __p_diskBitmap, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataCreator__SetRestoreBitmapv2_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataCreator__SetRestoreBitmapv2_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_diskBitmap);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_SetRestoreBitmapv2(const ::std::string& __p_task, const ::DataQueuingIce::DiskBitmapv2& __p_diskBitmap, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__SetRestoreBitmapv2_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__SetRestoreBitmapv2_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataCreator__SetRestoreBitmapv2_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_diskBitmap);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::__begin_SetRestoreBitmapv2(const ::std::string& __p_task, const ::DataQueuingIce::DiskBitmapv2& __p_diskBitmap, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_SetRestoreBitmapv2(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_SetRestoreBitmapv2(__p_task, __p_diskBitmap, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_SetRestoreBitmapv2(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__SetRestoreBitmapv2_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::EndTask(const ::std::string& __p_task, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataCreator__EndTask_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataCreator__EndTask_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_EndTask(const ::std::string& __p_task, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__EndTask_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__EndTask_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataCreator__EndTask_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::__begin_EndTask(const ::std::string& __p_task, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_EndTask(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_EndTask(__p_task, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_EndTask(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__EndTask_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::CloseTask(const ::std::string& __p_task, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataCreator__CloseTask_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataCreator__CloseTask_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_CloseTask(const ::std::string& __p_task, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__CloseTask_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__CloseTask_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataCreator__CloseTask_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::__begin_CloseTask(const ::std::string& __p_task, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_CloseTask(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_CloseTask(__p_task, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_CloseTask(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__CloseTask_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::DataQueuingIce::DataCreator::ice_staticId()
{
    return ::DataQueuingIce::DataCreator::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::DataQueuingIce::DataCreator::__newInstance() const
{
    return new DataCreator;
}
::IceProxy::Ice::Object* ::IceProxy::DataQueuingIce::upCast(::IceProxy::DataQueuingIce::DataGuest* p) { return p; }

void
::IceProxy::DataQueuingIce::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::DataQueuingIce::DataGuest>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::DataQueuingIce::DataGuest;
        v->__copyFrom(proxy);
    }
}

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::InitGuest(const ::std::string& __p_task, ::Ice::Int __p_QueueIdent, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataGuest__InitGuest_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataGuest__InitGuest_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_QueueIdent);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataGuest::begin_InitGuest(const ::std::string& __p_task, ::Ice::Int __p_QueueIdent, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataGuest__InitGuest_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataGuest__InitGuest_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataGuest__InitGuest_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_QueueIdent);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataGuest::__begin_InitGuest(const ::std::string& __p_task, ::Ice::Int __p_QueueIdent, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_InitGuest(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_InitGuest(__p_task, __p_QueueIdent, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::end_InitGuest(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataGuest__InitGuest_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::GetData(const ::std::string& __p_task, ::Ice::Int __p_QueueIdent, ::Ice::Long& __p_DataIdent, ::std::string& __p_token, ::Ice::Long& __p_Lba, ::Ice::Int& __p_secs, ::DataQueuingIce::BinaryStream& __p_data, bool& __p_isEnd, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataGuest__GetData_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataGuest__GetData_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_QueueIdent);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_DataIdent);
    __is->read(__p_token);
    __is->read(__p_Lba);
    __is->read(__p_secs);
    __is->read(__p_data);
    __is->read(__p_isEnd);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataGuest::begin_GetData(const ::std::string& __p_task, ::Ice::Int __p_QueueIdent, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataGuest__GetData_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataGuest__GetData_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataGuest__GetData_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_QueueIdent);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataGuest::__begin_GetData(const ::std::string& __p_task, ::Ice::Int __p_QueueIdent, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::DataQueuingIce::BinaryStream&, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int, ::Ice::Long, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::DataQueuingIce::BinaryStream&, bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
            ::Ice::Long __p_DataIdent;
            ::std::string __p_token;
            ::Ice::Long __p_Lba;
            ::Ice::Int __p_secs;
            ::DataQueuingIce::BinaryStream __p_data;
            bool __p_isEnd;
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_GetData(__p_DataIdent, __p_token, __p_Lba, __p_secs, __p_data, __p_isEnd, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_DataIdent, __p_token, __p_Lba, __p_secs, __p_data, __p_isEnd);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int, ::Ice::Long, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::DataQueuingIce::BinaryStream&, bool)> _response;
    };
    return begin_GetData(__p_task, __p_QueueIdent, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::end_GetData(::Ice::Long& __p_DataIdent, ::std::string& __p_token, ::Ice::Long& __p_Lba, ::Ice::Int& __p_secs, ::DataQueuingIce::BinaryStream& __p_data, bool& __p_isEnd, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataGuest__GetData_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_DataIdent);
    __is->read(__p_token);
    __is->read(__p_Lba);
    __is->read(__p_secs);
    __is->read(__p_data);
    __is->read(__p_isEnd);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::GetDataEx(const ::std::string& __p_task, ::Ice::Int __p_QueueIdent, ::Ice::Long __p_CompletedDataIdent, ::Ice::Long& __p_DataIdent, ::std::string& __p_token, ::Ice::Long& __p_Lba, ::Ice::Int& __p_secs, ::DataQueuingIce::BinaryStream& __p_data, bool& __p_isEnd, ::Ice::Long& __p_sn, ::Ice::Long& __p_TimeSeconds, ::Ice::Int& __p_TimeMicroseconds, ::Ice::Int& __p_crc, ::Ice::Int& __p_dataType, ::Ice::Int& __p_fragmentTotals, ::Ice::Int& __p_fragmentIndex, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataGuest__GetDataEx_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataGuest__GetDataEx_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_QueueIdent);
        __os->write(__p_CompletedDataIdent);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_DataIdent);
    __is->read(__p_token);
    __is->read(__p_Lba);
    __is->read(__p_secs);
    __is->read(__p_data);
    __is->read(__p_isEnd);
    __is->read(__p_sn);
    __is->read(__p_TimeSeconds);
    __is->read(__p_TimeMicroseconds);
    __is->read(__p_crc);
    __is->read(__p_dataType);
    __is->read(__p_fragmentTotals);
    __is->read(__p_fragmentIndex);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataGuest::begin_GetDataEx(const ::std::string& __p_task, ::Ice::Int __p_QueueIdent, ::Ice::Long __p_CompletedDataIdent, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataGuest__GetDataEx_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataGuest__GetDataEx_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataGuest__GetDataEx_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_QueueIdent);
        __os->write(__p_CompletedDataIdent);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11
#if !defined(_MSC_VER) || _MSC_VER > 1700
//
// COMPILERFIX VC compilers up to VC110 don't support more than 10 parameters with
// std::function due to lack of variadic templates.
//

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataGuest::__begin_GetDataEx(const ::std::string& __p_task, ::Ice::Int __p_QueueIdent, ::Ice::Long __p_CompletedDataIdent, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::DataQueuingIce::BinaryStream&, bool, ::Ice::Long, ::Ice::Long, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int, ::Ice::Long, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::DataQueuingIce::BinaryStream&, bool, ::Ice::Long, ::Ice::Long, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
            ::Ice::Long __p_DataIdent;
            ::std::string __p_token;
            ::Ice::Long __p_Lba;
            ::Ice::Int __p_secs;
            ::DataQueuingIce::BinaryStream __p_data;
            bool __p_isEnd;
            ::Ice::Long __p_sn;
            ::Ice::Long __p_TimeSeconds;
            ::Ice::Int __p_TimeMicroseconds;
            ::Ice::Int __p_crc;
            ::Ice::Int __p_dataType;
            ::Ice::Int __p_fragmentTotals;
            ::Ice::Int __p_fragmentIndex;
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_GetDataEx(__p_DataIdent, __p_token, __p_Lba, __p_secs, __p_data, __p_isEnd, __p_sn, __p_TimeSeconds, __p_TimeMicroseconds, __p_crc, __p_dataType, __p_fragmentTotals, __p_fragmentIndex, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_DataIdent, __p_token, __p_Lba, __p_secs, __p_data, __p_isEnd, __p_sn, __p_TimeSeconds, __p_TimeMicroseconds, __p_crc, __p_dataType, __p_fragmentTotals, __p_fragmentIndex);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int, ::Ice::Long, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::DataQueuingIce::BinaryStream&, bool, ::Ice::Long, ::Ice::Long, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int)> _response;
    };
    return begin_GetDataEx(__p_task, __p_QueueIdent, __p_CompletedDataIdent, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::end_GetDataEx(::Ice::Long& __p_DataIdent, ::std::string& __p_token, ::Ice::Long& __p_Lba, ::Ice::Int& __p_secs, ::DataQueuingIce::BinaryStream& __p_data, bool& __p_isEnd, ::Ice::Long& __p_sn, ::Ice::Long& __p_TimeSeconds, ::Ice::Int& __p_TimeMicroseconds, ::Ice::Int& __p_crc, ::Ice::Int& __p_dataType, ::Ice::Int& __p_fragmentTotals, ::Ice::Int& __p_fragmentIndex, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataGuest__GetDataEx_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_DataIdent);
    __is->read(__p_token);
    __is->read(__p_Lba);
    __is->read(__p_secs);
    __is->read(__p_data);
    __is->read(__p_isEnd);
    __is->read(__p_sn);
    __is->read(__p_TimeSeconds);
    __is->read(__p_TimeMicroseconds);
    __is->read(__p_crc);
    __is->read(__p_dataType);
    __is->read(__p_fragmentTotals);
    __is->read(__p_fragmentIndex);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::DataCompleted(const ::std::string& __p_task, ::Ice::Int __p_QueueIdent, ::Ice::Long __p_DataIdent, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataGuest__DataCompleted_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataGuest__DataCompleted_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_QueueIdent);
        __os->write(__p_DataIdent);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataGuest::begin_DataCompleted(const ::std::string& __p_task, ::Ice::Int __p_QueueIdent, ::Ice::Long __p_DataIdent, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataGuest__DataCompleted_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataGuest__DataCompleted_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataGuest__DataCompleted_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_QueueIdent);
        __os->write(__p_DataIdent);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataGuest::__begin_DataCompleted(const ::std::string& __p_task, ::Ice::Int __p_QueueIdent, ::Ice::Long __p_DataIdent, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_DataCompleted(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_DataCompleted(__p_task, __p_QueueIdent, __p_DataIdent, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::end_DataCompleted(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataGuest__DataCompleted_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::GetBitmapInfo(const ::std::string& __p_task, ::Ice::Int& __p_bitmapCount, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataGuest__GetBitmapInfo_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataGuest__GetBitmapInfo_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_bitmapCount);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataGuest::begin_GetBitmapInfo(const ::std::string& __p_task, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataGuest__GetBitmapInfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataGuest__GetBitmapInfo_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataGuest__GetBitmapInfo_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataGuest::__begin_GetBitmapInfo(const ::std::string& __p_task, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int, ::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __p_bitmapCount;
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_GetBitmapInfo(__p_bitmapCount, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_bitmapCount);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int, ::Ice::Int)> _response;
    };
    return begin_GetBitmapInfo(__p_task, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::end_GetBitmapInfo(::Ice::Int& __p_bitmapCount, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataGuest__GetBitmapInfo_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_bitmapCount);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::GetBitmapData(const ::std::string& __p_task, ::Ice::Int __p_bitmapId, ::Ice::Int __p_bitmapOffset, ::Ice::Int __p_maxbytes, ::std::string& __p_token, ::DataQueuingIce::BinaryStream& __p_data, bool& __p_isEnd, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DataQueuingIce__DataGuest__GetBitmapData_name);
    ::IceInternal::Outgoing __og(this, __DataQueuingIce__DataGuest__GetBitmapData_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_bitmapId);
        __os->write(__p_bitmapOffset);
        __os->write(__p_maxbytes);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_token);
    __is->read(__p_data);
    __is->read(__p_isEnd);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataGuest::begin_GetBitmapData(const ::std::string& __p_task, ::Ice::Int __p_bitmapId, ::Ice::Int __p_bitmapOffset, ::Ice::Int __p_maxbytes, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataGuest__GetBitmapData_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataGuest__GetBitmapData_name, __del, __cookie);
    try
    {
        __result->prepare(__DataQueuingIce__DataGuest__GetBitmapData_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_task);
        __os->write(__p_bitmapId);
        __os->write(__p_bitmapOffset);
        __os->write(__p_maxbytes);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataGuest::__begin_GetBitmapData(const ::std::string& __p_task, ::Ice::Int __p_bitmapId, ::Ice::Int __p_bitmapOffset, ::Ice::Int __p_maxbytes, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&, const ::DataQueuingIce::BinaryStream&, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int, const ::std::string&, const ::DataQueuingIce::BinaryStream&, bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
            ::std::string __p_token;
            ::DataQueuingIce::BinaryStream __p_data;
            bool __p_isEnd;
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_GetBitmapData(__p_token, __p_data, __p_isEnd, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_token, __p_data, __p_isEnd);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int, const ::std::string&, const ::DataQueuingIce::BinaryStream&, bool)> _response;
    };
    return begin_GetBitmapData(__p_task, __p_bitmapId, __p_bitmapOffset, __p_maxbytes, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::end_GetBitmapData(::std::string& __p_token, ::DataQueuingIce::BinaryStream& __p_data, bool& __p_isEnd, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataGuest__GetBitmapData_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_token);
    __is->read(__p_data);
    __is->read(__p_isEnd);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::DataQueuingIce::DataGuest::ice_staticId()
{
    return ::DataQueuingIce::DataGuest::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::DataQueuingIce::DataGuest::__newInstance() const
{
    return new DataGuest;
}

::Ice::Object* DataQueuingIce::upCast(::DataQueuingIce::DataCreator* p) { return p; }

namespace
{
const ::std::string __DataQueuingIce__DataCreator_ids[2] =
{
    "::DataQueuingIce::DataCreator",
    "::Ice::Object"
};

}

bool
DataQueuingIce::DataCreator::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__DataQueuingIce__DataCreator_ids, __DataQueuingIce__DataCreator_ids + 2, _s);
}

::std::vector< ::std::string>
DataQueuingIce::DataCreator::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__DataQueuingIce__DataCreator_ids[0], &__DataQueuingIce__DataCreator_ids[2]);
}

const ::std::string&
DataQueuingIce::DataCreator::ice_id(const ::Ice::Current&) const
{
    return __DataQueuingIce__DataCreator_ids[0];
}

const ::std::string&
DataQueuingIce::DataCreator::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::DataQueuingIce::DataCreator";
    return typeId;
#else
    return __DataQueuingIce__DataCreator_ids[0];
#endif
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___StartCDPWork(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    ::std::string __p_token;
    ::std::string __p_cdpFileName;
    ::std::string __p_startTime;
    bool __p_watch;
    ::DataQueuingIce::ExcludeRuns __p_excludeRuns;
    __is->read(__p_task);
    __is->read(__p_token);
    __is->read(__p_cdpFileName);
    __is->read(__p_startTime);
    __is->read(__p_watch);
    __is->read(__p_excludeRuns);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = StartCDPWork(__p_task, __p_token, __p_cdpFileName, __p_startTime, __p_watch, __p_excludeRuns, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___StartQemuWorkForBitmap(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    ::std::string __p_token;
    ::IMG::ImageSnapshotIdents __p_snapshot;
    ::DataQueuingIce::BinaryStream __p_bitmap;
    ::DataQueuingIce::ExcludeRuns __p_excludeRuns;
    __is->read(__p_task);
    __is->read(__p_token);
    __is->read(__p_snapshot);
    __is->read(__p_bitmap);
    __is->read(__p_excludeRuns);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = StartQemuWorkForBitmap(__p_task, __p_token, __p_snapshot, __p_bitmap, __p_excludeRuns, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___StartQemuWorkForBitmapv2(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    ::std::string __p_token;
    ::IMG::ImageSnapshotIdents __p_snapshot;
    ::std::string __p_bitmapPath;
    ::DataQueuingIce::ExcludeRuns __p_excludeRuns;
    __is->read(__p_task);
    __is->read(__p_token);
    __is->read(__p_snapshot);
    __is->read(__p_bitmapPath);
    __is->read(__p_excludeRuns);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = StartQemuWorkForBitmapv2(__p_task, __p_token, __p_snapshot, __p_bitmapPath, __p_excludeRuns, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___StartQemuWork(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    ::std::string __p_token;
    ::IMG::ImageSnapshotIdents __p_snapshot;
    ::DataQueuingIce::ExcludeRuns __p_excludeRuns;
    __is->read(__p_task);
    __is->read(__p_token);
    __is->read(__p_snapshot);
    __is->read(__p_excludeRuns);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = StartQemuWork(__p_task, __p_token, __p_snapshot, __p_excludeRuns, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___QueryQemuProgress(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    ::std::string __p_token;
    __is->read(__p_task);
    __is->read(__p_token);
    __inS.endReadParams();
    ::Ice::Long __p_totalBytes;
    ::Ice::Long __p_completedBytes;
    ::Ice::Int __p_queueLen;
    try
    {
        ::Ice::Int __ret = QueryQemuProgress(__p_task, __p_token, __p_totalBytes, __p_completedBytes, __p_queueLen, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_totalBytes);
        __os->write(__p_completedBytes);
        __os->write(__p_queueLen);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___QueryCDPProgress(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    ::std::string __p_token;
    __is->read(__p_task);
    __is->read(__p_token);
    __inS.endReadParams();
    ::std::string __p_lastTime;
    ::Ice::Int __p_queueLen;
    try
    {
        ::Ice::Int __ret = QueryCDPProgress(__p_task, __p_token, __p_lastTime, __p_queueLen, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_lastTime);
        __os->write(__p_queueLen);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___QueryWorkStatus(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    ::std::string __p_token;
    __is->read(__p_task);
    __is->read(__p_token);
    __inS.endReadParams();
    ::DataQueuingIce::WorkType __p_workType;
    try
    {
        ::Ice::Int __ret = QueryWorkStatus(__p_task, __p_token, __p_workType, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_workType);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___StopQemuWork(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    ::std::string __p_token;
    __is->read(__p_task);
    __is->read(__p_token);
    __inS.endReadParams();
    ::DataQueuingIce::BinaryStream __p_bitmap;
    try
    {
        ::Ice::Int __ret = StopQemuWork(__p_task, __p_token, __p_bitmap, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_bitmap);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___StopQemuWorkv2(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    ::std::string __p_token;
    __is->read(__p_task);
    __is->read(__p_token);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = StopQemuWorkv2(__p_task, __p_token, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___StopCDPWork(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    ::std::string __p_token;
    __is->read(__p_task);
    __is->read(__p_token);
    __inS.endReadParams();
    ::std::string __p_lastTime;
    try
    {
        ::Ice::Int __ret = StopCDPWork(__p_task, __p_token, __p_lastTime, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_lastTime);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___SetRestoreBitmap(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    ::DataQueuingIce::DiskBitmap __p_diskBitmap;
    __is->read(__p_task);
    __is->read(__p_diskBitmap);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = SetRestoreBitmap(__p_task, __p_diskBitmap, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___SetRestoreBitmapv2(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    ::DataQueuingIce::DiskBitmapv2 __p_diskBitmap;
    __is->read(__p_task);
    __is->read(__p_diskBitmap);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = SetRestoreBitmapv2(__p_task, __p_diskBitmap, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___EndTask(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    __is->read(__p_task);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = EndTask(__p_task, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___CloseTask(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    __is->read(__p_task);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = CloseTask(__p_task, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __DataQueuingIce__DataCreator_all[] =
{
    "CloseTask",
    "EndTask",
    "QueryCDPProgress",
    "QueryQemuProgress",
    "QueryWorkStatus",
    "SetRestoreBitmap",
    "SetRestoreBitmapv2",
    "StartCDPWork",
    "StartQemuWork",
    "StartQemuWorkForBitmap",
    "StartQemuWorkForBitmapv2",
    "StopCDPWork",
    "StopQemuWork",
    "StopQemuWorkv2",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__DataQueuingIce__DataCreator_all, __DataQueuingIce__DataCreator_all + 18, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __DataQueuingIce__DataCreator_all)
    {
        case 0:
        {
            return ___CloseTask(in, current);
        }
        case 1:
        {
            return ___EndTask(in, current);
        }
        case 2:
        {
            return ___QueryCDPProgress(in, current);
        }
        case 3:
        {
            return ___QueryQemuProgress(in, current);
        }
        case 4:
        {
            return ___QueryWorkStatus(in, current);
        }
        case 5:
        {
            return ___SetRestoreBitmap(in, current);
        }
        case 6:
        {
            return ___SetRestoreBitmapv2(in, current);
        }
        case 7:
        {
            return ___StartCDPWork(in, current);
        }
        case 8:
        {
            return ___StartQemuWork(in, current);
        }
        case 9:
        {
            return ___StartQemuWorkForBitmap(in, current);
        }
        case 10:
        {
            return ___StartQemuWorkForBitmapv2(in, current);
        }
        case 11:
        {
            return ___StopCDPWork(in, current);
        }
        case 12:
        {
            return ___StopQemuWork(in, current);
        }
        case 13:
        {
            return ___StopQemuWorkv2(in, current);
        }
        case 14:
        {
            return ___ice_id(in, current);
        }
        case 15:
        {
            return ___ice_ids(in, current);
        }
        case 16:
        {
            return ___ice_isA(in, current);
        }
        case 17:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
DataQueuingIce::DataCreator::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
DataQueuingIce::DataCreator::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
DataQueuingIce::__patch(DataCreatorPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::DataQueuingIce::DataCreatorPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::DataQueuingIce::DataCreator::ice_staticId(), v);
    }
}

::Ice::Object* DataQueuingIce::upCast(::DataQueuingIce::DataGuest* p) { return p; }

namespace
{
const ::std::string __DataQueuingIce__DataGuest_ids[2] =
{
    "::DataQueuingIce::DataGuest",
    "::Ice::Object"
};

}

bool
DataQueuingIce::DataGuest::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__DataQueuingIce__DataGuest_ids, __DataQueuingIce__DataGuest_ids + 2, _s);
}

::std::vector< ::std::string>
DataQueuingIce::DataGuest::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__DataQueuingIce__DataGuest_ids[0], &__DataQueuingIce__DataGuest_ids[2]);
}

const ::std::string&
DataQueuingIce::DataGuest::ice_id(const ::Ice::Current&) const
{
    return __DataQueuingIce__DataGuest_ids[0];
}

const ::std::string&
DataQueuingIce::DataGuest::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::DataQueuingIce::DataGuest";
    return typeId;
#else
    return __DataQueuingIce__DataGuest_ids[0];
#endif
}

::Ice::DispatchStatus
DataQueuingIce::DataGuest::___InitGuest(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    ::Ice::Int __p_QueueIdent;
    __is->read(__p_task);
    __is->read(__p_QueueIdent);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = InitGuest(__p_task, __p_QueueIdent, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataGuest::___GetData(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    ::Ice::Int __p_QueueIdent;
    __is->read(__p_task);
    __is->read(__p_QueueIdent);
    __inS.endReadParams();
    ::Ice::Long __p_DataIdent;
    ::std::string __p_token;
    ::Ice::Long __p_Lba;
    ::Ice::Int __p_secs;
    ::DataQueuingIce::BinaryStream __p_data;
    bool __p_isEnd;
    try
    {
        ::Ice::Int __ret = GetData(__p_task, __p_QueueIdent, __p_DataIdent, __p_token, __p_Lba, __p_secs, __p_data, __p_isEnd, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_DataIdent);
        __os->write(__p_token);
        __os->write(__p_Lba);
        __os->write(__p_secs);
        __os->write(__p_data);
        __os->write(__p_isEnd);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataGuest::___GetDataEx(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    ::Ice::Int __p_QueueIdent;
    ::Ice::Long __p_CompletedDataIdent;
    __is->read(__p_task);
    __is->read(__p_QueueIdent);
    __is->read(__p_CompletedDataIdent);
    __inS.endReadParams();
    ::Ice::Long __p_DataIdent;
    ::std::string __p_token;
    ::Ice::Long __p_Lba;
    ::Ice::Int __p_secs;
    ::DataQueuingIce::BinaryStream __p_data;
    bool __p_isEnd;
    ::Ice::Long __p_sn;
    ::Ice::Long __p_TimeSeconds;
    ::Ice::Int __p_TimeMicroseconds;
    ::Ice::Int __p_crc;
    ::Ice::Int __p_dataType;
    ::Ice::Int __p_fragmentTotals;
    ::Ice::Int __p_fragmentIndex;
    try
    {
        ::Ice::Int __ret = GetDataEx(__p_task, __p_QueueIdent, __p_CompletedDataIdent, __p_DataIdent, __p_token, __p_Lba, __p_secs, __p_data, __p_isEnd, __p_sn, __p_TimeSeconds, __p_TimeMicroseconds, __p_crc, __p_dataType, __p_fragmentTotals, __p_fragmentIndex, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_DataIdent);
        __os->write(__p_token);
        __os->write(__p_Lba);
        __os->write(__p_secs);
        __os->write(__p_data);
        __os->write(__p_isEnd);
        __os->write(__p_sn);
        __os->write(__p_TimeSeconds);
        __os->write(__p_TimeMicroseconds);
        __os->write(__p_crc);
        __os->write(__p_dataType);
        __os->write(__p_fragmentTotals);
        __os->write(__p_fragmentIndex);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataGuest::___DataCompleted(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    ::Ice::Int __p_QueueIdent;
    ::Ice::Long __p_DataIdent;
    __is->read(__p_task);
    __is->read(__p_QueueIdent);
    __is->read(__p_DataIdent);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = DataCompleted(__p_task, __p_QueueIdent, __p_DataIdent, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataGuest::___GetBitmapInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    __is->read(__p_task);
    __inS.endReadParams();
    ::Ice::Int __p_bitmapCount;
    try
    {
        ::Ice::Int __ret = GetBitmapInfo(__p_task, __p_bitmapCount, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_bitmapCount);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataGuest::___GetBitmapData(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_task;
    ::Ice::Int __p_bitmapId;
    ::Ice::Int __p_bitmapOffset;
    ::Ice::Int __p_maxbytes;
    __is->read(__p_task);
    __is->read(__p_bitmapId);
    __is->read(__p_bitmapOffset);
    __is->read(__p_maxbytes);
    __inS.endReadParams();
    ::std::string __p_token;
    ::DataQueuingIce::BinaryStream __p_data;
    bool __p_isEnd;
    try
    {
        ::Ice::Int __ret = GetBitmapData(__p_task, __p_bitmapId, __p_bitmapOffset, __p_maxbytes, __p_token, __p_data, __p_isEnd, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_token);
        __os->write(__p_data);
        __os->write(__p_isEnd);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __DataQueuingIce__DataGuest_all[] =
{
    "DataCompleted",
    "GetBitmapData",
    "GetBitmapInfo",
    "GetData",
    "GetDataEx",
    "InitGuest",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
DataQueuingIce::DataGuest::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__DataQueuingIce__DataGuest_all, __DataQueuingIce__DataGuest_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __DataQueuingIce__DataGuest_all)
    {
        case 0:
        {
            return ___DataCompleted(in, current);
        }
        case 1:
        {
            return ___GetBitmapData(in, current);
        }
        case 2:
        {
            return ___GetBitmapInfo(in, current);
        }
        case 3:
        {
            return ___GetData(in, current);
        }
        case 4:
        {
            return ___GetDataEx(in, current);
        }
        case 5:
        {
            return ___InitGuest(in, current);
        }
        case 6:
        {
            return ___ice_id(in, current);
        }
        case 7:
        {
            return ___ice_ids(in, current);
        }
        case 8:
        {
            return ___ice_isA(in, current);
        }
        case 9:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
DataQueuingIce::DataGuest::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
DataQueuingIce::DataGuest::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
DataQueuingIce::__patch(DataGuestPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::DataQueuingIce::DataGuestPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::DataQueuingIce::DataGuest::ice_staticId(), v);
    }
}

// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CustomizedOS.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <CustomizedOS.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __CustomizedOS__MiniLoader__popen_name = "popen";

const ::std::string __CustomizedOS__MiniLoader__rwFile_name = "rwFile";

const ::std::string __CustomizedOS__MiniLoader__getRunPath_name = "getRunPath";

const ::std::string __CustomizedOS__CallbackSender__addClient_name = "addClient";

}
::IceProxy::Ice::Object* ::IceProxy::CustomizedOS::upCast(::IceProxy::CustomizedOS::MiniLoader* p) { return p; }

void
::IceProxy::CustomizedOS::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::CustomizedOS::MiniLoader>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::CustomizedOS::MiniLoader;
        v->__copyFrom(proxy);
    }
}

::std::string
IceProxy::CustomizedOS::MiniLoader::popen(const ::std::string& jsonParams, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __CustomizedOS__MiniLoader__popen_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__CustomizedOS__MiniLoader__popen_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::CustomizedOS::MiniLoader* __del = dynamic_cast< ::IceDelegate::CustomizedOS::MiniLoader*>(__delBase.get());
            return __del->popen(jsonParams, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::CustomizedOS::MiniLoader::begin_popen(const ::std::string& jsonParams, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__CustomizedOS__MiniLoader__popen_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __CustomizedOS__MiniLoader__popen_name, __del, __cookie);
    try
    {
        __result->__prepare(__CustomizedOS__MiniLoader__popen_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(jsonParams);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::CustomizedOS::MiniLoader::end_popen(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __CustomizedOS__MiniLoader__popen_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::CustomizedOS::MiniLoader::rwFile(const ::std::string& inputJson, const ::CustomizedOS::BinaryStream& inputBs, ::CustomizedOS::BinaryStream& outputBs, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __CustomizedOS__MiniLoader__rwFile_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__CustomizedOS__MiniLoader__rwFile_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::CustomizedOS::MiniLoader* __del = dynamic_cast< ::IceDelegate::CustomizedOS::MiniLoader*>(__delBase.get());
            return __del->rwFile(inputJson, inputBs, outputBs, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::CustomizedOS::MiniLoader::begin_rwFile(const ::std::string& inputJson, const ::CustomizedOS::BinaryStream& inputBs, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__CustomizedOS__MiniLoader__rwFile_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __CustomizedOS__MiniLoader__rwFile_name, __del, __cookie);
    try
    {
        __result->__prepare(__CustomizedOS__MiniLoader__rwFile_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(inputJson);
        __os->write(inputBs);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::CustomizedOS::MiniLoader::end_rwFile(::CustomizedOS::BinaryStream& outputBs, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __CustomizedOS__MiniLoader__rwFile_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(outputBs);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::CustomizedOS::MiniLoader::getRunPath(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __CustomizedOS__MiniLoader__getRunPath_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__CustomizedOS__MiniLoader__getRunPath_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::CustomizedOS::MiniLoader* __del = dynamic_cast< ::IceDelegate::CustomizedOS::MiniLoader*>(__delBase.get());
            return __del->getRunPath(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::CustomizedOS::MiniLoader::begin_getRunPath(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__CustomizedOS__MiniLoader__getRunPath_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __CustomizedOS__MiniLoader__getRunPath_name, __del, __cookie);
    try
    {
        __result->__prepare(__CustomizedOS__MiniLoader__getRunPath_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::CustomizedOS::MiniLoader::end_getRunPath(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __CustomizedOS__MiniLoader__getRunPath_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::CustomizedOS::MiniLoader::ice_staticId()
{
    return ::CustomizedOS::MiniLoader::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::CustomizedOS::MiniLoader::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::CustomizedOS::MiniLoader);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::CustomizedOS::MiniLoader::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::CustomizedOS::MiniLoader);
}

::IceProxy::Ice::Object*
IceProxy::CustomizedOS::MiniLoader::__newInstance() const
{
    return new MiniLoader;
}
::IceProxy::Ice::Object* ::IceProxy::CustomizedOS::upCast(::IceProxy::CustomizedOS::CallbackSender* p) { return p; }

void
::IceProxy::CustomizedOS::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::CustomizedOS::CallbackSender>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::CustomizedOS::CallbackSender;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::CustomizedOS::CallbackSender::addClient(const ::Ice::Identity& ident, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __CustomizedOS__CallbackSender__addClient_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__CustomizedOS__CallbackSender__addClient_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::CustomizedOS::CallbackSender* __del = dynamic_cast< ::IceDelegate::CustomizedOS::CallbackSender*>(__delBase.get());
            __del->addClient(ident, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::CustomizedOS::CallbackSender::begin_addClient(const ::Ice::Identity& ident, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__CustomizedOS__CallbackSender__addClient_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __CustomizedOS__CallbackSender__addClient_name, __del, __cookie);
    try
    {
        __result->__prepare(__CustomizedOS__CallbackSender__addClient_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::CustomizedOS::CallbackSender::end_addClient(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __CustomizedOS__CallbackSender__addClient_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::CustomizedOS::CallbackSender::ice_staticId()
{
    return ::CustomizedOS::CallbackSender::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::CustomizedOS::CallbackSender::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::CustomizedOS::CallbackSender);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::CustomizedOS::CallbackSender::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::CustomizedOS::CallbackSender);
}

::IceProxy::Ice::Object*
IceProxy::CustomizedOS::CallbackSender::__newInstance() const
{
    return new CallbackSender;
}

::std::string
IceDelegateM::CustomizedOS::MiniLoader::popen(const ::std::string& jsonParams, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __CustomizedOS__MiniLoader__popen_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(jsonParams);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::CustomizedOS::MiniLoader::rwFile(const ::std::string& inputJson, const ::CustomizedOS::BinaryStream& inputBs, ::CustomizedOS::BinaryStream& outputBs, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __CustomizedOS__MiniLoader__rwFile_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(inputJson);
        __os->write(inputBs);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(outputBs);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::CustomizedOS::MiniLoader::getRunPath(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __CustomizedOS__MiniLoader__getRunPath_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::CustomizedOS::CallbackSender::addClient(const ::Ice::Identity& ident, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __CustomizedOS__CallbackSender__addClient_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateD::CustomizedOS::MiniLoader::popen(const ::std::string& jsonParams, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_jsonParams, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_jsonParams(__p_jsonParams)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::CustomizedOS::MiniLoader* servant = dynamic_cast< ::CustomizedOS::MiniLoader*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->popen(_m_jsonParams, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_jsonParams;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __CustomizedOS__MiniLoader__popen_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, jsonParams, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::CustomizedOS::MiniLoader::rwFile(const ::std::string& inputJson, const ::CustomizedOS::BinaryStream& inputBs, ::CustomizedOS::BinaryStream& outputBs, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_inputJson, const ::CustomizedOS::BinaryStream& __p_inputBs, ::CustomizedOS::BinaryStream& __p_outputBs, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_inputJson(__p_inputJson),
            _m_inputBs(__p_inputBs),
            _m_outputBs(__p_outputBs)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::CustomizedOS::MiniLoader* servant = dynamic_cast< ::CustomizedOS::MiniLoader*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->rwFile(_m_inputJson, _m_inputBs, _m_outputBs, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_inputJson;
        const ::CustomizedOS::BinaryStream& _m_inputBs;
        ::CustomizedOS::BinaryStream& _m_outputBs;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __CustomizedOS__MiniLoader__rwFile_name, ::Ice::Idempotent, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, inputJson, inputBs, outputBs, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::CustomizedOS::MiniLoader::getRunPath(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::CustomizedOS::MiniLoader* servant = dynamic_cast< ::CustomizedOS::MiniLoader*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getRunPath(_current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::std::string& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __CustomizedOS__MiniLoader__getRunPath_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::CustomizedOS::CallbackSender::addClient(const ::Ice::Identity& ident, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Identity& __p_ident, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_ident(__p_ident)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::CustomizedOS::CallbackSender* servant = dynamic_cast< ::CustomizedOS::CallbackSender*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->addClient(_m_ident, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::Ice::Identity& _m_ident;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __CustomizedOS__CallbackSender__addClient_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(ident, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* CustomizedOS::upCast(::CustomizedOS::MiniLoader* p) { return p; }

namespace
{
const ::std::string __CustomizedOS__MiniLoader_ids[2] =
{
    "::CustomizedOS::MiniLoader",
    "::Ice::Object"
};

}

bool
CustomizedOS::MiniLoader::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__CustomizedOS__MiniLoader_ids, __CustomizedOS__MiniLoader_ids + 2, _s);
}

::std::vector< ::std::string>
CustomizedOS::MiniLoader::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__CustomizedOS__MiniLoader_ids[0], &__CustomizedOS__MiniLoader_ids[2]);
}

const ::std::string&
CustomizedOS::MiniLoader::ice_id(const ::Ice::Current&) const
{
    return __CustomizedOS__MiniLoader_ids[0];
}

const ::std::string&
CustomizedOS::MiniLoader::ice_staticId()
{
    return __CustomizedOS__MiniLoader_ids[0];
}

::Ice::DispatchStatus
CustomizedOS::MiniLoader::___popen(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string jsonParams;
    __is->read(jsonParams);
    __inS.endReadParams();
    try
    {
        ::std::string __ret = popen(jsonParams, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
CustomizedOS::MiniLoader::___rwFile(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string inputJson;
    ::CustomizedOS::BinaryStream inputBs;
    __is->read(inputJson);
    __is->read(inputBs);
    __inS.endReadParams();
    ::CustomizedOS::BinaryStream outputBs;
    try
    {
        ::std::string __ret = rwFile(inputJson, inputBs, outputBs, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(outputBs);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
CustomizedOS::MiniLoader::___getRunPath(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    try
    {
        ::std::string __ret = getRunPath(__current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __CustomizedOS__MiniLoader_all[] =
{
    "getRunPath",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "popen",
    "rwFile"
};

}

::Ice::DispatchStatus
CustomizedOS::MiniLoader::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__CustomizedOS__MiniLoader_all, __CustomizedOS__MiniLoader_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __CustomizedOS__MiniLoader_all)
    {
        case 0:
        {
            return ___getRunPath(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___popen(in, current);
        }
        case 6:
        {
            return ___rwFile(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
CustomizedOS::MiniLoader::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
CustomizedOS::MiniLoader::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
CustomizedOS::__patch(MiniLoaderPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::CustomizedOS::MiniLoaderPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::CustomizedOS::MiniLoader::ice_staticId(), v);
    }
}

::Ice::Object* CustomizedOS::upCast(::CustomizedOS::CallbackSender* p) { return p; }

namespace
{
const ::std::string __CustomizedOS__CallbackSender_ids[2] =
{
    "::CustomizedOS::CallbackSender",
    "::Ice::Object"
};

}

bool
CustomizedOS::CallbackSender::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__CustomizedOS__CallbackSender_ids, __CustomizedOS__CallbackSender_ids + 2, _s);
}

::std::vector< ::std::string>
CustomizedOS::CallbackSender::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__CustomizedOS__CallbackSender_ids[0], &__CustomizedOS__CallbackSender_ids[2]);
}

const ::std::string&
CustomizedOS::CallbackSender::ice_id(const ::Ice::Current&) const
{
    return __CustomizedOS__CallbackSender_ids[0];
}

const ::std::string&
CustomizedOS::CallbackSender::ice_staticId()
{
    return __CustomizedOS__CallbackSender_ids[0];
}

::Ice::DispatchStatus
CustomizedOS::CallbackSender::___addClient(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Identity ident;
    __is->read(ident);
    __inS.endReadParams();
    try
    {
        addClient(ident, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __CustomizedOS__CallbackSender_all[] =
{
    "addClient",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
CustomizedOS::CallbackSender::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__CustomizedOS__CallbackSender_all, __CustomizedOS__CallbackSender_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __CustomizedOS__CallbackSender_all)
    {
        case 0:
        {
            return ___addClient(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
CustomizedOS::CallbackSender::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
CustomizedOS::CallbackSender::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
CustomizedOS::__patch(CallbackSenderPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::CustomizedOS::CallbackSenderPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::CustomizedOS::CallbackSender::ice_staticId(), v);
    }
}

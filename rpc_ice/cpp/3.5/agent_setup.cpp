// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `agent_setup.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <agent_setup.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __AgentSetup__AgentSetupReceiver__queryRunnerAbsPath_name = "queryRunnerAbsPath";

const ::std::string __AgentSetup__AgentSetupReceiver__searchBootFileAbsPath_name = "searchBootFileAbsPath";

const ::std::string __AgentSetup__AgentSetupReceiver__prepareAgentInfo_name = "prepareAgentInfo";

const ::std::string __AgentSetup__AgentSetupReceiver__getFileInfo_name = "getFileInfo";

const ::std::string __AgentSetup__AgentSetupReceiver__generateKeyInfos_name = "generateKeyInfos";

const ::std::string __AgentSetup__AgentSetupReceiver__open_name = "open";

const ::std::string __AgentSetup__AgentSetupReceiver__pread_name = "pread";

const ::std::string __AgentSetup__AgentSetupReceiver__pwrite_name = "pwrite";

const ::std::string __AgentSetup__AgentSetupReceiver__close_name = "close";

const ::std::string __AgentSetup__AgentSetupReceiver__extractFile_name = "extractFile";

const ::std::string __AgentSetup__AgentSetupReceiver__executeCommand_name = "executeCommand";

const ::std::string __AgentSetup__AgentSetupReceiver__reportStatus_name = "reportStatus";

const ::std::string __AgentSetup__AgentSetupReceiver__exit_name = "exit";

const ::std::string __AgentSetup__AgentSetupSession__queryName_name = "queryName";

const ::std::string __AgentSetup__AgentSetupSession__destroy_name = "destroy";

const ::std::string __AgentSetup__AgentSetupSession__initiateReceiver_name = "initiateReceiver";

const ::std::string __AgentSetup__AgentSetupSession__refresh_name = "refresh";

const ::std::string __AgentSetup__AgentSetupSession__startSetup_name = "startSetup";

const ::std::string __AgentSetup__AgentSetupSessionFactory__create_name = "create";

}
::IceProxy::Ice::Object* ::IceProxy::AgentSetup::upCast(::IceProxy::AgentSetup::AgentSetupReceiver* p) { return p; }

void
::IceProxy::AgentSetup::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::AgentSetup::AgentSetupReceiver>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::AgentSetup::AgentSetupReceiver;
        v->__copyFrom(proxy);
    }
}

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::queryRunnerAbsPath(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __AgentSetup__AgentSetupReceiver__queryRunnerAbsPath_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__queryRunnerAbsPath_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::AgentSetup::AgentSetupReceiver* __del = dynamic_cast< ::IceDelegate::AgentSetup::AgentSetupReceiver*>(__delBase.get());
            return __del->queryRunnerAbsPath(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_queryRunnerAbsPath(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__queryRunnerAbsPath_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__queryRunnerAbsPath_name, __del, __cookie);
    try
    {
        __result->__prepare(__AgentSetup__AgentSetupReceiver__queryRunnerAbsPath_name, ::Ice::Idempotent, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::end_queryRunnerAbsPath(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__queryRunnerAbsPath_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::searchBootFileAbsPath(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __AgentSetup__AgentSetupReceiver__searchBootFileAbsPath_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__searchBootFileAbsPath_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::AgentSetup::AgentSetupReceiver* __del = dynamic_cast< ::IceDelegate::AgentSetup::AgentSetupReceiver*>(__delBase.get());
            return __del->searchBootFileAbsPath(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_searchBootFileAbsPath(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__searchBootFileAbsPath_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__searchBootFileAbsPath_name, __del, __cookie);
    try
    {
        __result->__prepare(__AgentSetup__AgentSetupReceiver__searchBootFileAbsPath_name, ::Ice::Idempotent, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::end_searchBootFileAbsPath(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__searchBootFileAbsPath_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::prepareAgentInfo(const ::std::string& flagJson, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __AgentSetup__AgentSetupReceiver__prepareAgentInfo_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__prepareAgentInfo_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::AgentSetup::AgentSetupReceiver* __del = dynamic_cast< ::IceDelegate::AgentSetup::AgentSetupReceiver*>(__delBase.get());
            return __del->prepareAgentInfo(flagJson, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_prepareAgentInfo(const ::std::string& flagJson, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__prepareAgentInfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__prepareAgentInfo_name, __del, __cookie);
    try
    {
        __result->__prepare(__AgentSetup__AgentSetupReceiver__prepareAgentInfo_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(flagJson);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::end_prepareAgentInfo(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__prepareAgentInfo_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::getFileInfo(const ::std::string& fileName, const ::std::string& flagJson, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __AgentSetup__AgentSetupReceiver__getFileInfo_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__getFileInfo_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::AgentSetup::AgentSetupReceiver* __del = dynamic_cast< ::IceDelegate::AgentSetup::AgentSetupReceiver*>(__delBase.get());
            return __del->getFileInfo(fileName, flagJson, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_getFileInfo(const ::std::string& fileName, const ::std::string& flagJson, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__getFileInfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__getFileInfo_name, __del, __cookie);
    try
    {
        __result->__prepare(__AgentSetup__AgentSetupReceiver__getFileInfo_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(fileName);
        __os->write(flagJson);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::end_getFileInfo(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__getFileInfo_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::AgentSetup::AgentSetupReceiver::generateKeyInfos(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __AgentSetup__AgentSetupReceiver__generateKeyInfos_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__generateKeyInfos_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::AgentSetup::AgentSetupReceiver* __del = dynamic_cast< ::IceDelegate::AgentSetup::AgentSetupReceiver*>(__delBase.get());
            __del->generateKeyInfos(absFilePath, flagJson, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_generateKeyInfos(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__generateKeyInfos_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__generateKeyInfos_name, __del, __cookie);
    try
    {
        __result->__prepare(__AgentSetup__AgentSetupReceiver__generateKeyInfos_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(absFilePath);
        __os->write(flagJson);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::AgentSetup::AgentSetupReceiver::end_generateKeyInfos(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__generateKeyInfos_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::open(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __AgentSetup__AgentSetupReceiver__open_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__open_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::AgentSetup::AgentSetupReceiver* __del = dynamic_cast< ::IceDelegate::AgentSetup::AgentSetupReceiver*>(__delBase.get());
            return __del->open(absFilePath, flagJson, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_open(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__open_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__open_name, __del, __cookie);
    try
    {
        __result->__prepare(__AgentSetup__AgentSetupReceiver__open_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(absFilePath);
        __os->write(flagJson);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::end_open(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__open_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::ByteSeq
IceProxy::AgentSetup::AgentSetupReceiver::pread(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __AgentSetup__AgentSetupReceiver__pread_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__pread_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::AgentSetup::AgentSetupReceiver* __del = dynamic_cast< ::IceDelegate::AgentSetup::AgentSetupReceiver*>(__delBase.get());
            return __del->pread(handle, byteOffset, bytes, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_pread(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__pread_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__pread_name, __del, __cookie);
    try
    {
        __result->__prepare(__AgentSetup__AgentSetupReceiver__pread_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(byteOffset);
        __os->write(bytes);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::ByteSeq
IceProxy::AgentSetup::AgentSetupReceiver::end_pread(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__pread_name);
    ::Ice::ByteSeq __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::AgentSetup::AgentSetupReceiver::pwrite(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::ByteSeq& data, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __AgentSetup__AgentSetupReceiver__pwrite_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__pwrite_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::AgentSetup::AgentSetupReceiver* __del = dynamic_cast< ::IceDelegate::AgentSetup::AgentSetupReceiver*>(__delBase.get());
            __del->pwrite(handle, byteOffset, bytes, data, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_pwrite(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::ByteSeq& data, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__pwrite_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__pwrite_name, __del, __cookie);
    try
    {
        __result->__prepare(__AgentSetup__AgentSetupReceiver__pwrite_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(byteOffset);
        __os->write(bytes);
        __os->write(data);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::AgentSetup::AgentSetupReceiver::end_pwrite(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__pwrite_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::AgentSetup::AgentSetupReceiver::close(const ::std::string& handle, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __AgentSetup__AgentSetupReceiver__close_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__close_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::AgentSetup::AgentSetupReceiver* __del = dynamic_cast< ::IceDelegate::AgentSetup::AgentSetupReceiver*>(__delBase.get());
            __del->close(handle, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_close(const ::std::string& handle, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__close_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__close_name, __del, __cookie);
    try
    {
        __result->__prepare(__AgentSetup__AgentSetupReceiver__close_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::AgentSetup::AgentSetupReceiver::end_close(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__close_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::AgentSetup::AgentSetupReceiver::extractFile(const ::std::string& absSourceFilePath, const ::std::string& absDestinationPath, const ::std::string& flagJson, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __AgentSetup__AgentSetupReceiver__extractFile_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__extractFile_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::AgentSetup::AgentSetupReceiver* __del = dynamic_cast< ::IceDelegate::AgentSetup::AgentSetupReceiver*>(__delBase.get());
            __del->extractFile(absSourceFilePath, absDestinationPath, flagJson, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_extractFile(const ::std::string& absSourceFilePath, const ::std::string& absDestinationPath, const ::std::string& flagJson, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__extractFile_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__extractFile_name, __del, __cookie);
    try
    {
        __result->__prepare(__AgentSetup__AgentSetupReceiver__extractFile_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(absSourceFilePath);
        __os->write(absDestinationPath);
        __os->write(flagJson);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::AgentSetup::AgentSetupReceiver::end_extractFile(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__extractFile_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::AgentSetup::AgentSetupReceiver::executeCommand(const ::std::string& cmd, const ::std::string& flagJson, ::Ice::StringSeq& stdout, ::Ice::StringSeq& stderr, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __AgentSetup__AgentSetupReceiver__executeCommand_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__executeCommand_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::AgentSetup::AgentSetupReceiver* __del = dynamic_cast< ::IceDelegate::AgentSetup::AgentSetupReceiver*>(__delBase.get());
            return __del->executeCommand(cmd, flagJson, stdout, stderr, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_executeCommand(const ::std::string& cmd, const ::std::string& flagJson, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__executeCommand_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__executeCommand_name, __del, __cookie);
    try
    {
        __result->__prepare(__AgentSetup__AgentSetupReceiver__executeCommand_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(cmd);
        __os->write(flagJson);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::AgentSetup::AgentSetupReceiver::end_executeCommand(::Ice::StringSeq& stdout, ::Ice::StringSeq& stderr, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__executeCommand_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(stdout);
        __is->read(stderr);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::AgentSetup::AgentSetupReceiver::reportStatus(const ::std::string& contentJson, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __AgentSetup__AgentSetupReceiver__reportStatus_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__reportStatus_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::AgentSetup::AgentSetupReceiver* __del = dynamic_cast< ::IceDelegate::AgentSetup::AgentSetupReceiver*>(__delBase.get());
            __del->reportStatus(contentJson, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_reportStatus(const ::std::string& contentJson, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__reportStatus_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__reportStatus_name, __del, __cookie);
    try
    {
        __result->__prepare(__AgentSetup__AgentSetupReceiver__reportStatus_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(contentJson);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::AgentSetup::AgentSetupReceiver::end_reportStatus(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__reportStatus_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::AgentSetup::AgentSetupReceiver::exit(::Ice::Int returnCode, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __AgentSetup__AgentSetupReceiver__exit_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::AgentSetup::AgentSetupReceiver* __del = dynamic_cast< ::IceDelegate::AgentSetup::AgentSetupReceiver*>(__delBase.get());
            __del->exit(returnCode, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_exit(::Ice::Int returnCode, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__exit_name, __del, __cookie);
    try
    {
        __result->__prepare(__AgentSetup__AgentSetupReceiver__exit_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(returnCode);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::AgentSetup::AgentSetupReceiver::end_exit(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __AgentSetup__AgentSetupReceiver__exit_name);
}

const ::std::string&
IceProxy::AgentSetup::AgentSetupReceiver::ice_staticId()
{
    return ::AgentSetup::AgentSetupReceiver::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::AgentSetup::AgentSetupReceiver::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::AgentSetup::AgentSetupReceiver);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::AgentSetup::AgentSetupReceiver::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::AgentSetup::AgentSetupReceiver);
}

::IceProxy::Ice::Object*
IceProxy::AgentSetup::AgentSetupReceiver::__newInstance() const
{
    return new AgentSetupReceiver;
}
::IceProxy::Ice::Object* ::IceProxy::AgentSetup::upCast(::IceProxy::AgentSetup::AgentSetupSession* p) { return p; }

void
::IceProxy::AgentSetup::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::AgentSetup::AgentSetupSession>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::AgentSetup::AgentSetupSession;
        v->__copyFrom(proxy);
    }
}

::std::string
IceProxy::AgentSetup::AgentSetupSession::queryName(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __AgentSetup__AgentSetupSession__queryName_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__AgentSetup__AgentSetupSession__queryName_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::AgentSetup::AgentSetupSession* __del = dynamic_cast< ::IceDelegate::AgentSetup::AgentSetupSession*>(__delBase.get());
            return __del->queryName(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupSession::begin_queryName(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupSession__queryName_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupSession__queryName_name, __del, __cookie);
    try
    {
        __result->__prepare(__AgentSetup__AgentSetupSession__queryName_name, ::Ice::Idempotent, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::AgentSetup::AgentSetupSession::end_queryName(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupSession__queryName_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::AgentSetup::AgentSetupSession::destroy(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __AgentSetup__AgentSetupSession__destroy_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::AgentSetup::AgentSetupSession* __del = dynamic_cast< ::IceDelegate::AgentSetup::AgentSetupSession*>(__delBase.get());
            __del->destroy(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupSession::begin_destroy(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupSession__destroy_name, __del, __cookie);
    try
    {
        __result->__prepare(__AgentSetup__AgentSetupSession__destroy_name, ::Ice::Idempotent, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::AgentSetup::AgentSetupSession::end_destroy(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __AgentSetup__AgentSetupSession__destroy_name);
}

void
IceProxy::AgentSetup::AgentSetupSession::initiateReceiver(const ::Ice::Identity& ident, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __AgentSetup__AgentSetupSession__initiateReceiver_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__AgentSetup__AgentSetupSession__initiateReceiver_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::AgentSetup::AgentSetupSession* __del = dynamic_cast< ::IceDelegate::AgentSetup::AgentSetupSession*>(__delBase.get());
            __del->initiateReceiver(ident, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupSession::begin_initiateReceiver(const ::Ice::Identity& ident, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupSession__initiateReceiver_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupSession__initiateReceiver_name, __del, __cookie);
    try
    {
        __result->__prepare(__AgentSetup__AgentSetupSession__initiateReceiver_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::AgentSetup::AgentSetupSession::end_initiateReceiver(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupSession__initiateReceiver_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::AgentSetup::AgentSetupSession::refresh(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __AgentSetup__AgentSetupSession__refresh_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::AgentSetup::AgentSetupSession* __del = dynamic_cast< ::IceDelegate::AgentSetup::AgentSetupSession*>(__delBase.get());
            __del->refresh(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupSession::begin_refresh(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupSession__refresh_name, __del, __cookie);
    try
    {
        __result->__prepare(__AgentSetup__AgentSetupSession__refresh_name, ::Ice::Idempotent, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::AgentSetup::AgentSetupSession::end_refresh(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __AgentSetup__AgentSetupSession__refresh_name);
}

void
IceProxy::AgentSetup::AgentSetupSession::startSetup(const ::std::string& flagJson, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __AgentSetup__AgentSetupSession__startSetup_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__AgentSetup__AgentSetupSession__startSetup_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::AgentSetup::AgentSetupSession* __del = dynamic_cast< ::IceDelegate::AgentSetup::AgentSetupSession*>(__delBase.get());
            __del->startSetup(flagJson, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupSession::begin_startSetup(const ::std::string& flagJson, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupSession__startSetup_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupSession__startSetup_name, __del, __cookie);
    try
    {
        __result->__prepare(__AgentSetup__AgentSetupSession__startSetup_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(flagJson);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::AgentSetup::AgentSetupSession::end_startSetup(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupSession__startSetup_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::AgentSetup::AgentSetupSession::ice_staticId()
{
    return ::AgentSetup::AgentSetupSession::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::AgentSetup::AgentSetupSession::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::AgentSetup::AgentSetupSession);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::AgentSetup::AgentSetupSession::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::AgentSetup::AgentSetupSession);
}

::IceProxy::Ice::Object*
IceProxy::AgentSetup::AgentSetupSession::__newInstance() const
{
    return new AgentSetupSession;
}
::IceProxy::Ice::Object* ::IceProxy::AgentSetup::upCast(::IceProxy::AgentSetup::AgentSetupSessionFactory* p) { return p; }

void
::IceProxy::AgentSetup::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::AgentSetup::AgentSetupSessionFactory>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::AgentSetup::AgentSetupSessionFactory;
        v->__copyFrom(proxy);
    }
}

::AgentSetup::AgentSetupSessionPrx
IceProxy::AgentSetup::AgentSetupSessionFactory::create(const ::std::string& info, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __AgentSetup__AgentSetupSessionFactory__create_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__AgentSetup__AgentSetupSessionFactory__create_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::AgentSetup::AgentSetupSessionFactory* __del = dynamic_cast< ::IceDelegate::AgentSetup::AgentSetupSessionFactory*>(__delBase.get());
            return __del->create(info, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupSessionFactory::begin_create(const ::std::string& info, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupSessionFactory__create_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupSessionFactory__create_name, __del, __cookie);
    try
    {
        __result->__prepare(__AgentSetup__AgentSetupSessionFactory__create_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(info);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::AgentSetup::AgentSetupSessionPrx
IceProxy::AgentSetup::AgentSetupSessionFactory::end_create(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupSessionFactory__create_name);
    ::AgentSetup::AgentSetupSessionPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::AgentSetup::AgentSetupSessionFactory::ice_staticId()
{
    return ::AgentSetup::AgentSetupSessionFactory::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::AgentSetup::AgentSetupSessionFactory::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::AgentSetup::AgentSetupSessionFactory);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::AgentSetup::AgentSetupSessionFactory::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::AgentSetup::AgentSetupSessionFactory);
}

::IceProxy::Ice::Object*
IceProxy::AgentSetup::AgentSetupSessionFactory::__newInstance() const
{
    return new AgentSetupSessionFactory;
}

::std::string
IceDelegateM::AgentSetup::AgentSetupReceiver::queryRunnerAbsPath(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __AgentSetup__AgentSetupReceiver__queryRunnerAbsPath_name, ::Ice::Idempotent, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::AgentSetup::AgentSetupReceiver::searchBootFileAbsPath(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __AgentSetup__AgentSetupReceiver__searchBootFileAbsPath_name, ::Ice::Idempotent, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::AgentSetup::AgentSetupReceiver::prepareAgentInfo(const ::std::string& flagJson, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __AgentSetup__AgentSetupReceiver__prepareAgentInfo_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(flagJson);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::AgentSetup::AgentSetupReceiver::getFileInfo(const ::std::string& fileName, const ::std::string& flagJson, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __AgentSetup__AgentSetupReceiver__getFileInfo_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(fileName);
        __os->write(flagJson);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::AgentSetup::AgentSetupReceiver::generateKeyInfos(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __AgentSetup__AgentSetupReceiver__generateKeyInfos_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(absFilePath);
        __os->write(flagJson);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::AgentSetup::AgentSetupReceiver::open(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __AgentSetup__AgentSetupReceiver__open_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(absFilePath);
        __os->write(flagJson);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::ByteSeq
IceDelegateM::AgentSetup::AgentSetupReceiver::pread(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __AgentSetup__AgentSetupReceiver__pread_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(byteOffset);
        __os->write(bytes);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::ByteSeq __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::AgentSetup::AgentSetupReceiver::pwrite(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::ByteSeq& data, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __AgentSetup__AgentSetupReceiver__pwrite_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(byteOffset);
        __os->write(bytes);
        __os->write(data);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::AgentSetup::AgentSetupReceiver::close(const ::std::string& handle, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __AgentSetup__AgentSetupReceiver__close_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::AgentSetup::AgentSetupReceiver::extractFile(const ::std::string& absSourceFilePath, const ::std::string& absDestinationPath, const ::std::string& flagJson, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __AgentSetup__AgentSetupReceiver__extractFile_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(absSourceFilePath);
        __os->write(absDestinationPath);
        __os->write(flagJson);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::AgentSetup::AgentSetupReceiver::executeCommand(const ::std::string& cmd, const ::std::string& flagJson, ::Ice::StringSeq& stdout, ::Ice::StringSeq& stderr, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __AgentSetup__AgentSetupReceiver__executeCommand_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(cmd);
        __os->write(flagJson);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(stdout);
        __is->read(stderr);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::AgentSetup::AgentSetupReceiver::reportStatus(const ::std::string& contentJson, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __AgentSetup__AgentSetupReceiver__reportStatus_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(contentJson);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::AgentSetup::AgentSetupReceiver::exit(::Ice::Int returnCode, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __AgentSetup__AgentSetupReceiver__exit_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(returnCode);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::std::string
IceDelegateM::AgentSetup::AgentSetupSession::queryName(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __AgentSetup__AgentSetupSession__queryName_name, ::Ice::Idempotent, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::AgentSetup::AgentSetupSession::destroy(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __AgentSetup__AgentSetupSession__destroy_name, ::Ice::Idempotent, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::AgentSetup::AgentSetupSession::initiateReceiver(const ::Ice::Identity& ident, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __AgentSetup__AgentSetupSession__initiateReceiver_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::AgentSetup::AgentSetupSession::refresh(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __AgentSetup__AgentSetupSession__refresh_name, ::Ice::Idempotent, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::AgentSetup::AgentSetupSession::startSetup(const ::std::string& flagJson, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __AgentSetup__AgentSetupSession__startSetup_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(flagJson);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::AgentSetup::AgentSetupSessionPrx
IceDelegateM::AgentSetup::AgentSetupSessionFactory::create(const ::std::string& info, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __AgentSetup__AgentSetupSessionFactory__create_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(info);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::AgentSetup::AgentSetupSessionPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateD::AgentSetup::AgentSetupReceiver::queryRunnerAbsPath(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::AgentSetup::AgentSetupReceiver* servant = dynamic_cast< ::AgentSetup::AgentSetupReceiver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->queryRunnerAbsPath(_current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::std::string& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __AgentSetup__AgentSetupReceiver__queryRunnerAbsPath_name, ::Ice::Idempotent, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::AgentSetup::AgentSetupReceiver::searchBootFileAbsPath(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::AgentSetup::AgentSetupReceiver* servant = dynamic_cast< ::AgentSetup::AgentSetupReceiver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->searchBootFileAbsPath(_current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::std::string& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __AgentSetup__AgentSetupReceiver__searchBootFileAbsPath_name, ::Ice::Idempotent, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::AgentSetup::AgentSetupReceiver::prepareAgentInfo(const ::std::string& flagJson, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_flagJson, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_flagJson(__p_flagJson)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::AgentSetup::AgentSetupReceiver* servant = dynamic_cast< ::AgentSetup::AgentSetupReceiver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->prepareAgentInfo(_m_flagJson, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_flagJson;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __AgentSetup__AgentSetupReceiver__prepareAgentInfo_name, ::Ice::Idempotent, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, flagJson, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::AgentSetup::AgentSetupReceiver::getFileInfo(const ::std::string& fileName, const ::std::string& flagJson, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_fileName, const ::std::string& __p_flagJson, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_fileName(__p_fileName),
            _m_flagJson(__p_flagJson)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::AgentSetup::AgentSetupReceiver* servant = dynamic_cast< ::AgentSetup::AgentSetupReceiver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getFileInfo(_m_fileName, _m_flagJson, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_fileName;
        const ::std::string& _m_flagJson;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __AgentSetup__AgentSetupReceiver__getFileInfo_name, ::Ice::Idempotent, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, fileName, flagJson, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::AgentSetup::AgentSetupReceiver::generateKeyInfos(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_absFilePath(__p_absFilePath),
            _m_flagJson(__p_flagJson)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::AgentSetup::AgentSetupReceiver* servant = dynamic_cast< ::AgentSetup::AgentSetupReceiver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->generateKeyInfos(_m_absFilePath, _m_flagJson, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_absFilePath;
        const ::std::string& _m_flagJson;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __AgentSetup__AgentSetupReceiver__generateKeyInfos_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(absFilePath, flagJson, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::std::string
IceDelegateD::AgentSetup::AgentSetupReceiver::open(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_absFilePath(__p_absFilePath),
            _m_flagJson(__p_flagJson)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::AgentSetup::AgentSetupReceiver* servant = dynamic_cast< ::AgentSetup::AgentSetupReceiver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->open(_m_absFilePath, _m_flagJson, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_absFilePath;
        const ::std::string& _m_flagJson;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __AgentSetup__AgentSetupReceiver__open_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, absFilePath, flagJson, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::ByteSeq
IceDelegateD::AgentSetup::AgentSetupReceiver::pread(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::ByteSeq& __result, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_handle(__p_handle),
            _m_byteOffset(__p_byteOffset),
            _m_bytes(__p_bytes)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::AgentSetup::AgentSetupReceiver* servant = dynamic_cast< ::AgentSetup::AgentSetupReceiver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->pread(_m_handle, _m_byteOffset, _m_bytes, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::ByteSeq& _result;
        const ::std::string& _m_handle;
        ::Ice::Long _m_byteOffset;
        ::Ice::Int _m_bytes;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __AgentSetup__AgentSetupReceiver__pread_name, ::Ice::Idempotent, __context);
    ::Ice::ByteSeq __result;
    try
    {
        _DirectI __direct(__result, handle, byteOffset, bytes, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::AgentSetup::AgentSetupReceiver::pwrite(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::ByteSeq& data, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::ByteSeq& __p_data, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_handle(__p_handle),
            _m_byteOffset(__p_byteOffset),
            _m_bytes(__p_bytes),
            _m_data(__p_data)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::AgentSetup::AgentSetupReceiver* servant = dynamic_cast< ::AgentSetup::AgentSetupReceiver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->pwrite(_m_handle, _m_byteOffset, _m_bytes, _m_data, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_handle;
        ::Ice::Long _m_byteOffset;
        ::Ice::Int _m_bytes;
        const ::Ice::ByteSeq& _m_data;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __AgentSetup__AgentSetupReceiver__pwrite_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(handle, byteOffset, bytes, data, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::AgentSetup::AgentSetupReceiver::close(const ::std::string& handle, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_handle, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_handle(__p_handle)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::AgentSetup::AgentSetupReceiver* servant = dynamic_cast< ::AgentSetup::AgentSetupReceiver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->close(_m_handle, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_handle;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __AgentSetup__AgentSetupReceiver__close_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(handle, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::AgentSetup::AgentSetupReceiver::extractFile(const ::std::string& absSourceFilePath, const ::std::string& absDestinationPath, const ::std::string& flagJson, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_absSourceFilePath, const ::std::string& __p_absDestinationPath, const ::std::string& __p_flagJson, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_absSourceFilePath(__p_absSourceFilePath),
            _m_absDestinationPath(__p_absDestinationPath),
            _m_flagJson(__p_flagJson)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::AgentSetup::AgentSetupReceiver* servant = dynamic_cast< ::AgentSetup::AgentSetupReceiver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->extractFile(_m_absSourceFilePath, _m_absDestinationPath, _m_flagJson, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_absSourceFilePath;
        const ::std::string& _m_absDestinationPath;
        const ::std::string& _m_flagJson;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __AgentSetup__AgentSetupReceiver__extractFile_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(absSourceFilePath, absDestinationPath, flagJson, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Int
IceDelegateD::AgentSetup::AgentSetupReceiver::executeCommand(const ::std::string& cmd, const ::std::string& flagJson, ::Ice::StringSeq& stdout, ::Ice::StringSeq& stderr, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& __p_cmd, const ::std::string& __p_flagJson, ::Ice::StringSeq& __p_stdout, ::Ice::StringSeq& __p_stderr, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_cmd(__p_cmd),
            _m_flagJson(__p_flagJson),
            _m_stdout(__p_stdout),
            _m_stderr(__p_stderr)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::AgentSetup::AgentSetupReceiver* servant = dynamic_cast< ::AgentSetup::AgentSetupReceiver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->executeCommand(_m_cmd, _m_flagJson, _m_stdout, _m_stderr, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_cmd;
        const ::std::string& _m_flagJson;
        ::Ice::StringSeq& _m_stdout;
        ::Ice::StringSeq& _m_stderr;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __AgentSetup__AgentSetupReceiver__executeCommand_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, cmd, flagJson, stdout, stderr, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::AgentSetup::AgentSetupReceiver::reportStatus(const ::std::string& contentJson, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_contentJson, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_contentJson(__p_contentJson)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::AgentSetup::AgentSetupReceiver* servant = dynamic_cast< ::AgentSetup::AgentSetupReceiver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->reportStatus(_m_contentJson, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_contentJson;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __AgentSetup__AgentSetupReceiver__reportStatus_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(contentJson, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::AgentSetup::AgentSetupReceiver::exit(::Ice::Int returnCode, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_returnCode, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_returnCode(__p_returnCode)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::AgentSetup::AgentSetupReceiver* servant = dynamic_cast< ::AgentSetup::AgentSetupReceiver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->exit(_m_returnCode, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int _m_returnCode;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __AgentSetup__AgentSetupReceiver__exit_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(returnCode, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::std::string
IceDelegateD::AgentSetup::AgentSetupSession::queryName(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::AgentSetup::AgentSetupSession* servant = dynamic_cast< ::AgentSetup::AgentSetupSession*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->queryName(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __AgentSetup__AgentSetupSession__queryName_name, ::Ice::Idempotent, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::AgentSetup::AgentSetupSession::destroy(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::AgentSetup::AgentSetupSession* servant = dynamic_cast< ::AgentSetup::AgentSetupSession*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->destroy(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __AgentSetup__AgentSetupSession__destroy_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::AgentSetup::AgentSetupSession::initiateReceiver(const ::Ice::Identity& ident, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Identity& __p_ident, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_ident(__p_ident)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::AgentSetup::AgentSetupSession* servant = dynamic_cast< ::AgentSetup::AgentSetupSession*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->initiateReceiver(_m_ident, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::Ice::Identity& _m_ident;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __AgentSetup__AgentSetupSession__initiateReceiver_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(ident, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::AgentSetup::AgentSetupSession::refresh(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::AgentSetup::AgentSetupSession* servant = dynamic_cast< ::AgentSetup::AgentSetupSession*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->refresh(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __AgentSetup__AgentSetupSession__refresh_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::AgentSetup::AgentSetupSession::startSetup(const ::std::string& flagJson, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_flagJson, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_flagJson(__p_flagJson)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::AgentSetup::AgentSetupSession* servant = dynamic_cast< ::AgentSetup::AgentSetupSession*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->startSetup(_m_flagJson, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_flagJson;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __AgentSetup__AgentSetupSession__startSetup_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(flagJson, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::AgentSetup::AgentSetupSessionPrx
IceDelegateD::AgentSetup::AgentSetupSessionFactory::create(const ::std::string& info, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::AgentSetup::AgentSetupSessionPrx& __result, const ::std::string& __p_info, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_info(__p_info)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::AgentSetup::AgentSetupSessionFactory* servant = dynamic_cast< ::AgentSetup::AgentSetupSessionFactory*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->create(_m_info, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::AgentSetup::AgentSetupSessionPrx& _result;
        const ::std::string& _m_info;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __AgentSetup__AgentSetupSessionFactory__create_name, ::Ice::Normal, __context);
    ::AgentSetup::AgentSetupSessionPrx __result;
    try
    {
        _DirectI __direct(__result, info, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* AgentSetup::upCast(::AgentSetup::AgentSetupReceiver* p) { return p; }

namespace
{
const ::std::string __AgentSetup__AgentSetupReceiver_ids[2] =
{
    "::AgentSetup::AgentSetupReceiver",
    "::Ice::Object"
};

}

bool
AgentSetup::AgentSetupReceiver::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__AgentSetup__AgentSetupReceiver_ids, __AgentSetup__AgentSetupReceiver_ids + 2, _s);
}

::std::vector< ::std::string>
AgentSetup::AgentSetupReceiver::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__AgentSetup__AgentSetupReceiver_ids[0], &__AgentSetup__AgentSetupReceiver_ids[2]);
}

const ::std::string&
AgentSetup::AgentSetupReceiver::ice_id(const ::Ice::Current&) const
{
    return __AgentSetup__AgentSetupReceiver_ids[0];
}

const ::std::string&
AgentSetup::AgentSetupReceiver::ice_staticId()
{
    return __AgentSetup__AgentSetupReceiver_ids[0];
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___queryRunnerAbsPath(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    try
    {
        ::std::string __ret = queryRunnerAbsPath(__current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___searchBootFileAbsPath(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    try
    {
        ::std::string __ret = searchBootFileAbsPath(__current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___prepareAgentInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string flagJson;
    __is->read(flagJson);
    __inS.endReadParams();
    try
    {
        ::std::string __ret = prepareAgentInfo(flagJson, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___getFileInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string fileName;
    ::std::string flagJson;
    __is->read(fileName);
    __is->read(flagJson);
    __inS.endReadParams();
    try
    {
        ::std::string __ret = getFileInfo(fileName, flagJson, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___generateKeyInfos(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string absFilePath;
    ::std::string flagJson;
    __is->read(absFilePath);
    __is->read(flagJson);
    __inS.endReadParams();
    try
    {
        generateKeyInfos(absFilePath, flagJson, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___open(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string absFilePath;
    ::std::string flagJson;
    __is->read(absFilePath);
    __is->read(flagJson);
    __inS.endReadParams();
    try
    {
        ::std::string __ret = open(absFilePath, flagJson, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___pread(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string handle;
    ::Ice::Long byteOffset;
    ::Ice::Int bytes;
    __is->read(handle);
    __is->read(byteOffset);
    __is->read(bytes);
    __inS.endReadParams();
    try
    {
        ::Ice::ByteSeq __ret = pread(handle, byteOffset, bytes, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___pwrite(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string handle;
    ::Ice::Long byteOffset;
    ::Ice::Int bytes;
    ::Ice::ByteSeq data;
    __is->read(handle);
    __is->read(byteOffset);
    __is->read(bytes);
    __is->read(data);
    __inS.endReadParams();
    try
    {
        pwrite(handle, byteOffset, bytes, data, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___close(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string handle;
    __is->read(handle);
    __inS.endReadParams();
    try
    {
        close(handle, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___extractFile(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string absSourceFilePath;
    ::std::string absDestinationPath;
    ::std::string flagJson;
    __is->read(absSourceFilePath);
    __is->read(absDestinationPath);
    __is->read(flagJson);
    __inS.endReadParams();
    try
    {
        extractFile(absSourceFilePath, absDestinationPath, flagJson, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___executeCommand(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string cmd;
    ::std::string flagJson;
    __is->read(cmd);
    __is->read(flagJson);
    __inS.endReadParams();
    ::Ice::StringSeq stdout;
    ::Ice::StringSeq stderr;
    try
    {
        ::Ice::Int __ret = executeCommand(cmd, flagJson, stdout, stderr, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(stdout);
        __os->write(stderr);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___reportStatus(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string contentJson;
    __is->read(contentJson);
    __inS.endReadParams();
    try
    {
        reportStatus(contentJson, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___exit(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int returnCode;
    __is->read(returnCode);
    __inS.endReadParams();
    exit(returnCode, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __AgentSetup__AgentSetupReceiver_all[] =
{
    "close",
    "executeCommand",
    "exit",
    "extractFile",
    "generateKeyInfos",
    "getFileInfo",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "open",
    "pread",
    "prepareAgentInfo",
    "pwrite",
    "queryRunnerAbsPath",
    "reportStatus",
    "searchBootFileAbsPath"
};

}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__AgentSetup__AgentSetupReceiver_all, __AgentSetup__AgentSetupReceiver_all + 17, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __AgentSetup__AgentSetupReceiver_all)
    {
        case 0:
        {
            return ___close(in, current);
        }
        case 1:
        {
            return ___executeCommand(in, current);
        }
        case 2:
        {
            return ___exit(in, current);
        }
        case 3:
        {
            return ___extractFile(in, current);
        }
        case 4:
        {
            return ___generateKeyInfos(in, current);
        }
        case 5:
        {
            return ___getFileInfo(in, current);
        }
        case 6:
        {
            return ___ice_id(in, current);
        }
        case 7:
        {
            return ___ice_ids(in, current);
        }
        case 8:
        {
            return ___ice_isA(in, current);
        }
        case 9:
        {
            return ___ice_ping(in, current);
        }
        case 10:
        {
            return ___open(in, current);
        }
        case 11:
        {
            return ___pread(in, current);
        }
        case 12:
        {
            return ___prepareAgentInfo(in, current);
        }
        case 13:
        {
            return ___pwrite(in, current);
        }
        case 14:
        {
            return ___queryRunnerAbsPath(in, current);
        }
        case 15:
        {
            return ___reportStatus(in, current);
        }
        case 16:
        {
            return ___searchBootFileAbsPath(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
AgentSetup::AgentSetupReceiver::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
AgentSetup::AgentSetupReceiver::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
AgentSetup::__patch(AgentSetupReceiverPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::AgentSetup::AgentSetupReceiverPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::AgentSetup::AgentSetupReceiver::ice_staticId(), v);
    }
}

::Ice::Object* AgentSetup::upCast(::AgentSetup::AgentSetupSession* p) { return p; }

namespace
{
const ::std::string __AgentSetup__AgentSetupSession_ids[2] =
{
    "::AgentSetup::AgentSetupSession",
    "::Ice::Object"
};

}

bool
AgentSetup::AgentSetupSession::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__AgentSetup__AgentSetupSession_ids, __AgentSetup__AgentSetupSession_ids + 2, _s);
}

::std::vector< ::std::string>
AgentSetup::AgentSetupSession::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__AgentSetup__AgentSetupSession_ids[0], &__AgentSetup__AgentSetupSession_ids[2]);
}

const ::std::string&
AgentSetup::AgentSetupSession::ice_id(const ::Ice::Current&) const
{
    return __AgentSetup__AgentSetupSession_ids[0];
}

const ::std::string&
AgentSetup::AgentSetupSession::ice_staticId()
{
    return __AgentSetup__AgentSetupSession_ids[0];
}

::Ice::DispatchStatus
AgentSetup::AgentSetupSession::___queryName(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::std::string __ret = queryName(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupSession::___destroy(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    destroy(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupSession::___initiateReceiver(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Identity ident;
    __is->read(ident);
    __inS.endReadParams();
    try
    {
        initiateReceiver(ident, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupSession::___refresh(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    refresh(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupSession::___startSetup(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string flagJson;
    __is->read(flagJson);
    __inS.endReadParams();
    try
    {
        startSetup(flagJson, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __AgentSetup__AgentSetupSession_all[] =
{
    "destroy",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "initiateReceiver",
    "queryName",
    "refresh",
    "startSetup"
};

}

::Ice::DispatchStatus
AgentSetup::AgentSetupSession::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__AgentSetup__AgentSetupSession_all, __AgentSetup__AgentSetupSession_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __AgentSetup__AgentSetupSession_all)
    {
        case 0:
        {
            return ___destroy(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___initiateReceiver(in, current);
        }
        case 6:
        {
            return ___queryName(in, current);
        }
        case 7:
        {
            return ___refresh(in, current);
        }
        case 8:
        {
            return ___startSetup(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
AgentSetup::AgentSetupSession::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
AgentSetup::AgentSetupSession::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
AgentSetup::__patch(AgentSetupSessionPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::AgentSetup::AgentSetupSessionPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::AgentSetup::AgentSetupSession::ice_staticId(), v);
    }
}

::Ice::Object* AgentSetup::upCast(::AgentSetup::AgentSetupSessionFactory* p) { return p; }

namespace
{
const ::std::string __AgentSetup__AgentSetupSessionFactory_ids[2] =
{
    "::AgentSetup::AgentSetupSessionFactory",
    "::Ice::Object"
};

}

bool
AgentSetup::AgentSetupSessionFactory::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__AgentSetup__AgentSetupSessionFactory_ids, __AgentSetup__AgentSetupSessionFactory_ids + 2, _s);
}

::std::vector< ::std::string>
AgentSetup::AgentSetupSessionFactory::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__AgentSetup__AgentSetupSessionFactory_ids[0], &__AgentSetup__AgentSetupSessionFactory_ids[2]);
}

const ::std::string&
AgentSetup::AgentSetupSessionFactory::ice_id(const ::Ice::Current&) const
{
    return __AgentSetup__AgentSetupSessionFactory_ids[0];
}

const ::std::string&
AgentSetup::AgentSetupSessionFactory::ice_staticId()
{
    return __AgentSetup__AgentSetupSessionFactory_ids[0];
}

::Ice::DispatchStatus
AgentSetup::AgentSetupSessionFactory::___create(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string info;
    __is->read(info);
    __inS.endReadParams();
    try
    {
        ::AgentSetup::AgentSetupSessionPrx __ret = create(info, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __AgentSetup__AgentSetupSessionFactory_all[] =
{
    "create",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
AgentSetup::AgentSetupSessionFactory::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__AgentSetup__AgentSetupSessionFactory_all, __AgentSetup__AgentSetupSessionFactory_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __AgentSetup__AgentSetupSessionFactory_all)
    {
        case 0:
        {
            return ___create(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
AgentSetup::AgentSetupSessionFactory::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
AgentSetup::AgentSetupSessionFactory::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
AgentSetup::__patch(AgentSetupSessionFactoryPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::AgentSetup::AgentSetupSessionFactoryPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::AgentSetup::AgentSetupSessionFactory::ice_staticId(), v);
    }
}

// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `duplicate_file.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____cpp_3_5_duplicate_file_h__
#define ____cpp_3_5_duplicate_file_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/Identity.h>
#include <utils.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace DuplicateFilePool
{

class UpdateProgressReceiver;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::DuplicateFilePool::UpdateProgressReceiver>&);
::IceProxy::Ice::Object* upCast(::IceProxy::DuplicateFilePool::UpdateProgressReceiver*);

class FilePool;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::DuplicateFilePool::FilePool>&);
::IceProxy::Ice::Object* upCast(::IceProxy::DuplicateFilePool::FilePool*);

}

}

namespace DuplicateFilePool
{

class UpdateProgressReceiver;
bool operator==(const UpdateProgressReceiver&, const UpdateProgressReceiver&);
bool operator<(const UpdateProgressReceiver&, const UpdateProgressReceiver&);
::Ice::Object* upCast(::DuplicateFilePool::UpdateProgressReceiver*);
typedef ::IceInternal::Handle< ::DuplicateFilePool::UpdateProgressReceiver> UpdateProgressReceiverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::DuplicateFilePool::UpdateProgressReceiver> UpdateProgressReceiverPrx;
void __patch(UpdateProgressReceiverPtr&, const ::Ice::ObjectPtr&);

class FilePool;
bool operator==(const FilePool&, const FilePool&);
bool operator<(const FilePool&, const FilePool&);
::Ice::Object* upCast(::DuplicateFilePool::FilePool*);
typedef ::IceInternal::Handle< ::DuplicateFilePool::FilePool> FilePoolPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::DuplicateFilePool::FilePool> FilePoolPrx;
void __patch(FilePoolPtr&, const ::Ice::ObjectPtr&);

}

namespace DuplicateFilePool
{

typedef ::std::vector< ::Ice::Byte> BinaryStream;

struct FileFromClient
{
    ::Ice::Int clientFileIdent;
    ::std::string fileFullName;
    ::Ice::Long fileBytes;

    bool operator==(const FileFromClient& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(clientFileIdent != __rhs.clientFileIdent)
        {
            return false;
        }
        if(fileFullName != __rhs.fileFullName)
        {
            return false;
        }
        if(fileBytes != __rhs.fileBytes)
        {
            return false;
        }
        return true;
    }

    bool operator<(const FileFromClient& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(clientFileIdent < __rhs.clientFileIdent)
        {
            return true;
        }
        else if(__rhs.clientFileIdent < clientFileIdent)
        {
            return false;
        }
        if(fileFullName < __rhs.fileFullName)
        {
            return true;
        }
        else if(__rhs.fileFullName < fileFullName)
        {
            return false;
        }
        if(fileBytes < __rhs.fileBytes)
        {
            return true;
        }
        else if(__rhs.fileBytes < fileBytes)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const FileFromClient& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const FileFromClient& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const FileFromClient& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const FileFromClient& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct FileInPool
{
    ::std::string identInPool;
    ::Ice::Int clientFileIdent;
    ::std::string fileHash;
    ::Ice::Int hashType;

    bool operator==(const FileInPool& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(identInPool != __rhs.identInPool)
        {
            return false;
        }
        if(clientFileIdent != __rhs.clientFileIdent)
        {
            return false;
        }
        if(fileHash != __rhs.fileHash)
        {
            return false;
        }
        if(hashType != __rhs.hashType)
        {
            return false;
        }
        return true;
    }

    bool operator<(const FileInPool& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(identInPool < __rhs.identInPool)
        {
            return true;
        }
        else if(__rhs.identInPool < identInPool)
        {
            return false;
        }
        if(clientFileIdent < __rhs.clientFileIdent)
        {
            return true;
        }
        else if(__rhs.clientFileIdent < clientFileIdent)
        {
            return false;
        }
        if(fileHash < __rhs.fileHash)
        {
            return true;
        }
        else if(__rhs.fileHash < fileHash)
        {
            return false;
        }
        if(hashType < __rhs.hashType)
        {
            return true;
        }
        else if(__rhs.hashType < hashType)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const FileInPool& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const FileInPool& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const FileInPool& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const FileInPool& __rhs) const
    {
        return !operator<(__rhs);
    }
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::DuplicateFilePool::FileFromClient>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::DuplicateFilePool::FileFromClient, S>
{
    static void write(S* __os, const ::DuplicateFilePool::FileFromClient& v)
    {
        __os->write(v.clientFileIdent);
        __os->write(v.fileFullName);
        __os->write(v.fileBytes);
    }
};

template<class S>
struct StreamReader< ::DuplicateFilePool::FileFromClient, S>
{
    static void read(S* __is, ::DuplicateFilePool::FileFromClient& v)
    {
        __is->read(v.clientFileIdent);
        __is->read(v.fileFullName);
        __is->read(v.fileBytes);
    }
};

template<>
struct StreamableTraits< ::DuplicateFilePool::FileInPool>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 10;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::DuplicateFilePool::FileInPool, S>
{
    static void write(S* __os, const ::DuplicateFilePool::FileInPool& v)
    {
        __os->write(v.identInPool);
        __os->write(v.clientFileIdent);
        __os->write(v.fileHash);
        __os->write(v.hashType);
    }
};

template<class S>
struct StreamReader< ::DuplicateFilePool::FileInPool, S>
{
    static void read(S* __is, ::DuplicateFilePool::FileInPool& v)
    {
        __is->read(v.identInPool);
        __is->read(v.clientFileIdent);
        __is->read(v.fileHash);
        __is->read(v.hashType);
    }
};

}

namespace DuplicateFilePool
{

class Callback_UpdateProgressReceiver_ReportProgess_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_UpdateProgressReceiver_ReportProgess_Base> Callback_UpdateProgressReceiver_ReportProgessPtr;

class Callback_FilePool_update_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilePool_update_Base> Callback_FilePool_updatePtr;

class Callback_FilePool_queryFilesFromClient_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilePool_queryFilesFromClient_Base> Callback_FilePool_queryFilesFromClientPtr;

class Callback_FilePool_readFile_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FilePool_readFile_Base> Callback_FilePool_readFilePtr;

}

namespace IceProxy
{

namespace DuplicateFilePool
{

class UpdateProgressReceiver : virtual public ::IceProxy::Ice::Object
{
public:

    void ReportProgess(bool finished, ::Ice::Long totalFileNumber, ::Ice::Long importedFileNumber)
    {
        ReportProgess(finished, totalFileNumber, importedFileNumber, 0);
    }
    void ReportProgess(bool finished, ::Ice::Long totalFileNumber, ::Ice::Long importedFileNumber, const ::Ice::Context& __ctx)
    {
        ReportProgess(finished, totalFileNumber, importedFileNumber, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ReportProgess(bool finished, ::Ice::Long totalFileNumber, ::Ice::Long importedFileNumber, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_ReportProgess(finished, totalFileNumber, importedFileNumber, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_ReportProgess(bool finished, ::Ice::Long totalFileNumber, ::Ice::Long importedFileNumber, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ReportProgess(finished, totalFileNumber, importedFileNumber, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ReportProgess(bool finished, ::Ice::Long totalFileNumber, ::Ice::Long importedFileNumber, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_ReportProgess(finished, totalFileNumber, importedFileNumber, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ReportProgess(bool finished, ::Ice::Long totalFileNumber, ::Ice::Long importedFileNumber, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ReportProgess(finished, totalFileNumber, importedFileNumber, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_ReportProgess(bool finished, ::Ice::Long totalFileNumber, ::Ice::Long importedFileNumber)
    {
        return begin_ReportProgess(finished, totalFileNumber, importedFileNumber, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReportProgess(bool finished, ::Ice::Long totalFileNumber, ::Ice::Long importedFileNumber, const ::Ice::Context& __ctx)
    {
        return begin_ReportProgess(finished, totalFileNumber, importedFileNumber, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReportProgess(bool finished, ::Ice::Long totalFileNumber, ::Ice::Long importedFileNumber, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReportProgess(finished, totalFileNumber, importedFileNumber, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReportProgess(bool finished, ::Ice::Long totalFileNumber, ::Ice::Long importedFileNumber, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReportProgess(finished, totalFileNumber, importedFileNumber, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReportProgess(bool finished, ::Ice::Long totalFileNumber, ::Ice::Long importedFileNumber, const ::DuplicateFilePool::Callback_UpdateProgressReceiver_ReportProgessPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReportProgess(finished, totalFileNumber, importedFileNumber, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReportProgess(bool finished, ::Ice::Long totalFileNumber, ::Ice::Long importedFileNumber, const ::Ice::Context& __ctx, const ::DuplicateFilePool::Callback_UpdateProgressReceiver_ReportProgessPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReportProgess(finished, totalFileNumber, importedFileNumber, &__ctx, __del, __cookie);
    }

    void end_ReportProgess(const ::Ice::AsyncResultPtr&);
    
private:

    void ReportProgess(bool, ::Ice::Long, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ReportProgess(bool, ::Ice::Long, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_secure(bool __secure) const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_twoway() const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_oneway() const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_batchOneway() const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_datagram() const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_batchDatagram() const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_compress(bool __compress) const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_timeout(int __timeout) const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<UpdateProgressReceiver> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<UpdateProgressReceiver*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FilePool : virtual public ::IceProxy::Ice::Object
{
public:

    void update(const ::std::string& path, const ::Ice::Identity& ident)
    {
        update(path, ident, 0);
    }
    void update(const ::std::string& path, const ::Ice::Identity& ident, const ::Ice::Context& __ctx)
    {
        update(path, ident, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_update(const ::std::string& path, const ::Ice::Identity& ident, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_update(path, ident, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_update(const ::std::string& path, const ::Ice::Identity& ident, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_update(path, ident, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_update(const ::std::string& path, const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_update(path, ident, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_update(const ::std::string& path, const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_update(path, ident, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_update(const ::std::string& path, const ::Ice::Identity& ident, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DuplicateFilePool::FilePoolPrx __proxy = ::DuplicateFilePool::FilePoolPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_update(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_update(path, ident, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_update(const ::std::string& path, const ::Ice::Identity& ident)
    {
        return begin_update(path, ident, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_update(const ::std::string& path, const ::Ice::Identity& ident, const ::Ice::Context& __ctx)
    {
        return begin_update(path, ident, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_update(const ::std::string& path, const ::Ice::Identity& ident, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(path, ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::std::string& path, const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(path, ident, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::std::string& path, const ::Ice::Identity& ident, const ::DuplicateFilePool::Callback_FilePool_updatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(path, ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::std::string& path, const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::DuplicateFilePool::Callback_FilePool_updatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(path, ident, &__ctx, __del, __cookie);
    }

    void end_update(const ::Ice::AsyncResultPtr&);
    
private:

    void update(const ::std::string&, const ::Ice::Identity&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_update(const ::std::string&, const ::Ice::Identity&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void queryFilesFromClient(const ::std::string& inPath, const ::std::string& outPath)
    {
        queryFilesFromClient(inPath, outPath, 0);
    }
    void queryFilesFromClient(const ::std::string& inPath, const ::std::string& outPath, const ::Ice::Context& __ctx)
    {
        queryFilesFromClient(inPath, outPath, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_queryFilesFromClient(const ::std::string& inPath, const ::std::string& outPath, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryFilesFromClient(inPath, outPath, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryFilesFromClient(const ::std::string& inPath, const ::std::string& outPath, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryFilesFromClient(inPath, outPath, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_queryFilesFromClient(const ::std::string& inPath, const ::std::string& outPath, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryFilesFromClient(inPath, outPath, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryFilesFromClient(const ::std::string& inPath, const ::std::string& outPath, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryFilesFromClient(inPath, outPath, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_queryFilesFromClient(const ::std::string& inPath, const ::std::string& outPath, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DuplicateFilePool::FilePoolPrx __proxy = ::DuplicateFilePool::FilePoolPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_queryFilesFromClient(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_queryFilesFromClient(inPath, outPath, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_queryFilesFromClient(const ::std::string& inPath, const ::std::string& outPath)
    {
        return begin_queryFilesFromClient(inPath, outPath, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryFilesFromClient(const ::std::string& inPath, const ::std::string& outPath, const ::Ice::Context& __ctx)
    {
        return begin_queryFilesFromClient(inPath, outPath, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryFilesFromClient(const ::std::string& inPath, const ::std::string& outPath, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryFilesFromClient(inPath, outPath, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryFilesFromClient(const ::std::string& inPath, const ::std::string& outPath, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryFilesFromClient(inPath, outPath, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryFilesFromClient(const ::std::string& inPath, const ::std::string& outPath, const ::DuplicateFilePool::Callback_FilePool_queryFilesFromClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryFilesFromClient(inPath, outPath, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryFilesFromClient(const ::std::string& inPath, const ::std::string& outPath, const ::Ice::Context& __ctx, const ::DuplicateFilePool::Callback_FilePool_queryFilesFromClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryFilesFromClient(inPath, outPath, &__ctx, __del, __cookie);
    }

    void end_queryFilesFromClient(const ::Ice::AsyncResultPtr&);
    
private:

    void queryFilesFromClient(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_queryFilesFromClient(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::DuplicateFilePool::BinaryStream readFile(const ::std::string& identInPool, ::Ice::Long byteOffset, ::Ice::Int bytes)
    {
        return readFile(identInPool, byteOffset, bytes, 0);
    }
    ::DuplicateFilePool::BinaryStream readFile(const ::std::string& identInPool, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context& __ctx)
    {
        return readFile(identInPool, byteOffset, bytes, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_readFile(const ::std::string& identInPool, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::IceInternal::Function<void (const ::DuplicateFilePool::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_readFile(identInPool, byteOffset, bytes, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_readFile(const ::std::string& identInPool, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_readFile(identInPool, byteOffset, bytes, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_readFile(const ::std::string& identInPool, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::DuplicateFilePool::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_readFile(identInPool, byteOffset, bytes, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_readFile(const ::std::string& identInPool, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_readFile(identInPool, byteOffset, bytes, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_readFile(const ::std::string& identInPool, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::DuplicateFilePool::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::DuplicateFilePool::BinaryStream&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DuplicateFilePool::FilePoolPrx __proxy = ::DuplicateFilePool::FilePoolPrx::uncheckedCast(__result->getProxy());
                ::DuplicateFilePool::BinaryStream __ret;
                try
                {
                    __ret = __proxy->end_readFile(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::DuplicateFilePool::BinaryStream&)> _response;
        };
        return begin_readFile(identInPool, byteOffset, bytes, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_readFile(const ::std::string& identInPool, ::Ice::Long byteOffset, ::Ice::Int bytes)
    {
        return begin_readFile(identInPool, byteOffset, bytes, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readFile(const ::std::string& identInPool, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context& __ctx)
    {
        return begin_readFile(identInPool, byteOffset, bytes, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readFile(const ::std::string& identInPool, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readFile(identInPool, byteOffset, bytes, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readFile(const ::std::string& identInPool, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readFile(identInPool, byteOffset, bytes, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readFile(const ::std::string& identInPool, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::DuplicateFilePool::Callback_FilePool_readFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readFile(identInPool, byteOffset, bytes, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readFile(const ::std::string& identInPool, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context& __ctx, const ::DuplicateFilePool::Callback_FilePool_readFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readFile(identInPool, byteOffset, bytes, &__ctx, __del, __cookie);
    }

    ::DuplicateFilePool::BinaryStream end_readFile(const ::Ice::AsyncResultPtr&);
    
private:

    ::DuplicateFilePool::BinaryStream readFile(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_readFile(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<FilePool> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FilePool> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FilePool> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FilePool> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FilePool> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FilePool> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FilePool> ice_secure(bool __secure) const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FilePool> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FilePool> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FilePool> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FilePool> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FilePool> ice_twoway() const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FilePool> ice_oneway() const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FilePool> ice_batchOneway() const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FilePool> ice_datagram() const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FilePool> ice_batchDatagram() const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FilePool> ice_compress(bool __compress) const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FilePool> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FilePool> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FilePool> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FilePool*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace DuplicateFilePool
{

class UpdateProgressReceiver : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void ReportProgess(bool, ::Ice::Long, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class FilePool : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void update(const ::std::string&, const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void queryFilesFromClient(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::DuplicateFilePool::BinaryStream readFile(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace DuplicateFilePool
{

class UpdateProgressReceiver : virtual public ::IceDelegate::DuplicateFilePool::UpdateProgressReceiver,
                               virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void ReportProgess(bool, ::Ice::Long, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class FilePool : virtual public ::IceDelegate::DuplicateFilePool::FilePool,
                 virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void update(const ::std::string&, const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void queryFilesFromClient(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::DuplicateFilePool::BinaryStream readFile(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace DuplicateFilePool
{

class UpdateProgressReceiver : virtual public ::IceDelegate::DuplicateFilePool::UpdateProgressReceiver,
                               virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void ReportProgess(bool, ::Ice::Long, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class FilePool : virtual public ::IceDelegate::DuplicateFilePool::FilePool,
                 virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void update(const ::std::string&, const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void queryFilesFromClient(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::DuplicateFilePool::BinaryStream readFile(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace DuplicateFilePool
{

class UpdateProgressReceiver : virtual public ::Ice::Object
{
public:

    typedef UpdateProgressReceiverPrx ProxyType;
    typedef UpdateProgressReceiverPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void ReportProgess(bool, ::Ice::Long, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ReportProgess(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const UpdateProgressReceiver& l, const UpdateProgressReceiver& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const UpdateProgressReceiver& l, const UpdateProgressReceiver& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FilePool : virtual public ::Ice::Object
{
public:

    typedef FilePoolPrx ProxyType;
    typedef FilePoolPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void update(const ::std::string&, const ::Ice::Identity&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___update(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void queryFilesFromClient(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___queryFilesFromClient(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::DuplicateFilePool::BinaryStream readFile(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___readFile(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const FilePool& l, const FilePool& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FilePool& l, const FilePool& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace DuplicateFilePool
{

template<class T>
class CallbackNC_UpdateProgressReceiver_ReportProgess : public Callback_UpdateProgressReceiver_ReportProgess_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_UpdateProgressReceiver_ReportProgess(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_UpdateProgressReceiver_ReportProgessPtr
newCallback_UpdateProgressReceiver_ReportProgess(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UpdateProgressReceiver_ReportProgess<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UpdateProgressReceiver_ReportProgessPtr
newCallback_UpdateProgressReceiver_ReportProgess(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UpdateProgressReceiver_ReportProgess<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_UpdateProgressReceiver_ReportProgessPtr
newCallback_UpdateProgressReceiver_ReportProgess(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UpdateProgressReceiver_ReportProgess<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UpdateProgressReceiver_ReportProgessPtr
newCallback_UpdateProgressReceiver_ReportProgess(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UpdateProgressReceiver_ReportProgess<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_UpdateProgressReceiver_ReportProgess : public Callback_UpdateProgressReceiver_ReportProgess_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_UpdateProgressReceiver_ReportProgess(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_UpdateProgressReceiver_ReportProgessPtr
newCallback_UpdateProgressReceiver_ReportProgess(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UpdateProgressReceiver_ReportProgess<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UpdateProgressReceiver_ReportProgessPtr
newCallback_UpdateProgressReceiver_ReportProgess(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UpdateProgressReceiver_ReportProgess<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_UpdateProgressReceiver_ReportProgessPtr
newCallback_UpdateProgressReceiver_ReportProgess(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UpdateProgressReceiver_ReportProgess<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UpdateProgressReceiver_ReportProgessPtr
newCallback_UpdateProgressReceiver_ReportProgess(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UpdateProgressReceiver_ReportProgess<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilePool_update : public Callback_FilePool_update_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilePool_update(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DuplicateFilePool::FilePoolPrx __proxy = ::DuplicateFilePool::FilePoolPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_update(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_FilePool_updatePtr
newCallback_FilePool_update(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilePool_update<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilePool_updatePtr
newCallback_FilePool_update(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilePool_update<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilePool_updatePtr
newCallback_FilePool_update(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilePool_update<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilePool_updatePtr
newCallback_FilePool_update(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilePool_update<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilePool_update : public Callback_FilePool_update_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilePool_update(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DuplicateFilePool::FilePoolPrx __proxy = ::DuplicateFilePool::FilePoolPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_update(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilePool_updatePtr
newCallback_FilePool_update(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilePool_update<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilePool_updatePtr
newCallback_FilePool_update(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilePool_update<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilePool_updatePtr
newCallback_FilePool_update(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilePool_update<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilePool_updatePtr
newCallback_FilePool_update(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilePool_update<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilePool_queryFilesFromClient : public Callback_FilePool_queryFilesFromClient_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FilePool_queryFilesFromClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DuplicateFilePool::FilePoolPrx __proxy = ::DuplicateFilePool::FilePoolPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_queryFilesFromClient(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_FilePool_queryFilesFromClientPtr
newCallback_FilePool_queryFilesFromClient(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilePool_queryFilesFromClient<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilePool_queryFilesFromClientPtr
newCallback_FilePool_queryFilesFromClient(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilePool_queryFilesFromClient<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FilePool_queryFilesFromClientPtr
newCallback_FilePool_queryFilesFromClient(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilePool_queryFilesFromClient<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilePool_queryFilesFromClientPtr
newCallback_FilePool_queryFilesFromClient(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilePool_queryFilesFromClient<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilePool_queryFilesFromClient : public Callback_FilePool_queryFilesFromClient_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FilePool_queryFilesFromClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DuplicateFilePool::FilePoolPrx __proxy = ::DuplicateFilePool::FilePoolPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_queryFilesFromClient(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilePool_queryFilesFromClientPtr
newCallback_FilePool_queryFilesFromClient(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilePool_queryFilesFromClient<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilePool_queryFilesFromClientPtr
newCallback_FilePool_queryFilesFromClient(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilePool_queryFilesFromClient<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FilePool_queryFilesFromClientPtr
newCallback_FilePool_queryFilesFromClient(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilePool_queryFilesFromClient<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilePool_queryFilesFromClientPtr
newCallback_FilePool_queryFilesFromClient(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilePool_queryFilesFromClient<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FilePool_readFile : public Callback_FilePool_readFile_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::DuplicateFilePool::BinaryStream&);

    CallbackNC_FilePool_readFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DuplicateFilePool::FilePoolPrx __proxy = ::DuplicateFilePool::FilePoolPrx::uncheckedCast(__result->getProxy());
        ::DuplicateFilePool::BinaryStream __ret;
        try
        {
            __ret = __proxy->end_readFile(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FilePool_readFilePtr
newCallback_FilePool_readFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::DuplicateFilePool::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilePool_readFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FilePool_readFilePtr
newCallback_FilePool_readFile(T* instance, void (T::*cb)(const ::DuplicateFilePool::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FilePool_readFile<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FilePool_readFile : public Callback_FilePool_readFile_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::DuplicateFilePool::BinaryStream&, const CT&);

    Callback_FilePool_readFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DuplicateFilePool::FilePoolPrx __proxy = ::DuplicateFilePool::FilePoolPrx::uncheckedCast(__result->getProxy());
        ::DuplicateFilePool::BinaryStream __ret;
        try
        {
            __ret = __proxy->end_readFile(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FilePool_readFilePtr
newCallback_FilePool_readFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::DuplicateFilePool::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilePool_readFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FilePool_readFilePtr
newCallback_FilePool_readFile(T* instance, void (T::*cb)(const ::DuplicateFilePool::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FilePool_readFile<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

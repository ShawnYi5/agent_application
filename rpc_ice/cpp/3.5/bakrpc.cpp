// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `bakrpc.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <bakrpc.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __bakrpc__BackupRPC__callFunction_name = "callFunction";

}

namespace
{

const ::std::string __kvm4remote__KVM__SetRemoteCallable_name = "SetRemoteCallable";

const ::std::string __kvm4remote__KVM__CleanRemoteCallable_name = "CleanRemoteCallable";

const ::std::string __kvm4remote__KVM__getKVMCallable_name = "getKVMCallable";

}
::IceProxy::Ice::Object* ::IceProxy::bakrpc::upCast(::IceProxy::bakrpc::BackupRPC* p) { return p; }

void
::IceProxy::bakrpc::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::bakrpc::BackupRPC>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::bakrpc::BackupRPC;
        v->__copyFrom(proxy);
    }
}

::Ice::Int
IceProxy::bakrpc::BackupRPC::callFunction(const ::std::string& callJson, const ::std::string& inJson, const ::bakrpc::BinaryStream& inRaw, ::std::string& outJson, ::bakrpc::BinaryStream& outRaw, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __bakrpc__BackupRPC__callFunction_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__bakrpc__BackupRPC__callFunction_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::bakrpc::BackupRPC* __del = dynamic_cast< ::IceDelegate::bakrpc::BackupRPC*>(__delBase.get());
            return __del->callFunction(callJson, inJson, inRaw, outJson, outRaw, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::bakrpc::BackupRPC::begin_callFunction(const ::std::string& callJson, const ::std::string& inJson, const ::bakrpc::BinaryStream& inRaw, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__bakrpc__BackupRPC__callFunction_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __bakrpc__BackupRPC__callFunction_name, __del, __cookie);
    try
    {
        __result->__prepare(__bakrpc__BackupRPC__callFunction_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(callJson);
        __os->write(inJson);
        __os->write(inRaw);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::bakrpc::BackupRPC::end_callFunction(::std::string& outJson, ::bakrpc::BinaryStream& outRaw, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __bakrpc__BackupRPC__callFunction_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(outJson);
        __is->read(outRaw);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::bakrpc::BackupRPC::ice_staticId()
{
    return ::bakrpc::BackupRPC::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::bakrpc::BackupRPC::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::bakrpc::BackupRPC);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::bakrpc::BackupRPC::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::bakrpc::BackupRPC);
}

::IceProxy::Ice::Object*
IceProxy::bakrpc::BackupRPC::__newInstance() const
{
    return new BackupRPC;
}
::IceProxy::Ice::Object* ::IceProxy::kvm4remote::upCast(::IceProxy::kvm4remote::KVM* p) { return p; }

void
::IceProxy::kvm4remote::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::kvm4remote::KVM>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::kvm4remote::KVM;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::kvm4remote::KVM::SetRemoteCallable(const ::std::string& ident, const ::Utils::CallablePrx& callable, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __kvm4remote__KVM__SetRemoteCallable_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__kvm4remote__KVM__SetRemoteCallable_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::kvm4remote::KVM* __del = dynamic_cast< ::IceDelegate::kvm4remote::KVM*>(__delBase.get());
            __del->SetRemoteCallable(ident, callable, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::kvm4remote::KVM::begin_SetRemoteCallable(const ::std::string& ident, const ::Utils::CallablePrx& callable, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__kvm4remote__KVM__SetRemoteCallable_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __kvm4remote__KVM__SetRemoteCallable_name, __del, __cookie);
    try
    {
        __result->__prepare(__kvm4remote__KVM__SetRemoteCallable_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __os->write(callable);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::kvm4remote::KVM::end_SetRemoteCallable(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __kvm4remote__KVM__SetRemoteCallable_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::kvm4remote::KVM::CleanRemoteCallable(const ::std::string& ident, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __kvm4remote__KVM__CleanRemoteCallable_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::kvm4remote::KVM* __del = dynamic_cast< ::IceDelegate::kvm4remote::KVM*>(__delBase.get());
            __del->CleanRemoteCallable(ident, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::kvm4remote::KVM::begin_CleanRemoteCallable(const ::std::string& ident, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __kvm4remote__KVM__CleanRemoteCallable_name, __del, __cookie);
    try
    {
        __result->__prepare(__kvm4remote__KVM__CleanRemoteCallable_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::kvm4remote::KVM::end_CleanRemoteCallable(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __kvm4remote__KVM__CleanRemoteCallable_name);
}

::Utils::CallablePrx
IceProxy::kvm4remote::KVM::getKVMCallable(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __kvm4remote__KVM__getKVMCallable_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__kvm4remote__KVM__getKVMCallable_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::kvm4remote::KVM* __del = dynamic_cast< ::IceDelegate::kvm4remote::KVM*>(__delBase.get());
            return __del->getKVMCallable(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::kvm4remote::KVM::begin_getKVMCallable(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__kvm4remote__KVM__getKVMCallable_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __kvm4remote__KVM__getKVMCallable_name, __del, __cookie);
    try
    {
        __result->__prepare(__kvm4remote__KVM__getKVMCallable_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Utils::CallablePrx
IceProxy::kvm4remote::KVM::end_getKVMCallable(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __kvm4remote__KVM__getKVMCallable_name);
    ::Utils::CallablePrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::kvm4remote::KVM::ice_staticId()
{
    return ::kvm4remote::KVM::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::kvm4remote::KVM::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::kvm4remote::KVM);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::kvm4remote::KVM::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::kvm4remote::KVM);
}

::IceProxy::Ice::Object*
IceProxy::kvm4remote::KVM::__newInstance() const
{
    return new KVM;
}

::Ice::Int
IceDelegateM::bakrpc::BackupRPC::callFunction(const ::std::string& callJson, const ::std::string& inJson, const ::bakrpc::BinaryStream& inRaw, ::std::string& outJson, ::bakrpc::BinaryStream& outRaw, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __bakrpc__BackupRPC__callFunction_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(callJson);
        __os->write(inJson);
        __os->write(inRaw);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(outJson);
        __is->read(outRaw);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::kvm4remote::KVM::SetRemoteCallable(const ::std::string& ident, const ::Utils::CallablePrx& callable, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __kvm4remote__KVM__SetRemoteCallable_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __os->write(callable);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::kvm4remote::KVM::CleanRemoteCallable(const ::std::string& ident, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __kvm4remote__KVM__CleanRemoteCallable_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Utils::CallablePrx
IceDelegateM::kvm4remote::KVM::getKVMCallable(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __kvm4remote__KVM__getKVMCallable_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Utils::CallablePrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateD::bakrpc::BackupRPC::callFunction(const ::std::string& callJson, const ::std::string& inJson, const ::bakrpc::BinaryStream& inRaw, ::std::string& outJson, ::bakrpc::BinaryStream& outRaw, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& __p_callJson, const ::std::string& __p_inJson, const ::bakrpc::BinaryStream& __p_inRaw, ::std::string& __p_outJson, ::bakrpc::BinaryStream& __p_outRaw, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_callJson(__p_callJson),
            _m_inJson(__p_inJson),
            _m_inRaw(__p_inRaw),
            _m_outJson(__p_outJson),
            _m_outRaw(__p_outRaw)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::bakrpc::BackupRPC* servant = dynamic_cast< ::bakrpc::BackupRPC*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->callFunction(_m_callJson, _m_inJson, _m_inRaw, _m_outJson, _m_outRaw, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_callJson;
        const ::std::string& _m_inJson;
        const ::bakrpc::BinaryStream& _m_inRaw;
        ::std::string& _m_outJson;
        ::bakrpc::BinaryStream& _m_outRaw;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __bakrpc__BackupRPC__callFunction_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, callJson, inJson, inRaw, outJson, outRaw, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::kvm4remote::KVM::SetRemoteCallable(const ::std::string& ident, const ::Utils::CallablePrx& callable, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_ident, const ::Utils::CallablePrx& __p_callable, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_ident(__p_ident),
            _m_callable(__p_callable)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::kvm4remote::KVM* servant = dynamic_cast< ::kvm4remote::KVM*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->SetRemoteCallable(_m_ident, _m_callable, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_ident;
        const ::Utils::CallablePrx& _m_callable;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __kvm4remote__KVM__SetRemoteCallable_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(ident, callable, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::kvm4remote::KVM::CleanRemoteCallable(const ::std::string& ident, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_ident, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_ident(__p_ident)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::kvm4remote::KVM* servant = dynamic_cast< ::kvm4remote::KVM*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->CleanRemoteCallable(_m_ident, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_ident;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __kvm4remote__KVM__CleanRemoteCallable_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(ident, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Utils::CallablePrx
IceDelegateD::kvm4remote::KVM::getKVMCallable(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Utils::CallablePrx& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::kvm4remote::KVM* servant = dynamic_cast< ::kvm4remote::KVM*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getKVMCallable(_current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Utils::CallablePrx& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __kvm4remote__KVM__getKVMCallable_name, ::Ice::Normal, __context);
    ::Utils::CallablePrx __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* bakrpc::upCast(::bakrpc::BackupRPC* p) { return p; }

namespace
{
const ::std::string __bakrpc__BackupRPC_ids[2] =
{
    "::Ice::Object",
    "::bakrpc::BackupRPC"
};

}

bool
bakrpc::BackupRPC::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__bakrpc__BackupRPC_ids, __bakrpc__BackupRPC_ids + 2, _s);
}

::std::vector< ::std::string>
bakrpc::BackupRPC::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__bakrpc__BackupRPC_ids[0], &__bakrpc__BackupRPC_ids[2]);
}

const ::std::string&
bakrpc::BackupRPC::ice_id(const ::Ice::Current&) const
{
    return __bakrpc__BackupRPC_ids[1];
}

const ::std::string&
bakrpc::BackupRPC::ice_staticId()
{
    return __bakrpc__BackupRPC_ids[1];
}

::Ice::DispatchStatus
bakrpc::BackupRPC::___callFunction(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string callJson;
    ::std::string inJson;
    ::bakrpc::BinaryStream inRaw;
    __is->read(callJson);
    __is->read(inJson);
    __is->read(inRaw);
    __inS.endReadParams();
    ::std::string outJson;
    ::bakrpc::BinaryStream outRaw;
    try
    {
        ::Ice::Int __ret = callFunction(callJson, inJson, inRaw, outJson, outRaw, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(outJson);
        __os->write(outRaw);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __bakrpc__BackupRPC_all[] =
{
    "callFunction",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
bakrpc::BackupRPC::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__bakrpc__BackupRPC_all, __bakrpc__BackupRPC_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __bakrpc__BackupRPC_all)
    {
        case 0:
        {
            return ___callFunction(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
bakrpc::BackupRPC::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
bakrpc::BackupRPC::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
bakrpc::__patch(BackupRPCPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::bakrpc::BackupRPCPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::bakrpc::BackupRPC::ice_staticId(), v);
    }
}

::Ice::Object* kvm4remote::upCast(::kvm4remote::KVM* p) { return p; }

namespace
{
const ::std::string __kvm4remote__KVM_ids[2] =
{
    "::Ice::Object",
    "::kvm4remote::KVM"
};

}

bool
kvm4remote::KVM::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__kvm4remote__KVM_ids, __kvm4remote__KVM_ids + 2, _s);
}

::std::vector< ::std::string>
kvm4remote::KVM::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__kvm4remote__KVM_ids[0], &__kvm4remote__KVM_ids[2]);
}

const ::std::string&
kvm4remote::KVM::ice_id(const ::Ice::Current&) const
{
    return __kvm4remote__KVM_ids[1];
}

const ::std::string&
kvm4remote::KVM::ice_staticId()
{
    return __kvm4remote__KVM_ids[1];
}

::Ice::DispatchStatus
kvm4remote::KVM::___SetRemoteCallable(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string ident;
    ::Utils::CallablePrx callable;
    __is->read(ident);
    __is->read(callable);
    __inS.endReadParams();
    try
    {
        SetRemoteCallable(ident, callable, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
kvm4remote::KVM::___CleanRemoteCallable(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string ident;
    __is->read(ident);
    __inS.endReadParams();
    CleanRemoteCallable(ident, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
kvm4remote::KVM::___getKVMCallable(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    try
    {
        ::Utils::CallablePrx __ret = getKVMCallable(__current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __kvm4remote__KVM_all[] =
{
    "CleanRemoteCallable",
    "SetRemoteCallable",
    "getKVMCallable",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
kvm4remote::KVM::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__kvm4remote__KVM_all, __kvm4remote__KVM_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __kvm4remote__KVM_all)
    {
        case 0:
        {
            return ___CleanRemoteCallable(in, current);
        }
        case 1:
        {
            return ___SetRemoteCallable(in, current);
        }
        case 2:
        {
            return ___getKVMCallable(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
kvm4remote::KVM::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
kvm4remote::KVM::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
kvm4remote::__patch(KVMPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::kvm4remote::KVMPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::kvm4remote::KVM::ice_staticId(), v);
    }
}

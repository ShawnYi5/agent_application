// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `data_queuing.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <data_queuing.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __DataQueuingIce__CreatorReceiver__WorkCompleted_name = "WorkCompleted";

const ::std::string __DataQueuingIce__DataCreator__InitiateCreatorReceiver_name = "InitiateCreatorReceiver";

const ::std::string __DataQueuingIce__DataCreator__StartCDPWork_name = "StartCDPWork";

const ::std::string __DataQueuingIce__DataCreator__StartQemuWork_name = "StartQemuWork";

const ::std::string __DataQueuingIce__DataCreator__StopWork_name = "StopWork";

const ::std::string __DataQueuingIce__DataCreator__SetRestoreBitmap_name = "SetRestoreBitmap";

const ::std::string __DataQueuingIce__DataCreator__EndTask_name = "EndTask";

const ::std::string __DataQueuingIce__DataCreator__CloseTask_name = "CloseTask";

const ::std::string __DataQueuingIce__DataGuest__InitGuest_name = "InitGuest";

const ::std::string __DataQueuingIce__DataGuest__GetData_name = "GetData";

const ::std::string __DataQueuingIce__DataGuest__DataCompleted_name = "DataCompleted";

const ::std::string __DataQueuingIce__DataGuest__GetBitmapInfo_name = "GetBitmapInfo";

const ::std::string __DataQueuingIce__DataGuest__GetBitmapData_name = "GetBitmapData";

}
::IceProxy::Ice::Object* ::IceProxy::DataQueuingIce::upCast(::IceProxy::DataQueuingIce::CreatorReceiver* p) { return p; }

void
::IceProxy::DataQueuingIce::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::DataQueuingIce::CreatorReceiver>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::DataQueuingIce::CreatorReceiver;
        v->__copyFrom(proxy);
    }
}

::Ice::Int
IceProxy::DataQueuingIce::CreatorReceiver::WorkCompleted(const ::std::string& task, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DataQueuingIce__CreatorReceiver__WorkCompleted_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__DataQueuingIce__CreatorReceiver__WorkCompleted_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::DataQueuingIce::CreatorReceiver* __del = dynamic_cast< ::IceDelegate::DataQueuingIce::CreatorReceiver*>(__delBase.get());
            return __del->WorkCompleted(task, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::CreatorReceiver::begin_WorkCompleted(const ::std::string& task, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__CreatorReceiver__WorkCompleted_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__CreatorReceiver__WorkCompleted_name, __del, __cookie);
    try
    {
        __result->__prepare(__DataQueuingIce__CreatorReceiver__WorkCompleted_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::DataQueuingIce::CreatorReceiver::end_WorkCompleted(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__CreatorReceiver__WorkCompleted_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::DataQueuingIce::CreatorReceiver::ice_staticId()
{
    return ::DataQueuingIce::CreatorReceiver::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::DataQueuingIce::CreatorReceiver::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::DataQueuingIce::CreatorReceiver);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::DataQueuingIce::CreatorReceiver::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::DataQueuingIce::CreatorReceiver);
}

::IceProxy::Ice::Object*
IceProxy::DataQueuingIce::CreatorReceiver::__newInstance() const
{
    return new CreatorReceiver;
}
::IceProxy::Ice::Object* ::IceProxy::DataQueuingIce::upCast(::IceProxy::DataQueuingIce::DataCreator* p) { return p; }

void
::IceProxy::DataQueuingIce::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::DataQueuingIce::DataCreator>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::DataQueuingIce::DataCreator;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::DataQueuingIce::DataCreator::InitiateCreatorReceiver(const ::Ice::Identity& ident, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DataQueuingIce__DataCreator__InitiateCreatorReceiver_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__DataQueuingIce__DataCreator__InitiateCreatorReceiver_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::DataQueuingIce::DataCreator* __del = dynamic_cast< ::IceDelegate::DataQueuingIce::DataCreator*>(__delBase.get());
            __del->InitiateCreatorReceiver(ident, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_InitiateCreatorReceiver(const ::Ice::Identity& ident, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__InitiateCreatorReceiver_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__InitiateCreatorReceiver_name, __del, __cookie);
    try
    {
        __result->__prepare(__DataQueuingIce__DataCreator__InitiateCreatorReceiver_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::DataQueuingIce::DataCreator::end_InitiateCreatorReceiver(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__InitiateCreatorReceiver_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::StartCDPWork(const ::std::string& task, const ::std::string& cdpFileName, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DataQueuingIce__DataCreator__StartCDPWork_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__DataQueuingIce__DataCreator__StartCDPWork_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::DataQueuingIce::DataCreator* __del = dynamic_cast< ::IceDelegate::DataQueuingIce::DataCreator*>(__delBase.get());
            return __del->StartCDPWork(task, cdpFileName, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_StartCDPWork(const ::std::string& task, const ::std::string& cdpFileName, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__StartCDPWork_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__StartCDPWork_name, __del, __cookie);
    try
    {
        __result->__prepare(__DataQueuingIce__DataCreator__StartCDPWork_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __os->write(cdpFileName);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_StartCDPWork(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__StartCDPWork_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::StartQemuWork(const ::std::string& task, const ::IMG::ImageSnapshotIdents& snapshot, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DataQueuingIce__DataCreator__StartQemuWork_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__DataQueuingIce__DataCreator__StartQemuWork_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::DataQueuingIce::DataCreator* __del = dynamic_cast< ::IceDelegate::DataQueuingIce::DataCreator*>(__delBase.get());
            return __del->StartQemuWork(task, snapshot, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_StartQemuWork(const ::std::string& task, const ::IMG::ImageSnapshotIdents& snapshot, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__StartQemuWork_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__StartQemuWork_name, __del, __cookie);
    try
    {
        __result->__prepare(__DataQueuingIce__DataCreator__StartQemuWork_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __os->write(snapshot);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_StartQemuWork(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__StartQemuWork_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::StopWork(const ::std::string& task, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DataQueuingIce__DataCreator__StopWork_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__DataQueuingIce__DataCreator__StopWork_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::DataQueuingIce::DataCreator* __del = dynamic_cast< ::IceDelegate::DataQueuingIce::DataCreator*>(__delBase.get());
            return __del->StopWork(task, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_StopWork(const ::std::string& task, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__StopWork_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__StopWork_name, __del, __cookie);
    try
    {
        __result->__prepare(__DataQueuingIce__DataCreator__StopWork_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_StopWork(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__StopWork_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::SetRestoreBitmap(const ::std::string& task, const ::std::string& token, const ::DataQueuingIce::BinaryStream& data, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DataQueuingIce__DataCreator__SetRestoreBitmap_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__DataQueuingIce__DataCreator__SetRestoreBitmap_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::DataQueuingIce::DataCreator* __del = dynamic_cast< ::IceDelegate::DataQueuingIce::DataCreator*>(__delBase.get());
            return __del->SetRestoreBitmap(task, token, data, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_SetRestoreBitmap(const ::std::string& task, const ::std::string& token, const ::DataQueuingIce::BinaryStream& data, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__SetRestoreBitmap_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__SetRestoreBitmap_name, __del, __cookie);
    try
    {
        __result->__prepare(__DataQueuingIce__DataCreator__SetRestoreBitmap_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __os->write(token);
        __os->write(data);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_SetRestoreBitmap(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__SetRestoreBitmap_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::EndTask(const ::std::string& task, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DataQueuingIce__DataCreator__EndTask_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__DataQueuingIce__DataCreator__EndTask_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::DataQueuingIce::DataCreator* __del = dynamic_cast< ::IceDelegate::DataQueuingIce::DataCreator*>(__delBase.get());
            return __del->EndTask(task, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_EndTask(const ::std::string& task, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__EndTask_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__EndTask_name, __del, __cookie);
    try
    {
        __result->__prepare(__DataQueuingIce__DataCreator__EndTask_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_EndTask(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__EndTask_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::CloseTask(const ::std::string& task, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DataQueuingIce__DataCreator__CloseTask_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__DataQueuingIce__DataCreator__CloseTask_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::DataQueuingIce::DataCreator* __del = dynamic_cast< ::IceDelegate::DataQueuingIce::DataCreator*>(__delBase.get());
            return __del->CloseTask(task, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataCreator::begin_CloseTask(const ::std::string& task, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataCreator__CloseTask_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataCreator__CloseTask_name, __del, __cookie);
    try
    {
        __result->__prepare(__DataQueuingIce__DataCreator__CloseTask_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::DataQueuingIce::DataCreator::end_CloseTask(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataCreator__CloseTask_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::DataQueuingIce::DataCreator::ice_staticId()
{
    return ::DataQueuingIce::DataCreator::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::DataQueuingIce::DataCreator::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::DataQueuingIce::DataCreator);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::DataQueuingIce::DataCreator::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::DataQueuingIce::DataCreator);
}

::IceProxy::Ice::Object*
IceProxy::DataQueuingIce::DataCreator::__newInstance() const
{
    return new DataCreator;
}
::IceProxy::Ice::Object* ::IceProxy::DataQueuingIce::upCast(::IceProxy::DataQueuingIce::DataGuest* p) { return p; }

void
::IceProxy::DataQueuingIce::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::DataQueuingIce::DataGuest>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::DataQueuingIce::DataGuest;
        v->__copyFrom(proxy);
    }
}

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::InitGuest(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DataQueuingIce__DataGuest__InitGuest_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__DataQueuingIce__DataGuest__InitGuest_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::DataQueuingIce::DataGuest* __del = dynamic_cast< ::IceDelegate::DataQueuingIce::DataGuest*>(__delBase.get());
            return __del->InitGuest(task, QueueIdent, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataGuest::begin_InitGuest(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataGuest__InitGuest_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataGuest__InitGuest_name, __del, __cookie);
    try
    {
        __result->__prepare(__DataQueuingIce__DataGuest__InitGuest_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __os->write(QueueIdent);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::end_InitGuest(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataGuest__InitGuest_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::GetData(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long& DataIdent, ::std::string& token, ::Ice::Long& Lba, ::Ice::Int& secs, ::DataQueuingIce::BinaryStream& data, bool& isEnd, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DataQueuingIce__DataGuest__GetData_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__DataQueuingIce__DataGuest__GetData_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::DataQueuingIce::DataGuest* __del = dynamic_cast< ::IceDelegate::DataQueuingIce::DataGuest*>(__delBase.get());
            return __del->GetData(task, QueueIdent, DataIdent, token, Lba, secs, data, isEnd, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataGuest::begin_GetData(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataGuest__GetData_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataGuest__GetData_name, __del, __cookie);
    try
    {
        __result->__prepare(__DataQueuingIce__DataGuest__GetData_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __os->write(QueueIdent);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::end_GetData(::Ice::Long& DataIdent, ::std::string& token, ::Ice::Long& Lba, ::Ice::Int& secs, ::DataQueuingIce::BinaryStream& data, bool& isEnd, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataGuest__GetData_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(DataIdent);
        __is->read(token);
        __is->read(Lba);
        __is->read(secs);
        __is->read(data);
        __is->read(isEnd);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::DataCompleted(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long DataIdent, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DataQueuingIce__DataGuest__DataCompleted_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__DataQueuingIce__DataGuest__DataCompleted_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::DataQueuingIce::DataGuest* __del = dynamic_cast< ::IceDelegate::DataQueuingIce::DataGuest*>(__delBase.get());
            return __del->DataCompleted(task, QueueIdent, DataIdent, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataGuest::begin_DataCompleted(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long DataIdent, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataGuest__DataCompleted_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataGuest__DataCompleted_name, __del, __cookie);
    try
    {
        __result->__prepare(__DataQueuingIce__DataGuest__DataCompleted_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __os->write(QueueIdent);
        __os->write(DataIdent);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::end_DataCompleted(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataGuest__DataCompleted_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::GetBitmapInfo(const ::std::string& task, ::Ice::Int& bitmapCount, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DataQueuingIce__DataGuest__GetBitmapInfo_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__DataQueuingIce__DataGuest__GetBitmapInfo_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::DataQueuingIce::DataGuest* __del = dynamic_cast< ::IceDelegate::DataQueuingIce::DataGuest*>(__delBase.get());
            return __del->GetBitmapInfo(task, bitmapCount, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataGuest::begin_GetBitmapInfo(const ::std::string& task, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataGuest__GetBitmapInfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataGuest__GetBitmapInfo_name, __del, __cookie);
    try
    {
        __result->__prepare(__DataQueuingIce__DataGuest__GetBitmapInfo_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::end_GetBitmapInfo(::Ice::Int& bitmapCount, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataGuest__GetBitmapInfo_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(bitmapCount);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::GetBitmapData(const ::std::string& task, ::Ice::Int bitmapId, ::Ice::Int bitmapOffset, ::Ice::Int maxbytes, ::std::string& token, ::DataQueuingIce::BinaryStream& data, bool& isEnd, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DataQueuingIce__DataGuest__GetBitmapData_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__DataQueuingIce__DataGuest__GetBitmapData_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::DataQueuingIce::DataGuest* __del = dynamic_cast< ::IceDelegate::DataQueuingIce::DataGuest*>(__delBase.get());
            return __del->GetBitmapData(task, bitmapId, bitmapOffset, maxbytes, token, data, isEnd, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DataQueuingIce::DataGuest::begin_GetBitmapData(const ::std::string& task, ::Ice::Int bitmapId, ::Ice::Int bitmapOffset, ::Ice::Int maxbytes, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DataQueuingIce__DataGuest__GetBitmapData_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DataQueuingIce__DataGuest__GetBitmapData_name, __del, __cookie);
    try
    {
        __result->__prepare(__DataQueuingIce__DataGuest__GetBitmapData_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __os->write(bitmapId);
        __os->write(bitmapOffset);
        __os->write(maxbytes);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::DataQueuingIce::DataGuest::end_GetBitmapData(::std::string& token, ::DataQueuingIce::BinaryStream& data, bool& isEnd, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DataQueuingIce__DataGuest__GetBitmapData_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(token);
        __is->read(data);
        __is->read(isEnd);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::DataQueuingIce::DataGuest::ice_staticId()
{
    return ::DataQueuingIce::DataGuest::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::DataQueuingIce::DataGuest::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::DataQueuingIce::DataGuest);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::DataQueuingIce::DataGuest::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::DataQueuingIce::DataGuest);
}

::IceProxy::Ice::Object*
IceProxy::DataQueuingIce::DataGuest::__newInstance() const
{
    return new DataGuest;
}

::Ice::Int
IceDelegateM::DataQueuingIce::CreatorReceiver::WorkCompleted(const ::std::string& task, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DataQueuingIce__CreatorReceiver__WorkCompleted_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::DataQueuingIce::DataCreator::InitiateCreatorReceiver(const ::Ice::Identity& ident, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DataQueuingIce__DataCreator__InitiateCreatorReceiver_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::DataQueuingIce::DataCreator::StartCDPWork(const ::std::string& task, const ::std::string& cdpFileName, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DataQueuingIce__DataCreator__StartCDPWork_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __os->write(cdpFileName);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::DataQueuingIce::DataCreator::StartQemuWork(const ::std::string& task, const ::IMG::ImageSnapshotIdents& snapshot, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DataQueuingIce__DataCreator__StartQemuWork_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __os->write(snapshot);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::DataQueuingIce::DataCreator::StopWork(const ::std::string& task, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DataQueuingIce__DataCreator__StopWork_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::DataQueuingIce::DataCreator::SetRestoreBitmap(const ::std::string& task, const ::std::string& token, const ::DataQueuingIce::BinaryStream& data, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DataQueuingIce__DataCreator__SetRestoreBitmap_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __os->write(token);
        __os->write(data);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::DataQueuingIce::DataCreator::EndTask(const ::std::string& task, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DataQueuingIce__DataCreator__EndTask_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::DataQueuingIce::DataCreator::CloseTask(const ::std::string& task, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DataQueuingIce__DataCreator__CloseTask_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::DataQueuingIce::DataGuest::InitGuest(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DataQueuingIce__DataGuest__InitGuest_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __os->write(QueueIdent);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::DataQueuingIce::DataGuest::GetData(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long& DataIdent, ::std::string& token, ::Ice::Long& Lba, ::Ice::Int& secs, ::DataQueuingIce::BinaryStream& data, bool& isEnd, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DataQueuingIce__DataGuest__GetData_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __os->write(QueueIdent);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(DataIdent);
        __is->read(token);
        __is->read(Lba);
        __is->read(secs);
        __is->read(data);
        __is->read(isEnd);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::DataQueuingIce::DataGuest::DataCompleted(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long DataIdent, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DataQueuingIce__DataGuest__DataCompleted_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __os->write(QueueIdent);
        __os->write(DataIdent);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::DataQueuingIce::DataGuest::GetBitmapInfo(const ::std::string& task, ::Ice::Int& bitmapCount, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DataQueuingIce__DataGuest__GetBitmapInfo_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(bitmapCount);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::DataQueuingIce::DataGuest::GetBitmapData(const ::std::string& task, ::Ice::Int bitmapId, ::Ice::Int bitmapOffset, ::Ice::Int maxbytes, ::std::string& token, ::DataQueuingIce::BinaryStream& data, bool& isEnd, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DataQueuingIce__DataGuest__GetBitmapData_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __os->write(bitmapId);
        __os->write(bitmapOffset);
        __os->write(maxbytes);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(token);
        __is->read(data);
        __is->read(isEnd);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateD::DataQueuingIce::CreatorReceiver::WorkCompleted(const ::std::string& task, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& __p_task, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_task(__p_task)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DataQueuingIce::CreatorReceiver* servant = dynamic_cast< ::DataQueuingIce::CreatorReceiver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->WorkCompleted(_m_task, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_task;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DataQueuingIce__CreatorReceiver__WorkCompleted_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, task, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::DataQueuingIce::DataCreator::InitiateCreatorReceiver(const ::Ice::Identity& ident, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Identity& __p_ident, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_ident(__p_ident)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DataQueuingIce::DataCreator* servant = dynamic_cast< ::DataQueuingIce::DataCreator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->InitiateCreatorReceiver(_m_ident, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::Ice::Identity& _m_ident;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DataQueuingIce__DataCreator__InitiateCreatorReceiver_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(ident, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Int
IceDelegateD::DataQueuingIce::DataCreator::StartCDPWork(const ::std::string& task, const ::std::string& cdpFileName, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& __p_task, const ::std::string& __p_cdpFileName, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_task(__p_task),
            _m_cdpFileName(__p_cdpFileName)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DataQueuingIce::DataCreator* servant = dynamic_cast< ::DataQueuingIce::DataCreator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->StartCDPWork(_m_task, _m_cdpFileName, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_task;
        const ::std::string& _m_cdpFileName;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DataQueuingIce__DataCreator__StartCDPWork_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, task, cdpFileName, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::DataQueuingIce::DataCreator::StartQemuWork(const ::std::string& task, const ::IMG::ImageSnapshotIdents& snapshot, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& __p_task, const ::IMG::ImageSnapshotIdents& __p_snapshot, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_task(__p_task),
            _m_snapshot(__p_snapshot)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DataQueuingIce::DataCreator* servant = dynamic_cast< ::DataQueuingIce::DataCreator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->StartQemuWork(_m_task, _m_snapshot, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_task;
        const ::IMG::ImageSnapshotIdents& _m_snapshot;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DataQueuingIce__DataCreator__StartQemuWork_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, task, snapshot, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::DataQueuingIce::DataCreator::StopWork(const ::std::string& task, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& __p_task, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_task(__p_task)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DataQueuingIce::DataCreator* servant = dynamic_cast< ::DataQueuingIce::DataCreator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->StopWork(_m_task, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_task;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DataQueuingIce__DataCreator__StopWork_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, task, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::DataQueuingIce::DataCreator::SetRestoreBitmap(const ::std::string& task, const ::std::string& token, const ::DataQueuingIce::BinaryStream& data, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& __p_task, const ::std::string& __p_token, const ::DataQueuingIce::BinaryStream& __p_data, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_task(__p_task),
            _m_token(__p_token),
            _m_data(__p_data)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DataQueuingIce::DataCreator* servant = dynamic_cast< ::DataQueuingIce::DataCreator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->SetRestoreBitmap(_m_task, _m_token, _m_data, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_task;
        const ::std::string& _m_token;
        const ::DataQueuingIce::BinaryStream& _m_data;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DataQueuingIce__DataCreator__SetRestoreBitmap_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, task, token, data, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::DataQueuingIce::DataCreator::EndTask(const ::std::string& task, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& __p_task, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_task(__p_task)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DataQueuingIce::DataCreator* servant = dynamic_cast< ::DataQueuingIce::DataCreator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->EndTask(_m_task, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_task;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DataQueuingIce__DataCreator__EndTask_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, task, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::DataQueuingIce::DataCreator::CloseTask(const ::std::string& task, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& __p_task, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_task(__p_task)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DataQueuingIce::DataCreator* servant = dynamic_cast< ::DataQueuingIce::DataCreator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->CloseTask(_m_task, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_task;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DataQueuingIce__DataCreator__CloseTask_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, task, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::DataQueuingIce::DataGuest::InitGuest(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& __p_task, ::Ice::Int __p_QueueIdent, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_task(__p_task),
            _m_QueueIdent(__p_QueueIdent)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DataQueuingIce::DataGuest* servant = dynamic_cast< ::DataQueuingIce::DataGuest*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->InitGuest(_m_task, _m_QueueIdent, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_task;
        ::Ice::Int _m_QueueIdent;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DataQueuingIce__DataGuest__InitGuest_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, task, QueueIdent, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::DataQueuingIce::DataGuest::GetData(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long& DataIdent, ::std::string& token, ::Ice::Long& Lba, ::Ice::Int& secs, ::DataQueuingIce::BinaryStream& data, bool& isEnd, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& __p_task, ::Ice::Int __p_QueueIdent, ::Ice::Long& __p_DataIdent, ::std::string& __p_token, ::Ice::Long& __p_Lba, ::Ice::Int& __p_secs, ::DataQueuingIce::BinaryStream& __p_data, bool& __p_isEnd, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_task(__p_task),
            _m_QueueIdent(__p_QueueIdent),
            _m_DataIdent(__p_DataIdent),
            _m_token(__p_token),
            _m_Lba(__p_Lba),
            _m_secs(__p_secs),
            _m_data(__p_data),
            _m_isEnd(__p_isEnd)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DataQueuingIce::DataGuest* servant = dynamic_cast< ::DataQueuingIce::DataGuest*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->GetData(_m_task, _m_QueueIdent, _m_DataIdent, _m_token, _m_Lba, _m_secs, _m_data, _m_isEnd, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_task;
        ::Ice::Int _m_QueueIdent;
        ::Ice::Long& _m_DataIdent;
        ::std::string& _m_token;
        ::Ice::Long& _m_Lba;
        ::Ice::Int& _m_secs;
        ::DataQueuingIce::BinaryStream& _m_data;
        bool& _m_isEnd;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DataQueuingIce__DataGuest__GetData_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, task, QueueIdent, DataIdent, token, Lba, secs, data, isEnd, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::DataQueuingIce::DataGuest::DataCompleted(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long DataIdent, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& __p_task, ::Ice::Int __p_QueueIdent, ::Ice::Long __p_DataIdent, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_task(__p_task),
            _m_QueueIdent(__p_QueueIdent),
            _m_DataIdent(__p_DataIdent)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DataQueuingIce::DataGuest* servant = dynamic_cast< ::DataQueuingIce::DataGuest*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->DataCompleted(_m_task, _m_QueueIdent, _m_DataIdent, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_task;
        ::Ice::Int _m_QueueIdent;
        ::Ice::Long _m_DataIdent;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DataQueuingIce__DataGuest__DataCompleted_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, task, QueueIdent, DataIdent, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::DataQueuingIce::DataGuest::GetBitmapInfo(const ::std::string& task, ::Ice::Int& bitmapCount, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& __p_task, ::Ice::Int& __p_bitmapCount, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_task(__p_task),
            _m_bitmapCount(__p_bitmapCount)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DataQueuingIce::DataGuest* servant = dynamic_cast< ::DataQueuingIce::DataGuest*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->GetBitmapInfo(_m_task, _m_bitmapCount, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_task;
        ::Ice::Int& _m_bitmapCount;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DataQueuingIce__DataGuest__GetBitmapInfo_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, task, bitmapCount, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::DataQueuingIce::DataGuest::GetBitmapData(const ::std::string& task, ::Ice::Int bitmapId, ::Ice::Int bitmapOffset, ::Ice::Int maxbytes, ::std::string& token, ::DataQueuingIce::BinaryStream& data, bool& isEnd, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& __p_task, ::Ice::Int __p_bitmapId, ::Ice::Int __p_bitmapOffset, ::Ice::Int __p_maxbytes, ::std::string& __p_token, ::DataQueuingIce::BinaryStream& __p_data, bool& __p_isEnd, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_task(__p_task),
            _m_bitmapId(__p_bitmapId),
            _m_bitmapOffset(__p_bitmapOffset),
            _m_maxbytes(__p_maxbytes),
            _m_token(__p_token),
            _m_data(__p_data),
            _m_isEnd(__p_isEnd)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DataQueuingIce::DataGuest* servant = dynamic_cast< ::DataQueuingIce::DataGuest*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->GetBitmapData(_m_task, _m_bitmapId, _m_bitmapOffset, _m_maxbytes, _m_token, _m_data, _m_isEnd, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_task;
        ::Ice::Int _m_bitmapId;
        ::Ice::Int _m_bitmapOffset;
        ::Ice::Int _m_maxbytes;
        ::std::string& _m_token;
        ::DataQueuingIce::BinaryStream& _m_data;
        bool& _m_isEnd;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DataQueuingIce__DataGuest__GetBitmapData_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, task, bitmapId, bitmapOffset, maxbytes, token, data, isEnd, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* DataQueuingIce::upCast(::DataQueuingIce::CreatorReceiver* p) { return p; }

namespace
{
const ::std::string __DataQueuingIce__CreatorReceiver_ids[2] =
{
    "::DataQueuingIce::CreatorReceiver",
    "::Ice::Object"
};

}

bool
DataQueuingIce::CreatorReceiver::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__DataQueuingIce__CreatorReceiver_ids, __DataQueuingIce__CreatorReceiver_ids + 2, _s);
}

::std::vector< ::std::string>
DataQueuingIce::CreatorReceiver::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__DataQueuingIce__CreatorReceiver_ids[0], &__DataQueuingIce__CreatorReceiver_ids[2]);
}

const ::std::string&
DataQueuingIce::CreatorReceiver::ice_id(const ::Ice::Current&) const
{
    return __DataQueuingIce__CreatorReceiver_ids[0];
}

const ::std::string&
DataQueuingIce::CreatorReceiver::ice_staticId()
{
    return __DataQueuingIce__CreatorReceiver_ids[0];
}

::Ice::DispatchStatus
DataQueuingIce::CreatorReceiver::___WorkCompleted(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string task;
    __is->read(task);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = WorkCompleted(task, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __DataQueuingIce__CreatorReceiver_all[] =
{
    "WorkCompleted",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
DataQueuingIce::CreatorReceiver::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__DataQueuingIce__CreatorReceiver_all, __DataQueuingIce__CreatorReceiver_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __DataQueuingIce__CreatorReceiver_all)
    {
        case 0:
        {
            return ___WorkCompleted(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
DataQueuingIce::CreatorReceiver::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
DataQueuingIce::CreatorReceiver::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
DataQueuingIce::__patch(CreatorReceiverPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::DataQueuingIce::CreatorReceiverPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::DataQueuingIce::CreatorReceiver::ice_staticId(), v);
    }
}

::Ice::Object* DataQueuingIce::upCast(::DataQueuingIce::DataCreator* p) { return p; }

namespace
{
const ::std::string __DataQueuingIce__DataCreator_ids[2] =
{
    "::DataQueuingIce::DataCreator",
    "::Ice::Object"
};

}

bool
DataQueuingIce::DataCreator::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__DataQueuingIce__DataCreator_ids, __DataQueuingIce__DataCreator_ids + 2, _s);
}

::std::vector< ::std::string>
DataQueuingIce::DataCreator::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__DataQueuingIce__DataCreator_ids[0], &__DataQueuingIce__DataCreator_ids[2]);
}

const ::std::string&
DataQueuingIce::DataCreator::ice_id(const ::Ice::Current&) const
{
    return __DataQueuingIce__DataCreator_ids[0];
}

const ::std::string&
DataQueuingIce::DataCreator::ice_staticId()
{
    return __DataQueuingIce__DataCreator_ids[0];
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___InitiateCreatorReceiver(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Identity ident;
    __is->read(ident);
    __inS.endReadParams();
    try
    {
        InitiateCreatorReceiver(ident, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___StartCDPWork(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string task;
    ::std::string cdpFileName;
    __is->read(task);
    __is->read(cdpFileName);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = StartCDPWork(task, cdpFileName, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___StartQemuWork(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string task;
    ::IMG::ImageSnapshotIdents snapshot;
    __is->read(task);
    __is->read(snapshot);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = StartQemuWork(task, snapshot, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___StopWork(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string task;
    __is->read(task);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = StopWork(task, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___SetRestoreBitmap(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string task;
    ::std::string token;
    ::DataQueuingIce::BinaryStream data;
    __is->read(task);
    __is->read(token);
    __is->read(data);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = SetRestoreBitmap(task, token, data, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___EndTask(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string task;
    __is->read(task);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = EndTask(task, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::___CloseTask(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string task;
    __is->read(task);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = CloseTask(task, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __DataQueuingIce__DataCreator_all[] =
{
    "CloseTask",
    "EndTask",
    "InitiateCreatorReceiver",
    "SetRestoreBitmap",
    "StartCDPWork",
    "StartQemuWork",
    "StopWork",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
DataQueuingIce::DataCreator::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__DataQueuingIce__DataCreator_all, __DataQueuingIce__DataCreator_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __DataQueuingIce__DataCreator_all)
    {
        case 0:
        {
            return ___CloseTask(in, current);
        }
        case 1:
        {
            return ___EndTask(in, current);
        }
        case 2:
        {
            return ___InitiateCreatorReceiver(in, current);
        }
        case 3:
        {
            return ___SetRestoreBitmap(in, current);
        }
        case 4:
        {
            return ___StartCDPWork(in, current);
        }
        case 5:
        {
            return ___StartQemuWork(in, current);
        }
        case 6:
        {
            return ___StopWork(in, current);
        }
        case 7:
        {
            return ___ice_id(in, current);
        }
        case 8:
        {
            return ___ice_ids(in, current);
        }
        case 9:
        {
            return ___ice_isA(in, current);
        }
        case 10:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
DataQueuingIce::DataCreator::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
DataQueuingIce::DataCreator::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
DataQueuingIce::__patch(DataCreatorPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::DataQueuingIce::DataCreatorPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::DataQueuingIce::DataCreator::ice_staticId(), v);
    }
}

::Ice::Object* DataQueuingIce::upCast(::DataQueuingIce::DataGuest* p) { return p; }

namespace
{
const ::std::string __DataQueuingIce__DataGuest_ids[2] =
{
    "::DataQueuingIce::DataGuest",
    "::Ice::Object"
};

}

bool
DataQueuingIce::DataGuest::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__DataQueuingIce__DataGuest_ids, __DataQueuingIce__DataGuest_ids + 2, _s);
}

::std::vector< ::std::string>
DataQueuingIce::DataGuest::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__DataQueuingIce__DataGuest_ids[0], &__DataQueuingIce__DataGuest_ids[2]);
}

const ::std::string&
DataQueuingIce::DataGuest::ice_id(const ::Ice::Current&) const
{
    return __DataQueuingIce__DataGuest_ids[0];
}

const ::std::string&
DataQueuingIce::DataGuest::ice_staticId()
{
    return __DataQueuingIce__DataGuest_ids[0];
}

::Ice::DispatchStatus
DataQueuingIce::DataGuest::___InitGuest(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string task;
    ::Ice::Int QueueIdent;
    __is->read(task);
    __is->read(QueueIdent);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = InitGuest(task, QueueIdent, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataGuest::___GetData(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string task;
    ::Ice::Int QueueIdent;
    __is->read(task);
    __is->read(QueueIdent);
    __inS.endReadParams();
    ::Ice::Long DataIdent;
    ::std::string token;
    ::Ice::Long Lba;
    ::Ice::Int secs;
    ::DataQueuingIce::BinaryStream data;
    bool isEnd;
    try
    {
        ::Ice::Int __ret = GetData(task, QueueIdent, DataIdent, token, Lba, secs, data, isEnd, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(DataIdent);
        __os->write(token);
        __os->write(Lba);
        __os->write(secs);
        __os->write(data);
        __os->write(isEnd);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataGuest::___DataCompleted(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string task;
    ::Ice::Int QueueIdent;
    ::Ice::Long DataIdent;
    __is->read(task);
    __is->read(QueueIdent);
    __is->read(DataIdent);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = DataCompleted(task, QueueIdent, DataIdent, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataGuest::___GetBitmapInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string task;
    __is->read(task);
    __inS.endReadParams();
    ::Ice::Int bitmapCount;
    try
    {
        ::Ice::Int __ret = GetBitmapInfo(task, bitmapCount, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(bitmapCount);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DataQueuingIce::DataGuest::___GetBitmapData(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string task;
    ::Ice::Int bitmapId;
    ::Ice::Int bitmapOffset;
    ::Ice::Int maxbytes;
    __is->read(task);
    __is->read(bitmapId);
    __is->read(bitmapOffset);
    __is->read(maxbytes);
    __inS.endReadParams();
    ::std::string token;
    ::DataQueuingIce::BinaryStream data;
    bool isEnd;
    try
    {
        ::Ice::Int __ret = GetBitmapData(task, bitmapId, bitmapOffset, maxbytes, token, data, isEnd, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(token);
        __os->write(data);
        __os->write(isEnd);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __DataQueuingIce__DataGuest_all[] =
{
    "DataCompleted",
    "GetBitmapData",
    "GetBitmapInfo",
    "GetData",
    "InitGuest",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
DataQueuingIce::DataGuest::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__DataQueuingIce__DataGuest_all, __DataQueuingIce__DataGuest_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __DataQueuingIce__DataGuest_all)
    {
        case 0:
        {
            return ___DataCompleted(in, current);
        }
        case 1:
        {
            return ___GetBitmapData(in, current);
        }
        case 2:
        {
            return ___GetBitmapInfo(in, current);
        }
        case 3:
        {
            return ___GetData(in, current);
        }
        case 4:
        {
            return ___InitGuest(in, current);
        }
        case 5:
        {
            return ___ice_id(in, current);
        }
        case 6:
        {
            return ___ice_ids(in, current);
        }
        case 7:
        {
            return ___ice_isA(in, current);
        }
        case 8:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
DataQueuingIce::DataGuest::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
DataQueuingIce::DataGuest::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
DataQueuingIce::__patch(DataGuestPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::DataQueuingIce::DataGuestPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::DataQueuingIce::DataGuest::ice_staticId(), v);
    }
}

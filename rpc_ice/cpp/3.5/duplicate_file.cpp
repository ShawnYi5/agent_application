// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `duplicate_file.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <duplicate_file.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __DuplicateFilePool__UpdateProgressReceiver__ReportProgess_name = "ReportProgess";

const ::std::string __DuplicateFilePool__FilePool__update_name = "update";

const ::std::string __DuplicateFilePool__FilePool__queryFilesFromClient_name = "queryFilesFromClient";

const ::std::string __DuplicateFilePool__FilePool__readFile_name = "readFile";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::DuplicateFilePool::upCast(::IceProxy::DuplicateFilePool::UpdateProgressReceiver* p) { return p; }

void
::IceProxy::DuplicateFilePool::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::DuplicateFilePool::UpdateProgressReceiver>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::DuplicateFilePool::UpdateProgressReceiver;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::DuplicateFilePool::UpdateProgressReceiver::ReportProgess(bool finished, ::Ice::Long totalFileNumber, ::Ice::Long importedFileNumber, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DuplicateFilePool__UpdateProgressReceiver__ReportProgess_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::DuplicateFilePool::UpdateProgressReceiver* __del = dynamic_cast< ::IceDelegate::DuplicateFilePool::UpdateProgressReceiver*>(__delBase.get());
            __del->ReportProgess(finished, totalFileNumber, importedFileNumber, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DuplicateFilePool::UpdateProgressReceiver::begin_ReportProgess(bool finished, ::Ice::Long totalFileNumber, ::Ice::Long importedFileNumber, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DuplicateFilePool__UpdateProgressReceiver__ReportProgess_name, __del, __cookie);
    try
    {
        __result->__prepare(__DuplicateFilePool__UpdateProgressReceiver__ReportProgess_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(finished);
        __os->write(totalFileNumber);
        __os->write(importedFileNumber);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::DuplicateFilePool::UpdateProgressReceiver::end_ReportProgess(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __DuplicateFilePool__UpdateProgressReceiver__ReportProgess_name);
}

const ::std::string&
IceProxy::DuplicateFilePool::UpdateProgressReceiver::ice_staticId()
{
    return ::DuplicateFilePool::UpdateProgressReceiver::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::DuplicateFilePool::UpdateProgressReceiver::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::DuplicateFilePool::UpdateProgressReceiver);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::DuplicateFilePool::UpdateProgressReceiver::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::DuplicateFilePool::UpdateProgressReceiver);
}

::IceProxy::Ice::Object*
IceProxy::DuplicateFilePool::UpdateProgressReceiver::__newInstance() const
{
    return new UpdateProgressReceiver;
}
::IceProxy::Ice::Object* ::IceProxy::DuplicateFilePool::upCast(::IceProxy::DuplicateFilePool::FilePool* p) { return p; }

void
::IceProxy::DuplicateFilePool::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::DuplicateFilePool::FilePool>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::DuplicateFilePool::FilePool;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::DuplicateFilePool::FilePool::update(const ::std::string& path, const ::Ice::Identity& ident, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DuplicateFilePool__FilePool__update_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__DuplicateFilePool__FilePool__update_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::DuplicateFilePool::FilePool* __del = dynamic_cast< ::IceDelegate::DuplicateFilePool::FilePool*>(__delBase.get());
            __del->update(path, ident, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DuplicateFilePool::FilePool::begin_update(const ::std::string& path, const ::Ice::Identity& ident, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DuplicateFilePool__FilePool__update_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DuplicateFilePool__FilePool__update_name, __del, __cookie);
    try
    {
        __result->__prepare(__DuplicateFilePool__FilePool__update_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(path);
        __os->write(ident);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::DuplicateFilePool::FilePool::end_update(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DuplicateFilePool__FilePool__update_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::DuplicateFilePool::FilePool::queryFilesFromClient(const ::std::string& inPath, const ::std::string& outPath, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DuplicateFilePool__FilePool__queryFilesFromClient_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__DuplicateFilePool__FilePool__queryFilesFromClient_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::DuplicateFilePool::FilePool* __del = dynamic_cast< ::IceDelegate::DuplicateFilePool::FilePool*>(__delBase.get());
            __del->queryFilesFromClient(inPath, outPath, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DuplicateFilePool::FilePool::begin_queryFilesFromClient(const ::std::string& inPath, const ::std::string& outPath, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DuplicateFilePool__FilePool__queryFilesFromClient_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DuplicateFilePool__FilePool__queryFilesFromClient_name, __del, __cookie);
    try
    {
        __result->__prepare(__DuplicateFilePool__FilePool__queryFilesFromClient_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(inPath);
        __os->write(outPath);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::DuplicateFilePool::FilePool::end_queryFilesFromClient(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DuplicateFilePool__FilePool__queryFilesFromClient_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::DuplicateFilePool::BinaryStream
IceProxy::DuplicateFilePool::FilePool::readFile(const ::std::string& identInPool, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __DuplicateFilePool__FilePool__readFile_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__DuplicateFilePool__FilePool__readFile_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::DuplicateFilePool::FilePool* __del = dynamic_cast< ::IceDelegate::DuplicateFilePool::FilePool*>(__delBase.get());
            return __del->readFile(identInPool, byteOffset, bytes, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DuplicateFilePool::FilePool::begin_readFile(const ::std::string& identInPool, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DuplicateFilePool__FilePool__readFile_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DuplicateFilePool__FilePool__readFile_name, __del, __cookie);
    try
    {
        __result->__prepare(__DuplicateFilePool__FilePool__readFile_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(identInPool);
        __os->write(byteOffset);
        __os->write(bytes);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::DuplicateFilePool::BinaryStream
IceProxy::DuplicateFilePool::FilePool::end_readFile(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DuplicateFilePool__FilePool__readFile_name);
    ::DuplicateFilePool::BinaryStream __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::DuplicateFilePool::FilePool::ice_staticId()
{
    return ::DuplicateFilePool::FilePool::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::DuplicateFilePool::FilePool::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::DuplicateFilePool::FilePool);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::DuplicateFilePool::FilePool::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::DuplicateFilePool::FilePool);
}

::IceProxy::Ice::Object*
IceProxy::DuplicateFilePool::FilePool::__newInstance() const
{
    return new FilePool;
}

void
IceDelegateM::DuplicateFilePool::UpdateProgressReceiver::ReportProgess(bool finished, ::Ice::Long totalFileNumber, ::Ice::Long importedFileNumber, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DuplicateFilePool__UpdateProgressReceiver__ReportProgess_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(finished);
        __os->write(totalFileNumber);
        __os->write(importedFileNumber);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::DuplicateFilePool::FilePool::update(const ::std::string& path, const ::Ice::Identity& ident, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DuplicateFilePool__FilePool__update_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(path);
        __os->write(ident);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::DuplicateFilePool::FilePool::queryFilesFromClient(const ::std::string& inPath, const ::std::string& outPath, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DuplicateFilePool__FilePool__queryFilesFromClient_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(inPath);
        __os->write(outPath);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::DuplicateFilePool::BinaryStream
IceDelegateM::DuplicateFilePool::FilePool::readFile(const ::std::string& identInPool, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __DuplicateFilePool__FilePool__readFile_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(identInPool);
        __os->write(byteOffset);
        __os->write(bytes);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::DuplicateFilePool::BinaryStream __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::DuplicateFilePool::UpdateProgressReceiver::ReportProgess(bool finished, ::Ice::Long totalFileNumber, ::Ice::Long importedFileNumber, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool __p_finished, ::Ice::Long __p_totalFileNumber, ::Ice::Long __p_importedFileNumber, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_finished(__p_finished),
            _m_totalFileNumber(__p_totalFileNumber),
            _m_importedFileNumber(__p_importedFileNumber)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DuplicateFilePool::UpdateProgressReceiver* servant = dynamic_cast< ::DuplicateFilePool::UpdateProgressReceiver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->ReportProgess(_m_finished, _m_totalFileNumber, _m_importedFileNumber, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool _m_finished;
        ::Ice::Long _m_totalFileNumber;
        ::Ice::Long _m_importedFileNumber;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DuplicateFilePool__UpdateProgressReceiver__ReportProgess_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(finished, totalFileNumber, importedFileNumber, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::DuplicateFilePool::FilePool::update(const ::std::string& path, const ::Ice::Identity& ident, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_path, const ::Ice::Identity& __p_ident, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_path(__p_path),
            _m_ident(__p_ident)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DuplicateFilePool::FilePool* servant = dynamic_cast< ::DuplicateFilePool::FilePool*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->update(_m_path, _m_ident, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_path;
        const ::Ice::Identity& _m_ident;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DuplicateFilePool__FilePool__update_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(path, ident, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::DuplicateFilePool::FilePool::queryFilesFromClient(const ::std::string& inPath, const ::std::string& outPath, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_inPath, const ::std::string& __p_outPath, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_inPath(__p_inPath),
            _m_outPath(__p_outPath)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DuplicateFilePool::FilePool* servant = dynamic_cast< ::DuplicateFilePool::FilePool*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->queryFilesFromClient(_m_inPath, _m_outPath, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_inPath;
        const ::std::string& _m_outPath;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DuplicateFilePool__FilePool__queryFilesFromClient_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(inPath, outPath, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::DuplicateFilePool::BinaryStream
IceDelegateD::DuplicateFilePool::FilePool::readFile(const ::std::string& identInPool, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::DuplicateFilePool::BinaryStream& __result, const ::std::string& __p_identInPool, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_identInPool(__p_identInPool),
            _m_byteOffset(__p_byteOffset),
            _m_bytes(__p_bytes)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::DuplicateFilePool::FilePool* servant = dynamic_cast< ::DuplicateFilePool::FilePool*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->readFile(_m_identInPool, _m_byteOffset, _m_bytes, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::DuplicateFilePool::BinaryStream& _result;
        const ::std::string& _m_identInPool;
        ::Ice::Long _m_byteOffset;
        ::Ice::Int _m_bytes;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __DuplicateFilePool__FilePool__readFile_name, ::Ice::Normal, __context);
    ::DuplicateFilePool::BinaryStream __result;
    try
    {
        _DirectI __direct(__result, identInPool, byteOffset, bytes, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* DuplicateFilePool::upCast(::DuplicateFilePool::UpdateProgressReceiver* p) { return p; }

namespace
{
const ::std::string __DuplicateFilePool__UpdateProgressReceiver_ids[2] =
{
    "::DuplicateFilePool::UpdateProgressReceiver",
    "::Ice::Object"
};

}

bool
DuplicateFilePool::UpdateProgressReceiver::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__DuplicateFilePool__UpdateProgressReceiver_ids, __DuplicateFilePool__UpdateProgressReceiver_ids + 2, _s);
}

::std::vector< ::std::string>
DuplicateFilePool::UpdateProgressReceiver::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__DuplicateFilePool__UpdateProgressReceiver_ids[0], &__DuplicateFilePool__UpdateProgressReceiver_ids[2]);
}

const ::std::string&
DuplicateFilePool::UpdateProgressReceiver::ice_id(const ::Ice::Current&) const
{
    return __DuplicateFilePool__UpdateProgressReceiver_ids[0];
}

const ::std::string&
DuplicateFilePool::UpdateProgressReceiver::ice_staticId()
{
    return __DuplicateFilePool__UpdateProgressReceiver_ids[0];
}

::Ice::DispatchStatus
DuplicateFilePool::UpdateProgressReceiver::___ReportProgess(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    bool finished;
    ::Ice::Long totalFileNumber;
    ::Ice::Long importedFileNumber;
    __is->read(finished);
    __is->read(totalFileNumber);
    __is->read(importedFileNumber);
    __inS.endReadParams();
    ReportProgess(finished, totalFileNumber, importedFileNumber, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __DuplicateFilePool__UpdateProgressReceiver_all[] =
{
    "ReportProgess",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
DuplicateFilePool::UpdateProgressReceiver::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__DuplicateFilePool__UpdateProgressReceiver_all, __DuplicateFilePool__UpdateProgressReceiver_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __DuplicateFilePool__UpdateProgressReceiver_all)
    {
        case 0:
        {
            return ___ReportProgess(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
DuplicateFilePool::UpdateProgressReceiver::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
DuplicateFilePool::UpdateProgressReceiver::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
DuplicateFilePool::__patch(UpdateProgressReceiverPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::DuplicateFilePool::UpdateProgressReceiverPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::DuplicateFilePool::UpdateProgressReceiver::ice_staticId(), v);
    }
}

::Ice::Object* DuplicateFilePool::upCast(::DuplicateFilePool::FilePool* p) { return p; }

namespace
{
const ::std::string __DuplicateFilePool__FilePool_ids[2] =
{
    "::DuplicateFilePool::FilePool",
    "::Ice::Object"
};

}

bool
DuplicateFilePool::FilePool::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__DuplicateFilePool__FilePool_ids, __DuplicateFilePool__FilePool_ids + 2, _s);
}

::std::vector< ::std::string>
DuplicateFilePool::FilePool::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__DuplicateFilePool__FilePool_ids[0], &__DuplicateFilePool__FilePool_ids[2]);
}

const ::std::string&
DuplicateFilePool::FilePool::ice_id(const ::Ice::Current&) const
{
    return __DuplicateFilePool__FilePool_ids[0];
}

const ::std::string&
DuplicateFilePool::FilePool::ice_staticId()
{
    return __DuplicateFilePool__FilePool_ids[0];
}

::Ice::DispatchStatus
DuplicateFilePool::FilePool::___update(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string path;
    ::Ice::Identity ident;
    __is->read(path);
    __is->read(ident);
    __inS.endReadParams();
    try
    {
        update(path, ident, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DuplicateFilePool::FilePool::___queryFilesFromClient(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string inPath;
    ::std::string outPath;
    __is->read(inPath);
    __is->read(outPath);
    __inS.endReadParams();
    try
    {
        queryFilesFromClient(inPath, outPath, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DuplicateFilePool::FilePool::___readFile(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string identInPool;
    ::Ice::Long byteOffset;
    ::Ice::Int bytes;
    __is->read(identInPool);
    __is->read(byteOffset);
    __is->read(bytes);
    __inS.endReadParams();
    try
    {
        ::DuplicateFilePool::BinaryStream __ret = readFile(identInPool, byteOffset, bytes, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __DuplicateFilePool__FilePool_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "queryFilesFromClient",
    "readFile",
    "update"
};

}

::Ice::DispatchStatus
DuplicateFilePool::FilePool::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__DuplicateFilePool__FilePool_all, __DuplicateFilePool__FilePool_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __DuplicateFilePool__FilePool_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___queryFilesFromClient(in, current);
        }
        case 5:
        {
            return ___readFile(in, current);
        }
        case 6:
        {
            return ___update(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
DuplicateFilePool::FilePool::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
DuplicateFilePool::FilePool::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
DuplicateFilePool::__patch(FilePoolPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::DuplicateFilePool::FilePoolPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::DuplicateFilePool::FilePool::ice_staticId(), v);
    }
}

// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `img.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <img.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __IMG__ImgService__create_name = "create";

const ::std::string __IMG__ImgService__setUsedBlockBitmap_name = "setUsedBlockBitmap";

const ::std::string __IMG__ImgService__cleanUsedBlockBitmap_name = "cleanUsedBlockBitmap";

const ::std::string __IMG__ImgService__setDuplicateFileSectors_name = "setDuplicateFileSectors";

const ::std::string __IMG__ImgService__open_name = "open";

const ::std::string __IMG__ImgService__getTotalUesdBlockBitmap_name = "getTotalUesdBlockBitmap";

const ::std::string __IMG__ImgService__getAllFileSectors_name = "getAllFileSectors";

const ::std::string __IMG__ImgService__read_name = "read";

const ::std::string __IMG__ImgService__readEx_name = "readEx";

const ::std::string __IMG__ImgService__write_name = "write";

const ::std::string __IMG__ImgService__writeCdp_name = "writeCdp";

const ::std::string __IMG__ImgService__writeCdpByIndex_name = "writeCdpByIndex";

const ::std::string __IMG__ImgService__writeCdpByTmeAndIndex_name = "writeCdpByTmeAndIndex";

const ::std::string __IMG__ImgService__close_name = "close";

const ::std::string __IMG__ImgService__GetSnSize_name = "GetSnSize";

const ::std::string __IMG__ImgService__DelSnaport_name = "DelSnaport";

const ::std::string __IMG__ImgService__RenameSnapshot_name = "RenameSnapshot";

const ::std::string __IMG__ImgService__GetOnSnMapFile_name = "GetOnSnMapFile";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::IMG::upCast(::IceProxy::IMG::ImgService* p) { return p; }

void
::IceProxy::IMG::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::IMG::ImgService>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::IMG::ImgService;
        v->__copyFrom(proxy);
    }
}

::Ice::Long
IceProxy::IMG::ImgService::create(const ::IMG::ImageSnapshotIdent& ident, const ::IMG::ImageSnapshotIdents& lastSnapshot, ::Ice::Long diskByteSize, const ::std::string& flag, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IMG__ImgService__create_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IMG__ImgService__create_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IMG::ImgService* __del = dynamic_cast< ::IceDelegate::IMG::ImgService*>(__delBase.get());
            return __del->create(ident, lastSnapshot, diskByteSize, flag, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_create(const ::IMG::ImageSnapshotIdent& ident, const ::IMG::ImageSnapshotIdents& lastSnapshot, ::Ice::Long diskByteSize, const ::std::string& flag, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__create_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__create_name, __del, __cookie);
    try
    {
        __result->__prepare(__IMG__ImgService__create_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __os->write(lastSnapshot);
        __os->write(diskByteSize);
        __os->write(flag);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Long
IceProxy::IMG::ImgService::end_create(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__create_name);
    ::Ice::Long __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::IMG::ImgService::setUsedBlockBitmap(::Ice::Long handle, const ::IMG::BinaryStream& bitmap, bool completed, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IMG__ImgService__setUsedBlockBitmap_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IMG__ImgService__setUsedBlockBitmap_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IMG::ImgService* __del = dynamic_cast< ::IceDelegate::IMG::ImgService*>(__delBase.get());
            return __del->setUsedBlockBitmap(handle, bitmap, completed, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_setUsedBlockBitmap(::Ice::Long handle, const ::IMG::BinaryStream& bitmap, bool completed, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__setUsedBlockBitmap_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__setUsedBlockBitmap_name, __del, __cookie);
    try
    {
        __result->__prepare(__IMG__ImgService__setUsedBlockBitmap_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(bitmap);
        __os->write(completed);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::IMG::ImgService::end_setUsedBlockBitmap(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__setUsedBlockBitmap_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::IMG::ImgService::cleanUsedBlockBitmap(::Ice::Long handle, const ::IMG::BlockIndexes& indexes, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IMG__ImgService__cleanUsedBlockBitmap_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IMG__ImgService__cleanUsedBlockBitmap_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IMG::ImgService* __del = dynamic_cast< ::IceDelegate::IMG::ImgService*>(__delBase.get());
            return __del->cleanUsedBlockBitmap(handle, indexes, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_cleanUsedBlockBitmap(::Ice::Long handle, const ::IMG::BlockIndexes& indexes, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__cleanUsedBlockBitmap_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__cleanUsedBlockBitmap_name, __del, __cookie);
    try
    {
        __result->__prepare(__IMG__ImgService__cleanUsedBlockBitmap_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(indexes);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::IMG::ImgService::end_cleanUsedBlockBitmap(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__cleanUsedBlockBitmap_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::IMG::ImgService::setDuplicateFileSectors(::Ice::Long handle, const ::IMG::DuplicateFileSectors& sectors, bool completed, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IMG__ImgService__setDuplicateFileSectors_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IMG__ImgService__setDuplicateFileSectors_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IMG::ImgService* __del = dynamic_cast< ::IceDelegate::IMG::ImgService*>(__delBase.get());
            return __del->setDuplicateFileSectors(handle, sectors, completed, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_setDuplicateFileSectors(::Ice::Long handle, const ::IMG::DuplicateFileSectors& sectors, bool completed, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__setDuplicateFileSectors_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__setDuplicateFileSectors_name, __del, __cookie);
    try
    {
        __result->__prepare(__IMG__ImgService__setDuplicateFileSectors_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(sectors);
        __os->write(completed);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::IMG::ImgService::end_setDuplicateFileSectors(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__setDuplicateFileSectors_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Long
IceProxy::IMG::ImgService::open(const ::IMG::ImageSnapshotIdents& ident, const ::std::string& flag, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IMG__ImgService__open_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IMG__ImgService__open_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IMG::ImgService* __del = dynamic_cast< ::IceDelegate::IMG::ImgService*>(__delBase.get());
            return __del->open(ident, flag, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_open(const ::IMG::ImageSnapshotIdents& ident, const ::std::string& flag, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__open_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__open_name, __del, __cookie);
    try
    {
        __result->__prepare(__IMG__ImgService__open_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __os->write(flag);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Long
IceProxy::IMG::ImgService::end_open(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__open_name);
    ::Ice::Long __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::IMG::ImgService::getTotalUesdBlockBitmap(::Ice::Long handle, ::Ice::Int index, ::IMG::BinaryStream& bitmap, bool& finish, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IMG__ImgService__getTotalUesdBlockBitmap_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IMG__ImgService__getTotalUesdBlockBitmap_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IMG::ImgService* __del = dynamic_cast< ::IceDelegate::IMG::ImgService*>(__delBase.get());
            return __del->getTotalUesdBlockBitmap(handle, index, bitmap, finish, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_getTotalUesdBlockBitmap(::Ice::Long handle, ::Ice::Int index, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__getTotalUesdBlockBitmap_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__getTotalUesdBlockBitmap_name, __del, __cookie);
    try
    {
        __result->__prepare(__IMG__ImgService__getTotalUesdBlockBitmap_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(index);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::IMG::ImgService::end_getTotalUesdBlockBitmap(::IMG::BinaryStream& bitmap, bool& finish, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__getTotalUesdBlockBitmap_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(bitmap);
        __is->read(finish);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Long
IceProxy::IMG::ImgService::getAllFileSectors(::Ice::Long handle, ::Ice::Long index, ::IMG::FileSectors& sectors, bool& finish, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IMG__ImgService__getAllFileSectors_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IMG__ImgService__getAllFileSectors_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IMG::ImgService* __del = dynamic_cast< ::IceDelegate::IMG::ImgService*>(__delBase.get());
            return __del->getAllFileSectors(handle, index, sectors, finish, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_getAllFileSectors(::Ice::Long handle, ::Ice::Long index, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__getAllFileSectors_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__getAllFileSectors_name, __del, __cookie);
    try
    {
        __result->__prepare(__IMG__ImgService__getAllFileSectors_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(index);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Long
IceProxy::IMG::ImgService::end_getAllFileSectors(::IMG::FileSectors& sectors, bool& finish, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__getAllFileSectors_name);
    ::Ice::Long __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(sectors);
        __is->read(finish);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::IMG::ImgService::read(::Ice::Long handle, ::Ice::Long byteOffset, ::Ice::Int byteSize, ::IMG::BinaryStream& data, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IMG__ImgService__read_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IMG__ImgService__read_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IMG::ImgService* __del = dynamic_cast< ::IceDelegate::IMG::ImgService*>(__delBase.get());
            return __del->read(handle, byteOffset, byteSize, data, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_read(::Ice::Long handle, ::Ice::Long byteOffset, ::Ice::Int byteSize, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__read_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__read_name, __del, __cookie);
    try
    {
        __result->__prepare(__IMG__ImgService__read_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(byteOffset);
        __os->write(byteSize);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::IMG::ImgService::end_read(::IMG::BinaryStream& data, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__read_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(data);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::IMG::ImgService::readEx(::Ice::Long handle, ::Ice::Long byteOffset, ::Ice::Int byteSize, ::IMG::BinaryStream& data, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IMG__ImgService__readEx_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IMG__ImgService__readEx_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IMG::ImgService* __del = dynamic_cast< ::IceDelegate::IMG::ImgService*>(__delBase.get());
            return __del->readEx(handle, byteOffset, byteSize, data, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_readEx(::Ice::Long handle, ::Ice::Long byteOffset, ::Ice::Int byteSize, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__readEx_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__readEx_name, __del, __cookie);
    try
    {
        __result->__prepare(__IMG__ImgService__readEx_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(byteOffset);
        __os->write(byteSize);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::IMG::ImgService::end_readEx(::IMG::BinaryStream& data, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__readEx_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(data);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::IMG::ImgService::write(::Ice::Long handle, ::Ice::Long byteOffset, const ::IMG::BinaryStream& data, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IMG__ImgService__write_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IMG__ImgService__write_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IMG::ImgService* __del = dynamic_cast< ::IceDelegate::IMG::ImgService*>(__delBase.get());
            return __del->write(handle, byteOffset, data, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_write(::Ice::Long handle, ::Ice::Long byteOffset, const ::IMG::BinaryStream& data, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__write_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__write_name, __del, __cookie);
    try
    {
        __result->__prepare(__IMG__ImgService__write_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(byteOffset);
        __os->write(data);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::IMG::ImgService::end_write(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__write_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::IMG::ImgService::writeCdp(::Ice::Long handle, ::Ice::Long byteOffset, const ::IMG::BinaryStream& data, bool enableTime, ::Ice::Long timeSeconds, ::Ice::Int timeMicroseconds, bool IgnoreQuota, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IMG__ImgService__writeCdp_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IMG__ImgService__writeCdp_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IMG::ImgService* __del = dynamic_cast< ::IceDelegate::IMG::ImgService*>(__delBase.get());
            return __del->writeCdp(handle, byteOffset, data, enableTime, timeSeconds, timeMicroseconds, IgnoreQuota, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_writeCdp(::Ice::Long handle, ::Ice::Long byteOffset, const ::IMG::BinaryStream& data, bool enableTime, ::Ice::Long timeSeconds, ::Ice::Int timeMicroseconds, bool IgnoreQuota, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__writeCdp_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__writeCdp_name, __del, __cookie);
    try
    {
        __result->__prepare(__IMG__ImgService__writeCdp_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(byteOffset);
        __os->write(data);
        __os->write(enableTime);
        __os->write(timeSeconds);
        __os->write(timeMicroseconds);
        __os->write(IgnoreQuota);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::IMG::ImgService::end_writeCdp(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__writeCdp_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::IMG::ImgService::writeCdpByIndex(::Ice::Long handle, ::Ice::Long byteOffset, const ::IMG::BinaryStream& data, ::Ice::Long index, ::Ice::Long rev1, ::Ice::Long rev2, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IMG__ImgService__writeCdpByIndex_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IMG__ImgService__writeCdpByIndex_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IMG::ImgService* __del = dynamic_cast< ::IceDelegate::IMG::ImgService*>(__delBase.get());
            return __del->writeCdpByIndex(handle, byteOffset, data, index, rev1, rev2, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_writeCdpByIndex(::Ice::Long handle, ::Ice::Long byteOffset, const ::IMG::BinaryStream& data, ::Ice::Long index, ::Ice::Long rev1, ::Ice::Long rev2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__writeCdpByIndex_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__writeCdpByIndex_name, __del, __cookie);
    try
    {
        __result->__prepare(__IMG__ImgService__writeCdpByIndex_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(byteOffset);
        __os->write(data);
        __os->write(index);
        __os->write(rev1);
        __os->write(rev2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::IMG::ImgService::end_writeCdpByIndex(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__writeCdpByIndex_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::IMG::ImgService::writeCdpByTmeAndIndex(::Ice::Long handle, ::Ice::Long byteOffset, const ::IMG::BinaryStream& data, bool enableTime, ::Ice::Long timeSeconds, ::Ice::Int timeMicroseconds, bool IgnoreQuota, ::Ice::Long index, ::Ice::Long rev1, ::Ice::Long rev2, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IMG__ImgService__writeCdpByTmeAndIndex_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IMG__ImgService__writeCdpByTmeAndIndex_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IMG::ImgService* __del = dynamic_cast< ::IceDelegate::IMG::ImgService*>(__delBase.get());
            return __del->writeCdpByTmeAndIndex(handle, byteOffset, data, enableTime, timeSeconds, timeMicroseconds, IgnoreQuota, index, rev1, rev2, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_writeCdpByTmeAndIndex(::Ice::Long handle, ::Ice::Long byteOffset, const ::IMG::BinaryStream& data, bool enableTime, ::Ice::Long timeSeconds, ::Ice::Int timeMicroseconds, bool IgnoreQuota, ::Ice::Long index, ::Ice::Long rev1, ::Ice::Long rev2, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__writeCdpByTmeAndIndex_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__writeCdpByTmeAndIndex_name, __del, __cookie);
    try
    {
        __result->__prepare(__IMG__ImgService__writeCdpByTmeAndIndex_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(byteOffset);
        __os->write(data);
        __os->write(enableTime);
        __os->write(timeSeconds);
        __os->write(timeMicroseconds);
        __os->write(IgnoreQuota);
        __os->write(index);
        __os->write(rev1);
        __os->write(rev2);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::IMG::ImgService::end_writeCdpByTmeAndIndex(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__writeCdpByTmeAndIndex_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::IMG::ImgService::close(::Ice::Long handle, bool success, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IMG__ImgService__close_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IMG__ImgService__close_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IMG::ImgService* __del = dynamic_cast< ::IceDelegate::IMG::ImgService*>(__delBase.get());
            __del->close(handle, success, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_close(::Ice::Long handle, bool success, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__close_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__close_name, __del, __cookie);
    try
    {
        __result->__prepare(__IMG__ImgService__close_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(success);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::IMG::ImgService::end_close(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__close_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Long
IceProxy::IMG::ImgService::GetSnSize(::Ice::Long handle, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IMG__ImgService__GetSnSize_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IMG__ImgService__GetSnSize_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IMG::ImgService* __del = dynamic_cast< ::IceDelegate::IMG::ImgService*>(__delBase.get());
            return __del->GetSnSize(handle, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_GetSnSize(::Ice::Long handle, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__GetSnSize_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__GetSnSize_name, __del, __cookie);
    try
    {
        __result->__prepare(__IMG__ImgService__GetSnSize_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Long
IceProxy::IMG::ImgService::end_GetSnSize(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__GetSnSize_name);
    ::Ice::Long __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::IMG::ImgService::DelSnaport(const ::IMG::ImageSnapshotIdent& ident, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IMG__ImgService__DelSnaport_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IMG__ImgService__DelSnaport_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IMG::ImgService* __del = dynamic_cast< ::IceDelegate::IMG::ImgService*>(__delBase.get());
            return __del->DelSnaport(ident, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_DelSnaport(const ::IMG::ImageSnapshotIdent& ident, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__DelSnaport_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__DelSnaport_name, __del, __cookie);
    try
    {
        __result->__prepare(__IMG__ImgService__DelSnaport_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::IMG::ImgService::end_DelSnaport(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__DelSnaport_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::IMG::ImgService::RenameSnapshot(const ::IMG::ImageSnapshotIdent& ident, const ::std::string& newSnapshot, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IMG__ImgService__RenameSnapshot_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IMG__ImgService__RenameSnapshot_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IMG::ImgService* __del = dynamic_cast< ::IceDelegate::IMG::ImgService*>(__delBase.get());
            return __del->RenameSnapshot(ident, newSnapshot, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_RenameSnapshot(const ::IMG::ImageSnapshotIdent& ident, const ::std::string& newSnapshot, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__RenameSnapshot_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__RenameSnapshot_name, __del, __cookie);
    try
    {
        __result->__prepare(__IMG__ImgService__RenameSnapshot_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __os->write(newSnapshot);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::IMG::ImgService::end_RenameSnapshot(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__RenameSnapshot_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::IMG::ImgService::GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& ident, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IMG__ImgService__GetOnSnMapFile_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IMG__ImgService__GetOnSnMapFile_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IMG::ImgService* __del = dynamic_cast< ::IceDelegate::IMG::ImgService*>(__delBase.get());
            return __del->GetOnSnMapFile(ident, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IMG::ImgService::begin_GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& ident, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IMG__ImgService__GetOnSnMapFile_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IMG__ImgService__GetOnSnMapFile_name, __del, __cookie);
    try
    {
        __result->__prepare(__IMG__ImgService__GetOnSnMapFile_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::IMG::ImgService::end_GetOnSnMapFile(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IMG__ImgService__GetOnSnMapFile_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::IMG::ImgService::ice_staticId()
{
    return ::IMG::ImgService::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::IMG::ImgService::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::IMG::ImgService);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::IMG::ImgService::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::IMG::ImgService);
}

::IceProxy::Ice::Object*
IceProxy::IMG::ImgService::__newInstance() const
{
    return new ImgService;
}

::Ice::Long
IceDelegateM::IMG::ImgService::create(const ::IMG::ImageSnapshotIdent& ident, const ::IMG::ImageSnapshotIdents& lastSnapshot, ::Ice::Long diskByteSize, const ::std::string& flag, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IMG__ImgService__create_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __os->write(lastSnapshot);
        __os->write(diskByteSize);
        __os->write(flag);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Long __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::IMG::ImgService::setUsedBlockBitmap(::Ice::Long handle, const ::IMG::BinaryStream& bitmap, bool completed, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IMG__ImgService__setUsedBlockBitmap_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(bitmap);
        __os->write(completed);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::IMG::ImgService::cleanUsedBlockBitmap(::Ice::Long handle, const ::IMG::BlockIndexes& indexes, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IMG__ImgService__cleanUsedBlockBitmap_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(indexes);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::IMG::ImgService::setDuplicateFileSectors(::Ice::Long handle, const ::IMG::DuplicateFileSectors& sectors, bool completed, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IMG__ImgService__setDuplicateFileSectors_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(sectors);
        __os->write(completed);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Long
IceDelegateM::IMG::ImgService::open(const ::IMG::ImageSnapshotIdents& ident, const ::std::string& flag, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IMG__ImgService__open_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __os->write(flag);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Long __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::IMG::ImgService::getTotalUesdBlockBitmap(::Ice::Long handle, ::Ice::Int index, ::IMG::BinaryStream& bitmap, bool& finish, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IMG__ImgService__getTotalUesdBlockBitmap_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(index);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(bitmap);
        __is->read(finish);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Long
IceDelegateM::IMG::ImgService::getAllFileSectors(::Ice::Long handle, ::Ice::Long index, ::IMG::FileSectors& sectors, bool& finish, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IMG__ImgService__getAllFileSectors_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(index);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Long __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(sectors);
        __is->read(finish);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::IMG::ImgService::read(::Ice::Long handle, ::Ice::Long byteOffset, ::Ice::Int byteSize, ::IMG::BinaryStream& data, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IMG__ImgService__read_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(byteOffset);
        __os->write(byteSize);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(data);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::IMG::ImgService::readEx(::Ice::Long handle, ::Ice::Long byteOffset, ::Ice::Int byteSize, ::IMG::BinaryStream& data, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IMG__ImgService__readEx_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(byteOffset);
        __os->write(byteSize);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(data);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::IMG::ImgService::write(::Ice::Long handle, ::Ice::Long byteOffset, const ::IMG::BinaryStream& data, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IMG__ImgService__write_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(byteOffset);
        __os->write(data);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::IMG::ImgService::writeCdp(::Ice::Long handle, ::Ice::Long byteOffset, const ::IMG::BinaryStream& data, bool enableTime, ::Ice::Long timeSeconds, ::Ice::Int timeMicroseconds, bool IgnoreQuota, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IMG__ImgService__writeCdp_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(byteOffset);
        __os->write(data);
        __os->write(enableTime);
        __os->write(timeSeconds);
        __os->write(timeMicroseconds);
        __os->write(IgnoreQuota);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::IMG::ImgService::writeCdpByIndex(::Ice::Long handle, ::Ice::Long byteOffset, const ::IMG::BinaryStream& data, ::Ice::Long index, ::Ice::Long rev1, ::Ice::Long rev2, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IMG__ImgService__writeCdpByIndex_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(byteOffset);
        __os->write(data);
        __os->write(index);
        __os->write(rev1);
        __os->write(rev2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::IMG::ImgService::writeCdpByTmeAndIndex(::Ice::Long handle, ::Ice::Long byteOffset, const ::IMG::BinaryStream& data, bool enableTime, ::Ice::Long timeSeconds, ::Ice::Int timeMicroseconds, bool IgnoreQuota, ::Ice::Long index, ::Ice::Long rev1, ::Ice::Long rev2, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IMG__ImgService__writeCdpByTmeAndIndex_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(byteOffset);
        __os->write(data);
        __os->write(enableTime);
        __os->write(timeSeconds);
        __os->write(timeMicroseconds);
        __os->write(IgnoreQuota);
        __os->write(index);
        __os->write(rev1);
        __os->write(rev2);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::IMG::ImgService::close(::Ice::Long handle, bool success, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IMG__ImgService__close_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __os->write(success);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Long
IceDelegateM::IMG::ImgService::GetSnSize(::Ice::Long handle, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IMG__ImgService__GetSnSize_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(handle);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Long __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::IMG::ImgService::DelSnaport(const ::IMG::ImageSnapshotIdent& ident, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IMG__ImgService__DelSnaport_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::IMG::ImgService::RenameSnapshot(const ::IMG::ImageSnapshotIdent& ident, const ::std::string& newSnapshot, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IMG__ImgService__RenameSnapshot_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __os->write(newSnapshot);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::IMG::ImgService::GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& ident, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IMG__ImgService__GetOnSnMapFile_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ident);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Long
IceDelegateD::IMG::ImgService::create(const ::IMG::ImageSnapshotIdent& ident, const ::IMG::ImageSnapshotIdents& lastSnapshot, ::Ice::Long diskByteSize, const ::std::string& flag, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Long& __result, const ::IMG::ImageSnapshotIdent& __p_ident, const ::IMG::ImageSnapshotIdents& __p_lastSnapshot, ::Ice::Long __p_diskByteSize, const ::std::string& __p_flag, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_ident(__p_ident),
            _m_lastSnapshot(__p_lastSnapshot),
            _m_diskByteSize(__p_diskByteSize),
            _m_flag(__p_flag)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IMG::ImgService* servant = dynamic_cast< ::IMG::ImgService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->create(_m_ident, _m_lastSnapshot, _m_diskByteSize, _m_flag, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Long& _result;
        const ::IMG::ImageSnapshotIdent& _m_ident;
        const ::IMG::ImageSnapshotIdents& _m_lastSnapshot;
        ::Ice::Long _m_diskByteSize;
        const ::std::string& _m_flag;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IMG__ImgService__create_name, ::Ice::Normal, __context);
    ::Ice::Long __result;
    try
    {
        _DirectI __direct(__result, ident, lastSnapshot, diskByteSize, flag, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::IMG::ImgService::setUsedBlockBitmap(::Ice::Long handle, const ::IMG::BinaryStream& bitmap, bool completed, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::Ice::Long __p_handle, const ::IMG::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_handle(__p_handle),
            _m_bitmap(__p_bitmap),
            _m_completed(__p_completed)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IMG::ImgService* servant = dynamic_cast< ::IMG::ImgService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->setUsedBlockBitmap(_m_handle, _m_bitmap, _m_completed, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        ::Ice::Long _m_handle;
        const ::IMG::BinaryStream& _m_bitmap;
        bool _m_completed;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IMG__ImgService__setUsedBlockBitmap_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, handle, bitmap, completed, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::IMG::ImgService::cleanUsedBlockBitmap(::Ice::Long handle, const ::IMG::BlockIndexes& indexes, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::Ice::Long __p_handle, const ::IMG::BlockIndexes& __p_indexes, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_handle(__p_handle),
            _m_indexes(__p_indexes)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IMG::ImgService* servant = dynamic_cast< ::IMG::ImgService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->cleanUsedBlockBitmap(_m_handle, _m_indexes, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        ::Ice::Long _m_handle;
        const ::IMG::BlockIndexes& _m_indexes;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IMG__ImgService__cleanUsedBlockBitmap_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, handle, indexes, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::IMG::ImgService::setDuplicateFileSectors(::Ice::Long handle, const ::IMG::DuplicateFileSectors& sectors, bool completed, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::Ice::Long __p_handle, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_handle(__p_handle),
            _m_sectors(__p_sectors),
            _m_completed(__p_completed)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IMG::ImgService* servant = dynamic_cast< ::IMG::ImgService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->setDuplicateFileSectors(_m_handle, _m_sectors, _m_completed, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        ::Ice::Long _m_handle;
        const ::IMG::DuplicateFileSectors& _m_sectors;
        bool _m_completed;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IMG__ImgService__setDuplicateFileSectors_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, handle, sectors, completed, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Long
IceDelegateD::IMG::ImgService::open(const ::IMG::ImageSnapshotIdents& ident, const ::std::string& flag, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Long& __result, const ::IMG::ImageSnapshotIdents& __p_ident, const ::std::string& __p_flag, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_ident(__p_ident),
            _m_flag(__p_flag)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IMG::ImgService* servant = dynamic_cast< ::IMG::ImgService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->open(_m_ident, _m_flag, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Long& _result;
        const ::IMG::ImageSnapshotIdents& _m_ident;
        const ::std::string& _m_flag;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IMG__ImgService__open_name, ::Ice::Normal, __context);
    ::Ice::Long __result;
    try
    {
        _DirectI __direct(__result, ident, flag, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::IMG::ImgService::getTotalUesdBlockBitmap(::Ice::Long handle, ::Ice::Int index, ::IMG::BinaryStream& bitmap, bool& finish, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::Ice::Long __p_handle, ::Ice::Int __p_index, ::IMG::BinaryStream& __p_bitmap, bool& __p_finish, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_handle(__p_handle),
            _m_index(__p_index),
            _m_bitmap(__p_bitmap),
            _m_finish(__p_finish)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IMG::ImgService* servant = dynamic_cast< ::IMG::ImgService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getTotalUesdBlockBitmap(_m_handle, _m_index, _m_bitmap, _m_finish, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        ::Ice::Long _m_handle;
        ::Ice::Int _m_index;
        ::IMG::BinaryStream& _m_bitmap;
        bool& _m_finish;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IMG__ImgService__getTotalUesdBlockBitmap_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, handle, index, bitmap, finish, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Long
IceDelegateD::IMG::ImgService::getAllFileSectors(::Ice::Long handle, ::Ice::Long index, ::IMG::FileSectors& sectors, bool& finish, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Long& __result, ::Ice::Long __p_handle, ::Ice::Long __p_index, ::IMG::FileSectors& __p_sectors, bool& __p_finish, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_handle(__p_handle),
            _m_index(__p_index),
            _m_sectors(__p_sectors),
            _m_finish(__p_finish)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IMG::ImgService* servant = dynamic_cast< ::IMG::ImgService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getAllFileSectors(_m_handle, _m_index, _m_sectors, _m_finish, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Long& _result;
        ::Ice::Long _m_handle;
        ::Ice::Long _m_index;
        ::IMG::FileSectors& _m_sectors;
        bool& _m_finish;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IMG__ImgService__getAllFileSectors_name, ::Ice::Normal, __context);
    ::Ice::Long __result;
    try
    {
        _DirectI __direct(__result, handle, index, sectors, finish, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::IMG::ImgService::read(::Ice::Long handle, ::Ice::Long byteOffset, ::Ice::Int byteSize, ::IMG::BinaryStream& data, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, ::IMG::BinaryStream& __p_data, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_handle(__p_handle),
            _m_byteOffset(__p_byteOffset),
            _m_byteSize(__p_byteSize),
            _m_data(__p_data)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IMG::ImgService* servant = dynamic_cast< ::IMG::ImgService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->read(_m_handle, _m_byteOffset, _m_byteSize, _m_data, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        ::Ice::Long _m_handle;
        ::Ice::Long _m_byteOffset;
        ::Ice::Int _m_byteSize;
        ::IMG::BinaryStream& _m_data;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IMG__ImgService__read_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, handle, byteOffset, byteSize, data, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::IMG::ImgService::readEx(::Ice::Long handle, ::Ice::Long byteOffset, ::Ice::Int byteSize, ::IMG::BinaryStream& data, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, ::IMG::BinaryStream& __p_data, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_handle(__p_handle),
            _m_byteOffset(__p_byteOffset),
            _m_byteSize(__p_byteSize),
            _m_data(__p_data)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IMG::ImgService* servant = dynamic_cast< ::IMG::ImgService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->readEx(_m_handle, _m_byteOffset, _m_byteSize, _m_data, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        ::Ice::Long _m_handle;
        ::Ice::Long _m_byteOffset;
        ::Ice::Int _m_byteSize;
        ::IMG::BinaryStream& _m_data;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IMG__ImgService__readEx_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, handle, byteOffset, byteSize, data, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::IMG::ImgService::write(::Ice::Long handle, ::Ice::Long byteOffset, const ::IMG::BinaryStream& data, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_handle(__p_handle),
            _m_byteOffset(__p_byteOffset),
            _m_data(__p_data)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IMG::ImgService* servant = dynamic_cast< ::IMG::ImgService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->write(_m_handle, _m_byteOffset, _m_data, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        ::Ice::Long _m_handle;
        ::Ice::Long _m_byteOffset;
        const ::IMG::BinaryStream& _m_data;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IMG__ImgService__write_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, handle, byteOffset, data, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::IMG::ImgService::writeCdp(::Ice::Long handle, ::Ice::Long byteOffset, const ::IMG::BinaryStream& data, bool enableTime, ::Ice::Long timeSeconds, ::Ice::Int timeMicroseconds, bool IgnoreQuota, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_handle(__p_handle),
            _m_byteOffset(__p_byteOffset),
            _m_data(__p_data),
            _m_enableTime(__p_enableTime),
            _m_timeSeconds(__p_timeSeconds),
            _m_timeMicroseconds(__p_timeMicroseconds),
            _m_IgnoreQuota(__p_IgnoreQuota)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IMG::ImgService* servant = dynamic_cast< ::IMG::ImgService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->writeCdp(_m_handle, _m_byteOffset, _m_data, _m_enableTime, _m_timeSeconds, _m_timeMicroseconds, _m_IgnoreQuota, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        ::Ice::Long _m_handle;
        ::Ice::Long _m_byteOffset;
        const ::IMG::BinaryStream& _m_data;
        bool _m_enableTime;
        ::Ice::Long _m_timeSeconds;
        ::Ice::Int _m_timeMicroseconds;
        bool _m_IgnoreQuota;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IMG__ImgService__writeCdp_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, handle, byteOffset, data, enableTime, timeSeconds, timeMicroseconds, IgnoreQuota, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::IMG::ImgService::writeCdpByIndex(::Ice::Long handle, ::Ice::Long byteOffset, const ::IMG::BinaryStream& data, ::Ice::Long index, ::Ice::Long rev1, ::Ice::Long rev2, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_handle(__p_handle),
            _m_byteOffset(__p_byteOffset),
            _m_data(__p_data),
            _m_index(__p_index),
            _m_rev1(__p_rev1),
            _m_rev2(__p_rev2)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IMG::ImgService* servant = dynamic_cast< ::IMG::ImgService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->writeCdpByIndex(_m_handle, _m_byteOffset, _m_data, _m_index, _m_rev1, _m_rev2, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        ::Ice::Long _m_handle;
        ::Ice::Long _m_byteOffset;
        const ::IMG::BinaryStream& _m_data;
        ::Ice::Long _m_index;
        ::Ice::Long _m_rev1;
        ::Ice::Long _m_rev2;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IMG__ImgService__writeCdpByIndex_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, handle, byteOffset, data, index, rev1, rev2, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::IMG::ImgService::writeCdpByTmeAndIndex(::Ice::Long handle, ::Ice::Long byteOffset, const ::IMG::BinaryStream& data, bool enableTime, ::Ice::Long timeSeconds, ::Ice::Int timeMicroseconds, bool IgnoreQuota, ::Ice::Long index, ::Ice::Long rev1, ::Ice::Long rev2, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_handle(__p_handle),
            _m_byteOffset(__p_byteOffset),
            _m_data(__p_data),
            _m_enableTime(__p_enableTime),
            _m_timeSeconds(__p_timeSeconds),
            _m_timeMicroseconds(__p_timeMicroseconds),
            _m_IgnoreQuota(__p_IgnoreQuota),
            _m_index(__p_index),
            _m_rev1(__p_rev1),
            _m_rev2(__p_rev2)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IMG::ImgService* servant = dynamic_cast< ::IMG::ImgService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->writeCdpByTmeAndIndex(_m_handle, _m_byteOffset, _m_data, _m_enableTime, _m_timeSeconds, _m_timeMicroseconds, _m_IgnoreQuota, _m_index, _m_rev1, _m_rev2, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        ::Ice::Long _m_handle;
        ::Ice::Long _m_byteOffset;
        const ::IMG::BinaryStream& _m_data;
        bool _m_enableTime;
        ::Ice::Long _m_timeSeconds;
        ::Ice::Int _m_timeMicroseconds;
        bool _m_IgnoreQuota;
        ::Ice::Long _m_index;
        ::Ice::Long _m_rev1;
        ::Ice::Long _m_rev2;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IMG__ImgService__writeCdpByTmeAndIndex_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, handle, byteOffset, data, enableTime, timeSeconds, timeMicroseconds, IgnoreQuota, index, rev1, rev2, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::IMG::ImgService::close(::Ice::Long handle, bool success, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Long __p_handle, bool __p_success, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_handle(__p_handle),
            _m_success(__p_success)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IMG::ImgService* servant = dynamic_cast< ::IMG::ImgService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->close(_m_handle, _m_success, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Long _m_handle;
        bool _m_success;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IMG__ImgService__close_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(handle, success, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Long
IceDelegateD::IMG::ImgService::GetSnSize(::Ice::Long handle, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Long& __result, ::Ice::Long __p_handle, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_handle(__p_handle)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IMG::ImgService* servant = dynamic_cast< ::IMG::ImgService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->GetSnSize(_m_handle, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Long& _result;
        ::Ice::Long _m_handle;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IMG__ImgService__GetSnSize_name, ::Ice::Idempotent, __context);
    ::Ice::Long __result;
    try
    {
        _DirectI __direct(__result, handle, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::IMG::ImgService::DelSnaport(const ::IMG::ImageSnapshotIdent& ident, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_ident(__p_ident)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IMG::ImgService* servant = dynamic_cast< ::IMG::ImgService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->DelSnaport(_m_ident, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::IMG::ImageSnapshotIdent& _m_ident;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IMG__ImgService__DelSnaport_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, ident, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::IMG::ImgService::RenameSnapshot(const ::IMG::ImageSnapshotIdent& ident, const ::std::string& newSnapshot, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::IMG::ImageSnapshotIdent& __p_ident, const ::std::string& __p_newSnapshot, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_ident(__p_ident),
            _m_newSnapshot(__p_newSnapshot)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IMG::ImgService* servant = dynamic_cast< ::IMG::ImgService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->RenameSnapshot(_m_ident, _m_newSnapshot, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::IMG::ImageSnapshotIdent& _m_ident;
        const ::std::string& _m_newSnapshot;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IMG__ImgService__RenameSnapshot_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, ident, newSnapshot, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::IMG::ImgService::GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& ident, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_ident(__p_ident)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IMG::ImgService* servant = dynamic_cast< ::IMG::ImgService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->GetOnSnMapFile(_m_ident, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::std::string& _result;
        const ::IMG::ImageSnapshotIdent& _m_ident;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IMG__ImgService__GetOnSnMapFile_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, ident, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* IMG::upCast(::IMG::ImgService* p) { return p; }

namespace
{
const ::std::string __IMG__ImgService_ids[2] =
{
    "::IMG::ImgService",
    "::Ice::Object"
};

}

bool
IMG::ImgService::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__IMG__ImgService_ids, __IMG__ImgService_ids + 2, _s);
}

::std::vector< ::std::string>
IMG::ImgService::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__IMG__ImgService_ids[0], &__IMG__ImgService_ids[2]);
}

const ::std::string&
IMG::ImgService::ice_id(const ::Ice::Current&) const
{
    return __IMG__ImgService_ids[0];
}

const ::std::string&
IMG::ImgService::ice_staticId()
{
    return __IMG__ImgService_ids[0];
}

::Ice::DispatchStatus
IMG::ImgService::___create(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::IMG::ImageSnapshotIdent ident;
    ::IMG::ImageSnapshotIdents lastSnapshot;
    ::Ice::Long diskByteSize;
    ::std::string flag;
    __is->read(ident);
    __is->read(lastSnapshot);
    __is->read(diskByteSize);
    __is->read(flag);
    __inS.endReadParams();
    try
    {
        ::Ice::Long __ret = create(ident, lastSnapshot, diskByteSize, flag, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___setUsedBlockBitmap(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long handle;
    ::IMG::BinaryStream bitmap;
    bool completed;
    __is->read(handle);
    __is->read(bitmap);
    __is->read(completed);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = setUsedBlockBitmap(handle, bitmap, completed, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___cleanUsedBlockBitmap(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long handle;
    ::IMG::BlockIndexes indexes;
    __is->read(handle);
    __is->read(indexes);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = cleanUsedBlockBitmap(handle, indexes, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___setDuplicateFileSectors(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long handle;
    ::IMG::DuplicateFileSectors sectors;
    bool completed;
    __is->read(handle);
    __is->read(sectors);
    __is->read(completed);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = setDuplicateFileSectors(handle, sectors, completed, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___open(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::IMG::ImageSnapshotIdents ident;
    ::std::string flag;
    __is->read(ident);
    __is->read(flag);
    __inS.endReadParams();
    try
    {
        ::Ice::Long __ret = open(ident, flag, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___getTotalUesdBlockBitmap(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long handle;
    ::Ice::Int index;
    __is->read(handle);
    __is->read(index);
    __inS.endReadParams();
    ::IMG::BinaryStream bitmap;
    bool finish;
    try
    {
        ::Ice::Int __ret = getTotalUesdBlockBitmap(handle, index, bitmap, finish, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(bitmap);
        __os->write(finish);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___getAllFileSectors(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long handle;
    ::Ice::Long index;
    __is->read(handle);
    __is->read(index);
    __inS.endReadParams();
    ::IMG::FileSectors sectors;
    bool finish;
    try
    {
        ::Ice::Long __ret = getAllFileSectors(handle, index, sectors, finish, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(sectors);
        __os->write(finish);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___read(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long handle;
    ::Ice::Long byteOffset;
    ::Ice::Int byteSize;
    __is->read(handle);
    __is->read(byteOffset);
    __is->read(byteSize);
    __inS.endReadParams();
    ::IMG::BinaryStream data;
    try
    {
        ::Ice::Int __ret = read(handle, byteOffset, byteSize, data, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(data);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___readEx(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long handle;
    ::Ice::Long byteOffset;
    ::Ice::Int byteSize;
    __is->read(handle);
    __is->read(byteOffset);
    __is->read(byteSize);
    __inS.endReadParams();
    ::IMG::BinaryStream data;
    try
    {
        ::Ice::Int __ret = readEx(handle, byteOffset, byteSize, data, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(data);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___write(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long handle;
    ::Ice::Long byteOffset;
    ::IMG::BinaryStream data;
    __is->read(handle);
    __is->read(byteOffset);
    __is->read(data);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = write(handle, byteOffset, data, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___writeCdp(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long handle;
    ::Ice::Long byteOffset;
    ::IMG::BinaryStream data;
    bool enableTime;
    ::Ice::Long timeSeconds;
    ::Ice::Int timeMicroseconds;
    bool IgnoreQuota;
    __is->read(handle);
    __is->read(byteOffset);
    __is->read(data);
    __is->read(enableTime);
    __is->read(timeSeconds);
    __is->read(timeMicroseconds);
    __is->read(IgnoreQuota);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = writeCdp(handle, byteOffset, data, enableTime, timeSeconds, timeMicroseconds, IgnoreQuota, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___writeCdpByIndex(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long handle;
    ::Ice::Long byteOffset;
    ::IMG::BinaryStream data;
    ::Ice::Long index;
    ::Ice::Long rev1;
    ::Ice::Long rev2;
    __is->read(handle);
    __is->read(byteOffset);
    __is->read(data);
    __is->read(index);
    __is->read(rev1);
    __is->read(rev2);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = writeCdpByIndex(handle, byteOffset, data, index, rev1, rev2, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___writeCdpByTmeAndIndex(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long handle;
    ::Ice::Long byteOffset;
    ::IMG::BinaryStream data;
    bool enableTime;
    ::Ice::Long timeSeconds;
    ::Ice::Int timeMicroseconds;
    bool IgnoreQuota;
    ::Ice::Long index;
    ::Ice::Long rev1;
    ::Ice::Long rev2;
    __is->read(handle);
    __is->read(byteOffset);
    __is->read(data);
    __is->read(enableTime);
    __is->read(timeSeconds);
    __is->read(timeMicroseconds);
    __is->read(IgnoreQuota);
    __is->read(index);
    __is->read(rev1);
    __is->read(rev2);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = writeCdpByTmeAndIndex(handle, byteOffset, data, enableTime, timeSeconds, timeMicroseconds, IgnoreQuota, index, rev1, rev2, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___close(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long handle;
    bool success;
    __is->read(handle);
    __is->read(success);
    __inS.endReadParams();
    try
    {
        close(handle, success, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___GetSnSize(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long handle;
    __is->read(handle);
    __inS.endReadParams();
    try
    {
        ::Ice::Long __ret = GetSnSize(handle, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___DelSnaport(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::IMG::ImageSnapshotIdent ident;
    __is->read(ident);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = DelSnaport(ident, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___RenameSnapshot(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::IMG::ImageSnapshotIdent ident;
    ::std::string newSnapshot;
    __is->read(ident);
    __is->read(newSnapshot);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = RenameSnapshot(ident, newSnapshot, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IMG::ImgService::___GetOnSnMapFile(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::IMG::ImageSnapshotIdent ident;
    __is->read(ident);
    __inS.endReadParams();
    try
    {
        ::std::string __ret = GetOnSnMapFile(ident, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __IMG__ImgService_all[] =
{
    "DelSnaport",
    "GetOnSnMapFile",
    "GetSnSize",
    "RenameSnapshot",
    "cleanUsedBlockBitmap",
    "close",
    "create",
    "getAllFileSectors",
    "getTotalUesdBlockBitmap",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "open",
    "read",
    "readEx",
    "setDuplicateFileSectors",
    "setUsedBlockBitmap",
    "write",
    "writeCdp",
    "writeCdpByIndex",
    "writeCdpByTmeAndIndex"
};

}

::Ice::DispatchStatus
IMG::ImgService::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__IMG__ImgService_all, __IMG__ImgService_all + 22, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __IMG__ImgService_all)
    {
        case 0:
        {
            return ___DelSnaport(in, current);
        }
        case 1:
        {
            return ___GetOnSnMapFile(in, current);
        }
        case 2:
        {
            return ___GetSnSize(in, current);
        }
        case 3:
        {
            return ___RenameSnapshot(in, current);
        }
        case 4:
        {
            return ___cleanUsedBlockBitmap(in, current);
        }
        case 5:
        {
            return ___close(in, current);
        }
        case 6:
        {
            return ___create(in, current);
        }
        case 7:
        {
            return ___getAllFileSectors(in, current);
        }
        case 8:
        {
            return ___getTotalUesdBlockBitmap(in, current);
        }
        case 9:
        {
            return ___ice_id(in, current);
        }
        case 10:
        {
            return ___ice_ids(in, current);
        }
        case 11:
        {
            return ___ice_isA(in, current);
        }
        case 12:
        {
            return ___ice_ping(in, current);
        }
        case 13:
        {
            return ___open(in, current);
        }
        case 14:
        {
            return ___read(in, current);
        }
        case 15:
        {
            return ___readEx(in, current);
        }
        case 16:
        {
            return ___setDuplicateFileSectors(in, current);
        }
        case 17:
        {
            return ___setUsedBlockBitmap(in, current);
        }
        case 18:
        {
            return ___write(in, current);
        }
        case 19:
        {
            return ___writeCdp(in, current);
        }
        case 20:
        {
            return ___writeCdpByIndex(in, current);
        }
        case 21:
        {
            return ___writeCdpByTmeAndIndex(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
IMG::ImgService::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
IMG::ImgService::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
IMG::__patch(ImgServicePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::IMG::ImgServicePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::IMG::ImgService::ice_staticId(), v);
    }
}

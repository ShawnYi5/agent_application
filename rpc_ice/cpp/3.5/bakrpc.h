// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `bakrpc.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____cpp_3_5_bakrpc_h__
#define ____cpp_3_5_bakrpc_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <utils.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace bakrpc
{

class BackupRPC;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::bakrpc::BackupRPC>&);
::IceProxy::Ice::Object* upCast(::IceProxy::bakrpc::BackupRPC*);

}

namespace kvm4remote
{

class KVM;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::kvm4remote::KVM>&);
::IceProxy::Ice::Object* upCast(::IceProxy::kvm4remote::KVM*);

}

}

namespace bakrpc
{

class BackupRPC;
bool operator==(const BackupRPC&, const BackupRPC&);
bool operator<(const BackupRPC&, const BackupRPC&);
::Ice::Object* upCast(::bakrpc::BackupRPC*);
typedef ::IceInternal::Handle< ::bakrpc::BackupRPC> BackupRPCPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::bakrpc::BackupRPC> BackupRPCPrx;
void __patch(BackupRPCPtr&, const ::Ice::ObjectPtr&);

}

namespace kvm4remote
{

class KVM;
bool operator==(const KVM&, const KVM&);
bool operator<(const KVM&, const KVM&);
::Ice::Object* upCast(::kvm4remote::KVM*);
typedef ::IceInternal::Handle< ::kvm4remote::KVM> KVMPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::kvm4remote::KVM> KVMPrx;
void __patch(KVMPtr&, const ::Ice::ObjectPtr&);

}

namespace bakrpc
{

typedef ::std::vector< ::Ice::Byte> BinaryStream;

}

namespace kvm4remote
{

typedef ::std::vector< ::Ice::Byte> BinaryStream;

}

namespace bakrpc
{

class Callback_BackupRPC_callFunction_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BackupRPC_callFunction_Base> Callback_BackupRPC_callFunctionPtr;

}

namespace kvm4remote
{

class Callback_KVM_SetRemoteCallable_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_KVM_SetRemoteCallable_Base> Callback_KVM_SetRemoteCallablePtr;

class Callback_KVM_CleanRemoteCallable_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_KVM_CleanRemoteCallable_Base> Callback_KVM_CleanRemoteCallablePtr;

class Callback_KVM_getKVMCallable_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_KVM_getKVMCallable_Base> Callback_KVM_getKVMCallablePtr;

}

namespace IceProxy
{

namespace bakrpc
{

class BackupRPC : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int callFunction(const ::std::string& callJson, const ::std::string& inJson, const ::bakrpc::BinaryStream& inRaw, ::std::string& outJson, ::bakrpc::BinaryStream& outRaw)
    {
        return callFunction(callJson, inJson, inRaw, outJson, outRaw, 0);
    }
    ::Ice::Int callFunction(const ::std::string& callJson, const ::std::string& inJson, const ::bakrpc::BinaryStream& inRaw, ::std::string& outJson, ::bakrpc::BinaryStream& outRaw, const ::Ice::Context& __ctx)
    {
        return callFunction(callJson, inJson, inRaw, outJson, outRaw, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_callFunction(const ::std::string& callJson, const ::std::string& inJson, const ::bakrpc::BinaryStream& inRaw, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&, const ::bakrpc::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_callFunction(callJson, inJson, inRaw, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_callFunction(const ::std::string& callJson, const ::std::string& inJson, const ::bakrpc::BinaryStream& inRaw, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_callFunction(callJson, inJson, inRaw, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_callFunction(const ::std::string& callJson, const ::std::string& inJson, const ::bakrpc::BinaryStream& inRaw, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&, const ::bakrpc::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_callFunction(callJson, inJson, inRaw, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_callFunction(const ::std::string& callJson, const ::std::string& inJson, const ::bakrpc::BinaryStream& inRaw, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_callFunction(callJson, inJson, inRaw, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_callFunction(const ::std::string& callJson, const ::std::string& inJson, const ::bakrpc::BinaryStream& inRaw, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&, const ::bakrpc::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::std::string&, const ::bakrpc::BinaryStream&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::bakrpc::BackupRPCPrx __proxy = ::bakrpc::BackupRPCPrx::uncheckedCast(__result->getProxy());
                ::std::string outJson;
                ::bakrpc::BinaryStream outRaw;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_callFunction(outJson, outRaw, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, outJson, outRaw);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::std::string&, const ::bakrpc::BinaryStream&)> _response;
        };
        return begin_callFunction(callJson, inJson, inRaw, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_callFunction(const ::std::string& callJson, const ::std::string& inJson, const ::bakrpc::BinaryStream& inRaw)
    {
        return begin_callFunction(callJson, inJson, inRaw, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_callFunction(const ::std::string& callJson, const ::std::string& inJson, const ::bakrpc::BinaryStream& inRaw, const ::Ice::Context& __ctx)
    {
        return begin_callFunction(callJson, inJson, inRaw, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_callFunction(const ::std::string& callJson, const ::std::string& inJson, const ::bakrpc::BinaryStream& inRaw, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_callFunction(callJson, inJson, inRaw, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_callFunction(const ::std::string& callJson, const ::std::string& inJson, const ::bakrpc::BinaryStream& inRaw, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_callFunction(callJson, inJson, inRaw, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_callFunction(const ::std::string& callJson, const ::std::string& inJson, const ::bakrpc::BinaryStream& inRaw, const ::bakrpc::Callback_BackupRPC_callFunctionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_callFunction(callJson, inJson, inRaw, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_callFunction(const ::std::string& callJson, const ::std::string& inJson, const ::bakrpc::BinaryStream& inRaw, const ::Ice::Context& __ctx, const ::bakrpc::Callback_BackupRPC_callFunctionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_callFunction(callJson, inJson, inRaw, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_callFunction(::std::string& outJson, ::bakrpc::BinaryStream& outRaw, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int callFunction(const ::std::string&, const ::std::string&, const ::bakrpc::BinaryStream&, ::std::string&, ::bakrpc::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_callFunction(const ::std::string&, const ::std::string&, const ::bakrpc::BinaryStream&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_secure(bool __secure) const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_twoway() const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_oneway() const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_batchOneway() const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_datagram() const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_batchDatagram() const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_compress(bool __compress) const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_timeout(int __timeout) const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<BackupRPC> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<BackupRPC*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

namespace kvm4remote
{

class KVM : virtual public ::IceProxy::Ice::Object
{
public:

    void SetRemoteCallable(const ::std::string& ident, const ::Utils::CallablePrx& callable)
    {
        SetRemoteCallable(ident, callable, 0);
    }
    void SetRemoteCallable(const ::std::string& ident, const ::Utils::CallablePrx& callable, const ::Ice::Context& __ctx)
    {
        SetRemoteCallable(ident, callable, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetRemoteCallable(const ::std::string& ident, const ::Utils::CallablePrx& callable, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetRemoteCallable(ident, callable, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetRemoteCallable(const ::std::string& ident, const ::Utils::CallablePrx& callable, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetRemoteCallable(ident, callable, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetRemoteCallable(const ::std::string& ident, const ::Utils::CallablePrx& callable, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetRemoteCallable(ident, callable, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetRemoteCallable(const ::std::string& ident, const ::Utils::CallablePrx& callable, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetRemoteCallable(ident, callable, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetRemoteCallable(const ::std::string& ident, const ::Utils::CallablePrx& callable, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::kvm4remote::KVMPrx __proxy = ::kvm4remote::KVMPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_SetRemoteCallable(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_SetRemoteCallable(ident, callable, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetRemoteCallable(const ::std::string& ident, const ::Utils::CallablePrx& callable)
    {
        return begin_SetRemoteCallable(ident, callable, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetRemoteCallable(const ::std::string& ident, const ::Utils::CallablePrx& callable, const ::Ice::Context& __ctx)
    {
        return begin_SetRemoteCallable(ident, callable, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetRemoteCallable(const ::std::string& ident, const ::Utils::CallablePrx& callable, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRemoteCallable(ident, callable, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetRemoteCallable(const ::std::string& ident, const ::Utils::CallablePrx& callable, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRemoteCallable(ident, callable, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetRemoteCallable(const ::std::string& ident, const ::Utils::CallablePrx& callable, const ::kvm4remote::Callback_KVM_SetRemoteCallablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRemoteCallable(ident, callable, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetRemoteCallable(const ::std::string& ident, const ::Utils::CallablePrx& callable, const ::Ice::Context& __ctx, const ::kvm4remote::Callback_KVM_SetRemoteCallablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRemoteCallable(ident, callable, &__ctx, __del, __cookie);
    }

    void end_SetRemoteCallable(const ::Ice::AsyncResultPtr&);
    
private:

    void SetRemoteCallable(const ::std::string&, const ::Utils::CallablePrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetRemoteCallable(const ::std::string&, const ::Utils::CallablePrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void CleanRemoteCallable(const ::std::string& ident)
    {
        CleanRemoteCallable(ident, 0);
    }
    void CleanRemoteCallable(const ::std::string& ident, const ::Ice::Context& __ctx)
    {
        CleanRemoteCallable(ident, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_CleanRemoteCallable(const ::std::string& ident, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_CleanRemoteCallable(ident, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_CleanRemoteCallable(const ::std::string& ident, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_CleanRemoteCallable(ident, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_CleanRemoteCallable(const ::std::string& ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_CleanRemoteCallable(ident, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_CleanRemoteCallable(const ::std::string& ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_CleanRemoteCallable(ident, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_CleanRemoteCallable(const ::std::string& ident)
    {
        return begin_CleanRemoteCallable(ident, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CleanRemoteCallable(const ::std::string& ident, const ::Ice::Context& __ctx)
    {
        return begin_CleanRemoteCallable(ident, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CleanRemoteCallable(const ::std::string& ident, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CleanRemoteCallable(ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CleanRemoteCallable(const ::std::string& ident, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CleanRemoteCallable(ident, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CleanRemoteCallable(const ::std::string& ident, const ::kvm4remote::Callback_KVM_CleanRemoteCallablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CleanRemoteCallable(ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CleanRemoteCallable(const ::std::string& ident, const ::Ice::Context& __ctx, const ::kvm4remote::Callback_KVM_CleanRemoteCallablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CleanRemoteCallable(ident, &__ctx, __del, __cookie);
    }

    void end_CleanRemoteCallable(const ::Ice::AsyncResultPtr&);
    
private:

    void CleanRemoteCallable(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_CleanRemoteCallable(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Utils::CallablePrx getKVMCallable()
    {
        return getKVMCallable(0);
    }
    ::Utils::CallablePrx getKVMCallable(const ::Ice::Context& __ctx)
    {
        return getKVMCallable(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getKVMCallable(const ::IceInternal::Function<void (const ::Utils::CallablePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getKVMCallable(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getKVMCallable(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getKVMCallable(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getKVMCallable(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Utils::CallablePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getKVMCallable(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getKVMCallable(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getKVMCallable(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getKVMCallable(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Utils::CallablePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Utils::CallablePrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::kvm4remote::KVMPrx __proxy = ::kvm4remote::KVMPrx::uncheckedCast(__result->getProxy());
                ::Utils::CallablePrx __ret;
                try
                {
                    __ret = __proxy->end_getKVMCallable(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Utils::CallablePrx&)> _response;
        };
        return begin_getKVMCallable(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getKVMCallable()
    {
        return begin_getKVMCallable(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getKVMCallable(const ::Ice::Context& __ctx)
    {
        return begin_getKVMCallable(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getKVMCallable(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getKVMCallable(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getKVMCallable(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getKVMCallable(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getKVMCallable(const ::kvm4remote::Callback_KVM_getKVMCallablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getKVMCallable(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getKVMCallable(const ::Ice::Context& __ctx, const ::kvm4remote::Callback_KVM_getKVMCallablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getKVMCallable(&__ctx, __del, __cookie);
    }

    ::Utils::CallablePrx end_getKVMCallable(const ::Ice::AsyncResultPtr&);
    
private:

    ::Utils::CallablePrx getKVMCallable(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getKVMCallable(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<KVM> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<KVM> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KVM> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<KVM> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KVM> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<KVM> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<KVM> ice_secure(bool __secure) const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<KVM> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<KVM> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<KVM> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<KVM> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<KVM> ice_twoway() const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<KVM> ice_oneway() const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<KVM> ice_batchOneway() const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<KVM> ice_datagram() const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<KVM> ice_batchDatagram() const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<KVM> ice_compress(bool __compress) const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<KVM> ice_timeout(int __timeout) const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KVM> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KVM> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<KVM*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace bakrpc
{

class BackupRPC : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int callFunction(const ::std::string&, const ::std::string&, const ::bakrpc::BinaryStream&, ::std::string&, ::bakrpc::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

namespace kvm4remote
{

class KVM : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void SetRemoteCallable(const ::std::string&, const ::Utils::CallablePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void CleanRemoteCallable(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Utils::CallablePrx getKVMCallable(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace bakrpc
{

class BackupRPC : virtual public ::IceDelegate::bakrpc::BackupRPC,
                  virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int callFunction(const ::std::string&, const ::std::string&, const ::bakrpc::BinaryStream&, ::std::string&, ::bakrpc::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

namespace kvm4remote
{

class KVM : virtual public ::IceDelegate::kvm4remote::KVM,
            virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void SetRemoteCallable(const ::std::string&, const ::Utils::CallablePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void CleanRemoteCallable(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Utils::CallablePrx getKVMCallable(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace bakrpc
{

class BackupRPC : virtual public ::IceDelegate::bakrpc::BackupRPC,
                  virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int callFunction(const ::std::string&, const ::std::string&, const ::bakrpc::BinaryStream&, ::std::string&, ::bakrpc::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

namespace kvm4remote
{

class KVM : virtual public ::IceDelegate::kvm4remote::KVM,
            virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void SetRemoteCallable(const ::std::string&, const ::Utils::CallablePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void CleanRemoteCallable(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Utils::CallablePrx getKVMCallable(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace bakrpc
{

class BackupRPC : virtual public ::Ice::Object
{
public:

    typedef BackupRPCPrx ProxyType;
    typedef BackupRPCPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int callFunction(const ::std::string&, const ::std::string&, const ::bakrpc::BinaryStream&, ::std::string&, ::bakrpc::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___callFunction(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const BackupRPC& l, const BackupRPC& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const BackupRPC& l, const BackupRPC& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace kvm4remote
{

class KVM : virtual public ::Ice::Object
{
public:

    typedef KVMPrx ProxyType;
    typedef KVMPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void SetRemoteCallable(const ::std::string&, const ::Utils::CallablePrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetRemoteCallable(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void CleanRemoteCallable(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___CleanRemoteCallable(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Utils::CallablePrx getKVMCallable(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getKVMCallable(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const KVM& l, const KVM& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const KVM& l, const KVM& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace bakrpc
{

template<class T>
class CallbackNC_BackupRPC_callFunction : public Callback_BackupRPC_callFunction_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::std::string&, const ::bakrpc::BinaryStream&);

    CallbackNC_BackupRPC_callFunction(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::bakrpc::BackupRPCPrx __proxy = ::bakrpc::BackupRPCPrx::uncheckedCast(__result->getProxy());
        ::std::string outJson;
        ::bakrpc::BinaryStream outRaw;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_callFunction(outJson, outRaw, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, outJson, outRaw);
        }
    }

    Response response;
};

template<class T> Callback_BackupRPC_callFunctionPtr
newCallback_BackupRPC_callFunction(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::string&, const ::bakrpc::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackupRPC_callFunction<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BackupRPC_callFunctionPtr
newCallback_BackupRPC_callFunction(T* instance, void (T::*cb)(::Ice::Int, const ::std::string&, const ::bakrpc::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BackupRPC_callFunction<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_BackupRPC_callFunction : public Callback_BackupRPC_callFunction_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::std::string&, const ::bakrpc::BinaryStream&, const CT&);

    Callback_BackupRPC_callFunction(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::bakrpc::BackupRPCPrx __proxy = ::bakrpc::BackupRPCPrx::uncheckedCast(__result->getProxy());
        ::std::string outJson;
        ::bakrpc::BinaryStream outRaw;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_callFunction(outJson, outRaw, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, outJson, outRaw, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_BackupRPC_callFunctionPtr
newCallback_BackupRPC_callFunction(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::string&, const ::bakrpc::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackupRPC_callFunction<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BackupRPC_callFunctionPtr
newCallback_BackupRPC_callFunction(T* instance, void (T::*cb)(::Ice::Int, const ::std::string&, const ::bakrpc::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BackupRPC_callFunction<T, CT>(instance, cb, excb, sentcb);
}

}

namespace kvm4remote
{

template<class T>
class CallbackNC_KVM_SetRemoteCallable : public Callback_KVM_SetRemoteCallable_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_KVM_SetRemoteCallable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::kvm4remote::KVMPrx __proxy = ::kvm4remote::KVMPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_SetRemoteCallable(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_KVM_SetRemoteCallablePtr
newCallback_KVM_SetRemoteCallable(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KVM_SetRemoteCallable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_KVM_SetRemoteCallablePtr
newCallback_KVM_SetRemoteCallable(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KVM_SetRemoteCallable<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_KVM_SetRemoteCallablePtr
newCallback_KVM_SetRemoteCallable(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KVM_SetRemoteCallable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_KVM_SetRemoteCallablePtr
newCallback_KVM_SetRemoteCallable(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KVM_SetRemoteCallable<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_KVM_SetRemoteCallable : public Callback_KVM_SetRemoteCallable_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_KVM_SetRemoteCallable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::kvm4remote::KVMPrx __proxy = ::kvm4remote::KVMPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_SetRemoteCallable(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_KVM_SetRemoteCallablePtr
newCallback_KVM_SetRemoteCallable(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KVM_SetRemoteCallable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_KVM_SetRemoteCallablePtr
newCallback_KVM_SetRemoteCallable(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KVM_SetRemoteCallable<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_KVM_SetRemoteCallablePtr
newCallback_KVM_SetRemoteCallable(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KVM_SetRemoteCallable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_KVM_SetRemoteCallablePtr
newCallback_KVM_SetRemoteCallable(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KVM_SetRemoteCallable<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_KVM_CleanRemoteCallable : public Callback_KVM_CleanRemoteCallable_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_KVM_CleanRemoteCallable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_KVM_CleanRemoteCallablePtr
newCallback_KVM_CleanRemoteCallable(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KVM_CleanRemoteCallable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_KVM_CleanRemoteCallablePtr
newCallback_KVM_CleanRemoteCallable(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KVM_CleanRemoteCallable<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_KVM_CleanRemoteCallablePtr
newCallback_KVM_CleanRemoteCallable(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KVM_CleanRemoteCallable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_KVM_CleanRemoteCallablePtr
newCallback_KVM_CleanRemoteCallable(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KVM_CleanRemoteCallable<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_KVM_CleanRemoteCallable : public Callback_KVM_CleanRemoteCallable_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_KVM_CleanRemoteCallable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_KVM_CleanRemoteCallablePtr
newCallback_KVM_CleanRemoteCallable(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KVM_CleanRemoteCallable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_KVM_CleanRemoteCallablePtr
newCallback_KVM_CleanRemoteCallable(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KVM_CleanRemoteCallable<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_KVM_CleanRemoteCallablePtr
newCallback_KVM_CleanRemoteCallable(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KVM_CleanRemoteCallable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_KVM_CleanRemoteCallablePtr
newCallback_KVM_CleanRemoteCallable(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KVM_CleanRemoteCallable<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_KVM_getKVMCallable : public Callback_KVM_getKVMCallable_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Utils::CallablePrx&);

    CallbackNC_KVM_getKVMCallable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::kvm4remote::KVMPrx __proxy = ::kvm4remote::KVMPrx::uncheckedCast(__result->getProxy());
        ::Utils::CallablePrx __ret;
        try
        {
            __ret = __proxy->end_getKVMCallable(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_KVM_getKVMCallablePtr
newCallback_KVM_getKVMCallable(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Utils::CallablePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KVM_getKVMCallable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_KVM_getKVMCallablePtr
newCallback_KVM_getKVMCallable(T* instance, void (T::*cb)(const ::Utils::CallablePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KVM_getKVMCallable<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_KVM_getKVMCallable : public Callback_KVM_getKVMCallable_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Utils::CallablePrx&, const CT&);

    Callback_KVM_getKVMCallable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::kvm4remote::KVMPrx __proxy = ::kvm4remote::KVMPrx::uncheckedCast(__result->getProxy());
        ::Utils::CallablePrx __ret;
        try
        {
            __ret = __proxy->end_getKVMCallable(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_KVM_getKVMCallablePtr
newCallback_KVM_getKVMCallable(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Utils::CallablePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KVM_getKVMCallable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_KVM_getKVMCallablePtr
newCallback_KVM_getKVMCallable(T* instance, void (T::*cb)(const ::Utils::CallablePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KVM_getKVMCallable<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

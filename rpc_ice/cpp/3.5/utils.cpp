// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `utils.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <utils.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Utils__Callable__execute_name = "execute";

}

namespace
{

const char* __Utils__ErrorBase_name = "Utils::ErrorBase";

struct __F__Utils__ErrorBase : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Utils::ErrorBase();
    }
};

class __F__Utils__ErrorBase__Init
{
public:

    __F__Utils__ErrorBase__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Utils::ErrorBase", new __F__Utils__ErrorBase);
    }

    ~__F__Utils__ErrorBase__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Utils::ErrorBase");
    }
};

const __F__Utils__ErrorBase__Init __F__Utils__ErrorBase__i;

}

Utils::ErrorBase::ErrorBase(const ::std::string& __ice_description, const ::std::string& __ice_debug) :
    ::Ice::UserException(),
    description(__ice_description),
    debug(__ice_debug)
{
}

Utils::ErrorBase::~ErrorBase() throw()
{
}

::std::string
Utils::ErrorBase::ice_name() const
{
    return __Utils__ErrorBase_name;
}

Utils::ErrorBase*
Utils::ErrorBase::ice_clone() const
{
    return new ErrorBase(*this);
}

void
Utils::ErrorBase::ice_throw() const
{
    throw *this;
}

void
Utils::ErrorBase::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Utils::ErrorBase", -1, true);
    __os->write(description);
    __os->write(debug);
    __os->endWriteSlice();
}

void
Utils::ErrorBase::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(description);
    __is->read(debug);
    __is->endReadSlice();
}

namespace
{

const char* __Utils__SystemError_name = "Utils::SystemError";

struct __F__Utils__SystemError : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Utils::SystemError();
    }
};

class __F__Utils__SystemError__Init
{
public:

    __F__Utils__SystemError__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Utils::SystemError", new __F__Utils__SystemError);
    }

    ~__F__Utils__SystemError__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Utils::SystemError");
    }
};

const __F__Utils__SystemError__Init __F__Utils__SystemError__i;

}

Utils::SystemError::SystemError(const ::std::string& __ice_description, const ::std::string& __ice_debug, ::Ice::Long __ice_rawCode) :
    ::Utils::ErrorBase(__ice_description, __ice_debug),
    rawCode(__ice_rawCode)
{
}

Utils::SystemError::~SystemError() throw()
{
}

::std::string
Utils::SystemError::ice_name() const
{
    return __Utils__SystemError_name;
}

Utils::SystemError*
Utils::SystemError::ice_clone() const
{
    return new SystemError(*this);
}

void
Utils::SystemError::ice_throw() const
{
    throw *this;
}

void
Utils::SystemError::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Utils::SystemError", -1, false);
    __os->write(rawCode);
    __os->endWriteSlice();
    ::Utils::ErrorBase::__writeImpl(__os);
}

void
Utils::SystemError::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(rawCode);
    __is->endReadSlice();
    ::Utils::ErrorBase::__readImpl(__is);
}

namespace
{

const char* __Utils__NeedRetryLaterError_name = "Utils::NeedRetryLaterError";

struct __F__Utils__NeedRetryLaterError : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Utils::NeedRetryLaterError();
    }
};

class __F__Utils__NeedRetryLaterError__Init
{
public:

    __F__Utils__NeedRetryLaterError__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Utils::NeedRetryLaterError", new __F__Utils__NeedRetryLaterError);
    }

    ~__F__Utils__NeedRetryLaterError__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Utils::NeedRetryLaterError");
    }
};

const __F__Utils__NeedRetryLaterError__Init __F__Utils__NeedRetryLaterError__i;

}

Utils::NeedRetryLaterError::NeedRetryLaterError(const ::std::string& __ice_description, const ::std::string& __ice_debug) :
    ::Utils::ErrorBase(__ice_description, __ice_debug)
{
}

Utils::NeedRetryLaterError::~NeedRetryLaterError() throw()
{
}

::std::string
Utils::NeedRetryLaterError::ice_name() const
{
    return __Utils__NeedRetryLaterError_name;
}

Utils::NeedRetryLaterError*
Utils::NeedRetryLaterError::ice_clone() const
{
    return new NeedRetryLaterError(*this);
}

void
Utils::NeedRetryLaterError::ice_throw() const
{
    throw *this;
}

void
Utils::NeedRetryLaterError::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Utils::NeedRetryLaterError", -1, false);
    __os->endWriteSlice();
    ::Utils::ErrorBase::__writeImpl(__os);
}

void
Utils::NeedRetryLaterError::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Utils::ErrorBase::__readImpl(__is);
}

namespace
{

const char* __Utils__CreateSnapshotImageError_name = "Utils::CreateSnapshotImageError";

struct __F__Utils__CreateSnapshotImageError : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Utils::CreateSnapshotImageError();
    }
};

class __F__Utils__CreateSnapshotImageError__Init
{
public:

    __F__Utils__CreateSnapshotImageError__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Utils::CreateSnapshotImageError", new __F__Utils__CreateSnapshotImageError);
    }

    ~__F__Utils__CreateSnapshotImageError__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Utils::CreateSnapshotImageError");
    }
};

const __F__Utils__CreateSnapshotImageError__Init __F__Utils__CreateSnapshotImageError__i;

}

Utils::CreateSnapshotImageError::CreateSnapshotImageError(const ::std::string& __ice_description, const ::std::string& __ice_debug, ::Ice::Long __ice_rawCode) :
    ::Utils::SystemError(__ice_description, __ice_debug, __ice_rawCode)
{
}

Utils::CreateSnapshotImageError::~CreateSnapshotImageError() throw()
{
}

::std::string
Utils::CreateSnapshotImageError::ice_name() const
{
    return __Utils__CreateSnapshotImageError_name;
}

Utils::CreateSnapshotImageError*
Utils::CreateSnapshotImageError::ice_clone() const
{
    return new CreateSnapshotImageError(*this);
}

void
Utils::CreateSnapshotImageError::ice_throw() const
{
    throw *this;
}

void
Utils::CreateSnapshotImageError::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Utils::CreateSnapshotImageError", -1, false);
    __os->endWriteSlice();
    ::Utils::SystemError::__writeImpl(__os);
}

void
Utils::CreateSnapshotImageError::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Utils::SystemError::__readImpl(__is);
}

namespace
{

const char* __Utils__OperationNotExistError_name = "Utils::OperationNotExistError";

struct __F__Utils__OperationNotExistError : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Utils::OperationNotExistError();
    }
};

class __F__Utils__OperationNotExistError__Init
{
public:

    __F__Utils__OperationNotExistError__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Utils::OperationNotExistError", new __F__Utils__OperationNotExistError);
    }

    ~__F__Utils__OperationNotExistError__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Utils::OperationNotExistError");
    }
};

const __F__Utils__OperationNotExistError__Init __F__Utils__OperationNotExistError__i;

}

Utils::OperationNotExistError::OperationNotExistError(const ::std::string& __ice_description, const ::std::string& __ice_debug) :
    ::Utils::ErrorBase(__ice_description, __ice_debug)
{
}

Utils::OperationNotExistError::~OperationNotExistError() throw()
{
}

::std::string
Utils::OperationNotExistError::ice_name() const
{
    return __Utils__OperationNotExistError_name;
}

Utils::OperationNotExistError*
Utils::OperationNotExistError::ice_clone() const
{
    return new OperationNotExistError(*this);
}

void
Utils::OperationNotExistError::ice_throw() const
{
    throw *this;
}

void
Utils::OperationNotExistError::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Utils::OperationNotExistError", -1, false);
    __os->endWriteSlice();
    ::Utils::ErrorBase::__writeImpl(__os);
}

void
Utils::OperationNotExistError::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Utils::ErrorBase::__readImpl(__is);
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Utils::upCast(::IceProxy::Utils::Callable* p) { return p; }

void
::IceProxy::Utils::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Utils::Callable>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Utils::Callable;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Utils::Callable::execute(const ::std::string& callJson, const ::std::string& inputJson, const ::Utils::BinaryStream& inputBs, ::std::string& outputJson, ::Utils::BinaryStream& outputBs, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Utils__Callable__execute_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Utils__Callable__execute_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Utils::Callable* __del = dynamic_cast< ::IceDelegate::Utils::Callable*>(__delBase.get());
            __del->execute(callJson, inputJson, inputBs, outputJson, outputBs, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Utils::Callable::begin_execute(const ::std::string& callJson, const ::std::string& inputJson, const ::Utils::BinaryStream& inputBs, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Utils__Callable__execute_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Utils__Callable__execute_name, __del, __cookie);
    try
    {
        __result->__prepare(__Utils__Callable__execute_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(callJson);
        __os->write(inputJson);
        __os->write(inputBs);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Utils::Callable::end_execute(::std::string& outputJson, ::Utils::BinaryStream& outputBs, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Utils__Callable__execute_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(outputJson);
        __is->read(outputBs);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Utils::Callable::ice_staticId()
{
    return ::Utils::Callable::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Utils::Callable::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Utils::Callable);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Utils::Callable::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Utils::Callable);
}

::IceProxy::Ice::Object*
IceProxy::Utils::Callable::__newInstance() const
{
    return new Callable;
}

void
IceDelegateM::Utils::Callable::execute(const ::std::string& callJson, const ::std::string& inputJson, const ::Utils::BinaryStream& inputBs, ::std::string& outputJson, ::Utils::BinaryStream& outputBs, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Utils__Callable__execute_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(callJson);
        __os->write(inputJson);
        __os->write(inputBs);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Utils::SystemError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(outputJson);
        __is->read(outputBs);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::Utils::Callable::execute(const ::std::string& callJson, const ::std::string& inputJson, const ::Utils::BinaryStream& inputBs, ::std::string& outputJson, ::Utils::BinaryStream& outputBs, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_callJson, const ::std::string& __p_inputJson, const ::Utils::BinaryStream& __p_inputBs, ::std::string& __p_outputJson, ::Utils::BinaryStream& __p_outputBs, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_callJson(__p_callJson),
            _m_inputJson(__p_inputJson),
            _m_inputBs(__p_inputBs),
            _m_outputJson(__p_outputJson),
            _m_outputBs(__p_outputBs)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Utils::Callable* servant = dynamic_cast< ::Utils::Callable*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->execute(_m_callJson, _m_inputJson, _m_inputBs, _m_outputJson, _m_outputBs, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_callJson;
        const ::std::string& _m_inputJson;
        const ::Utils::BinaryStream& _m_inputBs;
        ::std::string& _m_outputJson;
        ::Utils::BinaryStream& _m_outputBs;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Utils__Callable__execute_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(callJson, inputJson, inputBs, outputJson, outputBs, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Utils::SystemError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* Utils::upCast(::Utils::Callable* p) { return p; }

namespace
{
const ::std::string __Utils__Callable_ids[2] =
{
    "::Ice::Object",
    "::Utils::Callable"
};

}

bool
Utils::Callable::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Utils__Callable_ids, __Utils__Callable_ids + 2, _s);
}

::std::vector< ::std::string>
Utils::Callable::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Utils__Callable_ids[0], &__Utils__Callable_ids[2]);
}

const ::std::string&
Utils::Callable::ice_id(const ::Ice::Current&) const
{
    return __Utils__Callable_ids[1];
}

const ::std::string&
Utils::Callable::ice_staticId()
{
    return __Utils__Callable_ids[1];
}

::Ice::DispatchStatus
Utils::Callable::___execute(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string callJson;
    ::std::string inputJson;
    ::Utils::BinaryStream inputBs;
    __is->read(callJson);
    __is->read(inputJson);
    __is->read(inputBs);
    __inS.endReadParams();
    ::std::string outputJson;
    ::Utils::BinaryStream outputBs;
    try
    {
        execute(callJson, inputJson, inputBs, outputJson, outputBs, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(outputJson);
        __os->write(outputBs);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __Utils__Callable_all[] =
{
    "execute",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Utils::Callable::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Utils__Callable_all, __Utils__Callable_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Utils__Callable_all)
    {
        case 0:
        {
            return ___execute(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Utils::Callable::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Utils::Callable::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Utils::__patch(CallablePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Utils::CallablePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Utils::Callable::ice_staticId(), v);
    }
}

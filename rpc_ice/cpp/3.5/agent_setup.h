// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `agent_setup.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____cpp_3_5_agent_setup_h__
#define ____cpp_3_5_agent_setup_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <utils.h>
#include <Ice/BuiltinSequences.h>
#include <Ice/Identity.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace AgentSetup
{

class AgentSetupReceiver;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::AgentSetup::AgentSetupReceiver>&);
::IceProxy::Ice::Object* upCast(::IceProxy::AgentSetup::AgentSetupReceiver*);

class AgentSetupSession;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::AgentSetup::AgentSetupSession>&);
::IceProxy::Ice::Object* upCast(::IceProxy::AgentSetup::AgentSetupSession*);

class AgentSetupSessionFactory;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::AgentSetup::AgentSetupSessionFactory>&);
::IceProxy::Ice::Object* upCast(::IceProxy::AgentSetup::AgentSetupSessionFactory*);

}

}

namespace AgentSetup
{

class AgentSetupReceiver;
bool operator==(const AgentSetupReceiver&, const AgentSetupReceiver&);
bool operator<(const AgentSetupReceiver&, const AgentSetupReceiver&);
::Ice::Object* upCast(::AgentSetup::AgentSetupReceiver*);
typedef ::IceInternal::Handle< ::AgentSetup::AgentSetupReceiver> AgentSetupReceiverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::AgentSetup::AgentSetupReceiver> AgentSetupReceiverPrx;
void __patch(AgentSetupReceiverPtr&, const ::Ice::ObjectPtr&);

class AgentSetupSession;
bool operator==(const AgentSetupSession&, const AgentSetupSession&);
bool operator<(const AgentSetupSession&, const AgentSetupSession&);
::Ice::Object* upCast(::AgentSetup::AgentSetupSession*);
typedef ::IceInternal::Handle< ::AgentSetup::AgentSetupSession> AgentSetupSessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::AgentSetup::AgentSetupSession> AgentSetupSessionPrx;
void __patch(AgentSetupSessionPtr&, const ::Ice::ObjectPtr&);

class AgentSetupSessionFactory;
bool operator==(const AgentSetupSessionFactory&, const AgentSetupSessionFactory&);
bool operator<(const AgentSetupSessionFactory&, const AgentSetupSessionFactory&);
::Ice::Object* upCast(::AgentSetup::AgentSetupSessionFactory*);
typedef ::IceInternal::Handle< ::AgentSetup::AgentSetupSessionFactory> AgentSetupSessionFactoryPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::AgentSetup::AgentSetupSessionFactory> AgentSetupSessionFactoryPrx;
void __patch(AgentSetupSessionFactoryPtr&, const ::Ice::ObjectPtr&);

}

namespace AgentSetup
{

class Callback_AgentSetupReceiver_queryRunnerAbsPath_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentSetupReceiver_queryRunnerAbsPath_Base> Callback_AgentSetupReceiver_queryRunnerAbsPathPtr;

class Callback_AgentSetupReceiver_searchBootFileAbsPath_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentSetupReceiver_searchBootFileAbsPath_Base> Callback_AgentSetupReceiver_searchBootFileAbsPathPtr;

class Callback_AgentSetupReceiver_prepareAgentInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentSetupReceiver_prepareAgentInfo_Base> Callback_AgentSetupReceiver_prepareAgentInfoPtr;

class Callback_AgentSetupReceiver_getFileInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentSetupReceiver_getFileInfo_Base> Callback_AgentSetupReceiver_getFileInfoPtr;

class Callback_AgentSetupReceiver_generateKeyInfos_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentSetupReceiver_generateKeyInfos_Base> Callback_AgentSetupReceiver_generateKeyInfosPtr;

class Callback_AgentSetupReceiver_open_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentSetupReceiver_open_Base> Callback_AgentSetupReceiver_openPtr;

class Callback_AgentSetupReceiver_pread_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentSetupReceiver_pread_Base> Callback_AgentSetupReceiver_preadPtr;

class Callback_AgentSetupReceiver_pwrite_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentSetupReceiver_pwrite_Base> Callback_AgentSetupReceiver_pwritePtr;

class Callback_AgentSetupReceiver_close_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentSetupReceiver_close_Base> Callback_AgentSetupReceiver_closePtr;

class Callback_AgentSetupReceiver_extractFile_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentSetupReceiver_extractFile_Base> Callback_AgentSetupReceiver_extractFilePtr;

class Callback_AgentSetupReceiver_executeCommand_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentSetupReceiver_executeCommand_Base> Callback_AgentSetupReceiver_executeCommandPtr;

class Callback_AgentSetupReceiver_reportStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentSetupReceiver_reportStatus_Base> Callback_AgentSetupReceiver_reportStatusPtr;

class Callback_AgentSetupReceiver_exit_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentSetupReceiver_exit_Base> Callback_AgentSetupReceiver_exitPtr;

class Callback_AgentSetupSession_queryName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentSetupSession_queryName_Base> Callback_AgentSetupSession_queryNamePtr;

class Callback_AgentSetupSession_destroy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentSetupSession_destroy_Base> Callback_AgentSetupSession_destroyPtr;

class Callback_AgentSetupSession_initiateReceiver_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentSetupSession_initiateReceiver_Base> Callback_AgentSetupSession_initiateReceiverPtr;

class Callback_AgentSetupSession_refresh_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentSetupSession_refresh_Base> Callback_AgentSetupSession_refreshPtr;

class Callback_AgentSetupSession_startSetup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentSetupSession_startSetup_Base> Callback_AgentSetupSession_startSetupPtr;

class Callback_AgentSetupSessionFactory_create_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentSetupSessionFactory_create_Base> Callback_AgentSetupSessionFactory_createPtr;

}

namespace IceProxy
{

namespace AgentSetup
{

class AgentSetupReceiver : virtual public ::IceProxy::Ice::Object
{
public:

    ::std::string queryRunnerAbsPath()
    {
        return queryRunnerAbsPath(0);
    }
    ::std::string queryRunnerAbsPath(const ::Ice::Context& __ctx)
    {
        return queryRunnerAbsPath(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_queryRunnerAbsPath(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryRunnerAbsPath(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryRunnerAbsPath(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryRunnerAbsPath(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_queryRunnerAbsPath(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryRunnerAbsPath(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryRunnerAbsPath(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryRunnerAbsPath(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_queryRunnerAbsPath(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_queryRunnerAbsPath(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_queryRunnerAbsPath(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_queryRunnerAbsPath()
    {
        return begin_queryRunnerAbsPath(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryRunnerAbsPath(const ::Ice::Context& __ctx)
    {
        return begin_queryRunnerAbsPath(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryRunnerAbsPath(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryRunnerAbsPath(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryRunnerAbsPath(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryRunnerAbsPath(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryRunnerAbsPath(const ::AgentSetup::Callback_AgentSetupReceiver_queryRunnerAbsPathPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryRunnerAbsPath(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryRunnerAbsPath(const ::Ice::Context& __ctx, const ::AgentSetup::Callback_AgentSetupReceiver_queryRunnerAbsPathPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryRunnerAbsPath(&__ctx, __del, __cookie);
    }

    ::std::string end_queryRunnerAbsPath(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string queryRunnerAbsPath(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_queryRunnerAbsPath(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string searchBootFileAbsPath()
    {
        return searchBootFileAbsPath(0);
    }
    ::std::string searchBootFileAbsPath(const ::Ice::Context& __ctx)
    {
        return searchBootFileAbsPath(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_searchBootFileAbsPath(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_searchBootFileAbsPath(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_searchBootFileAbsPath(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_searchBootFileAbsPath(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_searchBootFileAbsPath(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_searchBootFileAbsPath(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_searchBootFileAbsPath(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_searchBootFileAbsPath(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_searchBootFileAbsPath(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_searchBootFileAbsPath(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_searchBootFileAbsPath(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_searchBootFileAbsPath()
    {
        return begin_searchBootFileAbsPath(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_searchBootFileAbsPath(const ::Ice::Context& __ctx)
    {
        return begin_searchBootFileAbsPath(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_searchBootFileAbsPath(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchBootFileAbsPath(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchBootFileAbsPath(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchBootFileAbsPath(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchBootFileAbsPath(const ::AgentSetup::Callback_AgentSetupReceiver_searchBootFileAbsPathPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchBootFileAbsPath(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchBootFileAbsPath(const ::Ice::Context& __ctx, const ::AgentSetup::Callback_AgentSetupReceiver_searchBootFileAbsPathPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchBootFileAbsPath(&__ctx, __del, __cookie);
    }

    ::std::string end_searchBootFileAbsPath(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string searchBootFileAbsPath(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_searchBootFileAbsPath(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string prepareAgentInfo(const ::std::string& flagJson)
    {
        return prepareAgentInfo(flagJson, 0);
    }
    ::std::string prepareAgentInfo(const ::std::string& flagJson, const ::Ice::Context& __ctx)
    {
        return prepareAgentInfo(flagJson, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_prepareAgentInfo(const ::std::string& flagJson, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_prepareAgentInfo(flagJson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_prepareAgentInfo(const ::std::string& flagJson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_prepareAgentInfo(flagJson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_prepareAgentInfo(const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_prepareAgentInfo(flagJson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_prepareAgentInfo(const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_prepareAgentInfo(flagJson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_prepareAgentInfo(const ::std::string& flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_prepareAgentInfo(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_prepareAgentInfo(flagJson, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_prepareAgentInfo(const ::std::string& flagJson)
    {
        return begin_prepareAgentInfo(flagJson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_prepareAgentInfo(const ::std::string& flagJson, const ::Ice::Context& __ctx)
    {
        return begin_prepareAgentInfo(flagJson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_prepareAgentInfo(const ::std::string& flagJson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_prepareAgentInfo(flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_prepareAgentInfo(const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_prepareAgentInfo(flagJson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_prepareAgentInfo(const ::std::string& flagJson, const ::AgentSetup::Callback_AgentSetupReceiver_prepareAgentInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_prepareAgentInfo(flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_prepareAgentInfo(const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::AgentSetup::Callback_AgentSetupReceiver_prepareAgentInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_prepareAgentInfo(flagJson, &__ctx, __del, __cookie);
    }

    ::std::string end_prepareAgentInfo(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string prepareAgentInfo(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_prepareAgentInfo(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getFileInfo(const ::std::string& fileName, const ::std::string& flagJson)
    {
        return getFileInfo(fileName, flagJson, 0);
    }
    ::std::string getFileInfo(const ::std::string& fileName, const ::std::string& flagJson, const ::Ice::Context& __ctx)
    {
        return getFileInfo(fileName, flagJson, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getFileInfo(const ::std::string& fileName, const ::std::string& flagJson, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFileInfo(fileName, flagJson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFileInfo(const ::std::string& fileName, const ::std::string& flagJson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFileInfo(fileName, flagJson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getFileInfo(const ::std::string& fileName, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFileInfo(fileName, flagJson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFileInfo(const ::std::string& fileName, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFileInfo(fileName, flagJson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getFileInfo(const ::std::string& fileName, const ::std::string& flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getFileInfo(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getFileInfo(fileName, flagJson, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getFileInfo(const ::std::string& fileName, const ::std::string& flagJson)
    {
        return begin_getFileInfo(fileName, flagJson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFileInfo(const ::std::string& fileName, const ::std::string& flagJson, const ::Ice::Context& __ctx)
    {
        return begin_getFileInfo(fileName, flagJson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFileInfo(const ::std::string& fileName, const ::std::string& flagJson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileInfo(fileName, flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileInfo(const ::std::string& fileName, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileInfo(fileName, flagJson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileInfo(const ::std::string& fileName, const ::std::string& flagJson, const ::AgentSetup::Callback_AgentSetupReceiver_getFileInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileInfo(fileName, flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileInfo(const ::std::string& fileName, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::AgentSetup::Callback_AgentSetupReceiver_getFileInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileInfo(fileName, flagJson, &__ctx, __del, __cookie);
    }

    ::std::string end_getFileInfo(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getFileInfo(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFileInfo(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void generateKeyInfos(const ::std::string& absFilePath, const ::std::string& flagJson)
    {
        generateKeyInfos(absFilePath, flagJson, 0);
    }
    void generateKeyInfos(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context& __ctx)
    {
        generateKeyInfos(absFilePath, flagJson, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_generateKeyInfos(const ::std::string& absFilePath, const ::std::string& flagJson, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_generateKeyInfos(absFilePath, flagJson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_generateKeyInfos(const ::std::string& absFilePath, const ::std::string& flagJson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_generateKeyInfos(absFilePath, flagJson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_generateKeyInfos(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_generateKeyInfos(absFilePath, flagJson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_generateKeyInfos(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_generateKeyInfos(absFilePath, flagJson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_generateKeyInfos(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_generateKeyInfos(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_generateKeyInfos(absFilePath, flagJson, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_generateKeyInfos(const ::std::string& absFilePath, const ::std::string& flagJson)
    {
        return begin_generateKeyInfos(absFilePath, flagJson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_generateKeyInfos(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context& __ctx)
    {
        return begin_generateKeyInfos(absFilePath, flagJson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_generateKeyInfos(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_generateKeyInfos(absFilePath, flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_generateKeyInfos(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_generateKeyInfos(absFilePath, flagJson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_generateKeyInfos(const ::std::string& absFilePath, const ::std::string& flagJson, const ::AgentSetup::Callback_AgentSetupReceiver_generateKeyInfosPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_generateKeyInfos(absFilePath, flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_generateKeyInfos(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::AgentSetup::Callback_AgentSetupReceiver_generateKeyInfosPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_generateKeyInfos(absFilePath, flagJson, &__ctx, __del, __cookie);
    }

    void end_generateKeyInfos(const ::Ice::AsyncResultPtr&);
    
private:

    void generateKeyInfos(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_generateKeyInfos(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string open(const ::std::string& absFilePath, const ::std::string& flagJson)
    {
        return open(absFilePath, flagJson, 0);
    }
    ::std::string open(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context& __ctx)
    {
        return open(absFilePath, flagJson, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_open(const ::std::string& absFilePath, const ::std::string& flagJson, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_open(absFilePath, flagJson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_open(const ::std::string& absFilePath, const ::std::string& flagJson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_open(absFilePath, flagJson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_open(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_open(absFilePath, flagJson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_open(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_open(absFilePath, flagJson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_open(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_open(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_open(absFilePath, flagJson, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_open(const ::std::string& absFilePath, const ::std::string& flagJson)
    {
        return begin_open(absFilePath, flagJson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_open(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context& __ctx)
    {
        return begin_open(absFilePath, flagJson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_open(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_open(absFilePath, flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_open(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_open(absFilePath, flagJson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_open(const ::std::string& absFilePath, const ::std::string& flagJson, const ::AgentSetup::Callback_AgentSetupReceiver_openPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_open(absFilePath, flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_open(const ::std::string& absFilePath, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::AgentSetup::Callback_AgentSetupReceiver_openPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_open(absFilePath, flagJson, &__ctx, __del, __cookie);
    }

    ::std::string end_open(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string open(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_open(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::ByteSeq pread(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes)
    {
        return pread(handle, byteOffset, bytes, 0);
    }
    ::Ice::ByteSeq pread(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context& __ctx)
    {
        return pread(handle, byteOffset, bytes, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_pread(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_pread(handle, byteOffset, bytes, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_pread(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_pread(handle, byteOffset, bytes, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_pread(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_pread(handle, byteOffset, bytes, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_pread(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_pread(handle, byteOffset, bytes, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_pread(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Ice::ByteSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
                ::Ice::ByteSeq __ret;
                try
                {
                    __ret = __proxy->end_pread(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Ice::ByteSeq&)> _response;
        };
        return begin_pread(handle, byteOffset, bytes, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_pread(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes)
    {
        return begin_pread(handle, byteOffset, bytes, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_pread(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context& __ctx)
    {
        return begin_pread(handle, byteOffset, bytes, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_pread(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pread(handle, byteOffset, bytes, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pread(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pread(handle, byteOffset, bytes, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pread(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::AgentSetup::Callback_AgentSetupReceiver_preadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pread(handle, byteOffset, bytes, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pread(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::Context& __ctx, const ::AgentSetup::Callback_AgentSetupReceiver_preadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pread(handle, byteOffset, bytes, &__ctx, __del, __cookie);
    }

    ::Ice::ByteSeq end_pread(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::ByteSeq pread(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_pread(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void pwrite(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::ByteSeq& data)
    {
        pwrite(handle, byteOffset, bytes, data, 0);
    }
    void pwrite(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::ByteSeq& data, const ::Ice::Context& __ctx)
    {
        pwrite(handle, byteOffset, bytes, data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_pwrite(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::ByteSeq& data, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_pwrite(handle, byteOffset, bytes, data, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_pwrite(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::ByteSeq& data, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_pwrite(handle, byteOffset, bytes, data, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_pwrite(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::ByteSeq& data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_pwrite(handle, byteOffset, bytes, data, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_pwrite(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::ByteSeq& data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_pwrite(handle, byteOffset, bytes, data, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_pwrite(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::ByteSeq& data, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_pwrite(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_pwrite(handle, byteOffset, bytes, data, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_pwrite(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::ByteSeq& data)
    {
        return begin_pwrite(handle, byteOffset, bytes, data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_pwrite(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::ByteSeq& data, const ::Ice::Context& __ctx)
    {
        return begin_pwrite(handle, byteOffset, bytes, data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_pwrite(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::ByteSeq& data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pwrite(handle, byteOffset, bytes, data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pwrite(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::ByteSeq& data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pwrite(handle, byteOffset, bytes, data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pwrite(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::ByteSeq& data, const ::AgentSetup::Callback_AgentSetupReceiver_pwritePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pwrite(handle, byteOffset, bytes, data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pwrite(const ::std::string& handle, ::Ice::Long byteOffset, ::Ice::Int bytes, const ::Ice::ByteSeq& data, const ::Ice::Context& __ctx, const ::AgentSetup::Callback_AgentSetupReceiver_pwritePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pwrite(handle, byteOffset, bytes, data, &__ctx, __del, __cookie);
    }

    void end_pwrite(const ::Ice::AsyncResultPtr&);
    
private:

    void pwrite(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::ByteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_pwrite(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::ByteSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void close(const ::std::string& handle)
    {
        close(handle, 0);
    }
    void close(const ::std::string& handle, const ::Ice::Context& __ctx)
    {
        close(handle, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_close(const ::std::string& handle, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_close(handle, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_close(const ::std::string& handle, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_close(handle, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_close(const ::std::string& handle, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_close(handle, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_close(const ::std::string& handle, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_close(handle, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_close(const ::std::string& handle, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_close(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_close(handle, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_close(const ::std::string& handle)
    {
        return begin_close(handle, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_close(const ::std::string& handle, const ::Ice::Context& __ctx)
    {
        return begin_close(handle, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_close(const ::std::string& handle, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(handle, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_close(const ::std::string& handle, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(handle, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_close(const ::std::string& handle, const ::AgentSetup::Callback_AgentSetupReceiver_closePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(handle, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_close(const ::std::string& handle, const ::Ice::Context& __ctx, const ::AgentSetup::Callback_AgentSetupReceiver_closePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(handle, &__ctx, __del, __cookie);
    }

    void end_close(const ::Ice::AsyncResultPtr&);
    
private:

    void close(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_close(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void extractFile(const ::std::string& absSourceFilePath, const ::std::string& absDestinationPath, const ::std::string& flagJson)
    {
        extractFile(absSourceFilePath, absDestinationPath, flagJson, 0);
    }
    void extractFile(const ::std::string& absSourceFilePath, const ::std::string& absDestinationPath, const ::std::string& flagJson, const ::Ice::Context& __ctx)
    {
        extractFile(absSourceFilePath, absDestinationPath, flagJson, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_extractFile(const ::std::string& absSourceFilePath, const ::std::string& absDestinationPath, const ::std::string& flagJson, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_extractFile(absSourceFilePath, absDestinationPath, flagJson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_extractFile(const ::std::string& absSourceFilePath, const ::std::string& absDestinationPath, const ::std::string& flagJson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_extractFile(absSourceFilePath, absDestinationPath, flagJson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_extractFile(const ::std::string& absSourceFilePath, const ::std::string& absDestinationPath, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_extractFile(absSourceFilePath, absDestinationPath, flagJson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_extractFile(const ::std::string& absSourceFilePath, const ::std::string& absDestinationPath, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_extractFile(absSourceFilePath, absDestinationPath, flagJson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_extractFile(const ::std::string& absSourceFilePath, const ::std::string& absDestinationPath, const ::std::string& flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_extractFile(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_extractFile(absSourceFilePath, absDestinationPath, flagJson, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_extractFile(const ::std::string& absSourceFilePath, const ::std::string& absDestinationPath, const ::std::string& flagJson)
    {
        return begin_extractFile(absSourceFilePath, absDestinationPath, flagJson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_extractFile(const ::std::string& absSourceFilePath, const ::std::string& absDestinationPath, const ::std::string& flagJson, const ::Ice::Context& __ctx)
    {
        return begin_extractFile(absSourceFilePath, absDestinationPath, flagJson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_extractFile(const ::std::string& absSourceFilePath, const ::std::string& absDestinationPath, const ::std::string& flagJson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_extractFile(absSourceFilePath, absDestinationPath, flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_extractFile(const ::std::string& absSourceFilePath, const ::std::string& absDestinationPath, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_extractFile(absSourceFilePath, absDestinationPath, flagJson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_extractFile(const ::std::string& absSourceFilePath, const ::std::string& absDestinationPath, const ::std::string& flagJson, const ::AgentSetup::Callback_AgentSetupReceiver_extractFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_extractFile(absSourceFilePath, absDestinationPath, flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_extractFile(const ::std::string& absSourceFilePath, const ::std::string& absDestinationPath, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::AgentSetup::Callback_AgentSetupReceiver_extractFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_extractFile(absSourceFilePath, absDestinationPath, flagJson, &__ctx, __del, __cookie);
    }

    void end_extractFile(const ::Ice::AsyncResultPtr&);
    
private:

    void extractFile(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_extractFile(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int executeCommand(const ::std::string& cmd, const ::std::string& flagJson, ::Ice::StringSeq& stdout, ::Ice::StringSeq& stderr)
    {
        return executeCommand(cmd, flagJson, stdout, stderr, 0);
    }
    ::Ice::Int executeCommand(const ::std::string& cmd, const ::std::string& flagJson, ::Ice::StringSeq& stdout, ::Ice::StringSeq& stderr, const ::Ice::Context& __ctx)
    {
        return executeCommand(cmd, flagJson, stdout, stderr, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_executeCommand(const ::std::string& cmd, const ::std::string& flagJson, const ::IceInternal::Function<void (::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_executeCommand(cmd, flagJson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_executeCommand(const ::std::string& cmd, const ::std::string& flagJson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_executeCommand(cmd, flagJson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_executeCommand(const ::std::string& cmd, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_executeCommand(cmd, flagJson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_executeCommand(const ::std::string& cmd, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_executeCommand(cmd, flagJson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_executeCommand(const ::std::string& cmd, const ::std::string& flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
                ::Ice::StringSeq stdout;
                ::Ice::StringSeq stderr;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_executeCommand(stdout, stderr, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, stdout, stderr);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&)> _response;
        };
        return begin_executeCommand(cmd, flagJson, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_executeCommand(const ::std::string& cmd, const ::std::string& flagJson)
    {
        return begin_executeCommand(cmd, flagJson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_executeCommand(const ::std::string& cmd, const ::std::string& flagJson, const ::Ice::Context& __ctx)
    {
        return begin_executeCommand(cmd, flagJson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_executeCommand(const ::std::string& cmd, const ::std::string& flagJson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_executeCommand(cmd, flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_executeCommand(const ::std::string& cmd, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_executeCommand(cmd, flagJson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_executeCommand(const ::std::string& cmd, const ::std::string& flagJson, const ::AgentSetup::Callback_AgentSetupReceiver_executeCommandPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_executeCommand(cmd, flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_executeCommand(const ::std::string& cmd, const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::AgentSetup::Callback_AgentSetupReceiver_executeCommandPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_executeCommand(cmd, flagJson, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_executeCommand(::Ice::StringSeq& stdout, ::Ice::StringSeq& stderr, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int executeCommand(const ::std::string&, const ::std::string&, ::Ice::StringSeq&, ::Ice::StringSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_executeCommand(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reportStatus(const ::std::string& contentJson)
    {
        reportStatus(contentJson, 0);
    }
    void reportStatus(const ::std::string& contentJson, const ::Ice::Context& __ctx)
    {
        reportStatus(contentJson, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reportStatus(const ::std::string& contentJson, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_reportStatus(contentJson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_reportStatus(const ::std::string& contentJson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reportStatus(contentJson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reportStatus(const ::std::string& contentJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_reportStatus(contentJson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_reportStatus(const ::std::string& contentJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reportStatus(contentJson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_reportStatus(const ::std::string& contentJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_reportStatus(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_reportStatus(contentJson, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_reportStatus(const ::std::string& contentJson)
    {
        return begin_reportStatus(contentJson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reportStatus(const ::std::string& contentJson, const ::Ice::Context& __ctx)
    {
        return begin_reportStatus(contentJson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reportStatus(const ::std::string& contentJson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportStatus(contentJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reportStatus(const ::std::string& contentJson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportStatus(contentJson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reportStatus(const ::std::string& contentJson, const ::AgentSetup::Callback_AgentSetupReceiver_reportStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportStatus(contentJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reportStatus(const ::std::string& contentJson, const ::Ice::Context& __ctx, const ::AgentSetup::Callback_AgentSetupReceiver_reportStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportStatus(contentJson, &__ctx, __del, __cookie);
    }

    void end_reportStatus(const ::Ice::AsyncResultPtr&);
    
private:

    void reportStatus(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reportStatus(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void exit(::Ice::Int returnCode)
    {
        exit(returnCode, 0);
    }
    void exit(::Ice::Int returnCode, const ::Ice::Context& __ctx)
    {
        exit(returnCode, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_exit(::Ice::Int returnCode, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_exit(returnCode, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_exit(::Ice::Int returnCode, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_exit(returnCode, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_exit(::Ice::Int returnCode, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_exit(returnCode, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_exit(::Ice::Int returnCode, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_exit(returnCode, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_exit(::Ice::Int returnCode)
    {
        return begin_exit(returnCode, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_exit(::Ice::Int returnCode, const ::Ice::Context& __ctx)
    {
        return begin_exit(returnCode, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_exit(::Ice::Int returnCode, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_exit(returnCode, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_exit(::Ice::Int returnCode, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_exit(returnCode, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_exit(::Ice::Int returnCode, const ::AgentSetup::Callback_AgentSetupReceiver_exitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_exit(returnCode, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_exit(::Ice::Int returnCode, const ::Ice::Context& __ctx, const ::AgentSetup::Callback_AgentSetupReceiver_exitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_exit(returnCode, &__ctx, __del, __cookie);
    }

    void end_exit(const ::Ice::AsyncResultPtr&);
    
private:

    void exit(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_exit(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_secure(bool __secure) const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_twoway() const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_oneway() const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_batchOneway() const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_datagram() const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_batchDatagram() const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_compress(bool __compress) const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_timeout(int __timeout) const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupReceiver> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<AgentSetupReceiver*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class AgentSetupSession : virtual public ::IceProxy::Ice::Object
{
public:

    ::std::string queryName()
    {
        return queryName(0);
    }
    ::std::string queryName(const ::Ice::Context& __ctx)
    {
        return queryName(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_queryName(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryName(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryName(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryName(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_queryName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryName(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryName(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_queryName(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::AgentSetup::AgentSetupSessionPrx __proxy = ::AgentSetup::AgentSetupSessionPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_queryName(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_queryName(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_queryName()
    {
        return begin_queryName(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryName(const ::Ice::Context& __ctx)
    {
        return begin_queryName(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryName(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryName(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryName(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryName(const ::AgentSetup::Callback_AgentSetupSession_queryNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryName(const ::Ice::Context& __ctx, const ::AgentSetup::Callback_AgentSetupSession_queryNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryName(&__ctx, __del, __cookie);
    }

    ::std::string end_queryName(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string queryName(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_queryName(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void destroy()
    {
        destroy(0);
    }
    void destroy(const ::Ice::Context& __ctx)
    {
        destroy(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_destroy()
    {
        return begin_destroy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx)
    {
        return begin_destroy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::AgentSetup::Callback_AgentSetupSession_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::AgentSetup::Callback_AgentSetupSession_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    void end_destroy(const ::Ice::AsyncResultPtr&);
    
private:

    void destroy(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void initiateReceiver(const ::Ice::Identity& ident)
    {
        initiateReceiver(ident, 0);
    }
    void initiateReceiver(const ::Ice::Identity& ident, const ::Ice::Context& __ctx)
    {
        initiateReceiver(ident, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_initiateReceiver(const ::Ice::Identity& ident, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_initiateReceiver(ident, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_initiateReceiver(const ::Ice::Identity& ident, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initiateReceiver(ident, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initiateReceiver(const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_initiateReceiver(ident, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_initiateReceiver(const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initiateReceiver(ident, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_initiateReceiver(const ::Ice::Identity& ident, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::AgentSetup::AgentSetupSessionPrx __proxy = ::AgentSetup::AgentSetupSessionPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_initiateReceiver(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_initiateReceiver(ident, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_initiateReceiver(const ::Ice::Identity& ident)
    {
        return begin_initiateReceiver(ident, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initiateReceiver(const ::Ice::Identity& ident, const ::Ice::Context& __ctx)
    {
        return begin_initiateReceiver(ident, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initiateReceiver(const ::Ice::Identity& ident, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateReceiver(ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateReceiver(const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateReceiver(ident, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateReceiver(const ::Ice::Identity& ident, const ::AgentSetup::Callback_AgentSetupSession_initiateReceiverPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateReceiver(ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateReceiver(const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::AgentSetup::Callback_AgentSetupSession_initiateReceiverPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateReceiver(ident, &__ctx, __del, __cookie);
    }

    void end_initiateReceiver(const ::Ice::AsyncResultPtr&);
    
private:

    void initiateReceiver(const ::Ice::Identity&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_initiateReceiver(const ::Ice::Identity&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void refresh()
    {
        refresh(0);
    }
    void refresh(const ::Ice::Context& __ctx)
    {
        refresh(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_refresh(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_refresh(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_refresh(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_refresh(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_refresh(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_refresh(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_refresh(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_refresh(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_refresh()
    {
        return begin_refresh(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::Context& __ctx)
    {
        return begin_refresh(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::AgentSetup::Callback_AgentSetupSession_refreshPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::Context& __ctx, const ::AgentSetup::Callback_AgentSetupSession_refreshPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(&__ctx, __del, __cookie);
    }

    void end_refresh(const ::Ice::AsyncResultPtr&);
    
private:

    void refresh(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void startSetup(const ::std::string& flagJson)
    {
        startSetup(flagJson, 0);
    }
    void startSetup(const ::std::string& flagJson, const ::Ice::Context& __ctx)
    {
        startSetup(flagJson, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_startSetup(const ::std::string& flagJson, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_startSetup(flagJson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_startSetup(const ::std::string& flagJson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_startSetup(flagJson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_startSetup(const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_startSetup(flagJson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_startSetup(const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_startSetup(flagJson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_startSetup(const ::std::string& flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::AgentSetup::AgentSetupSessionPrx __proxy = ::AgentSetup::AgentSetupSessionPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_startSetup(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_startSetup(flagJson, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_startSetup(const ::std::string& flagJson)
    {
        return begin_startSetup(flagJson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_startSetup(const ::std::string& flagJson, const ::Ice::Context& __ctx)
    {
        return begin_startSetup(flagJson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_startSetup(const ::std::string& flagJson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startSetup(flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_startSetup(const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startSetup(flagJson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_startSetup(const ::std::string& flagJson, const ::AgentSetup::Callback_AgentSetupSession_startSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startSetup(flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_startSetup(const ::std::string& flagJson, const ::Ice::Context& __ctx, const ::AgentSetup::Callback_AgentSetupSession_startSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startSetup(flagJson, &__ctx, __del, __cookie);
    }

    void end_startSetup(const ::Ice::AsyncResultPtr&);
    
private:

    void startSetup(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_startSetup(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_secure(bool __secure) const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_twoway() const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_oneway() const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_batchOneway() const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_datagram() const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_batchDatagram() const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_compress(bool __compress) const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_timeout(int __timeout) const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSession> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<AgentSetupSession*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class AgentSetupSessionFactory : virtual public ::IceProxy::Ice::Object
{
public:

    ::AgentSetup::AgentSetupSessionPrx create(const ::std::string& info)
    {
        return create(info, 0);
    }
    ::AgentSetup::AgentSetupSessionPrx create(const ::std::string& info, const ::Ice::Context& __ctx)
    {
        return create(info, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_create(const ::std::string& info, const ::IceInternal::Function<void (const ::AgentSetup::AgentSetupSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_create(info, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_create(const ::std::string& info, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_create(info, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_create(const ::std::string& info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::AgentSetup::AgentSetupSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_create(info, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_create(const ::std::string& info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_create(info, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_create(const ::std::string& info, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::AgentSetup::AgentSetupSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::AgentSetup::AgentSetupSessionPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::AgentSetup::AgentSetupSessionFactoryPrx __proxy = ::AgentSetup::AgentSetupSessionFactoryPrx::uncheckedCast(__result->getProxy());
                ::AgentSetup::AgentSetupSessionPrx __ret;
                try
                {
                    __ret = __proxy->end_create(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::AgentSetup::AgentSetupSessionPrx&)> _response;
        };
        return begin_create(info, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_create(const ::std::string& info)
    {
        return begin_create(info, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& info, const ::Ice::Context& __ctx)
    {
        return begin_create(info, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& info, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& info, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(info, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& info, const ::AgentSetup::Callback_AgentSetupSessionFactory_createPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& info, const ::Ice::Context& __ctx, const ::AgentSetup::Callback_AgentSetupSessionFactory_createPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(info, &__ctx, __del, __cookie);
    }

    ::AgentSetup::AgentSetupSessionPrx end_create(const ::Ice::AsyncResultPtr&);
    
private:

    ::AgentSetup::AgentSetupSessionPrx create(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_create(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_secure(bool __secure) const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_twoway() const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_oneway() const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_batchOneway() const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_datagram() const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_batchDatagram() const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_compress(bool __compress) const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_timeout(int __timeout) const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AgentSetupSessionFactory> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<AgentSetupSessionFactory*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace AgentSetup
{

class AgentSetupReceiver : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::std::string queryRunnerAbsPath(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string searchBootFileAbsPath(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string prepareAgentInfo(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string getFileInfo(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void generateKeyInfos(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string open(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::ByteSeq pread(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void pwrite(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void close(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void extractFile(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int executeCommand(const ::std::string&, const ::std::string&, ::Ice::StringSeq&, ::Ice::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reportStatus(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void exit(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class AgentSetupSession : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::std::string queryName(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void initiateReceiver(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void refresh(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void startSetup(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class AgentSetupSessionFactory : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::AgentSetup::AgentSetupSessionPrx create(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace AgentSetup
{

class AgentSetupReceiver : virtual public ::IceDelegate::AgentSetup::AgentSetupReceiver,
                           virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::std::string queryRunnerAbsPath(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string searchBootFileAbsPath(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string prepareAgentInfo(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getFileInfo(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void generateKeyInfos(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string open(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::ByteSeq pread(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void pwrite(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void close(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void extractFile(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int executeCommand(const ::std::string&, const ::std::string&, ::Ice::StringSeq&, ::Ice::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reportStatus(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void exit(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class AgentSetupSession : virtual public ::IceDelegate::AgentSetup::AgentSetupSession,
                          virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::std::string queryName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void initiateReceiver(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void refresh(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void startSetup(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class AgentSetupSessionFactory : virtual public ::IceDelegate::AgentSetup::AgentSetupSessionFactory,
                                 virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::AgentSetup::AgentSetupSessionPrx create(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace AgentSetup
{

class AgentSetupReceiver : virtual public ::IceDelegate::AgentSetup::AgentSetupReceiver,
                           virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::std::string queryRunnerAbsPath(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string searchBootFileAbsPath(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string prepareAgentInfo(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getFileInfo(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void generateKeyInfos(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string open(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::ByteSeq pread(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void pwrite(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void close(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void extractFile(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int executeCommand(const ::std::string&, const ::std::string&, ::Ice::StringSeq&, ::Ice::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reportStatus(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void exit(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class AgentSetupSession : virtual public ::IceDelegate::AgentSetup::AgentSetupSession,
                          virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::std::string queryName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void initiateReceiver(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void refresh(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void startSetup(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class AgentSetupSessionFactory : virtual public ::IceDelegate::AgentSetup::AgentSetupSessionFactory,
                                 virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::AgentSetup::AgentSetupSessionPrx create(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace AgentSetup
{

class AgentSetupReceiver : virtual public ::Ice::Object
{
public:

    typedef AgentSetupReceiverPrx ProxyType;
    typedef AgentSetupReceiverPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::std::string queryRunnerAbsPath(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___queryRunnerAbsPath(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string searchBootFileAbsPath(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___searchBootFileAbsPath(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string prepareAgentInfo(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___prepareAgentInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getFileInfo(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getFileInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void generateKeyInfos(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___generateKeyInfos(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string open(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___open(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::ByteSeq pread(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___pread(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void pwrite(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::ByteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___pwrite(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void close(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___close(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void extractFile(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___extractFile(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int executeCommand(const ::std::string&, const ::std::string&, ::Ice::StringSeq&, ::Ice::StringSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___executeCommand(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reportStatus(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reportStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void exit(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___exit(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const AgentSetupReceiver& l, const AgentSetupReceiver& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const AgentSetupReceiver& l, const AgentSetupReceiver& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class AgentSetupSession : virtual public ::Ice::Object
{
public:

    typedef AgentSetupSessionPrx ProxyType;
    typedef AgentSetupSessionPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::std::string queryName(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___queryName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void destroy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___destroy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void initiateReceiver(const ::Ice::Identity&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___initiateReceiver(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void refresh(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___refresh(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void startSetup(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___startSetup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const AgentSetupSession& l, const AgentSetupSession& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const AgentSetupSession& l, const AgentSetupSession& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class AgentSetupSessionFactory : virtual public ::Ice::Object
{
public:

    typedef AgentSetupSessionFactoryPrx ProxyType;
    typedef AgentSetupSessionFactoryPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::AgentSetup::AgentSetupSessionPrx create(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___create(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const AgentSetupSessionFactory& l, const AgentSetupSessionFactory& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const AgentSetupSessionFactory& l, const AgentSetupSessionFactory& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace AgentSetup
{

template<class T>
class CallbackNC_AgentSetupReceiver_queryRunnerAbsPath : public Callback_AgentSetupReceiver_queryRunnerAbsPath_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_AgentSetupReceiver_queryRunnerAbsPath(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_queryRunnerAbsPath(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AgentSetupReceiver_queryRunnerAbsPathPtr
newCallback_AgentSetupReceiver_queryRunnerAbsPath(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_queryRunnerAbsPath<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_queryRunnerAbsPathPtr
newCallback_AgentSetupReceiver_queryRunnerAbsPath(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_queryRunnerAbsPath<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentSetupReceiver_queryRunnerAbsPath : public Callback_AgentSetupReceiver_queryRunnerAbsPath_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_AgentSetupReceiver_queryRunnerAbsPath(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_queryRunnerAbsPath(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AgentSetupReceiver_queryRunnerAbsPathPtr
newCallback_AgentSetupReceiver_queryRunnerAbsPath(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_queryRunnerAbsPath<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_queryRunnerAbsPathPtr
newCallback_AgentSetupReceiver_queryRunnerAbsPath(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_queryRunnerAbsPath<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentSetupReceiver_searchBootFileAbsPath : public Callback_AgentSetupReceiver_searchBootFileAbsPath_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_AgentSetupReceiver_searchBootFileAbsPath(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_searchBootFileAbsPath(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AgentSetupReceiver_searchBootFileAbsPathPtr
newCallback_AgentSetupReceiver_searchBootFileAbsPath(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_searchBootFileAbsPath<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_searchBootFileAbsPathPtr
newCallback_AgentSetupReceiver_searchBootFileAbsPath(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_searchBootFileAbsPath<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentSetupReceiver_searchBootFileAbsPath : public Callback_AgentSetupReceiver_searchBootFileAbsPath_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_AgentSetupReceiver_searchBootFileAbsPath(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_searchBootFileAbsPath(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AgentSetupReceiver_searchBootFileAbsPathPtr
newCallback_AgentSetupReceiver_searchBootFileAbsPath(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_searchBootFileAbsPath<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_searchBootFileAbsPathPtr
newCallback_AgentSetupReceiver_searchBootFileAbsPath(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_searchBootFileAbsPath<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentSetupReceiver_prepareAgentInfo : public Callback_AgentSetupReceiver_prepareAgentInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_AgentSetupReceiver_prepareAgentInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_prepareAgentInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AgentSetupReceiver_prepareAgentInfoPtr
newCallback_AgentSetupReceiver_prepareAgentInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_prepareAgentInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_prepareAgentInfoPtr
newCallback_AgentSetupReceiver_prepareAgentInfo(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_prepareAgentInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentSetupReceiver_prepareAgentInfo : public Callback_AgentSetupReceiver_prepareAgentInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_AgentSetupReceiver_prepareAgentInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_prepareAgentInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AgentSetupReceiver_prepareAgentInfoPtr
newCallback_AgentSetupReceiver_prepareAgentInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_prepareAgentInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_prepareAgentInfoPtr
newCallback_AgentSetupReceiver_prepareAgentInfo(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_prepareAgentInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentSetupReceiver_getFileInfo : public Callback_AgentSetupReceiver_getFileInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_AgentSetupReceiver_getFileInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getFileInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AgentSetupReceiver_getFileInfoPtr
newCallback_AgentSetupReceiver_getFileInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_getFileInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_getFileInfoPtr
newCallback_AgentSetupReceiver_getFileInfo(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_getFileInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentSetupReceiver_getFileInfo : public Callback_AgentSetupReceiver_getFileInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_AgentSetupReceiver_getFileInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getFileInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AgentSetupReceiver_getFileInfoPtr
newCallback_AgentSetupReceiver_getFileInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_getFileInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_getFileInfoPtr
newCallback_AgentSetupReceiver_getFileInfo(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_getFileInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentSetupReceiver_generateKeyInfos : public Callback_AgentSetupReceiver_generateKeyInfos_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AgentSetupReceiver_generateKeyInfos(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_generateKeyInfos(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_AgentSetupReceiver_generateKeyInfosPtr
newCallback_AgentSetupReceiver_generateKeyInfos(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_generateKeyInfos<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_generateKeyInfosPtr
newCallback_AgentSetupReceiver_generateKeyInfos(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_generateKeyInfos<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_generateKeyInfosPtr
newCallback_AgentSetupReceiver_generateKeyInfos(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_generateKeyInfos<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_generateKeyInfosPtr
newCallback_AgentSetupReceiver_generateKeyInfos(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_generateKeyInfos<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentSetupReceiver_generateKeyInfos : public Callback_AgentSetupReceiver_generateKeyInfos_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AgentSetupReceiver_generateKeyInfos(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_generateKeyInfos(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AgentSetupReceiver_generateKeyInfosPtr
newCallback_AgentSetupReceiver_generateKeyInfos(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_generateKeyInfos<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_generateKeyInfosPtr
newCallback_AgentSetupReceiver_generateKeyInfos(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_generateKeyInfos<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_generateKeyInfosPtr
newCallback_AgentSetupReceiver_generateKeyInfos(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_generateKeyInfos<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_generateKeyInfosPtr
newCallback_AgentSetupReceiver_generateKeyInfos(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_generateKeyInfos<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AgentSetupReceiver_open : public Callback_AgentSetupReceiver_open_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_AgentSetupReceiver_open(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_open(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AgentSetupReceiver_openPtr
newCallback_AgentSetupReceiver_open(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_open<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_openPtr
newCallback_AgentSetupReceiver_open(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_open<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentSetupReceiver_open : public Callback_AgentSetupReceiver_open_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_AgentSetupReceiver_open(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_open(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AgentSetupReceiver_openPtr
newCallback_AgentSetupReceiver_open(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_open<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_openPtr
newCallback_AgentSetupReceiver_open(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_open<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentSetupReceiver_pread : public Callback_AgentSetupReceiver_pread_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Ice::ByteSeq&);

    CallbackNC_AgentSetupReceiver_pread(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_pread(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AgentSetupReceiver_preadPtr
newCallback_AgentSetupReceiver_pread(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_pread<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_preadPtr
newCallback_AgentSetupReceiver_pread(T* instance, void (T::*cb)(const ::Ice::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_pread<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentSetupReceiver_pread : public Callback_AgentSetupReceiver_pread_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Ice::ByteSeq&, const CT&);

    Callback_AgentSetupReceiver_pread(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_pread(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AgentSetupReceiver_preadPtr
newCallback_AgentSetupReceiver_pread(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_pread<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_preadPtr
newCallback_AgentSetupReceiver_pread(T* instance, void (T::*cb)(const ::Ice::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_pread<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentSetupReceiver_pwrite : public Callback_AgentSetupReceiver_pwrite_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AgentSetupReceiver_pwrite(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_pwrite(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_AgentSetupReceiver_pwritePtr
newCallback_AgentSetupReceiver_pwrite(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_pwrite<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_pwritePtr
newCallback_AgentSetupReceiver_pwrite(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_pwrite<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_pwritePtr
newCallback_AgentSetupReceiver_pwrite(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_pwrite<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_pwritePtr
newCallback_AgentSetupReceiver_pwrite(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_pwrite<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentSetupReceiver_pwrite : public Callback_AgentSetupReceiver_pwrite_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AgentSetupReceiver_pwrite(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_pwrite(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AgentSetupReceiver_pwritePtr
newCallback_AgentSetupReceiver_pwrite(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_pwrite<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_pwritePtr
newCallback_AgentSetupReceiver_pwrite(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_pwrite<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_pwritePtr
newCallback_AgentSetupReceiver_pwrite(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_pwrite<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_pwritePtr
newCallback_AgentSetupReceiver_pwrite(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_pwrite<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AgentSetupReceiver_close : public Callback_AgentSetupReceiver_close_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AgentSetupReceiver_close(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_close(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_AgentSetupReceiver_closePtr
newCallback_AgentSetupReceiver_close(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_close<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_closePtr
newCallback_AgentSetupReceiver_close(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_close<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_closePtr
newCallback_AgentSetupReceiver_close(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_close<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_closePtr
newCallback_AgentSetupReceiver_close(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_close<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentSetupReceiver_close : public Callback_AgentSetupReceiver_close_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AgentSetupReceiver_close(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_close(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AgentSetupReceiver_closePtr
newCallback_AgentSetupReceiver_close(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_close<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_closePtr
newCallback_AgentSetupReceiver_close(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_close<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_closePtr
newCallback_AgentSetupReceiver_close(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_close<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_closePtr
newCallback_AgentSetupReceiver_close(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_close<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AgentSetupReceiver_extractFile : public Callback_AgentSetupReceiver_extractFile_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AgentSetupReceiver_extractFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_extractFile(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_AgentSetupReceiver_extractFilePtr
newCallback_AgentSetupReceiver_extractFile(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_extractFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_extractFilePtr
newCallback_AgentSetupReceiver_extractFile(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_extractFile<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_extractFilePtr
newCallback_AgentSetupReceiver_extractFile(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_extractFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_extractFilePtr
newCallback_AgentSetupReceiver_extractFile(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_extractFile<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentSetupReceiver_extractFile : public Callback_AgentSetupReceiver_extractFile_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AgentSetupReceiver_extractFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_extractFile(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AgentSetupReceiver_extractFilePtr
newCallback_AgentSetupReceiver_extractFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_extractFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_extractFilePtr
newCallback_AgentSetupReceiver_extractFile(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_extractFile<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_extractFilePtr
newCallback_AgentSetupReceiver_extractFile(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_extractFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_extractFilePtr
newCallback_AgentSetupReceiver_extractFile(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_extractFile<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AgentSetupReceiver_executeCommand : public Callback_AgentSetupReceiver_executeCommand_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&);

    CallbackNC_AgentSetupReceiver_executeCommand(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::StringSeq stdout;
        ::Ice::StringSeq stderr;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_executeCommand(stdout, stderr, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, stdout, stderr);
        }
    }

    Response response;
};

template<class T> Callback_AgentSetupReceiver_executeCommandPtr
newCallback_AgentSetupReceiver_executeCommand(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_executeCommand<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_executeCommandPtr
newCallback_AgentSetupReceiver_executeCommand(T* instance, void (T::*cb)(::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_executeCommand<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentSetupReceiver_executeCommand : public Callback_AgentSetupReceiver_executeCommand_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&, const CT&);

    Callback_AgentSetupReceiver_executeCommand(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::StringSeq stdout;
        ::Ice::StringSeq stderr;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_executeCommand(stdout, stderr, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, stdout, stderr, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AgentSetupReceiver_executeCommandPtr
newCallback_AgentSetupReceiver_executeCommand(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_executeCommand<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_executeCommandPtr
newCallback_AgentSetupReceiver_executeCommand(T* instance, void (T::*cb)(::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_executeCommand<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentSetupReceiver_reportStatus : public Callback_AgentSetupReceiver_reportStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AgentSetupReceiver_reportStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_reportStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_AgentSetupReceiver_reportStatusPtr
newCallback_AgentSetupReceiver_reportStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_reportStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_reportStatusPtr
newCallback_AgentSetupReceiver_reportStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_reportStatus<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_reportStatusPtr
newCallback_AgentSetupReceiver_reportStatus(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_reportStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_reportStatusPtr
newCallback_AgentSetupReceiver_reportStatus(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_reportStatus<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentSetupReceiver_reportStatus : public Callback_AgentSetupReceiver_reportStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AgentSetupReceiver_reportStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_reportStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AgentSetupReceiver_reportStatusPtr
newCallback_AgentSetupReceiver_reportStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_reportStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_reportStatusPtr
newCallback_AgentSetupReceiver_reportStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_reportStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_reportStatusPtr
newCallback_AgentSetupReceiver_reportStatus(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_reportStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_reportStatusPtr
newCallback_AgentSetupReceiver_reportStatus(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_reportStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AgentSetupReceiver_exit : public Callback_AgentSetupReceiver_exit_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AgentSetupReceiver_exit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AgentSetupReceiver_exitPtr
newCallback_AgentSetupReceiver_exit(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_exit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_exitPtr
newCallback_AgentSetupReceiver_exit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_exit<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_exitPtr
newCallback_AgentSetupReceiver_exit(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_exit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupReceiver_exitPtr
newCallback_AgentSetupReceiver_exit(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupReceiver_exit<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentSetupReceiver_exit : public Callback_AgentSetupReceiver_exit_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AgentSetupReceiver_exit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AgentSetupReceiver_exitPtr
newCallback_AgentSetupReceiver_exit(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_exit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_exitPtr
newCallback_AgentSetupReceiver_exit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_exit<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_exitPtr
newCallback_AgentSetupReceiver_exit(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_exit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupReceiver_exitPtr
newCallback_AgentSetupReceiver_exit(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupReceiver_exit<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AgentSetupSession_queryName : public Callback_AgentSetupSession_queryName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_AgentSetupSession_queryName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupSessionPrx __proxy = ::AgentSetup::AgentSetupSessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_queryName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AgentSetupSession_queryNamePtr
newCallback_AgentSetupSession_queryName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSession_queryName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupSession_queryNamePtr
newCallback_AgentSetupSession_queryName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSession_queryName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentSetupSession_queryName : public Callback_AgentSetupSession_queryName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_AgentSetupSession_queryName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupSessionPrx __proxy = ::AgentSetup::AgentSetupSessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_queryName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AgentSetupSession_queryNamePtr
newCallback_AgentSetupSession_queryName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSession_queryName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupSession_queryNamePtr
newCallback_AgentSetupSession_queryName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSession_queryName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentSetupSession_destroy : public Callback_AgentSetupSession_destroy_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AgentSetupSession_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AgentSetupSession_destroyPtr
newCallback_AgentSetupSession_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSession_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupSession_destroyPtr
newCallback_AgentSetupSession_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSession_destroy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AgentSetupSession_destroyPtr
newCallback_AgentSetupSession_destroy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSession_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupSession_destroyPtr
newCallback_AgentSetupSession_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSession_destroy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentSetupSession_destroy : public Callback_AgentSetupSession_destroy_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AgentSetupSession_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AgentSetupSession_destroyPtr
newCallback_AgentSetupSession_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSession_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupSession_destroyPtr
newCallback_AgentSetupSession_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSession_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupSession_destroyPtr
newCallback_AgentSetupSession_destroy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSession_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupSession_destroyPtr
newCallback_AgentSetupSession_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSession_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AgentSetupSession_initiateReceiver : public Callback_AgentSetupSession_initiateReceiver_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AgentSetupSession_initiateReceiver(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupSessionPrx __proxy = ::AgentSetup::AgentSetupSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_initiateReceiver(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_AgentSetupSession_initiateReceiverPtr
newCallback_AgentSetupSession_initiateReceiver(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSession_initiateReceiver<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupSession_initiateReceiverPtr
newCallback_AgentSetupSession_initiateReceiver(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSession_initiateReceiver<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AgentSetupSession_initiateReceiverPtr
newCallback_AgentSetupSession_initiateReceiver(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSession_initiateReceiver<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupSession_initiateReceiverPtr
newCallback_AgentSetupSession_initiateReceiver(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSession_initiateReceiver<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentSetupSession_initiateReceiver : public Callback_AgentSetupSession_initiateReceiver_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AgentSetupSession_initiateReceiver(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupSessionPrx __proxy = ::AgentSetup::AgentSetupSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_initiateReceiver(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AgentSetupSession_initiateReceiverPtr
newCallback_AgentSetupSession_initiateReceiver(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSession_initiateReceiver<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupSession_initiateReceiverPtr
newCallback_AgentSetupSession_initiateReceiver(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSession_initiateReceiver<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupSession_initiateReceiverPtr
newCallback_AgentSetupSession_initiateReceiver(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSession_initiateReceiver<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupSession_initiateReceiverPtr
newCallback_AgentSetupSession_initiateReceiver(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSession_initiateReceiver<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AgentSetupSession_refresh : public Callback_AgentSetupSession_refresh_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AgentSetupSession_refresh(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AgentSetupSession_refreshPtr
newCallback_AgentSetupSession_refresh(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSession_refresh<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupSession_refreshPtr
newCallback_AgentSetupSession_refresh(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSession_refresh<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AgentSetupSession_refreshPtr
newCallback_AgentSetupSession_refresh(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSession_refresh<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupSession_refreshPtr
newCallback_AgentSetupSession_refresh(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSession_refresh<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentSetupSession_refresh : public Callback_AgentSetupSession_refresh_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AgentSetupSession_refresh(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AgentSetupSession_refreshPtr
newCallback_AgentSetupSession_refresh(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSession_refresh<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupSession_refreshPtr
newCallback_AgentSetupSession_refresh(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSession_refresh<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupSession_refreshPtr
newCallback_AgentSetupSession_refresh(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSession_refresh<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupSession_refreshPtr
newCallback_AgentSetupSession_refresh(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSession_refresh<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AgentSetupSession_startSetup : public Callback_AgentSetupSession_startSetup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AgentSetupSession_startSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupSessionPrx __proxy = ::AgentSetup::AgentSetupSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_startSetup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_AgentSetupSession_startSetupPtr
newCallback_AgentSetupSession_startSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSession_startSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupSession_startSetupPtr
newCallback_AgentSetupSession_startSetup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSession_startSetup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AgentSetupSession_startSetupPtr
newCallback_AgentSetupSession_startSetup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSession_startSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupSession_startSetupPtr
newCallback_AgentSetupSession_startSetup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSession_startSetup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentSetupSession_startSetup : public Callback_AgentSetupSession_startSetup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AgentSetupSession_startSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupSessionPrx __proxy = ::AgentSetup::AgentSetupSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_startSetup(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AgentSetupSession_startSetupPtr
newCallback_AgentSetupSession_startSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSession_startSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupSession_startSetupPtr
newCallback_AgentSetupSession_startSetup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSession_startSetup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupSession_startSetupPtr
newCallback_AgentSetupSession_startSetup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSession_startSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupSession_startSetupPtr
newCallback_AgentSetupSession_startSetup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSession_startSetup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AgentSetupSessionFactory_create : public Callback_AgentSetupSessionFactory_create_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::AgentSetup::AgentSetupSessionPrx&);

    CallbackNC_AgentSetupSessionFactory_create(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupSessionFactoryPrx __proxy = ::AgentSetup::AgentSetupSessionFactoryPrx::uncheckedCast(__result->getProxy());
        ::AgentSetup::AgentSetupSessionPrx __ret;
        try
        {
            __ret = __proxy->end_create(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_AgentSetupSessionFactory_createPtr
newCallback_AgentSetupSessionFactory_create(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::AgentSetup::AgentSetupSessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSessionFactory_create<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentSetupSessionFactory_createPtr
newCallback_AgentSetupSessionFactory_create(T* instance, void (T::*cb)(const ::AgentSetup::AgentSetupSessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentSetupSessionFactory_create<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentSetupSessionFactory_create : public Callback_AgentSetupSessionFactory_create_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::AgentSetup::AgentSetupSessionPrx&, const CT&);

    Callback_AgentSetupSessionFactory_create(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::AgentSetup::AgentSetupSessionFactoryPrx __proxy = ::AgentSetup::AgentSetupSessionFactoryPrx::uncheckedCast(__result->getProxy());
        ::AgentSetup::AgentSetupSessionPrx __ret;
        try
        {
            __ret = __proxy->end_create(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AgentSetupSessionFactory_createPtr
newCallback_AgentSetupSessionFactory_create(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::AgentSetup::AgentSetupSessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSessionFactory_create<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentSetupSessionFactory_createPtr
newCallback_AgentSetupSessionFactory_create(T* instance, void (T::*cb)(const ::AgentSetup::AgentSetupSessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentSetupSessionFactory_create<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

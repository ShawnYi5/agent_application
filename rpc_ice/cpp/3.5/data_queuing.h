// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `data_queuing.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____cpp_3_5_data_queuing_h__
#define ____cpp_3_5_data_queuing_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/Identity.h>
#include <utils.h>
#include <img.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace DataQueuingIce
{

class CreatorReceiver;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::DataQueuingIce::CreatorReceiver>&);
::IceProxy::Ice::Object* upCast(::IceProxy::DataQueuingIce::CreatorReceiver*);

class DataCreator;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::DataQueuingIce::DataCreator>&);
::IceProxy::Ice::Object* upCast(::IceProxy::DataQueuingIce::DataCreator*);

class DataGuest;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::DataQueuingIce::DataGuest>&);
::IceProxy::Ice::Object* upCast(::IceProxy::DataQueuingIce::DataGuest*);

}

}

namespace DataQueuingIce
{

class CreatorReceiver;
bool operator==(const CreatorReceiver&, const CreatorReceiver&);
bool operator<(const CreatorReceiver&, const CreatorReceiver&);
::Ice::Object* upCast(::DataQueuingIce::CreatorReceiver*);
typedef ::IceInternal::Handle< ::DataQueuingIce::CreatorReceiver> CreatorReceiverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::DataQueuingIce::CreatorReceiver> CreatorReceiverPrx;
void __patch(CreatorReceiverPtr&, const ::Ice::ObjectPtr&);

class DataCreator;
bool operator==(const DataCreator&, const DataCreator&);
bool operator<(const DataCreator&, const DataCreator&);
::Ice::Object* upCast(::DataQueuingIce::DataCreator*);
typedef ::IceInternal::Handle< ::DataQueuingIce::DataCreator> DataCreatorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::DataQueuingIce::DataCreator> DataCreatorPrx;
void __patch(DataCreatorPtr&, const ::Ice::ObjectPtr&);

class DataGuest;
bool operator==(const DataGuest&, const DataGuest&);
bool operator<(const DataGuest&, const DataGuest&);
::Ice::Object* upCast(::DataQueuingIce::DataGuest*);
typedef ::IceInternal::Handle< ::DataQueuingIce::DataGuest> DataGuestPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::DataQueuingIce::DataGuest> DataGuestPrx;
void __patch(DataGuestPtr&, const ::Ice::ObjectPtr&);

}

namespace DataQueuingIce
{

typedef ::std::vector< ::Ice::Byte> BinaryStream;

}

namespace DataQueuingIce
{

class Callback_CreatorReceiver_WorkCompleted_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CreatorReceiver_WorkCompleted_Base> Callback_CreatorReceiver_WorkCompletedPtr;

class Callback_DataCreator_InitiateCreatorReceiver_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataCreator_InitiateCreatorReceiver_Base> Callback_DataCreator_InitiateCreatorReceiverPtr;

class Callback_DataCreator_StartCDPWork_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataCreator_StartCDPWork_Base> Callback_DataCreator_StartCDPWorkPtr;

class Callback_DataCreator_StartQemuWork_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataCreator_StartQemuWork_Base> Callback_DataCreator_StartQemuWorkPtr;

class Callback_DataCreator_StopWork_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataCreator_StopWork_Base> Callback_DataCreator_StopWorkPtr;

class Callback_DataCreator_SetRestoreBitmap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataCreator_SetRestoreBitmap_Base> Callback_DataCreator_SetRestoreBitmapPtr;

class Callback_DataCreator_EndTask_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataCreator_EndTask_Base> Callback_DataCreator_EndTaskPtr;

class Callback_DataCreator_CloseTask_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataCreator_CloseTask_Base> Callback_DataCreator_CloseTaskPtr;

class Callback_DataGuest_InitGuest_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataGuest_InitGuest_Base> Callback_DataGuest_InitGuestPtr;

class Callback_DataGuest_GetData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataGuest_GetData_Base> Callback_DataGuest_GetDataPtr;

class Callback_DataGuest_DataCompleted_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataGuest_DataCompleted_Base> Callback_DataGuest_DataCompletedPtr;

class Callback_DataGuest_GetBitmapInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataGuest_GetBitmapInfo_Base> Callback_DataGuest_GetBitmapInfoPtr;

class Callback_DataGuest_GetBitmapData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DataGuest_GetBitmapData_Base> Callback_DataGuest_GetBitmapDataPtr;

}

namespace IceProxy
{

namespace DataQueuingIce
{

class CreatorReceiver : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int WorkCompleted(const ::std::string& task)
    {
        return WorkCompleted(task, 0);
    }
    ::Ice::Int WorkCompleted(const ::std::string& task, const ::Ice::Context& __ctx)
    {
        return WorkCompleted(task, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_WorkCompleted(const ::std::string& task, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_WorkCompleted(task, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_WorkCompleted(const ::std::string& task, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_WorkCompleted(task, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_WorkCompleted(const ::std::string& task, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_WorkCompleted(task, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_WorkCompleted(const ::std::string& task, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_WorkCompleted(task, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_WorkCompleted(const ::std::string& task, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DataQueuingIce::CreatorReceiverPrx __proxy = ::DataQueuingIce::CreatorReceiverPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_WorkCompleted(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_WorkCompleted(task, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_WorkCompleted(const ::std::string& task)
    {
        return begin_WorkCompleted(task, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_WorkCompleted(const ::std::string& task, const ::Ice::Context& __ctx)
    {
        return begin_WorkCompleted(task, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_WorkCompleted(const ::std::string& task, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_WorkCompleted(task, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_WorkCompleted(const ::std::string& task, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_WorkCompleted(task, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_WorkCompleted(const ::std::string& task, const ::DataQueuingIce::Callback_CreatorReceiver_WorkCompletedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_WorkCompleted(task, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_WorkCompleted(const ::std::string& task, const ::Ice::Context& __ctx, const ::DataQueuingIce::Callback_CreatorReceiver_WorkCompletedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_WorkCompleted(task, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_WorkCompleted(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int WorkCompleted(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_WorkCompleted(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_secure(bool __secure) const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_twoway() const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_oneway() const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_batchOneway() const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_datagram() const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_batchDatagram() const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_compress(bool __compress) const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_timeout(int __timeout) const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CreatorReceiver> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<CreatorReceiver*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class DataCreator : virtual public ::IceProxy::Ice::Object
{
public:

    void InitiateCreatorReceiver(const ::Ice::Identity& ident)
    {
        InitiateCreatorReceiver(ident, 0);
    }
    void InitiateCreatorReceiver(const ::Ice::Identity& ident, const ::Ice::Context& __ctx)
    {
        InitiateCreatorReceiver(ident, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_InitiateCreatorReceiver(const ::Ice::Identity& ident, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_InitiateCreatorReceiver(ident, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_InitiateCreatorReceiver(const ::Ice::Identity& ident, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_InitiateCreatorReceiver(ident, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_InitiateCreatorReceiver(const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_InitiateCreatorReceiver(ident, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_InitiateCreatorReceiver(const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_InitiateCreatorReceiver(ident, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_InitiateCreatorReceiver(const ::Ice::Identity& ident, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_InitiateCreatorReceiver(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_InitiateCreatorReceiver(ident, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_InitiateCreatorReceiver(const ::Ice::Identity& ident)
    {
        return begin_InitiateCreatorReceiver(ident, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_InitiateCreatorReceiver(const ::Ice::Identity& ident, const ::Ice::Context& __ctx)
    {
        return begin_InitiateCreatorReceiver(ident, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_InitiateCreatorReceiver(const ::Ice::Identity& ident, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_InitiateCreatorReceiver(ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_InitiateCreatorReceiver(const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_InitiateCreatorReceiver(ident, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_InitiateCreatorReceiver(const ::Ice::Identity& ident, const ::DataQueuingIce::Callback_DataCreator_InitiateCreatorReceiverPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_InitiateCreatorReceiver(ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_InitiateCreatorReceiver(const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::DataQueuingIce::Callback_DataCreator_InitiateCreatorReceiverPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_InitiateCreatorReceiver(ident, &__ctx, __del, __cookie);
    }

    void end_InitiateCreatorReceiver(const ::Ice::AsyncResultPtr&);
    
private:

    void InitiateCreatorReceiver(const ::Ice::Identity&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_InitiateCreatorReceiver(const ::Ice::Identity&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int StartCDPWork(const ::std::string& task, const ::std::string& cdpFileName)
    {
        return StartCDPWork(task, cdpFileName, 0);
    }
    ::Ice::Int StartCDPWork(const ::std::string& task, const ::std::string& cdpFileName, const ::Ice::Context& __ctx)
    {
        return StartCDPWork(task, cdpFileName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_StartCDPWork(const ::std::string& task, const ::std::string& cdpFileName, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StartCDPWork(task, cdpFileName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StartCDPWork(const ::std::string& task, const ::std::string& cdpFileName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StartCDPWork(task, cdpFileName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_StartCDPWork(const ::std::string& task, const ::std::string& cdpFileName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StartCDPWork(task, cdpFileName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StartCDPWork(const ::std::string& task, const ::std::string& cdpFileName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StartCDPWork(task, cdpFileName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_StartCDPWork(const ::std::string& task, const ::std::string& cdpFileName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_StartCDPWork(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_StartCDPWork(task, cdpFileName, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_StartCDPWork(const ::std::string& task, const ::std::string& cdpFileName)
    {
        return begin_StartCDPWork(task, cdpFileName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartCDPWork(const ::std::string& task, const ::std::string& cdpFileName, const ::Ice::Context& __ctx)
    {
        return begin_StartCDPWork(task, cdpFileName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartCDPWork(const ::std::string& task, const ::std::string& cdpFileName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartCDPWork(task, cdpFileName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartCDPWork(const ::std::string& task, const ::std::string& cdpFileName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartCDPWork(task, cdpFileName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartCDPWork(const ::std::string& task, const ::std::string& cdpFileName, const ::DataQueuingIce::Callback_DataCreator_StartCDPWorkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartCDPWork(task, cdpFileName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartCDPWork(const ::std::string& task, const ::std::string& cdpFileName, const ::Ice::Context& __ctx, const ::DataQueuingIce::Callback_DataCreator_StartCDPWorkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartCDPWork(task, cdpFileName, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_StartCDPWork(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int StartCDPWork(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_StartCDPWork(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int StartQemuWork(const ::std::string& task, const ::IMG::ImageSnapshotIdents& snapshot)
    {
        return StartQemuWork(task, snapshot, 0);
    }
    ::Ice::Int StartQemuWork(const ::std::string& task, const ::IMG::ImageSnapshotIdents& snapshot, const ::Ice::Context& __ctx)
    {
        return StartQemuWork(task, snapshot, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_StartQemuWork(const ::std::string& task, const ::IMG::ImageSnapshotIdents& snapshot, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StartQemuWork(task, snapshot, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StartQemuWork(const ::std::string& task, const ::IMG::ImageSnapshotIdents& snapshot, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StartQemuWork(task, snapshot, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_StartQemuWork(const ::std::string& task, const ::IMG::ImageSnapshotIdents& snapshot, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StartQemuWork(task, snapshot, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StartQemuWork(const ::std::string& task, const ::IMG::ImageSnapshotIdents& snapshot, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StartQemuWork(task, snapshot, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_StartQemuWork(const ::std::string& task, const ::IMG::ImageSnapshotIdents& snapshot, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_StartQemuWork(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_StartQemuWork(task, snapshot, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_StartQemuWork(const ::std::string& task, const ::IMG::ImageSnapshotIdents& snapshot)
    {
        return begin_StartQemuWork(task, snapshot, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartQemuWork(const ::std::string& task, const ::IMG::ImageSnapshotIdents& snapshot, const ::Ice::Context& __ctx)
    {
        return begin_StartQemuWork(task, snapshot, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartQemuWork(const ::std::string& task, const ::IMG::ImageSnapshotIdents& snapshot, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartQemuWork(task, snapshot, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartQemuWork(const ::std::string& task, const ::IMG::ImageSnapshotIdents& snapshot, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartQemuWork(task, snapshot, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartQemuWork(const ::std::string& task, const ::IMG::ImageSnapshotIdents& snapshot, const ::DataQueuingIce::Callback_DataCreator_StartQemuWorkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartQemuWork(task, snapshot, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartQemuWork(const ::std::string& task, const ::IMG::ImageSnapshotIdents& snapshot, const ::Ice::Context& __ctx, const ::DataQueuingIce::Callback_DataCreator_StartQemuWorkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartQemuWork(task, snapshot, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_StartQemuWork(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int StartQemuWork(const ::std::string&, const ::IMG::ImageSnapshotIdents&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_StartQemuWork(const ::std::string&, const ::IMG::ImageSnapshotIdents&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int StopWork(const ::std::string& task)
    {
        return StopWork(task, 0);
    }
    ::Ice::Int StopWork(const ::std::string& task, const ::Ice::Context& __ctx)
    {
        return StopWork(task, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_StopWork(const ::std::string& task, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StopWork(task, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StopWork(const ::std::string& task, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StopWork(task, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_StopWork(const ::std::string& task, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StopWork(task, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StopWork(const ::std::string& task, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StopWork(task, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_StopWork(const ::std::string& task, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_StopWork(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_StopWork(task, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_StopWork(const ::std::string& task)
    {
        return begin_StopWork(task, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StopWork(const ::std::string& task, const ::Ice::Context& __ctx)
    {
        return begin_StopWork(task, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StopWork(const ::std::string& task, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopWork(task, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopWork(const ::std::string& task, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopWork(task, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopWork(const ::std::string& task, const ::DataQueuingIce::Callback_DataCreator_StopWorkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopWork(task, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopWork(const ::std::string& task, const ::Ice::Context& __ctx, const ::DataQueuingIce::Callback_DataCreator_StopWorkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopWork(task, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_StopWork(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int StopWork(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_StopWork(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SetRestoreBitmap(const ::std::string& task, const ::std::string& token, const ::DataQueuingIce::BinaryStream& data)
    {
        return SetRestoreBitmap(task, token, data, 0);
    }
    ::Ice::Int SetRestoreBitmap(const ::std::string& task, const ::std::string& token, const ::DataQueuingIce::BinaryStream& data, const ::Ice::Context& __ctx)
    {
        return SetRestoreBitmap(task, token, data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetRestoreBitmap(const ::std::string& task, const ::std::string& token, const ::DataQueuingIce::BinaryStream& data, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetRestoreBitmap(task, token, data, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetRestoreBitmap(const ::std::string& task, const ::std::string& token, const ::DataQueuingIce::BinaryStream& data, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetRestoreBitmap(task, token, data, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetRestoreBitmap(const ::std::string& task, const ::std::string& token, const ::DataQueuingIce::BinaryStream& data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetRestoreBitmap(task, token, data, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetRestoreBitmap(const ::std::string& task, const ::std::string& token, const ::DataQueuingIce::BinaryStream& data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetRestoreBitmap(task, token, data, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetRestoreBitmap(const ::std::string& task, const ::std::string& token, const ::DataQueuingIce::BinaryStream& data, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SetRestoreBitmap(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_SetRestoreBitmap(task, token, data, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetRestoreBitmap(const ::std::string& task, const ::std::string& token, const ::DataQueuingIce::BinaryStream& data)
    {
        return begin_SetRestoreBitmap(task, token, data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetRestoreBitmap(const ::std::string& task, const ::std::string& token, const ::DataQueuingIce::BinaryStream& data, const ::Ice::Context& __ctx)
    {
        return begin_SetRestoreBitmap(task, token, data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetRestoreBitmap(const ::std::string& task, const ::std::string& token, const ::DataQueuingIce::BinaryStream& data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRestoreBitmap(task, token, data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetRestoreBitmap(const ::std::string& task, const ::std::string& token, const ::DataQueuingIce::BinaryStream& data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRestoreBitmap(task, token, data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetRestoreBitmap(const ::std::string& task, const ::std::string& token, const ::DataQueuingIce::BinaryStream& data, const ::DataQueuingIce::Callback_DataCreator_SetRestoreBitmapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRestoreBitmap(task, token, data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetRestoreBitmap(const ::std::string& task, const ::std::string& token, const ::DataQueuingIce::BinaryStream& data, const ::Ice::Context& __ctx, const ::DataQueuingIce::Callback_DataCreator_SetRestoreBitmapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRestoreBitmap(task, token, data, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetRestoreBitmap(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetRestoreBitmap(const ::std::string&, const ::std::string&, const ::DataQueuingIce::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetRestoreBitmap(const ::std::string&, const ::std::string&, const ::DataQueuingIce::BinaryStream&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int EndTask(const ::std::string& task)
    {
        return EndTask(task, 0);
    }
    ::Ice::Int EndTask(const ::std::string& task, const ::Ice::Context& __ctx)
    {
        return EndTask(task, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_EndTask(const ::std::string& task, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_EndTask(task, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_EndTask(const ::std::string& task, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_EndTask(task, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_EndTask(const ::std::string& task, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_EndTask(task, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_EndTask(const ::std::string& task, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_EndTask(task, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_EndTask(const ::std::string& task, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_EndTask(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_EndTask(task, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_EndTask(const ::std::string& task)
    {
        return begin_EndTask(task, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_EndTask(const ::std::string& task, const ::Ice::Context& __ctx)
    {
        return begin_EndTask(task, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_EndTask(const ::std::string& task, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EndTask(task, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_EndTask(const ::std::string& task, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EndTask(task, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_EndTask(const ::std::string& task, const ::DataQueuingIce::Callback_DataCreator_EndTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EndTask(task, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_EndTask(const ::std::string& task, const ::Ice::Context& __ctx, const ::DataQueuingIce::Callback_DataCreator_EndTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EndTask(task, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_EndTask(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int EndTask(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_EndTask(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int CloseTask(const ::std::string& task)
    {
        return CloseTask(task, 0);
    }
    ::Ice::Int CloseTask(const ::std::string& task, const ::Ice::Context& __ctx)
    {
        return CloseTask(task, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_CloseTask(const ::std::string& task, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_CloseTask(task, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_CloseTask(const ::std::string& task, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_CloseTask(task, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_CloseTask(const ::std::string& task, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_CloseTask(task, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_CloseTask(const ::std::string& task, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_CloseTask(task, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_CloseTask(const ::std::string& task, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_CloseTask(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_CloseTask(task, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_CloseTask(const ::std::string& task)
    {
        return begin_CloseTask(task, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CloseTask(const ::std::string& task, const ::Ice::Context& __ctx)
    {
        return begin_CloseTask(task, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CloseTask(const ::std::string& task, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CloseTask(task, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CloseTask(const ::std::string& task, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CloseTask(task, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CloseTask(const ::std::string& task, const ::DataQueuingIce::Callback_DataCreator_CloseTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CloseTask(task, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CloseTask(const ::std::string& task, const ::Ice::Context& __ctx, const ::DataQueuingIce::Callback_DataCreator_CloseTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CloseTask(task, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_CloseTask(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int CloseTask(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_CloseTask(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<DataCreator> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<DataCreator> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DataCreator> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<DataCreator> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DataCreator> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<DataCreator> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<DataCreator> ice_secure(bool __secure) const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<DataCreator> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<DataCreator> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<DataCreator> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<DataCreator> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<DataCreator> ice_twoway() const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<DataCreator> ice_oneway() const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<DataCreator> ice_batchOneway() const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<DataCreator> ice_datagram() const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<DataCreator> ice_batchDatagram() const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<DataCreator> ice_compress(bool __compress) const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<DataCreator> ice_timeout(int __timeout) const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DataCreator> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DataCreator> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<DataCreator*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class DataGuest : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int InitGuest(const ::std::string& task, ::Ice::Int QueueIdent)
    {
        return InitGuest(task, QueueIdent, 0);
    }
    ::Ice::Int InitGuest(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::Context& __ctx)
    {
        return InitGuest(task, QueueIdent, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_InitGuest(const ::std::string& task, ::Ice::Int QueueIdent, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_InitGuest(task, QueueIdent, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_InitGuest(const ::std::string& task, ::Ice::Int QueueIdent, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_InitGuest(task, QueueIdent, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_InitGuest(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_InitGuest(task, QueueIdent, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_InitGuest(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_InitGuest(task, QueueIdent, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_InitGuest(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_InitGuest(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_InitGuest(task, QueueIdent, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_InitGuest(const ::std::string& task, ::Ice::Int QueueIdent)
    {
        return begin_InitGuest(task, QueueIdent, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_InitGuest(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::Context& __ctx)
    {
        return begin_InitGuest(task, QueueIdent, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_InitGuest(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_InitGuest(task, QueueIdent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_InitGuest(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_InitGuest(task, QueueIdent, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_InitGuest(const ::std::string& task, ::Ice::Int QueueIdent, const ::DataQueuingIce::Callback_DataGuest_InitGuestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_InitGuest(task, QueueIdent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_InitGuest(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::Context& __ctx, const ::DataQueuingIce::Callback_DataGuest_InitGuestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_InitGuest(task, QueueIdent, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_InitGuest(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int InitGuest(const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_InitGuest(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetData(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long& DataIdent, ::std::string& token, ::Ice::Long& Lba, ::Ice::Int& secs, ::DataQueuingIce::BinaryStream& data, bool& isEnd)
    {
        return GetData(task, QueueIdent, DataIdent, token, Lba, secs, data, isEnd, 0);
    }
    ::Ice::Int GetData(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long& DataIdent, ::std::string& token, ::Ice::Long& Lba, ::Ice::Int& secs, ::DataQueuingIce::BinaryStream& data, bool& isEnd, const ::Ice::Context& __ctx)
    {
        return GetData(task, QueueIdent, DataIdent, token, Lba, secs, data, isEnd, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetData(const ::std::string& task, ::Ice::Int QueueIdent, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::DataQueuingIce::BinaryStream&, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetData(task, QueueIdent, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetData(const ::std::string& task, ::Ice::Int QueueIdent, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetData(task, QueueIdent, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetData(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::DataQueuingIce::BinaryStream&, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetData(task, QueueIdent, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetData(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetData(task, QueueIdent, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetData(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::DataQueuingIce::BinaryStream&, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, ::Ice::Long, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::DataQueuingIce::BinaryStream&, bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long DataIdent;
                ::std::string token;
                ::Ice::Long Lba;
                ::Ice::Int secs;
                ::DataQueuingIce::BinaryStream data;
                bool isEnd;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetData(DataIdent, token, Lba, secs, data, isEnd, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, DataIdent, token, Lba, secs, data, isEnd);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, ::Ice::Long, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::DataQueuingIce::BinaryStream&, bool)> _response;
        };
        return begin_GetData(task, QueueIdent, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetData(const ::std::string& task, ::Ice::Int QueueIdent)
    {
        return begin_GetData(task, QueueIdent, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetData(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::Context& __ctx)
    {
        return begin_GetData(task, QueueIdent, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetData(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetData(task, QueueIdent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetData(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetData(task, QueueIdent, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetData(const ::std::string& task, ::Ice::Int QueueIdent, const ::DataQueuingIce::Callback_DataGuest_GetDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetData(task, QueueIdent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetData(const ::std::string& task, ::Ice::Int QueueIdent, const ::Ice::Context& __ctx, const ::DataQueuingIce::Callback_DataGuest_GetDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetData(task, QueueIdent, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetData(::Ice::Long& DataIdent, ::std::string& token, ::Ice::Long& Lba, ::Ice::Int& secs, ::DataQueuingIce::BinaryStream& data, bool& isEnd, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetData(const ::std::string&, ::Ice::Int, ::Ice::Long&, ::std::string&, ::Ice::Long&, ::Ice::Int&, ::DataQueuingIce::BinaryStream&, bool&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetData(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int DataCompleted(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long DataIdent)
    {
        return DataCompleted(task, QueueIdent, DataIdent, 0);
    }
    ::Ice::Int DataCompleted(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long DataIdent, const ::Ice::Context& __ctx)
    {
        return DataCompleted(task, QueueIdent, DataIdent, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_DataCompleted(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long DataIdent, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_DataCompleted(task, QueueIdent, DataIdent, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_DataCompleted(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long DataIdent, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_DataCompleted(task, QueueIdent, DataIdent, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_DataCompleted(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long DataIdent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_DataCompleted(task, QueueIdent, DataIdent, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_DataCompleted(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long DataIdent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_DataCompleted(task, QueueIdent, DataIdent, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_DataCompleted(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long DataIdent, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_DataCompleted(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_DataCompleted(task, QueueIdent, DataIdent, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_DataCompleted(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long DataIdent)
    {
        return begin_DataCompleted(task, QueueIdent, DataIdent, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DataCompleted(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long DataIdent, const ::Ice::Context& __ctx)
    {
        return begin_DataCompleted(task, QueueIdent, DataIdent, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DataCompleted(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long DataIdent, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DataCompleted(task, QueueIdent, DataIdent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DataCompleted(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long DataIdent, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DataCompleted(task, QueueIdent, DataIdent, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DataCompleted(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long DataIdent, const ::DataQueuingIce::Callback_DataGuest_DataCompletedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DataCompleted(task, QueueIdent, DataIdent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DataCompleted(const ::std::string& task, ::Ice::Int QueueIdent, ::Ice::Long DataIdent, const ::Ice::Context& __ctx, const ::DataQueuingIce::Callback_DataGuest_DataCompletedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DataCompleted(task, QueueIdent, DataIdent, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_DataCompleted(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int DataCompleted(const ::std::string&, ::Ice::Int, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_DataCompleted(const ::std::string&, ::Ice::Int, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetBitmapInfo(const ::std::string& task, ::Ice::Int& bitmapCount)
    {
        return GetBitmapInfo(task, bitmapCount, 0);
    }
    ::Ice::Int GetBitmapInfo(const ::std::string& task, ::Ice::Int& bitmapCount, const ::Ice::Context& __ctx)
    {
        return GetBitmapInfo(task, bitmapCount, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetBitmapInfo(const ::std::string& task, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBitmapInfo(task, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBitmapInfo(const ::std::string& task, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBitmapInfo(task, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetBitmapInfo(const ::std::string& task, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBitmapInfo(task, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBitmapInfo(const ::std::string& task, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBitmapInfo(task, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetBitmapInfo(const ::std::string& task, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, ::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int bitmapCount;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetBitmapInfo(bitmapCount, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, bitmapCount);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, ::Ice::Int)> _response;
        };
        return begin_GetBitmapInfo(task, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetBitmapInfo(const ::std::string& task)
    {
        return begin_GetBitmapInfo(task, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBitmapInfo(const ::std::string& task, const ::Ice::Context& __ctx)
    {
        return begin_GetBitmapInfo(task, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBitmapInfo(const ::std::string& task, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBitmapInfo(task, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBitmapInfo(const ::std::string& task, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBitmapInfo(task, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBitmapInfo(const ::std::string& task, const ::DataQueuingIce::Callback_DataGuest_GetBitmapInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBitmapInfo(task, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBitmapInfo(const ::std::string& task, const ::Ice::Context& __ctx, const ::DataQueuingIce::Callback_DataGuest_GetBitmapInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBitmapInfo(task, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetBitmapInfo(::Ice::Int& bitmapCount, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetBitmapInfo(const ::std::string&, ::Ice::Int&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetBitmapInfo(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetBitmapData(const ::std::string& task, ::Ice::Int bitmapId, ::Ice::Int bitmapOffset, ::Ice::Int maxbytes, ::std::string& token, ::DataQueuingIce::BinaryStream& data, bool& isEnd)
    {
        return GetBitmapData(task, bitmapId, bitmapOffset, maxbytes, token, data, isEnd, 0);
    }
    ::Ice::Int GetBitmapData(const ::std::string& task, ::Ice::Int bitmapId, ::Ice::Int bitmapOffset, ::Ice::Int maxbytes, ::std::string& token, ::DataQueuingIce::BinaryStream& data, bool& isEnd, const ::Ice::Context& __ctx)
    {
        return GetBitmapData(task, bitmapId, bitmapOffset, maxbytes, token, data, isEnd, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetBitmapData(const ::std::string& task, ::Ice::Int bitmapId, ::Ice::Int bitmapOffset, ::Ice::Int maxbytes, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&, const ::DataQueuingIce::BinaryStream&, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBitmapData(task, bitmapId, bitmapOffset, maxbytes, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBitmapData(const ::std::string& task, ::Ice::Int bitmapId, ::Ice::Int bitmapOffset, ::Ice::Int maxbytes, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBitmapData(task, bitmapId, bitmapOffset, maxbytes, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetBitmapData(const ::std::string& task, ::Ice::Int bitmapId, ::Ice::Int bitmapOffset, ::Ice::Int maxbytes, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&, const ::DataQueuingIce::BinaryStream&, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBitmapData(task, bitmapId, bitmapOffset, maxbytes, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBitmapData(const ::std::string& task, ::Ice::Int bitmapId, ::Ice::Int bitmapOffset, ::Ice::Int maxbytes, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBitmapData(task, bitmapId, bitmapOffset, maxbytes, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetBitmapData(const ::std::string& task, ::Ice::Int bitmapId, ::Ice::Int bitmapOffset, ::Ice::Int maxbytes, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&, const ::DataQueuingIce::BinaryStream&, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::std::string&, const ::DataQueuingIce::BinaryStream&, bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
                ::std::string token;
                ::DataQueuingIce::BinaryStream data;
                bool isEnd;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetBitmapData(token, data, isEnd, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, token, data, isEnd);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::std::string&, const ::DataQueuingIce::BinaryStream&, bool)> _response;
        };
        return begin_GetBitmapData(task, bitmapId, bitmapOffset, maxbytes, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetBitmapData(const ::std::string& task, ::Ice::Int bitmapId, ::Ice::Int bitmapOffset, ::Ice::Int maxbytes)
    {
        return begin_GetBitmapData(task, bitmapId, bitmapOffset, maxbytes, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBitmapData(const ::std::string& task, ::Ice::Int bitmapId, ::Ice::Int bitmapOffset, ::Ice::Int maxbytes, const ::Ice::Context& __ctx)
    {
        return begin_GetBitmapData(task, bitmapId, bitmapOffset, maxbytes, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBitmapData(const ::std::string& task, ::Ice::Int bitmapId, ::Ice::Int bitmapOffset, ::Ice::Int maxbytes, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBitmapData(task, bitmapId, bitmapOffset, maxbytes, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBitmapData(const ::std::string& task, ::Ice::Int bitmapId, ::Ice::Int bitmapOffset, ::Ice::Int maxbytes, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBitmapData(task, bitmapId, bitmapOffset, maxbytes, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBitmapData(const ::std::string& task, ::Ice::Int bitmapId, ::Ice::Int bitmapOffset, ::Ice::Int maxbytes, const ::DataQueuingIce::Callback_DataGuest_GetBitmapDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBitmapData(task, bitmapId, bitmapOffset, maxbytes, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBitmapData(const ::std::string& task, ::Ice::Int bitmapId, ::Ice::Int bitmapOffset, ::Ice::Int maxbytes, const ::Ice::Context& __ctx, const ::DataQueuingIce::Callback_DataGuest_GetBitmapDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBitmapData(task, bitmapId, bitmapOffset, maxbytes, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetBitmapData(::std::string& token, ::DataQueuingIce::BinaryStream& data, bool& isEnd, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetBitmapData(const ::std::string&, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::std::string&, ::DataQueuingIce::BinaryStream&, bool&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetBitmapData(const ::std::string&, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<DataGuest> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<DataGuest> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DataGuest> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<DataGuest> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DataGuest> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<DataGuest> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<DataGuest> ice_secure(bool __secure) const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<DataGuest> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<DataGuest> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<DataGuest> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<DataGuest> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<DataGuest> ice_twoway() const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<DataGuest> ice_oneway() const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<DataGuest> ice_batchOneway() const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<DataGuest> ice_datagram() const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<DataGuest> ice_batchDatagram() const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<DataGuest> ice_compress(bool __compress) const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<DataGuest> ice_timeout(int __timeout) const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DataGuest> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DataGuest> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<DataGuest*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace DataQueuingIce
{

class CreatorReceiver : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int WorkCompleted(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class DataCreator : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void InitiateCreatorReceiver(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int StartCDPWork(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int StartQemuWork(const ::std::string&, const ::IMG::ImageSnapshotIdents&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int StopWork(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int SetRestoreBitmap(const ::std::string&, const ::std::string&, const ::DataQueuingIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int EndTask(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int CloseTask(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class DataGuest : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int InitGuest(const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetData(const ::std::string&, ::Ice::Int, ::Ice::Long&, ::std::string&, ::Ice::Long&, ::Ice::Int&, ::DataQueuingIce::BinaryStream&, bool&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int DataCompleted(const ::std::string&, ::Ice::Int, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetBitmapInfo(const ::std::string&, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetBitmapData(const ::std::string&, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::std::string&, ::DataQueuingIce::BinaryStream&, bool&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace DataQueuingIce
{

class CreatorReceiver : virtual public ::IceDelegate::DataQueuingIce::CreatorReceiver,
                        virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int WorkCompleted(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class DataCreator : virtual public ::IceDelegate::DataQueuingIce::DataCreator,
                    virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void InitiateCreatorReceiver(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int StartCDPWork(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int StartQemuWork(const ::std::string&, const ::IMG::ImageSnapshotIdents&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int StopWork(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetRestoreBitmap(const ::std::string&, const ::std::string&, const ::DataQueuingIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int EndTask(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int CloseTask(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class DataGuest : virtual public ::IceDelegate::DataQueuingIce::DataGuest,
                  virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int InitGuest(const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetData(const ::std::string&, ::Ice::Int, ::Ice::Long&, ::std::string&, ::Ice::Long&, ::Ice::Int&, ::DataQueuingIce::BinaryStream&, bool&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int DataCompleted(const ::std::string&, ::Ice::Int, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetBitmapInfo(const ::std::string&, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetBitmapData(const ::std::string&, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::std::string&, ::DataQueuingIce::BinaryStream&, bool&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace DataQueuingIce
{

class CreatorReceiver : virtual public ::IceDelegate::DataQueuingIce::CreatorReceiver,
                        virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int WorkCompleted(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class DataCreator : virtual public ::IceDelegate::DataQueuingIce::DataCreator,
                    virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void InitiateCreatorReceiver(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int StartCDPWork(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int StartQemuWork(const ::std::string&, const ::IMG::ImageSnapshotIdents&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int StopWork(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetRestoreBitmap(const ::std::string&, const ::std::string&, const ::DataQueuingIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int EndTask(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int CloseTask(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class DataGuest : virtual public ::IceDelegate::DataQueuingIce::DataGuest,
                  virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int InitGuest(const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetData(const ::std::string&, ::Ice::Int, ::Ice::Long&, ::std::string&, ::Ice::Long&, ::Ice::Int&, ::DataQueuingIce::BinaryStream&, bool&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int DataCompleted(const ::std::string&, ::Ice::Int, ::Ice::Long, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetBitmapInfo(const ::std::string&, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetBitmapData(const ::std::string&, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::std::string&, ::DataQueuingIce::BinaryStream&, bool&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace DataQueuingIce
{

class CreatorReceiver : virtual public ::Ice::Object
{
public:

    typedef CreatorReceiverPrx ProxyType;
    typedef CreatorReceiverPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int WorkCompleted(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___WorkCompleted(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const CreatorReceiver& l, const CreatorReceiver& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CreatorReceiver& l, const CreatorReceiver& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class DataCreator : virtual public ::Ice::Object
{
public:

    typedef DataCreatorPrx ProxyType;
    typedef DataCreatorPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void InitiateCreatorReceiver(const ::Ice::Identity&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___InitiateCreatorReceiver(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int StartCDPWork(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___StartCDPWork(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int StartQemuWork(const ::std::string&, const ::IMG::ImageSnapshotIdents&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___StartQemuWork(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int StopWork(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___StopWork(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int SetRestoreBitmap(const ::std::string&, const ::std::string&, const ::DataQueuingIce::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetRestoreBitmap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int EndTask(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___EndTask(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int CloseTask(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___CloseTask(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const DataCreator& l, const DataCreator& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DataCreator& l, const DataCreator& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class DataGuest : virtual public ::Ice::Object
{
public:

    typedef DataGuestPrx ProxyType;
    typedef DataGuestPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int InitGuest(const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___InitGuest(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetData(const ::std::string&, ::Ice::Int, ::Ice::Long&, ::std::string&, ::Ice::Long&, ::Ice::Int&, ::DataQueuingIce::BinaryStream&, bool&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int DataCompleted(const ::std::string&, ::Ice::Int, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___DataCompleted(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetBitmapInfo(const ::std::string&, ::Ice::Int&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetBitmapInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetBitmapData(const ::std::string&, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::std::string&, ::DataQueuingIce::BinaryStream&, bool&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetBitmapData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const DataGuest& l, const DataGuest& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DataGuest& l, const DataGuest& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace DataQueuingIce
{

template<class T>
class CallbackNC_CreatorReceiver_WorkCompleted : public Callback_CreatorReceiver_WorkCompleted_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_CreatorReceiver_WorkCompleted(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::CreatorReceiverPrx __proxy = ::DataQueuingIce::CreatorReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_WorkCompleted(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_CreatorReceiver_WorkCompletedPtr
newCallback_CreatorReceiver_WorkCompleted(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CreatorReceiver_WorkCompleted<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CreatorReceiver_WorkCompletedPtr
newCallback_CreatorReceiver_WorkCompleted(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CreatorReceiver_WorkCompleted<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CreatorReceiver_WorkCompleted : public Callback_CreatorReceiver_WorkCompleted_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_CreatorReceiver_WorkCompleted(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::CreatorReceiverPrx __proxy = ::DataQueuingIce::CreatorReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_WorkCompleted(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CreatorReceiver_WorkCompletedPtr
newCallback_CreatorReceiver_WorkCompleted(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CreatorReceiver_WorkCompleted<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CreatorReceiver_WorkCompletedPtr
newCallback_CreatorReceiver_WorkCompleted(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CreatorReceiver_WorkCompleted<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DataCreator_InitiateCreatorReceiver : public Callback_DataCreator_InitiateCreatorReceiver_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DataCreator_InitiateCreatorReceiver(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_InitiateCreatorReceiver(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_DataCreator_InitiateCreatorReceiverPtr
newCallback_DataCreator_InitiateCreatorReceiver(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataCreator_InitiateCreatorReceiver<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataCreator_InitiateCreatorReceiverPtr
newCallback_DataCreator_InitiateCreatorReceiver(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataCreator_InitiateCreatorReceiver<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DataCreator_InitiateCreatorReceiverPtr
newCallback_DataCreator_InitiateCreatorReceiver(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataCreator_InitiateCreatorReceiver<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataCreator_InitiateCreatorReceiverPtr
newCallback_DataCreator_InitiateCreatorReceiver(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataCreator_InitiateCreatorReceiver<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataCreator_InitiateCreatorReceiver : public Callback_DataCreator_InitiateCreatorReceiver_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DataCreator_InitiateCreatorReceiver(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_InitiateCreatorReceiver(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DataCreator_InitiateCreatorReceiverPtr
newCallback_DataCreator_InitiateCreatorReceiver(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataCreator_InitiateCreatorReceiver<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataCreator_InitiateCreatorReceiverPtr
newCallback_DataCreator_InitiateCreatorReceiver(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataCreator_InitiateCreatorReceiver<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DataCreator_InitiateCreatorReceiverPtr
newCallback_DataCreator_InitiateCreatorReceiver(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataCreator_InitiateCreatorReceiver<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataCreator_InitiateCreatorReceiverPtr
newCallback_DataCreator_InitiateCreatorReceiver(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataCreator_InitiateCreatorReceiver<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DataCreator_StartCDPWork : public Callback_DataCreator_StartCDPWork_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_DataCreator_StartCDPWork(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StartCDPWork(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_DataCreator_StartCDPWorkPtr
newCallback_DataCreator_StartCDPWork(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataCreator_StartCDPWork<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataCreator_StartCDPWorkPtr
newCallback_DataCreator_StartCDPWork(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataCreator_StartCDPWork<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataCreator_StartCDPWork : public Callback_DataCreator_StartCDPWork_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_DataCreator_StartCDPWork(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StartCDPWork(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DataCreator_StartCDPWorkPtr
newCallback_DataCreator_StartCDPWork(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataCreator_StartCDPWork<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataCreator_StartCDPWorkPtr
newCallback_DataCreator_StartCDPWork(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataCreator_StartCDPWork<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DataCreator_StartQemuWork : public Callback_DataCreator_StartQemuWork_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_DataCreator_StartQemuWork(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StartQemuWork(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_DataCreator_StartQemuWorkPtr
newCallback_DataCreator_StartQemuWork(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataCreator_StartQemuWork<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataCreator_StartQemuWorkPtr
newCallback_DataCreator_StartQemuWork(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataCreator_StartQemuWork<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataCreator_StartQemuWork : public Callback_DataCreator_StartQemuWork_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_DataCreator_StartQemuWork(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StartQemuWork(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DataCreator_StartQemuWorkPtr
newCallback_DataCreator_StartQemuWork(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataCreator_StartQemuWork<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataCreator_StartQemuWorkPtr
newCallback_DataCreator_StartQemuWork(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataCreator_StartQemuWork<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DataCreator_StopWork : public Callback_DataCreator_StopWork_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_DataCreator_StopWork(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StopWork(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_DataCreator_StopWorkPtr
newCallback_DataCreator_StopWork(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataCreator_StopWork<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataCreator_StopWorkPtr
newCallback_DataCreator_StopWork(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataCreator_StopWork<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataCreator_StopWork : public Callback_DataCreator_StopWork_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_DataCreator_StopWork(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StopWork(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DataCreator_StopWorkPtr
newCallback_DataCreator_StopWork(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataCreator_StopWork<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataCreator_StopWorkPtr
newCallback_DataCreator_StopWork(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataCreator_StopWork<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DataCreator_SetRestoreBitmap : public Callback_DataCreator_SetRestoreBitmap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_DataCreator_SetRestoreBitmap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetRestoreBitmap(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_DataCreator_SetRestoreBitmapPtr
newCallback_DataCreator_SetRestoreBitmap(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataCreator_SetRestoreBitmap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataCreator_SetRestoreBitmapPtr
newCallback_DataCreator_SetRestoreBitmap(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataCreator_SetRestoreBitmap<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataCreator_SetRestoreBitmap : public Callback_DataCreator_SetRestoreBitmap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_DataCreator_SetRestoreBitmap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetRestoreBitmap(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DataCreator_SetRestoreBitmapPtr
newCallback_DataCreator_SetRestoreBitmap(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataCreator_SetRestoreBitmap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataCreator_SetRestoreBitmapPtr
newCallback_DataCreator_SetRestoreBitmap(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataCreator_SetRestoreBitmap<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DataCreator_EndTask : public Callback_DataCreator_EndTask_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_DataCreator_EndTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_EndTask(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_DataCreator_EndTaskPtr
newCallback_DataCreator_EndTask(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataCreator_EndTask<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataCreator_EndTaskPtr
newCallback_DataCreator_EndTask(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataCreator_EndTask<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataCreator_EndTask : public Callback_DataCreator_EndTask_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_DataCreator_EndTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_EndTask(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DataCreator_EndTaskPtr
newCallback_DataCreator_EndTask(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataCreator_EndTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataCreator_EndTaskPtr
newCallback_DataCreator_EndTask(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataCreator_EndTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DataCreator_CloseTask : public Callback_DataCreator_CloseTask_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_DataCreator_CloseTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_CloseTask(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_DataCreator_CloseTaskPtr
newCallback_DataCreator_CloseTask(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataCreator_CloseTask<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataCreator_CloseTaskPtr
newCallback_DataCreator_CloseTask(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataCreator_CloseTask<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataCreator_CloseTask : public Callback_DataCreator_CloseTask_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_DataCreator_CloseTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataCreatorPrx __proxy = ::DataQueuingIce::DataCreatorPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_CloseTask(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DataCreator_CloseTaskPtr
newCallback_DataCreator_CloseTask(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataCreator_CloseTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataCreator_CloseTaskPtr
newCallback_DataCreator_CloseTask(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataCreator_CloseTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DataGuest_InitGuest : public Callback_DataGuest_InitGuest_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_DataGuest_InitGuest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_InitGuest(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_DataGuest_InitGuestPtr
newCallback_DataGuest_InitGuest(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataGuest_InitGuest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataGuest_InitGuestPtr
newCallback_DataGuest_InitGuest(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataGuest_InitGuest<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataGuest_InitGuest : public Callback_DataGuest_InitGuest_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_DataGuest_InitGuest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_InitGuest(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DataGuest_InitGuestPtr
newCallback_DataGuest_InitGuest(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataGuest_InitGuest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataGuest_InitGuestPtr
newCallback_DataGuest_InitGuest(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataGuest_InitGuest<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DataGuest_GetData : public Callback_DataGuest_GetData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Long, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::DataQueuingIce::BinaryStream&, bool);

    CallbackNC_DataGuest_GetData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long DataIdent;
        ::std::string token;
        ::Ice::Long Lba;
        ::Ice::Int secs;
        ::DataQueuingIce::BinaryStream data;
        bool isEnd;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetData(DataIdent, token, Lba, secs, data, isEnd, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, DataIdent, token, Lba, secs, data, isEnd);
        }
    }

    Response response;
};

template<class T> Callback_DataGuest_GetDataPtr
newCallback_DataGuest_GetData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Long, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::DataQueuingIce::BinaryStream&, bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataGuest_GetData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataGuest_GetDataPtr
newCallback_DataGuest_GetData(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Long, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::DataQueuingIce::BinaryStream&, bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataGuest_GetData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataGuest_GetData : public Callback_DataGuest_GetData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Long, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::DataQueuingIce::BinaryStream&, bool, const CT&);

    Callback_DataGuest_GetData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long DataIdent;
        ::std::string token;
        ::Ice::Long Lba;
        ::Ice::Int secs;
        ::DataQueuingIce::BinaryStream data;
        bool isEnd;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetData(DataIdent, token, Lba, secs, data, isEnd, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, DataIdent, token, Lba, secs, data, isEnd, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DataGuest_GetDataPtr
newCallback_DataGuest_GetData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Long, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::DataQueuingIce::BinaryStream&, bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataGuest_GetData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataGuest_GetDataPtr
newCallback_DataGuest_GetData(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Long, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::DataQueuingIce::BinaryStream&, bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataGuest_GetData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DataGuest_DataCompleted : public Callback_DataGuest_DataCompleted_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_DataGuest_DataCompleted(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_DataCompleted(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_DataGuest_DataCompletedPtr
newCallback_DataGuest_DataCompleted(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataGuest_DataCompleted<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataGuest_DataCompletedPtr
newCallback_DataGuest_DataCompleted(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataGuest_DataCompleted<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataGuest_DataCompleted : public Callback_DataGuest_DataCompleted_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_DataGuest_DataCompleted(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_DataCompleted(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DataGuest_DataCompletedPtr
newCallback_DataGuest_DataCompleted(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataGuest_DataCompleted<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataGuest_DataCompletedPtr
newCallback_DataGuest_DataCompleted(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataGuest_DataCompleted<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DataGuest_GetBitmapInfo : public Callback_DataGuest_GetBitmapInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Int);

    CallbackNC_DataGuest_GetBitmapInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int bitmapCount;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetBitmapInfo(bitmapCount, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, bitmapCount);
        }
    }

    Response response;
};

template<class T> Callback_DataGuest_GetBitmapInfoPtr
newCallback_DataGuest_GetBitmapInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataGuest_GetBitmapInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataGuest_GetBitmapInfoPtr
newCallback_DataGuest_GetBitmapInfo(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataGuest_GetBitmapInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataGuest_GetBitmapInfo : public Callback_DataGuest_GetBitmapInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Int, const CT&);

    Callback_DataGuest_GetBitmapInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int bitmapCount;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetBitmapInfo(bitmapCount, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, bitmapCount, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DataGuest_GetBitmapInfoPtr
newCallback_DataGuest_GetBitmapInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataGuest_GetBitmapInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataGuest_GetBitmapInfoPtr
newCallback_DataGuest_GetBitmapInfo(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataGuest_GetBitmapInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DataGuest_GetBitmapData : public Callback_DataGuest_GetBitmapData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::std::string&, const ::DataQueuingIce::BinaryStream&, bool);

    CallbackNC_DataGuest_GetBitmapData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
        ::std::string token;
        ::DataQueuingIce::BinaryStream data;
        bool isEnd;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetBitmapData(token, data, isEnd, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, token, data, isEnd);
        }
    }

    Response response;
};

template<class T> Callback_DataGuest_GetBitmapDataPtr
newCallback_DataGuest_GetBitmapData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::string&, const ::DataQueuingIce::BinaryStream&, bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataGuest_GetBitmapData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DataGuest_GetBitmapDataPtr
newCallback_DataGuest_GetBitmapData(T* instance, void (T::*cb)(::Ice::Int, const ::std::string&, const ::DataQueuingIce::BinaryStream&, bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DataGuest_GetBitmapData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DataGuest_GetBitmapData : public Callback_DataGuest_GetBitmapData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::std::string&, const ::DataQueuingIce::BinaryStream&, bool, const CT&);

    Callback_DataGuest_GetBitmapData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::DataQueuingIce::DataGuestPrx __proxy = ::DataQueuingIce::DataGuestPrx::uncheckedCast(__result->getProxy());
        ::std::string token;
        ::DataQueuingIce::BinaryStream data;
        bool isEnd;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetBitmapData(token, data, isEnd, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, token, data, isEnd, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DataGuest_GetBitmapDataPtr
newCallback_DataGuest_GetBitmapData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::string&, const ::DataQueuingIce::BinaryStream&, bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataGuest_GetBitmapData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DataGuest_GetBitmapDataPtr
newCallback_DataGuest_GetBitmapData(T* instance, void (T::*cb)(::Ice::Int, const ::std::string&, const ::DataQueuingIce::BinaryStream&, bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DataGuest_GetBitmapData<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

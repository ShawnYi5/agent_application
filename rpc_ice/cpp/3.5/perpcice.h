// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `perpcice.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____cpp_3_5_perpcice_h__
#define ____cpp_3_5_perpcice_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/Identity.h>
#include <utils.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace PerpcIce
{

class PeGuestReceiver;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::PerpcIce::PeGuestReceiver>&);
::IceProxy::Ice::Object* upCast(::IceProxy::PerpcIce::PeGuestReceiver*);

class PeSession;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::PerpcIce::PeSession>&);
::IceProxy::Ice::Object* upCast(::IceProxy::PerpcIce::PeSession*);

class PeSessionFactory;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::PerpcIce::PeSessionFactory>&);
::IceProxy::Ice::Object* upCast(::IceProxy::PerpcIce::PeSessionFactory*);

}

}

namespace PerpcIce
{

class PeGuestReceiver;
bool operator==(const PeGuestReceiver&, const PeGuestReceiver&);
bool operator<(const PeGuestReceiver&, const PeGuestReceiver&);
::Ice::Object* upCast(::PerpcIce::PeGuestReceiver*);
typedef ::IceInternal::Handle< ::PerpcIce::PeGuestReceiver> PeGuestReceiverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::PerpcIce::PeGuestReceiver> PeGuestReceiverPrx;
void __patch(PeGuestReceiverPtr&, const ::Ice::ObjectPtr&);

class PeSession;
bool operator==(const PeSession&, const PeSession&);
bool operator<(const PeSession&, const PeSession&);
::Ice::Object* upCast(::PerpcIce::PeSession*);
typedef ::IceInternal::Handle< ::PerpcIce::PeSession> PeSessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::PerpcIce::PeSession> PeSessionPrx;
void __patch(PeSessionPtr&, const ::Ice::ObjectPtr&);

class PeSessionFactory;
bool operator==(const PeSessionFactory&, const PeSessionFactory&);
bool operator<(const PeSessionFactory&, const PeSessionFactory&);
::Ice::Object* upCast(::PerpcIce::PeSessionFactory*);
typedef ::IceInternal::Handle< ::PerpcIce::PeSessionFactory> PeSessionFactoryPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::PerpcIce::PeSessionFactory> PeSessionFactoryPrx;
void __patch(PeSessionFactoryPtr&, const ::Ice::ObjectPtr&);

}

namespace PerpcIce
{

typedef ::std::vector< ::Ice::Byte> BinaryStream;

struct ExcludeBrokenBlock
{
    ::std::string diskToken;
    ::Ice::Long blockOffset;
    ::PerpcIce::BinaryStream bitmap;
};

typedef ::std::vector< ::PerpcIce::ExcludeBrokenBlock> ExcludeBrokenBlocks;

struct ExcludeBlockRun
{
    ::std::string diskToken;
    ::Ice::Long blockOffset;
    ::Ice::Long blockCount;

    bool operator==(const ExcludeBlockRun& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(diskToken != __rhs.diskToken)
        {
            return false;
        }
        if(blockOffset != __rhs.blockOffset)
        {
            return false;
        }
        if(blockCount != __rhs.blockCount)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ExcludeBlockRun& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(diskToken < __rhs.diskToken)
        {
            return true;
        }
        else if(__rhs.diskToken < diskToken)
        {
            return false;
        }
        if(blockOffset < __rhs.blockOffset)
        {
            return true;
        }
        else if(__rhs.blockOffset < blockOffset)
        {
            return false;
        }
        if(blockCount < __rhs.blockCount)
        {
            return true;
        }
        else if(__rhs.blockCount < blockCount)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ExcludeBlockRun& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ExcludeBlockRun& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ExcludeBlockRun& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ExcludeBlockRun& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::PerpcIce::ExcludeBlockRun> ExcludeBlockRuns;

struct PeDiskInfo
{
    ::Ice::Int diskID;
    ::Ice::Long diskSecCount;

    bool operator==(const PeDiskInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(diskID != __rhs.diskID)
        {
            return false;
        }
        if(diskSecCount != __rhs.diskSecCount)
        {
            return false;
        }
        return true;
    }

    bool operator<(const PeDiskInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(diskID < __rhs.diskID)
        {
            return true;
        }
        else if(__rhs.diskID < diskID)
        {
            return false;
        }
        if(diskSecCount < __rhs.diskSecCount)
        {
            return true;
        }
        else if(__rhs.diskSecCount < diskSecCount)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const PeDiskInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const PeDiskInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const PeDiskInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const PeDiskInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::PerpcIce::PeDiskInfo> PeDiskInfos;

struct PeGuestInfo
{
    ::PerpcIce::PeDiskInfos diskInfos;
    ::Ice::Int bootDiskId;
    ::Ice::Int loginType;
};

struct PeDiskToken
{
    ::Ice::Int diskID;
    ::std::string token;
    ::std::string diskGUID;

    bool operator==(const PeDiskToken& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(diskID != __rhs.diskID)
        {
            return false;
        }
        if(token != __rhs.token)
        {
            return false;
        }
        if(diskGUID != __rhs.diskGUID)
        {
            return false;
        }
        return true;
    }

    bool operator<(const PeDiskToken& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(diskID < __rhs.diskID)
        {
            return true;
        }
        else if(__rhs.diskID < diskID)
        {
            return false;
        }
        if(token < __rhs.token)
        {
            return true;
        }
        else if(__rhs.token < token)
        {
            return false;
        }
        if(diskGUID < __rhs.diskGUID)
        {
            return true;
        }
        else if(__rhs.diskGUID < diskGUID)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const PeDiskToken& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const PeDiskToken& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const PeDiskToken& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const PeDiskToken& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::PerpcIce::PeDiskToken> PeDiskTokens;

struct PeRestoreInfo
{
    ::std::string szServerIPAddr;
    ::Ice::Int dwServerPortNumber;
    ::Ice::Int dwSocketConnectCount;
    ::Ice::Int dwOsDiskID;
    ::PerpcIce::PeDiskTokens tokens;
};

typedef ::std::vector< ::std::string> HardwareIds;

typedef ::std::vector< ::std::string> HardwareCompatIds;

struct HWInfo
{
    ::std::string szDeviceInstanceID;
    ::std::string szDescription;
    ::std::string szLocationInfo;
    ::std::string szContainerID;
    ::std::string szMacAddress;
    ::std::string szService;
    ::Ice::Int parentDevLevel;
    ::Ice::Int Address;
    ::Ice::Int UINumber;
    ::PerpcIce::HardwareIds HWIds;
    ::PerpcIce::HardwareCompatIds CompatIds;
};

typedef ::std::vector< ::PerpcIce::HWInfo> HWInfos;

struct NetAdapterInfo
{
    ::std::string szDeviceInstanceID;
    ::std::string szDescription;
    ::std::string szGuid;
    ::std::string szNetType;
    ::std::string szMacAddress;
    bool isConnected;

    bool operator==(const NetAdapterInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(szDeviceInstanceID != __rhs.szDeviceInstanceID)
        {
            return false;
        }
        if(szDescription != __rhs.szDescription)
        {
            return false;
        }
        if(szGuid != __rhs.szGuid)
        {
            return false;
        }
        if(szNetType != __rhs.szNetType)
        {
            return false;
        }
        if(szMacAddress != __rhs.szMacAddress)
        {
            return false;
        }
        if(isConnected != __rhs.isConnected)
        {
            return false;
        }
        return true;
    }

    bool operator<(const NetAdapterInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(szDeviceInstanceID < __rhs.szDeviceInstanceID)
        {
            return true;
        }
        else if(__rhs.szDeviceInstanceID < szDeviceInstanceID)
        {
            return false;
        }
        if(szDescription < __rhs.szDescription)
        {
            return true;
        }
        else if(__rhs.szDescription < szDescription)
        {
            return false;
        }
        if(szGuid < __rhs.szGuid)
        {
            return true;
        }
        else if(__rhs.szGuid < szGuid)
        {
            return false;
        }
        if(szNetType < __rhs.szNetType)
        {
            return true;
        }
        else if(__rhs.szNetType < szNetType)
        {
            return false;
        }
        if(szMacAddress < __rhs.szMacAddress)
        {
            return true;
        }
        else if(__rhs.szMacAddress < szMacAddress)
        {
            return false;
        }
        if(isConnected < __rhs.isConnected)
        {
            return true;
        }
        else if(__rhs.isConnected < isConnected)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const NetAdapterInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const NetAdapterInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const NetAdapterInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const NetAdapterInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::PerpcIce::NetAdapterInfo> NetAdapterInfos;

}

namespace Ice
{
template<>
struct StreamableTraits< ::PerpcIce::ExcludeBrokenBlock>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 10;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::PerpcIce::ExcludeBrokenBlock, S>
{
    static void write(S* __os, const ::PerpcIce::ExcludeBrokenBlock& v)
    {
        __os->write(v.diskToken);
        __os->write(v.blockOffset);
        __os->write(v.bitmap);
    }
};

template<class S>
struct StreamReader< ::PerpcIce::ExcludeBrokenBlock, S>
{
    static void read(S* __is, ::PerpcIce::ExcludeBrokenBlock& v)
    {
        __is->read(v.diskToken);
        __is->read(v.blockOffset);
        __is->read(v.bitmap);
    }
};

template<>
struct StreamableTraits< ::PerpcIce::ExcludeBlockRun>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 17;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::PerpcIce::ExcludeBlockRun, S>
{
    static void write(S* __os, const ::PerpcIce::ExcludeBlockRun& v)
    {
        __os->write(v.diskToken);
        __os->write(v.blockOffset);
        __os->write(v.blockCount);
    }
};

template<class S>
struct StreamReader< ::PerpcIce::ExcludeBlockRun, S>
{
    static void read(S* __is, ::PerpcIce::ExcludeBlockRun& v)
    {
        __is->read(v.diskToken);
        __is->read(v.blockOffset);
        __is->read(v.blockCount);
    }
};

template<>
struct StreamableTraits< ::PerpcIce::PeDiskInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::PerpcIce::PeDiskInfo, S>
{
    static void write(S* __os, const ::PerpcIce::PeDiskInfo& v)
    {
        __os->write(v.diskID);
        __os->write(v.diskSecCount);
    }
};

template<class S>
struct StreamReader< ::PerpcIce::PeDiskInfo, S>
{
    static void read(S* __is, ::PerpcIce::PeDiskInfo& v)
    {
        __is->read(v.diskID);
        __is->read(v.diskSecCount);
    }
};

template<>
struct StreamableTraits< ::PerpcIce::PeGuestInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::PerpcIce::PeGuestInfo, S>
{
    static void write(S* __os, const ::PerpcIce::PeGuestInfo& v)
    {
        __os->write(v.diskInfos);
        __os->write(v.bootDiskId);
        __os->write(v.loginType);
    }
};

template<class S>
struct StreamReader< ::PerpcIce::PeGuestInfo, S>
{
    static void read(S* __is, ::PerpcIce::PeGuestInfo& v)
    {
        __is->read(v.diskInfos);
        __is->read(v.bootDiskId);
        __is->read(v.loginType);
    }
};

template<>
struct StreamableTraits< ::PerpcIce::PeDiskToken>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::PerpcIce::PeDiskToken, S>
{
    static void write(S* __os, const ::PerpcIce::PeDiskToken& v)
    {
        __os->write(v.diskID);
        __os->write(v.token);
        __os->write(v.diskGUID);
    }
};

template<class S>
struct StreamReader< ::PerpcIce::PeDiskToken, S>
{
    static void read(S* __is, ::PerpcIce::PeDiskToken& v)
    {
        __is->read(v.diskID);
        __is->read(v.token);
        __is->read(v.diskGUID);
    }
};

template<>
struct StreamableTraits< ::PerpcIce::PeRestoreInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 14;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::PerpcIce::PeRestoreInfo, S>
{
    static void write(S* __os, const ::PerpcIce::PeRestoreInfo& v)
    {
        __os->write(v.szServerIPAddr);
        __os->write(v.dwServerPortNumber);
        __os->write(v.dwSocketConnectCount);
        __os->write(v.dwOsDiskID);
        __os->write(v.tokens);
    }
};

template<class S>
struct StreamReader< ::PerpcIce::PeRestoreInfo, S>
{
    static void read(S* __is, ::PerpcIce::PeRestoreInfo& v)
    {
        __is->read(v.szServerIPAddr);
        __is->read(v.dwServerPortNumber);
        __is->read(v.dwSocketConnectCount);
        __is->read(v.dwOsDiskID);
        __is->read(v.tokens);
    }
};

template<>
struct StreamableTraits< ::PerpcIce::HWInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 20;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::PerpcIce::HWInfo, S>
{
    static void write(S* __os, const ::PerpcIce::HWInfo& v)
    {
        __os->write(v.szDeviceInstanceID);
        __os->write(v.szDescription);
        __os->write(v.szLocationInfo);
        __os->write(v.szContainerID);
        __os->write(v.szMacAddress);
        __os->write(v.szService);
        __os->write(v.parentDevLevel);
        __os->write(v.Address);
        __os->write(v.UINumber);
        __os->write(v.HWIds);
        __os->write(v.CompatIds);
    }
};

template<class S>
struct StreamReader< ::PerpcIce::HWInfo, S>
{
    static void read(S* __is, ::PerpcIce::HWInfo& v)
    {
        __is->read(v.szDeviceInstanceID);
        __is->read(v.szDescription);
        __is->read(v.szLocationInfo);
        __is->read(v.szContainerID);
        __is->read(v.szMacAddress);
        __is->read(v.szService);
        __is->read(v.parentDevLevel);
        __is->read(v.Address);
        __is->read(v.UINumber);
        __is->read(v.HWIds);
        __is->read(v.CompatIds);
    }
};

template<>
struct StreamableTraits< ::PerpcIce::NetAdapterInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::PerpcIce::NetAdapterInfo, S>
{
    static void write(S* __os, const ::PerpcIce::NetAdapterInfo& v)
    {
        __os->write(v.szDeviceInstanceID);
        __os->write(v.szDescription);
        __os->write(v.szGuid);
        __os->write(v.szNetType);
        __os->write(v.szMacAddress);
        __os->write(v.isConnected);
    }
};

template<class S>
struct StreamReader< ::PerpcIce::NetAdapterInfo, S>
{
    static void read(S* __is, ::PerpcIce::NetAdapterInfo& v)
    {
        __is->read(v.szDeviceInstanceID);
        __is->read(v.szDescription);
        __is->read(v.szGuid);
        __is->read(v.szNetType);
        __is->read(v.szMacAddress);
        __is->read(v.isConnected);
    }
};

}

namespace PerpcIce
{

class Callback_PeGuestReceiver_ReadDisk_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeGuestReceiver_ReadDisk_Base> Callback_PeGuestReceiver_ReadDiskPtr;

class Callback_PeGuestReceiver_WriteDisk_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeGuestReceiver_WriteDisk_Base> Callback_PeGuestReceiver_WriteDiskPtr;

class Callback_PeGuestReceiver_SetRestoreExcludeInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeGuestReceiver_SetRestoreExcludeInfo_Base> Callback_PeGuestReceiver_SetRestoreExcludeInfoPtr;

class Callback_PeGuestReceiver_KvmEnd_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeGuestReceiver_KvmEnd_Base> Callback_PeGuestReceiver_KvmEndPtr;

class Callback_PeGuestReceiver_GetClassHWInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeGuestReceiver_GetClassHWInfo_Base> Callback_PeGuestReceiver_GetClassHWInfoPtr;

class Callback_PeGuestReceiver_GetNetAdapterInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeGuestReceiver_GetNetAdapterInfo_Base> Callback_PeGuestReceiver_GetNetAdapterInfoPtr;

class Callback_PeGuestReceiver_SetRestoreInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeGuestReceiver_SetRestoreInfo_Base> Callback_PeGuestReceiver_SetRestoreInfoPtr;

class Callback_PeGuestReceiver_JsonFunc_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeGuestReceiver_JsonFunc_Base> Callback_PeGuestReceiver_JsonFuncPtr;

class Callback_PeSession_InitiatePeReceiver_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeSession_InitiatePeReceiver_Base> Callback_PeSession_InitiatePeReceiverPtr;

class Callback_PeSession_GetPeHostIdent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeSession_GetPeHostIdent_Base> Callback_PeSession_GetPeHostIdentPtr;

class Callback_PeSession_UnInit_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeSession_UnInit_Base> Callback_PeSession_UnInitPtr;

class Callback_PeSession_GetBootList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeSession_GetBootList_Base> Callback_PeSession_GetBootListPtr;

class Callback_PeSession_GetKvmBitmapFile_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeSession_GetKvmBitmapFile_Base> Callback_PeSession_GetKvmBitmapFilePtr;

class Callback_PeSession_ReadDiskData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeSession_ReadDiskData_Base> Callback_PeSession_ReadDiskDataPtr;

class Callback_PeSession_ReadKvmBootData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeSession_ReadKvmBootData_Base> Callback_PeSession_ReadKvmBootDataPtr;

class Callback_PeSession_getUesdBlockBitmap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeSession_getUesdBlockBitmap_Base> Callback_PeSession_getUesdBlockBitmapPtr;

class Callback_PeSession_Refresh_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeSession_Refresh_Base> Callback_PeSession_RefreshPtr;

class Callback_PeSession_StartKvm_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeSession_StartKvm_Base> Callback_PeSession_StartKvmPtr;

class Callback_PeSession_destroy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeSession_destroy_Base> Callback_PeSession_destroyPtr;

class Callback_PeSessionFactory_CreateSession_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeSessionFactory_CreateSession_Base> Callback_PeSessionFactory_CreateSessionPtr;

}

namespace IceProxy
{

namespace PerpcIce
{

class PeGuestReceiver : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int ReadDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, ::PerpcIce::BinaryStream& pBuf)
    {
        return ReadDisk(token, LBA, dwSectorCount, pBuf, 0);
    }
    ::Ice::Int ReadDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, ::PerpcIce::BinaryStream& pBuf, const ::Ice::Context& __ctx)
    {
        return ReadDisk(token, LBA, dwSectorCount, pBuf, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ReadDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ReadDisk(token, LBA, dwSectorCount, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ReadDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ReadDisk(token, LBA, dwSectorCount, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ReadDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ReadDisk(token, LBA, dwSectorCount, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ReadDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ReadDisk(token, LBA, dwSectorCount, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_ReadDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
                ::PerpcIce::BinaryStream pBuf;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_ReadDisk(pBuf, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, pBuf);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)> _response;
        };
        return begin_ReadDisk(token, LBA, dwSectorCount, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_ReadDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount)
    {
        return begin_ReadDisk(token, LBA, dwSectorCount, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReadDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::Ice::Context& __ctx)
    {
        return begin_ReadDisk(token, LBA, dwSectorCount, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReadDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadDisk(token, LBA, dwSectorCount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReadDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadDisk(token, LBA, dwSectorCount, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReadDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::PerpcIce::Callback_PeGuestReceiver_ReadDiskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadDisk(token, LBA, dwSectorCount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReadDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeGuestReceiver_ReadDiskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadDisk(token, LBA, dwSectorCount, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_ReadDisk(::PerpcIce::BinaryStream& pBuf, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int ReadDisk(const ::std::string&, ::Ice::Long, ::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ReadDisk(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int WriteDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::PerpcIce::BinaryStream& pBuf)
    {
        return WriteDisk(token, LBA, dwSectorCount, pBuf, 0);
    }
    ::Ice::Int WriteDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::PerpcIce::BinaryStream& pBuf, const ::Ice::Context& __ctx)
    {
        return WriteDisk(token, LBA, dwSectorCount, pBuf, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_WriteDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::PerpcIce::BinaryStream& pBuf, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_WriteDisk(token, LBA, dwSectorCount, pBuf, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_WriteDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::PerpcIce::BinaryStream& pBuf, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_WriteDisk(token, LBA, dwSectorCount, pBuf, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_WriteDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::PerpcIce::BinaryStream& pBuf, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_WriteDisk(token, LBA, dwSectorCount, pBuf, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_WriteDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::PerpcIce::BinaryStream& pBuf, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_WriteDisk(token, LBA, dwSectorCount, pBuf, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_WriteDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::PerpcIce::BinaryStream& pBuf, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_WriteDisk(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_WriteDisk(token, LBA, dwSectorCount, pBuf, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_WriteDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::PerpcIce::BinaryStream& pBuf)
    {
        return begin_WriteDisk(token, LBA, dwSectorCount, pBuf, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_WriteDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::PerpcIce::BinaryStream& pBuf, const ::Ice::Context& __ctx)
    {
        return begin_WriteDisk(token, LBA, dwSectorCount, pBuf, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_WriteDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::PerpcIce::BinaryStream& pBuf, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_WriteDisk(token, LBA, dwSectorCount, pBuf, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_WriteDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::PerpcIce::BinaryStream& pBuf, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_WriteDisk(token, LBA, dwSectorCount, pBuf, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_WriteDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::PerpcIce::BinaryStream& pBuf, const ::PerpcIce::Callback_PeGuestReceiver_WriteDiskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_WriteDisk(token, LBA, dwSectorCount, pBuf, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_WriteDisk(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::PerpcIce::BinaryStream& pBuf, const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeGuestReceiver_WriteDiskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_WriteDisk(token, LBA, dwSectorCount, pBuf, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_WriteDisk(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int WriteDisk(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::PerpcIce::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_WriteDisk(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::PerpcIce::BinaryStream&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void SetRestoreExcludeInfo(const ::PerpcIce::ExcludeBrokenBlocks& brokenBlocks, const ::PerpcIce::ExcludeBlockRuns& blockRuns)
    {
        SetRestoreExcludeInfo(brokenBlocks, blockRuns, 0);
    }
    void SetRestoreExcludeInfo(const ::PerpcIce::ExcludeBrokenBlocks& brokenBlocks, const ::PerpcIce::ExcludeBlockRuns& blockRuns, const ::Ice::Context& __ctx)
    {
        SetRestoreExcludeInfo(brokenBlocks, blockRuns, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetRestoreExcludeInfo(const ::PerpcIce::ExcludeBrokenBlocks& brokenBlocks, const ::PerpcIce::ExcludeBlockRuns& blockRuns, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetRestoreExcludeInfo(brokenBlocks, blockRuns, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetRestoreExcludeInfo(const ::PerpcIce::ExcludeBrokenBlocks& brokenBlocks, const ::PerpcIce::ExcludeBlockRuns& blockRuns, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetRestoreExcludeInfo(brokenBlocks, blockRuns, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetRestoreExcludeInfo(const ::PerpcIce::ExcludeBrokenBlocks& brokenBlocks, const ::PerpcIce::ExcludeBlockRuns& blockRuns, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetRestoreExcludeInfo(brokenBlocks, blockRuns, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetRestoreExcludeInfo(const ::PerpcIce::ExcludeBrokenBlocks& brokenBlocks, const ::PerpcIce::ExcludeBlockRuns& blockRuns, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetRestoreExcludeInfo(brokenBlocks, blockRuns, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetRestoreExcludeInfo(const ::PerpcIce::ExcludeBrokenBlocks& brokenBlocks, const ::PerpcIce::ExcludeBlockRuns& blockRuns, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_SetRestoreExcludeInfo(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_SetRestoreExcludeInfo(brokenBlocks, blockRuns, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetRestoreExcludeInfo(const ::PerpcIce::ExcludeBrokenBlocks& brokenBlocks, const ::PerpcIce::ExcludeBlockRuns& blockRuns)
    {
        return begin_SetRestoreExcludeInfo(brokenBlocks, blockRuns, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetRestoreExcludeInfo(const ::PerpcIce::ExcludeBrokenBlocks& brokenBlocks, const ::PerpcIce::ExcludeBlockRuns& blockRuns, const ::Ice::Context& __ctx)
    {
        return begin_SetRestoreExcludeInfo(brokenBlocks, blockRuns, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetRestoreExcludeInfo(const ::PerpcIce::ExcludeBrokenBlocks& brokenBlocks, const ::PerpcIce::ExcludeBlockRuns& blockRuns, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRestoreExcludeInfo(brokenBlocks, blockRuns, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetRestoreExcludeInfo(const ::PerpcIce::ExcludeBrokenBlocks& brokenBlocks, const ::PerpcIce::ExcludeBlockRuns& blockRuns, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRestoreExcludeInfo(brokenBlocks, blockRuns, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetRestoreExcludeInfo(const ::PerpcIce::ExcludeBrokenBlocks& brokenBlocks, const ::PerpcIce::ExcludeBlockRuns& blockRuns, const ::PerpcIce::Callback_PeGuestReceiver_SetRestoreExcludeInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRestoreExcludeInfo(brokenBlocks, blockRuns, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetRestoreExcludeInfo(const ::PerpcIce::ExcludeBrokenBlocks& brokenBlocks, const ::PerpcIce::ExcludeBlockRuns& blockRuns, const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeGuestReceiver_SetRestoreExcludeInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRestoreExcludeInfo(brokenBlocks, blockRuns, &__ctx, __del, __cookie);
    }

    void end_SetRestoreExcludeInfo(const ::Ice::AsyncResultPtr&);
    
private:

    void SetRestoreExcludeInfo(const ::PerpcIce::ExcludeBrokenBlocks&, const ::PerpcIce::ExcludeBlockRuns&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetRestoreExcludeInfo(const ::PerpcIce::ExcludeBrokenBlocks&, const ::PerpcIce::ExcludeBlockRuns&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void KvmEnd()
    {
        KvmEnd(0);
    }
    void KvmEnd(const ::Ice::Context& __ctx)
    {
        KvmEnd(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_KvmEnd(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_KvmEnd(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_KvmEnd(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_KvmEnd(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_KvmEnd(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_KvmEnd(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_KvmEnd(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_KvmEnd(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_KvmEnd(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_KvmEnd(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_KvmEnd(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_KvmEnd()
    {
        return begin_KvmEnd(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_KvmEnd(const ::Ice::Context& __ctx)
    {
        return begin_KvmEnd(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_KvmEnd(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_KvmEnd(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_KvmEnd(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_KvmEnd(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_KvmEnd(const ::PerpcIce::Callback_PeGuestReceiver_KvmEndPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_KvmEnd(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_KvmEnd(const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeGuestReceiver_KvmEndPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_KvmEnd(&__ctx, __del, __cookie);
    }

    void end_KvmEnd(const ::Ice::AsyncResultPtr&);
    
private:

    void KvmEnd(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_KvmEnd(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetClassHWInfo(const ::std::string& classname, ::Ice::Int requestParentLevel, ::PerpcIce::HWInfos& hwinfo)
    {
        return GetClassHWInfo(classname, requestParentLevel, hwinfo, 0);
    }
    ::Ice::Int GetClassHWInfo(const ::std::string& classname, ::Ice::Int requestParentLevel, ::PerpcIce::HWInfos& hwinfo, const ::Ice::Context& __ctx)
    {
        return GetClassHWInfo(classname, requestParentLevel, hwinfo, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetClassHWInfo(const ::std::string& classname, ::Ice::Int requestParentLevel, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::HWInfos&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetClassHWInfo(classname, requestParentLevel, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetClassHWInfo(const ::std::string& classname, ::Ice::Int requestParentLevel, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetClassHWInfo(classname, requestParentLevel, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetClassHWInfo(const ::std::string& classname, ::Ice::Int requestParentLevel, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::HWInfos&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetClassHWInfo(classname, requestParentLevel, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetClassHWInfo(const ::std::string& classname, ::Ice::Int requestParentLevel, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetClassHWInfo(classname, requestParentLevel, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetClassHWInfo(const ::std::string& classname, ::Ice::Int requestParentLevel, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::HWInfos&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::PerpcIce::HWInfos&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
                ::PerpcIce::HWInfos hwinfo;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetClassHWInfo(hwinfo, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, hwinfo);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::PerpcIce::HWInfos&)> _response;
        };
        return begin_GetClassHWInfo(classname, requestParentLevel, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetClassHWInfo(const ::std::string& classname, ::Ice::Int requestParentLevel)
    {
        return begin_GetClassHWInfo(classname, requestParentLevel, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetClassHWInfo(const ::std::string& classname, ::Ice::Int requestParentLevel, const ::Ice::Context& __ctx)
    {
        return begin_GetClassHWInfo(classname, requestParentLevel, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetClassHWInfo(const ::std::string& classname, ::Ice::Int requestParentLevel, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetClassHWInfo(classname, requestParentLevel, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetClassHWInfo(const ::std::string& classname, ::Ice::Int requestParentLevel, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetClassHWInfo(classname, requestParentLevel, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetClassHWInfo(const ::std::string& classname, ::Ice::Int requestParentLevel, const ::PerpcIce::Callback_PeGuestReceiver_GetClassHWInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetClassHWInfo(classname, requestParentLevel, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetClassHWInfo(const ::std::string& classname, ::Ice::Int requestParentLevel, const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeGuestReceiver_GetClassHWInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetClassHWInfo(classname, requestParentLevel, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetClassHWInfo(::PerpcIce::HWInfos& hwinfo, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetClassHWInfo(const ::std::string&, ::Ice::Int, ::PerpcIce::HWInfos&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetClassHWInfo(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetNetAdapterInfo(::PerpcIce::NetAdapterInfos& adapterInfos)
    {
        return GetNetAdapterInfo(adapterInfos, 0);
    }
    ::Ice::Int GetNetAdapterInfo(::PerpcIce::NetAdapterInfos& adapterInfos, const ::Ice::Context& __ctx)
    {
        return GetNetAdapterInfo(adapterInfos, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetNetAdapterInfo(const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::NetAdapterInfos&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetNetAdapterInfo(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetNetAdapterInfo(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetNetAdapterInfo(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetNetAdapterInfo(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::NetAdapterInfos&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetNetAdapterInfo(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetNetAdapterInfo(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetNetAdapterInfo(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetNetAdapterInfo(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::NetAdapterInfos&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::PerpcIce::NetAdapterInfos&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
                ::PerpcIce::NetAdapterInfos adapterInfos;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetNetAdapterInfo(adapterInfos, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, adapterInfos);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::PerpcIce::NetAdapterInfos&)> _response;
        };
        return begin_GetNetAdapterInfo(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetNetAdapterInfo()
    {
        return begin_GetNetAdapterInfo(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetNetAdapterInfo(const ::Ice::Context& __ctx)
    {
        return begin_GetNetAdapterInfo(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetNetAdapterInfo(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetNetAdapterInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetNetAdapterInfo(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetNetAdapterInfo(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetNetAdapterInfo(const ::PerpcIce::Callback_PeGuestReceiver_GetNetAdapterInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetNetAdapterInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetNetAdapterInfo(const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeGuestReceiver_GetNetAdapterInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetNetAdapterInfo(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetNetAdapterInfo(::PerpcIce::NetAdapterInfos& adapterInfos, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetNetAdapterInfo(::PerpcIce::NetAdapterInfos&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetNetAdapterInfo(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void SetRestoreInfo(const ::PerpcIce::PeRestoreInfo& restoreInfo)
    {
        SetRestoreInfo(restoreInfo, 0);
    }
    void SetRestoreInfo(const ::PerpcIce::PeRestoreInfo& restoreInfo, const ::Ice::Context& __ctx)
    {
        SetRestoreInfo(restoreInfo, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetRestoreInfo(const ::PerpcIce::PeRestoreInfo& restoreInfo, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetRestoreInfo(restoreInfo, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetRestoreInfo(const ::PerpcIce::PeRestoreInfo& restoreInfo, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetRestoreInfo(restoreInfo, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetRestoreInfo(const ::PerpcIce::PeRestoreInfo& restoreInfo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetRestoreInfo(restoreInfo, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetRestoreInfo(const ::PerpcIce::PeRestoreInfo& restoreInfo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetRestoreInfo(restoreInfo, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetRestoreInfo(const ::PerpcIce::PeRestoreInfo& restoreInfo, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_SetRestoreInfo(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_SetRestoreInfo(restoreInfo, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetRestoreInfo(const ::PerpcIce::PeRestoreInfo& restoreInfo)
    {
        return begin_SetRestoreInfo(restoreInfo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetRestoreInfo(const ::PerpcIce::PeRestoreInfo& restoreInfo, const ::Ice::Context& __ctx)
    {
        return begin_SetRestoreInfo(restoreInfo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetRestoreInfo(const ::PerpcIce::PeRestoreInfo& restoreInfo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRestoreInfo(restoreInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetRestoreInfo(const ::PerpcIce::PeRestoreInfo& restoreInfo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRestoreInfo(restoreInfo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetRestoreInfo(const ::PerpcIce::PeRestoreInfo& restoreInfo, const ::PerpcIce::Callback_PeGuestReceiver_SetRestoreInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRestoreInfo(restoreInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetRestoreInfo(const ::PerpcIce::PeRestoreInfo& restoreInfo, const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeGuestReceiver_SetRestoreInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRestoreInfo(restoreInfo, &__ctx, __del, __cookie);
    }

    void end_SetRestoreInfo(const ::Ice::AsyncResultPtr&);
    
private:

    void SetRestoreInfo(const ::PerpcIce::PeRestoreInfo&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetRestoreInfo(const ::PerpcIce::PeRestoreInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string JsonFunc(const ::std::string& inputJson, const ::PerpcIce::BinaryStream& inputBs, ::PerpcIce::BinaryStream& outputBs)
    {
        return JsonFunc(inputJson, inputBs, outputBs, 0);
    }
    ::std::string JsonFunc(const ::std::string& inputJson, const ::PerpcIce::BinaryStream& inputBs, ::PerpcIce::BinaryStream& outputBs, const ::Ice::Context& __ctx)
    {
        return JsonFunc(inputJson, inputBs, outputBs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_JsonFunc(const ::std::string& inputJson, const ::PerpcIce::BinaryStream& inputBs, const ::IceInternal::Function<void (const ::std::string&, const ::PerpcIce::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_JsonFunc(inputJson, inputBs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_JsonFunc(const ::std::string& inputJson, const ::PerpcIce::BinaryStream& inputBs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_JsonFunc(inputJson, inputBs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_JsonFunc(const ::std::string& inputJson, const ::PerpcIce::BinaryStream& inputBs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&, const ::PerpcIce::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_JsonFunc(inputJson, inputBs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_JsonFunc(const ::std::string& inputJson, const ::PerpcIce::BinaryStream& inputBs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_JsonFunc(inputJson, inputBs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_JsonFunc(const ::std::string& inputJson, const ::PerpcIce::BinaryStream& inputBs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&, const ::PerpcIce::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&, const ::PerpcIce::BinaryStream&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
                ::PerpcIce::BinaryStream outputBs;
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_JsonFunc(outputBs, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, outputBs);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&, const ::PerpcIce::BinaryStream&)> _response;
        };
        return begin_JsonFunc(inputJson, inputBs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string& inputJson, const ::PerpcIce::BinaryStream& inputBs)
    {
        return begin_JsonFunc(inputJson, inputBs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string& inputJson, const ::PerpcIce::BinaryStream& inputBs, const ::Ice::Context& __ctx)
    {
        return begin_JsonFunc(inputJson, inputBs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string& inputJson, const ::PerpcIce::BinaryStream& inputBs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFunc(inputJson, inputBs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string& inputJson, const ::PerpcIce::BinaryStream& inputBs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFunc(inputJson, inputBs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string& inputJson, const ::PerpcIce::BinaryStream& inputBs, const ::PerpcIce::Callback_PeGuestReceiver_JsonFuncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFunc(inputJson, inputBs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string& inputJson, const ::PerpcIce::BinaryStream& inputBs, const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeGuestReceiver_JsonFuncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFunc(inputJson, inputBs, &__ctx, __del, __cookie);
    }

    ::std::string end_JsonFunc(::PerpcIce::BinaryStream& outputBs, const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string JsonFunc(const ::std::string&, const ::PerpcIce::BinaryStream&, ::PerpcIce::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string&, const ::PerpcIce::BinaryStream&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_secure(bool __secure) const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_twoway() const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_oneway() const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_batchOneway() const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_datagram() const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_batchDatagram() const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_compress(bool __compress) const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PeGuestReceiver> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PeGuestReceiver*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PeSession : virtual public ::IceProxy::Ice::Object
{
public:

    void InitiatePeReceiver(const ::Ice::Identity& ident)
    {
        InitiatePeReceiver(ident, 0);
    }
    void InitiatePeReceiver(const ::Ice::Identity& ident, const ::Ice::Context& __ctx)
    {
        InitiatePeReceiver(ident, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_InitiatePeReceiver(const ::Ice::Identity& ident, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_InitiatePeReceiver(ident, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_InitiatePeReceiver(const ::Ice::Identity& ident, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_InitiatePeReceiver(ident, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_InitiatePeReceiver(const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_InitiatePeReceiver(ident, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_InitiatePeReceiver(const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_InitiatePeReceiver(ident, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_InitiatePeReceiver(const ::Ice::Identity& ident, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_InitiatePeReceiver(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_InitiatePeReceiver(ident, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_InitiatePeReceiver(const ::Ice::Identity& ident)
    {
        return begin_InitiatePeReceiver(ident, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_InitiatePeReceiver(const ::Ice::Identity& ident, const ::Ice::Context& __ctx)
    {
        return begin_InitiatePeReceiver(ident, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_InitiatePeReceiver(const ::Ice::Identity& ident, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_InitiatePeReceiver(ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_InitiatePeReceiver(const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_InitiatePeReceiver(ident, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_InitiatePeReceiver(const ::Ice::Identity& ident, const ::PerpcIce::Callback_PeSession_InitiatePeReceiverPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_InitiatePeReceiver(ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_InitiatePeReceiver(const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeSession_InitiatePeReceiverPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_InitiatePeReceiver(ident, &__ctx, __del, __cookie);
    }

    void end_InitiatePeReceiver(const ::Ice::AsyncResultPtr&);
    
private:

    void InitiatePeReceiver(const ::Ice::Identity&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_InitiatePeReceiver(const ::Ice::Identity&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void GetPeHostIdent(::std::string& peHostIdent)
    {
        GetPeHostIdent(peHostIdent, 0);
    }
    void GetPeHostIdent(::std::string& peHostIdent, const ::Ice::Context& __ctx)
    {
        GetPeHostIdent(peHostIdent, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetPeHostIdent(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetPeHostIdent(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetPeHostIdent(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetPeHostIdent(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetPeHostIdent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetPeHostIdent(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetPeHostIdent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetPeHostIdent(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetPeHostIdent(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
                ::std::string peHostIdent;
                try
                {
                    __proxy->end_GetPeHostIdent(peHostIdent, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(peHostIdent);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_GetPeHostIdent(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetPeHostIdent()
    {
        return begin_GetPeHostIdent(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetPeHostIdent(const ::Ice::Context& __ctx)
    {
        return begin_GetPeHostIdent(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetPeHostIdent(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetPeHostIdent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetPeHostIdent(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetPeHostIdent(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetPeHostIdent(const ::PerpcIce::Callback_PeSession_GetPeHostIdentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetPeHostIdent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetPeHostIdent(const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeSession_GetPeHostIdentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetPeHostIdent(&__ctx, __del, __cookie);
    }

    void end_GetPeHostIdent(::std::string& peHostIdent, const ::Ice::AsyncResultPtr&);
    
private:

    void GetPeHostIdent(::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetPeHostIdent(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void UnInit(::Ice::Int dwStatus)
    {
        UnInit(dwStatus, 0);
    }
    void UnInit(::Ice::Int dwStatus, const ::Ice::Context& __ctx)
    {
        UnInit(dwStatus, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_UnInit(::Ice::Int dwStatus, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_UnInit(dwStatus, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_UnInit(::Ice::Int dwStatus, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UnInit(dwStatus, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_UnInit(::Ice::Int dwStatus, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_UnInit(dwStatus, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_UnInit(::Ice::Int dwStatus, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UnInit(dwStatus, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_UnInit(::Ice::Int dwStatus)
    {
        return begin_UnInit(dwStatus, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UnInit(::Ice::Int dwStatus, const ::Ice::Context& __ctx)
    {
        return begin_UnInit(dwStatus, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UnInit(::Ice::Int dwStatus, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UnInit(dwStatus, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UnInit(::Ice::Int dwStatus, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UnInit(dwStatus, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UnInit(::Ice::Int dwStatus, const ::PerpcIce::Callback_PeSession_UnInitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UnInit(dwStatus, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UnInit(::Ice::Int dwStatus, const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeSession_UnInitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UnInit(dwStatus, &__ctx, __del, __cookie);
    }

    void end_UnInit(const ::Ice::AsyncResultPtr&);
    
private:

    void UnInit(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_UnInit(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetBootList(::Ice::Int index, ::std::string& bootlist)
    {
        return GetBootList(index, bootlist, 0);
    }
    ::Ice::Int GetBootList(::Ice::Int index, ::std::string& bootlist, const ::Ice::Context& __ctx)
    {
        return GetBootList(index, bootlist, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetBootList(::Ice::Int index, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBootList(index, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBootList(::Ice::Int index, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBootList(index, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetBootList(::Ice::Int index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBootList(index, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBootList(::Ice::Int index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBootList(index, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetBootList(::Ice::Int index, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
                ::std::string bootlist;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetBootList(bootlist, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, bootlist);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::std::string&)> _response;
        };
        return begin_GetBootList(index, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetBootList(::Ice::Int index)
    {
        return begin_GetBootList(index, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBootList(::Ice::Int index, const ::Ice::Context& __ctx)
    {
        return begin_GetBootList(index, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBootList(::Ice::Int index, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBootList(index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBootList(::Ice::Int index, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBootList(index, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBootList(::Ice::Int index, const ::PerpcIce::Callback_PeSession_GetBootListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBootList(index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBootList(::Ice::Int index, const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeSession_GetBootListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBootList(index, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetBootList(::std::string& bootlist, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetBootList(::Ice::Int, ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetBootList(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetKvmBitmapFile(::Ice::Int index, ::PerpcIce::BinaryStream& data)
    {
        return GetKvmBitmapFile(index, data, 0);
    }
    ::Ice::Int GetKvmBitmapFile(::Ice::Int index, ::PerpcIce::BinaryStream& data, const ::Ice::Context& __ctx)
    {
        return GetKvmBitmapFile(index, data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetKvmBitmapFile(::Ice::Int index, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetKvmBitmapFile(index, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetKvmBitmapFile(::Ice::Int index, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetKvmBitmapFile(index, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetKvmBitmapFile(::Ice::Int index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetKvmBitmapFile(index, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetKvmBitmapFile(::Ice::Int index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetKvmBitmapFile(index, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetKvmBitmapFile(::Ice::Int index, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
                ::PerpcIce::BinaryStream data;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetKvmBitmapFile(data, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, data);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)> _response;
        };
        return begin_GetKvmBitmapFile(index, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetKvmBitmapFile(::Ice::Int index)
    {
        return begin_GetKvmBitmapFile(index, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetKvmBitmapFile(::Ice::Int index, const ::Ice::Context& __ctx)
    {
        return begin_GetKvmBitmapFile(index, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetKvmBitmapFile(::Ice::Int index, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetKvmBitmapFile(index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetKvmBitmapFile(::Ice::Int index, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetKvmBitmapFile(index, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetKvmBitmapFile(::Ice::Int index, const ::PerpcIce::Callback_PeSession_GetKvmBitmapFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetKvmBitmapFile(index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetKvmBitmapFile(::Ice::Int index, const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeSession_GetKvmBitmapFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetKvmBitmapFile(index, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetKvmBitmapFile(::PerpcIce::BinaryStream& data, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetKvmBitmapFile(::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetKvmBitmapFile(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int ReadDiskData(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, ::PerpcIce::BinaryStream& pBuf)
    {
        return ReadDiskData(token, LBA, dwSectorCount, pBuf, 0);
    }
    ::Ice::Int ReadDiskData(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, ::PerpcIce::BinaryStream& pBuf, const ::Ice::Context& __ctx)
    {
        return ReadDiskData(token, LBA, dwSectorCount, pBuf, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ReadDiskData(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ReadDiskData(token, LBA, dwSectorCount, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ReadDiskData(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ReadDiskData(token, LBA, dwSectorCount, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ReadDiskData(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ReadDiskData(token, LBA, dwSectorCount, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ReadDiskData(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ReadDiskData(token, LBA, dwSectorCount, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_ReadDiskData(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
                ::PerpcIce::BinaryStream pBuf;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_ReadDiskData(pBuf, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, pBuf);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)> _response;
        };
        return begin_ReadDiskData(token, LBA, dwSectorCount, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_ReadDiskData(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount)
    {
        return begin_ReadDiskData(token, LBA, dwSectorCount, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReadDiskData(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::Ice::Context& __ctx)
    {
        return begin_ReadDiskData(token, LBA, dwSectorCount, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReadDiskData(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadDiskData(token, LBA, dwSectorCount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReadDiskData(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadDiskData(token, LBA, dwSectorCount, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReadDiskData(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::PerpcIce::Callback_PeSession_ReadDiskDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadDiskData(token, LBA, dwSectorCount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReadDiskData(const ::std::string& token, ::Ice::Long LBA, ::Ice::Int dwSectorCount, const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeSession_ReadDiskDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadDiskData(token, LBA, dwSectorCount, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_ReadDiskData(::PerpcIce::BinaryStream& pBuf, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int ReadDiskData(const ::std::string&, ::Ice::Long, ::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ReadDiskData(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int ReadKvmBootData(::Ice::Int threadIndex, ::Ice::Int blockIndex, bool& isEnd, bool& isSkip, ::std::string& diskToken, ::Ice::Long& LBA, ::Ice::Int& dwSectorCount, ::PerpcIce::BinaryStream& data)
    {
        return ReadKvmBootData(threadIndex, blockIndex, isEnd, isSkip, diskToken, LBA, dwSectorCount, data, 0);
    }
    ::Ice::Int ReadKvmBootData(::Ice::Int threadIndex, ::Ice::Int blockIndex, bool& isEnd, bool& isSkip, ::std::string& diskToken, ::Ice::Long& LBA, ::Ice::Int& dwSectorCount, ::PerpcIce::BinaryStream& data, const ::Ice::Context& __ctx)
    {
        return ReadKvmBootData(threadIndex, blockIndex, isEnd, isSkip, diskToken, LBA, dwSectorCount, data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ReadKvmBootData(::Ice::Int threadIndex, ::Ice::Int blockIndex, const ::IceInternal::Function<void (::Ice::Int, bool, bool, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::PerpcIce::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ReadKvmBootData(threadIndex, blockIndex, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ReadKvmBootData(::Ice::Int threadIndex, ::Ice::Int blockIndex, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ReadKvmBootData(threadIndex, blockIndex, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ReadKvmBootData(::Ice::Int threadIndex, ::Ice::Int blockIndex, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, bool, bool, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::PerpcIce::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ReadKvmBootData(threadIndex, blockIndex, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ReadKvmBootData(::Ice::Int threadIndex, ::Ice::Int blockIndex, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ReadKvmBootData(threadIndex, blockIndex, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_ReadKvmBootData(::Ice::Int threadIndex, ::Ice::Int blockIndex, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, bool, bool, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::PerpcIce::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, bool, bool, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::PerpcIce::BinaryStream&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
                bool isEnd;
                bool isSkip;
                ::std::string diskToken;
                ::Ice::Long LBA;
                ::Ice::Int dwSectorCount;
                ::PerpcIce::BinaryStream data;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_ReadKvmBootData(isEnd, isSkip, diskToken, LBA, dwSectorCount, data, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, isEnd, isSkip, diskToken, LBA, dwSectorCount, data);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, bool, bool, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::PerpcIce::BinaryStream&)> _response;
        };
        return begin_ReadKvmBootData(threadIndex, blockIndex, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_ReadKvmBootData(::Ice::Int threadIndex, ::Ice::Int blockIndex)
    {
        return begin_ReadKvmBootData(threadIndex, blockIndex, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReadKvmBootData(::Ice::Int threadIndex, ::Ice::Int blockIndex, const ::Ice::Context& __ctx)
    {
        return begin_ReadKvmBootData(threadIndex, blockIndex, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReadKvmBootData(::Ice::Int threadIndex, ::Ice::Int blockIndex, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadKvmBootData(threadIndex, blockIndex, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReadKvmBootData(::Ice::Int threadIndex, ::Ice::Int blockIndex, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadKvmBootData(threadIndex, blockIndex, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReadKvmBootData(::Ice::Int threadIndex, ::Ice::Int blockIndex, const ::PerpcIce::Callback_PeSession_ReadKvmBootDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadKvmBootData(threadIndex, blockIndex, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReadKvmBootData(::Ice::Int threadIndex, ::Ice::Int blockIndex, const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeSession_ReadKvmBootDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadKvmBootData(threadIndex, blockIndex, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_ReadKvmBootData(bool& isEnd, bool& isSkip, ::std::string& diskToken, ::Ice::Long& LBA, ::Ice::Int& dwSectorCount, ::PerpcIce::BinaryStream& data, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int ReadKvmBootData(::Ice::Int, ::Ice::Int, bool&, bool&, ::std::string&, ::Ice::Long&, ::Ice::Int&, ::PerpcIce::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ReadKvmBootData(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getUesdBlockBitmap(const ::std::string& token, ::Ice::Int index, ::PerpcIce::BinaryStream& bitmap)
    {
        return getUesdBlockBitmap(token, index, bitmap, 0);
    }
    ::Ice::Int getUesdBlockBitmap(const ::std::string& token, ::Ice::Int index, ::PerpcIce::BinaryStream& bitmap, const ::Ice::Context& __ctx)
    {
        return getUesdBlockBitmap(token, index, bitmap, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getUesdBlockBitmap(const ::std::string& token, ::Ice::Int index, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getUesdBlockBitmap(token, index, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getUesdBlockBitmap(const ::std::string& token, ::Ice::Int index, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getUesdBlockBitmap(token, index, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getUesdBlockBitmap(const ::std::string& token, ::Ice::Int index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getUesdBlockBitmap(token, index, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getUesdBlockBitmap(const ::std::string& token, ::Ice::Int index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getUesdBlockBitmap(token, index, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getUesdBlockBitmap(const ::std::string& token, ::Ice::Int index, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
                ::PerpcIce::BinaryStream bitmap;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getUesdBlockBitmap(bitmap, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, bitmap);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::PerpcIce::BinaryStream&)> _response;
        };
        return begin_getUesdBlockBitmap(token, index, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getUesdBlockBitmap(const ::std::string& token, ::Ice::Int index)
    {
        return begin_getUesdBlockBitmap(token, index, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUesdBlockBitmap(const ::std::string& token, ::Ice::Int index, const ::Ice::Context& __ctx)
    {
        return begin_getUesdBlockBitmap(token, index, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUesdBlockBitmap(const ::std::string& token, ::Ice::Int index, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUesdBlockBitmap(token, index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUesdBlockBitmap(const ::std::string& token, ::Ice::Int index, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUesdBlockBitmap(token, index, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUesdBlockBitmap(const ::std::string& token, ::Ice::Int index, const ::PerpcIce::Callback_PeSession_getUesdBlockBitmapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUesdBlockBitmap(token, index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUesdBlockBitmap(const ::std::string& token, ::Ice::Int index, const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeSession_getUesdBlockBitmapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUesdBlockBitmap(token, index, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_getUesdBlockBitmap(::PerpcIce::BinaryStream& bitmap, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getUesdBlockBitmap(const ::std::string&, ::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getUesdBlockBitmap(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void Refresh()
    {
        Refresh(0);
    }
    void Refresh(const ::Ice::Context& __ctx)
    {
        Refresh(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_Refresh(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_Refresh(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_Refresh(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_Refresh(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_Refresh(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_Refresh(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_Refresh(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_Refresh(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_Refresh()
    {
        return begin_Refresh(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Refresh(const ::Ice::Context& __ctx)
    {
        return begin_Refresh(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Refresh(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Refresh(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Refresh(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Refresh(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Refresh(const ::PerpcIce::Callback_PeSession_RefreshPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Refresh(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Refresh(const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeSession_RefreshPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Refresh(&__ctx, __del, __cookie);
    }

    void end_Refresh(const ::Ice::AsyncResultPtr&);
    
private:

    void Refresh(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Refresh(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void StartKvm()
    {
        StartKvm(0);
    }
    void StartKvm(const ::Ice::Context& __ctx)
    {
        StartKvm(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_StartKvm(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_StartKvm(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_StartKvm(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StartKvm(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_StartKvm(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_StartKvm(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_StartKvm(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StartKvm(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_StartKvm()
    {
        return begin_StartKvm(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartKvm(const ::Ice::Context& __ctx)
    {
        return begin_StartKvm(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartKvm(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartKvm(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartKvm(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartKvm(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartKvm(const ::PerpcIce::Callback_PeSession_StartKvmPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartKvm(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartKvm(const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeSession_StartKvmPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartKvm(&__ctx, __del, __cookie);
    }

    void end_StartKvm(const ::Ice::AsyncResultPtr&);
    
private:

    void StartKvm(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_StartKvm(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void destroy()
    {
        destroy(0);
    }
    void destroy(const ::Ice::Context& __ctx)
    {
        destroy(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_destroy()
    {
        return begin_destroy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx)
    {
        return begin_destroy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::PerpcIce::Callback_PeSession_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeSession_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    void end_destroy(const ::Ice::AsyncResultPtr&);
    
private:

    void destroy(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<PeSession> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PeSession> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PeSession> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PeSession> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PeSession> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PeSession> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PeSession> ice_secure(bool __secure) const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PeSession> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PeSession> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PeSession> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PeSession> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PeSession> ice_twoway() const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PeSession> ice_oneway() const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PeSession> ice_batchOneway() const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PeSession> ice_datagram() const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PeSession> ice_batchDatagram() const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PeSession> ice_compress(bool __compress) const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PeSession> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PeSession> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PeSession> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PeSession*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PeSessionFactory : virtual public ::IceProxy::Ice::Object
{
public:

    ::PerpcIce::PeSessionPrx CreateSession(const ::PerpcIce::PeGuestInfo& guestInfo, ::Ice::Int kvmSocketCount, const IceUtil::Optional< ::std::string>& moreInfo)
    {
        return CreateSession(guestInfo, kvmSocketCount, moreInfo, 0);
    }
    ::PerpcIce::PeSessionPrx CreateSession(const ::PerpcIce::PeGuestInfo& guestInfo, ::Ice::Int kvmSocketCount, const IceUtil::Optional< ::std::string>& moreInfo, const ::Ice::Context& __ctx)
    {
        return CreateSession(guestInfo, kvmSocketCount, moreInfo, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_CreateSession(const ::PerpcIce::PeGuestInfo& guestInfo, ::Ice::Int kvmSocketCount, const IceUtil::Optional< ::std::string>& moreInfo, const ::IceInternal::Function<void (const ::PerpcIce::PeSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_CreateSession(guestInfo, kvmSocketCount, moreInfo, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_CreateSession(const ::PerpcIce::PeGuestInfo& guestInfo, ::Ice::Int kvmSocketCount, const IceUtil::Optional< ::std::string>& moreInfo, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_CreateSession(guestInfo, kvmSocketCount, moreInfo, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_CreateSession(const ::PerpcIce::PeGuestInfo& guestInfo, ::Ice::Int kvmSocketCount, const IceUtil::Optional< ::std::string>& moreInfo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::PerpcIce::PeSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_CreateSession(guestInfo, kvmSocketCount, moreInfo, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_CreateSession(const ::PerpcIce::PeGuestInfo& guestInfo, ::Ice::Int kvmSocketCount, const IceUtil::Optional< ::std::string>& moreInfo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_CreateSession(guestInfo, kvmSocketCount, moreInfo, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_CreateSession(const ::PerpcIce::PeGuestInfo& guestInfo, ::Ice::Int kvmSocketCount, const IceUtil::Optional< ::std::string>& moreInfo, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::PerpcIce::PeSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::PerpcIce::PeSessionPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::PerpcIce::PeSessionFactoryPrx __proxy = ::PerpcIce::PeSessionFactoryPrx::uncheckedCast(__result->getProxy());
                ::PerpcIce::PeSessionPrx __ret;
                try
                {
                    __ret = __proxy->end_CreateSession(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::PerpcIce::PeSessionPrx&)> _response;
        };
        return begin_CreateSession(guestInfo, kvmSocketCount, moreInfo, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_CreateSession(const ::PerpcIce::PeGuestInfo& guestInfo, ::Ice::Int kvmSocketCount, const IceUtil::Optional< ::std::string>& moreInfo)
    {
        return begin_CreateSession(guestInfo, kvmSocketCount, moreInfo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CreateSession(const ::PerpcIce::PeGuestInfo& guestInfo, ::Ice::Int kvmSocketCount, const IceUtil::Optional< ::std::string>& moreInfo, const ::Ice::Context& __ctx)
    {
        return begin_CreateSession(guestInfo, kvmSocketCount, moreInfo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CreateSession(const ::PerpcIce::PeGuestInfo& guestInfo, ::Ice::Int kvmSocketCount, const IceUtil::Optional< ::std::string>& moreInfo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CreateSession(guestInfo, kvmSocketCount, moreInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CreateSession(const ::PerpcIce::PeGuestInfo& guestInfo, ::Ice::Int kvmSocketCount, const IceUtil::Optional< ::std::string>& moreInfo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CreateSession(guestInfo, kvmSocketCount, moreInfo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CreateSession(const ::PerpcIce::PeGuestInfo& guestInfo, ::Ice::Int kvmSocketCount, const IceUtil::Optional< ::std::string>& moreInfo, const ::PerpcIce::Callback_PeSessionFactory_CreateSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CreateSession(guestInfo, kvmSocketCount, moreInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CreateSession(const ::PerpcIce::PeGuestInfo& guestInfo, ::Ice::Int kvmSocketCount, const IceUtil::Optional< ::std::string>& moreInfo, const ::Ice::Context& __ctx, const ::PerpcIce::Callback_PeSessionFactory_CreateSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CreateSession(guestInfo, kvmSocketCount, moreInfo, &__ctx, __del, __cookie);
    }

    ::PerpcIce::PeSessionPrx end_CreateSession(const ::Ice::AsyncResultPtr&);
    
private:

    ::PerpcIce::PeSessionPrx CreateSession(const ::PerpcIce::PeGuestInfo&, ::Ice::Int, const IceUtil::Optional< ::std::string>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_CreateSession(const ::PerpcIce::PeGuestInfo&, ::Ice::Int, const IceUtil::Optional< ::std::string>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_secure(bool __secure) const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_twoway() const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_oneway() const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_batchOneway() const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_datagram() const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_batchDatagram() const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_compress(bool __compress) const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PeSessionFactory> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PeSessionFactory*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace PerpcIce
{

class PeGuestReceiver : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int ReadDisk(const ::std::string&, ::Ice::Long, ::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int WriteDisk(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void SetRestoreExcludeInfo(const ::PerpcIce::ExcludeBrokenBlocks&, const ::PerpcIce::ExcludeBlockRuns&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void KvmEnd(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetClassHWInfo(const ::std::string&, ::Ice::Int, ::PerpcIce::HWInfos&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetNetAdapterInfo(::PerpcIce::NetAdapterInfos&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void SetRestoreInfo(const ::PerpcIce::PeRestoreInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string JsonFunc(const ::std::string&, const ::PerpcIce::BinaryStream&, ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class PeSession : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void InitiatePeReceiver(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void GetPeHostIdent(::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void UnInit(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetBootList(::Ice::Int, ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetKvmBitmapFile(::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int ReadDiskData(const ::std::string&, ::Ice::Long, ::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int ReadKvmBootData(::Ice::Int, ::Ice::Int, bool&, bool&, ::std::string&, ::Ice::Long&, ::Ice::Int&, ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getUesdBlockBitmap(const ::std::string&, ::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void Refresh(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void StartKvm(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class PeSessionFactory : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::PerpcIce::PeSessionPrx CreateSession(const ::PerpcIce::PeGuestInfo&, ::Ice::Int, const IceUtil::Optional< ::std::string>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace PerpcIce
{

class PeGuestReceiver : virtual public ::IceDelegate::PerpcIce::PeGuestReceiver,
                        virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int ReadDisk(const ::std::string&, ::Ice::Long, ::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int WriteDisk(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void SetRestoreExcludeInfo(const ::PerpcIce::ExcludeBrokenBlocks&, const ::PerpcIce::ExcludeBlockRuns&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void KvmEnd(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetClassHWInfo(const ::std::string&, ::Ice::Int, ::PerpcIce::HWInfos&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetNetAdapterInfo(::PerpcIce::NetAdapterInfos&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void SetRestoreInfo(const ::PerpcIce::PeRestoreInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string JsonFunc(const ::std::string&, const ::PerpcIce::BinaryStream&, ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class PeSession : virtual public ::IceDelegate::PerpcIce::PeSession,
                  virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void InitiatePeReceiver(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void GetPeHostIdent(::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void UnInit(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetBootList(::Ice::Int, ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetKvmBitmapFile(::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int ReadDiskData(const ::std::string&, ::Ice::Long, ::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int ReadKvmBootData(::Ice::Int, ::Ice::Int, bool&, bool&, ::std::string&, ::Ice::Long&, ::Ice::Int&, ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getUesdBlockBitmap(const ::std::string&, ::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void Refresh(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void StartKvm(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class PeSessionFactory : virtual public ::IceDelegate::PerpcIce::PeSessionFactory,
                         virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::PerpcIce::PeSessionPrx CreateSession(const ::PerpcIce::PeGuestInfo&, ::Ice::Int, const IceUtil::Optional< ::std::string>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace PerpcIce
{

class PeGuestReceiver : virtual public ::IceDelegate::PerpcIce::PeGuestReceiver,
                        virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int ReadDisk(const ::std::string&, ::Ice::Long, ::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int WriteDisk(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void SetRestoreExcludeInfo(const ::PerpcIce::ExcludeBrokenBlocks&, const ::PerpcIce::ExcludeBlockRuns&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void KvmEnd(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetClassHWInfo(const ::std::string&, ::Ice::Int, ::PerpcIce::HWInfos&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetNetAdapterInfo(::PerpcIce::NetAdapterInfos&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void SetRestoreInfo(const ::PerpcIce::PeRestoreInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string JsonFunc(const ::std::string&, const ::PerpcIce::BinaryStream&, ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class PeSession : virtual public ::IceDelegate::PerpcIce::PeSession,
                  virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void InitiatePeReceiver(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void GetPeHostIdent(::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void UnInit(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetBootList(::Ice::Int, ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetKvmBitmapFile(::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int ReadDiskData(const ::std::string&, ::Ice::Long, ::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int ReadKvmBootData(::Ice::Int, ::Ice::Int, bool&, bool&, ::std::string&, ::Ice::Long&, ::Ice::Int&, ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getUesdBlockBitmap(const ::std::string&, ::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void Refresh(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void StartKvm(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class PeSessionFactory : virtual public ::IceDelegate::PerpcIce::PeSessionFactory,
                         virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::PerpcIce::PeSessionPrx CreateSession(const ::PerpcIce::PeGuestInfo&, ::Ice::Int, const IceUtil::Optional< ::std::string>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace PerpcIce
{

class PeGuestReceiver : virtual public ::Ice::Object
{
public:

    typedef PeGuestReceiverPrx ProxyType;
    typedef PeGuestReceiverPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int ReadDisk(const ::std::string&, ::Ice::Long, ::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ReadDisk(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int WriteDisk(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::PerpcIce::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___WriteDisk(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void SetRestoreExcludeInfo(const ::PerpcIce::ExcludeBrokenBlocks&, const ::PerpcIce::ExcludeBlockRuns&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetRestoreExcludeInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void KvmEnd(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___KvmEnd(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetClassHWInfo(const ::std::string&, ::Ice::Int, ::PerpcIce::HWInfos&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetClassHWInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetNetAdapterInfo(::PerpcIce::NetAdapterInfos&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetNetAdapterInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void SetRestoreInfo(const ::PerpcIce::PeRestoreInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetRestoreInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string JsonFunc(const ::std::string&, const ::PerpcIce::BinaryStream&, ::PerpcIce::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___JsonFunc(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const PeGuestReceiver& l, const PeGuestReceiver& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PeGuestReceiver& l, const PeGuestReceiver& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PeSession : virtual public ::Ice::Object
{
public:

    typedef PeSessionPrx ProxyType;
    typedef PeSessionPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void InitiatePeReceiver(const ::Ice::Identity&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___InitiatePeReceiver(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void GetPeHostIdent(::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetPeHostIdent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void UnInit(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___UnInit(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetBootList(::Ice::Int, ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetBootList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetKvmBitmapFile(::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetKvmBitmapFile(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ReadDiskData(const ::std::string&, ::Ice::Long, ::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ReadDiskData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ReadKvmBootData(::Ice::Int, ::Ice::Int, bool&, bool&, ::std::string&, ::Ice::Long&, ::Ice::Int&, ::PerpcIce::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ReadKvmBootData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getUesdBlockBitmap(const ::std::string&, ::Ice::Int, ::PerpcIce::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getUesdBlockBitmap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void Refresh(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Refresh(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void StartKvm(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___StartKvm(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void destroy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___destroy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const PeSession& l, const PeSession& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PeSession& l, const PeSession& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PeSessionFactory : virtual public ::Ice::Object
{
public:

    typedef PeSessionFactoryPrx ProxyType;
    typedef PeSessionFactoryPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::PerpcIce::PeSessionPrx CreateSession(const ::PerpcIce::PeGuestInfo&, ::Ice::Int, const IceUtil::Optional< ::std::string>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___CreateSession(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const PeSessionFactory& l, const PeSessionFactory& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PeSessionFactory& l, const PeSessionFactory& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace PerpcIce
{

template<class T>
class CallbackNC_PeGuestReceiver_ReadDisk : public Callback_PeGuestReceiver_ReadDisk_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::PerpcIce::BinaryStream&);

    CallbackNC_PeGuestReceiver_ReadDisk(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::BinaryStream pBuf;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ReadDisk(pBuf, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, pBuf);
        }
    }

    Response response;
};

template<class T> Callback_PeGuestReceiver_ReadDiskPtr
newCallback_PeGuestReceiver_ReadDisk(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_ReadDisk<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeGuestReceiver_ReadDiskPtr
newCallback_PeGuestReceiver_ReadDisk(T* instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_ReadDisk<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeGuestReceiver_ReadDisk : public Callback_PeGuestReceiver_ReadDisk_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::PerpcIce::BinaryStream&, const CT&);

    Callback_PeGuestReceiver_ReadDisk(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::BinaryStream pBuf;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ReadDisk(pBuf, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, pBuf, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PeGuestReceiver_ReadDiskPtr
newCallback_PeGuestReceiver_ReadDisk(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_ReadDisk<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeGuestReceiver_ReadDiskPtr
newCallback_PeGuestReceiver_ReadDisk(T* instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_ReadDisk<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PeGuestReceiver_WriteDisk : public Callback_PeGuestReceiver_WriteDisk_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_PeGuestReceiver_WriteDisk(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_WriteDisk(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PeGuestReceiver_WriteDiskPtr
newCallback_PeGuestReceiver_WriteDisk(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_WriteDisk<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeGuestReceiver_WriteDiskPtr
newCallback_PeGuestReceiver_WriteDisk(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_WriteDisk<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeGuestReceiver_WriteDisk : public Callback_PeGuestReceiver_WriteDisk_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_PeGuestReceiver_WriteDisk(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_WriteDisk(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PeGuestReceiver_WriteDiskPtr
newCallback_PeGuestReceiver_WriteDisk(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_WriteDisk<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeGuestReceiver_WriteDiskPtr
newCallback_PeGuestReceiver_WriteDisk(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_WriteDisk<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PeGuestReceiver_SetRestoreExcludeInfo : public Callback_PeGuestReceiver_SetRestoreExcludeInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PeGuestReceiver_SetRestoreExcludeInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_SetRestoreExcludeInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_PeGuestReceiver_SetRestoreExcludeInfoPtr
newCallback_PeGuestReceiver_SetRestoreExcludeInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_SetRestoreExcludeInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeGuestReceiver_SetRestoreExcludeInfoPtr
newCallback_PeGuestReceiver_SetRestoreExcludeInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_SetRestoreExcludeInfo<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PeGuestReceiver_SetRestoreExcludeInfoPtr
newCallback_PeGuestReceiver_SetRestoreExcludeInfo(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_SetRestoreExcludeInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeGuestReceiver_SetRestoreExcludeInfoPtr
newCallback_PeGuestReceiver_SetRestoreExcludeInfo(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_SetRestoreExcludeInfo<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeGuestReceiver_SetRestoreExcludeInfo : public Callback_PeGuestReceiver_SetRestoreExcludeInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PeGuestReceiver_SetRestoreExcludeInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_SetRestoreExcludeInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PeGuestReceiver_SetRestoreExcludeInfoPtr
newCallback_PeGuestReceiver_SetRestoreExcludeInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_SetRestoreExcludeInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeGuestReceiver_SetRestoreExcludeInfoPtr
newCallback_PeGuestReceiver_SetRestoreExcludeInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_SetRestoreExcludeInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PeGuestReceiver_SetRestoreExcludeInfoPtr
newCallback_PeGuestReceiver_SetRestoreExcludeInfo(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_SetRestoreExcludeInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeGuestReceiver_SetRestoreExcludeInfoPtr
newCallback_PeGuestReceiver_SetRestoreExcludeInfo(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_SetRestoreExcludeInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PeGuestReceiver_KvmEnd : public Callback_PeGuestReceiver_KvmEnd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PeGuestReceiver_KvmEnd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_KvmEnd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_PeGuestReceiver_KvmEndPtr
newCallback_PeGuestReceiver_KvmEnd(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_KvmEnd<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeGuestReceiver_KvmEndPtr
newCallback_PeGuestReceiver_KvmEnd(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_KvmEnd<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PeGuestReceiver_KvmEndPtr
newCallback_PeGuestReceiver_KvmEnd(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_KvmEnd<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeGuestReceiver_KvmEndPtr
newCallback_PeGuestReceiver_KvmEnd(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_KvmEnd<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeGuestReceiver_KvmEnd : public Callback_PeGuestReceiver_KvmEnd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PeGuestReceiver_KvmEnd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_KvmEnd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PeGuestReceiver_KvmEndPtr
newCallback_PeGuestReceiver_KvmEnd(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_KvmEnd<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeGuestReceiver_KvmEndPtr
newCallback_PeGuestReceiver_KvmEnd(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_KvmEnd<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PeGuestReceiver_KvmEndPtr
newCallback_PeGuestReceiver_KvmEnd(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_KvmEnd<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeGuestReceiver_KvmEndPtr
newCallback_PeGuestReceiver_KvmEnd(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_KvmEnd<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PeGuestReceiver_GetClassHWInfo : public Callback_PeGuestReceiver_GetClassHWInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::PerpcIce::HWInfos&);

    CallbackNC_PeGuestReceiver_GetClassHWInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::HWInfos hwinfo;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetClassHWInfo(hwinfo, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, hwinfo);
        }
    }

    Response response;
};

template<class T> Callback_PeGuestReceiver_GetClassHWInfoPtr
newCallback_PeGuestReceiver_GetClassHWInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::HWInfos&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_GetClassHWInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeGuestReceiver_GetClassHWInfoPtr
newCallback_PeGuestReceiver_GetClassHWInfo(T* instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::HWInfos&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_GetClassHWInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeGuestReceiver_GetClassHWInfo : public Callback_PeGuestReceiver_GetClassHWInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::PerpcIce::HWInfos&, const CT&);

    Callback_PeGuestReceiver_GetClassHWInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::HWInfos hwinfo;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetClassHWInfo(hwinfo, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, hwinfo, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PeGuestReceiver_GetClassHWInfoPtr
newCallback_PeGuestReceiver_GetClassHWInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::HWInfos&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_GetClassHWInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeGuestReceiver_GetClassHWInfoPtr
newCallback_PeGuestReceiver_GetClassHWInfo(T* instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::HWInfos&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_GetClassHWInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PeGuestReceiver_GetNetAdapterInfo : public Callback_PeGuestReceiver_GetNetAdapterInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::PerpcIce::NetAdapterInfos&);

    CallbackNC_PeGuestReceiver_GetNetAdapterInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::NetAdapterInfos adapterInfos;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetNetAdapterInfo(adapterInfos, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, adapterInfos);
        }
    }

    Response response;
};

template<class T> Callback_PeGuestReceiver_GetNetAdapterInfoPtr
newCallback_PeGuestReceiver_GetNetAdapterInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::NetAdapterInfos&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_GetNetAdapterInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeGuestReceiver_GetNetAdapterInfoPtr
newCallback_PeGuestReceiver_GetNetAdapterInfo(T* instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::NetAdapterInfos&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_GetNetAdapterInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeGuestReceiver_GetNetAdapterInfo : public Callback_PeGuestReceiver_GetNetAdapterInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::PerpcIce::NetAdapterInfos&, const CT&);

    Callback_PeGuestReceiver_GetNetAdapterInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::NetAdapterInfos adapterInfos;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetNetAdapterInfo(adapterInfos, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, adapterInfos, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PeGuestReceiver_GetNetAdapterInfoPtr
newCallback_PeGuestReceiver_GetNetAdapterInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::NetAdapterInfos&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_GetNetAdapterInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeGuestReceiver_GetNetAdapterInfoPtr
newCallback_PeGuestReceiver_GetNetAdapterInfo(T* instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::NetAdapterInfos&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_GetNetAdapterInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PeGuestReceiver_SetRestoreInfo : public Callback_PeGuestReceiver_SetRestoreInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PeGuestReceiver_SetRestoreInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_SetRestoreInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_PeGuestReceiver_SetRestoreInfoPtr
newCallback_PeGuestReceiver_SetRestoreInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_SetRestoreInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeGuestReceiver_SetRestoreInfoPtr
newCallback_PeGuestReceiver_SetRestoreInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_SetRestoreInfo<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PeGuestReceiver_SetRestoreInfoPtr
newCallback_PeGuestReceiver_SetRestoreInfo(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_SetRestoreInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeGuestReceiver_SetRestoreInfoPtr
newCallback_PeGuestReceiver_SetRestoreInfo(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_SetRestoreInfo<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeGuestReceiver_SetRestoreInfo : public Callback_PeGuestReceiver_SetRestoreInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PeGuestReceiver_SetRestoreInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_SetRestoreInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PeGuestReceiver_SetRestoreInfoPtr
newCallback_PeGuestReceiver_SetRestoreInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_SetRestoreInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeGuestReceiver_SetRestoreInfoPtr
newCallback_PeGuestReceiver_SetRestoreInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_SetRestoreInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PeGuestReceiver_SetRestoreInfoPtr
newCallback_PeGuestReceiver_SetRestoreInfo(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_SetRestoreInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeGuestReceiver_SetRestoreInfoPtr
newCallback_PeGuestReceiver_SetRestoreInfo(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_SetRestoreInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PeGuestReceiver_JsonFunc : public Callback_PeGuestReceiver_JsonFunc_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&, const ::PerpcIce::BinaryStream&);

    CallbackNC_PeGuestReceiver_JsonFunc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::BinaryStream outputBs;
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_JsonFunc(outputBs, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, outputBs);
        }
    }

    Response response;
};

template<class T> Callback_PeGuestReceiver_JsonFuncPtr
newCallback_PeGuestReceiver_JsonFunc(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const ::PerpcIce::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_JsonFunc<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeGuestReceiver_JsonFuncPtr
newCallback_PeGuestReceiver_JsonFunc(T* instance, void (T::*cb)(const ::std::string&, const ::PerpcIce::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeGuestReceiver_JsonFunc<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeGuestReceiver_JsonFunc : public Callback_PeGuestReceiver_JsonFunc_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const ::PerpcIce::BinaryStream&, const CT&);

    Callback_PeGuestReceiver_JsonFunc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeGuestReceiverPrx __proxy = ::PerpcIce::PeGuestReceiverPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::BinaryStream outputBs;
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_JsonFunc(outputBs, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, outputBs, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PeGuestReceiver_JsonFuncPtr
newCallback_PeGuestReceiver_JsonFunc(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const ::PerpcIce::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_JsonFunc<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeGuestReceiver_JsonFuncPtr
newCallback_PeGuestReceiver_JsonFunc(T* instance, void (T::*cb)(const ::std::string&, const ::PerpcIce::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeGuestReceiver_JsonFunc<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PeSession_InitiatePeReceiver : public Callback_PeSession_InitiatePeReceiver_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PeSession_InitiatePeReceiver(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_InitiatePeReceiver(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_PeSession_InitiatePeReceiverPtr
newCallback_PeSession_InitiatePeReceiver(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_InitiatePeReceiver<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeSession_InitiatePeReceiverPtr
newCallback_PeSession_InitiatePeReceiver(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_InitiatePeReceiver<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PeSession_InitiatePeReceiverPtr
newCallback_PeSession_InitiatePeReceiver(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_InitiatePeReceiver<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeSession_InitiatePeReceiverPtr
newCallback_PeSession_InitiatePeReceiver(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_InitiatePeReceiver<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeSession_InitiatePeReceiver : public Callback_PeSession_InitiatePeReceiver_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PeSession_InitiatePeReceiver(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_InitiatePeReceiver(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PeSession_InitiatePeReceiverPtr
newCallback_PeSession_InitiatePeReceiver(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_InitiatePeReceiver<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_InitiatePeReceiverPtr
newCallback_PeSession_InitiatePeReceiver(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_InitiatePeReceiver<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_InitiatePeReceiverPtr
newCallback_PeSession_InitiatePeReceiver(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_InitiatePeReceiver<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_InitiatePeReceiverPtr
newCallback_PeSession_InitiatePeReceiver(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_InitiatePeReceiver<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PeSession_GetPeHostIdent : public Callback_PeSession_GetPeHostIdent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_PeSession_GetPeHostIdent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
        ::std::string peHostIdent;
        try
        {
            __proxy->end_GetPeHostIdent(peHostIdent, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(peHostIdent);
        }
    }

    Response response;
};

template<class T> Callback_PeSession_GetPeHostIdentPtr
newCallback_PeSession_GetPeHostIdent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_GetPeHostIdent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeSession_GetPeHostIdentPtr
newCallback_PeSession_GetPeHostIdent(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_GetPeHostIdent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeSession_GetPeHostIdent : public Callback_PeSession_GetPeHostIdent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_PeSession_GetPeHostIdent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
        ::std::string peHostIdent;
        try
        {
            __proxy->end_GetPeHostIdent(peHostIdent, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(peHostIdent, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PeSession_GetPeHostIdentPtr
newCallback_PeSession_GetPeHostIdent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_GetPeHostIdent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_GetPeHostIdentPtr
newCallback_PeSession_GetPeHostIdent(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_GetPeHostIdent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PeSession_UnInit : public Callback_PeSession_UnInit_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PeSession_UnInit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PeSession_UnInitPtr
newCallback_PeSession_UnInit(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_UnInit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeSession_UnInitPtr
newCallback_PeSession_UnInit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_UnInit<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PeSession_UnInitPtr
newCallback_PeSession_UnInit(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_UnInit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeSession_UnInitPtr
newCallback_PeSession_UnInit(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_UnInit<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeSession_UnInit : public Callback_PeSession_UnInit_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PeSession_UnInit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PeSession_UnInitPtr
newCallback_PeSession_UnInit(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_UnInit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_UnInitPtr
newCallback_PeSession_UnInit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_UnInit<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_UnInitPtr
newCallback_PeSession_UnInit(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_UnInit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_UnInitPtr
newCallback_PeSession_UnInit(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_UnInit<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PeSession_GetBootList : public Callback_PeSession_GetBootList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::std::string&);

    CallbackNC_PeSession_GetBootList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
        ::std::string bootlist;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetBootList(bootlist, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, bootlist);
        }
    }

    Response response;
};

template<class T> Callback_PeSession_GetBootListPtr
newCallback_PeSession_GetBootList(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_GetBootList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeSession_GetBootListPtr
newCallback_PeSession_GetBootList(T* instance, void (T::*cb)(::Ice::Int, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_GetBootList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeSession_GetBootList : public Callback_PeSession_GetBootList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::std::string&, const CT&);

    Callback_PeSession_GetBootList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
        ::std::string bootlist;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetBootList(bootlist, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, bootlist, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PeSession_GetBootListPtr
newCallback_PeSession_GetBootList(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_GetBootList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_GetBootListPtr
newCallback_PeSession_GetBootList(T* instance, void (T::*cb)(::Ice::Int, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_GetBootList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PeSession_GetKvmBitmapFile : public Callback_PeSession_GetKvmBitmapFile_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::PerpcIce::BinaryStream&);

    CallbackNC_PeSession_GetKvmBitmapFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::BinaryStream data;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetKvmBitmapFile(data, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, data);
        }
    }

    Response response;
};

template<class T> Callback_PeSession_GetKvmBitmapFilePtr
newCallback_PeSession_GetKvmBitmapFile(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_GetKvmBitmapFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeSession_GetKvmBitmapFilePtr
newCallback_PeSession_GetKvmBitmapFile(T* instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_GetKvmBitmapFile<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeSession_GetKvmBitmapFile : public Callback_PeSession_GetKvmBitmapFile_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::PerpcIce::BinaryStream&, const CT&);

    Callback_PeSession_GetKvmBitmapFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::BinaryStream data;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetKvmBitmapFile(data, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, data, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PeSession_GetKvmBitmapFilePtr
newCallback_PeSession_GetKvmBitmapFile(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_GetKvmBitmapFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_GetKvmBitmapFilePtr
newCallback_PeSession_GetKvmBitmapFile(T* instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_GetKvmBitmapFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PeSession_ReadDiskData : public Callback_PeSession_ReadDiskData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::PerpcIce::BinaryStream&);

    CallbackNC_PeSession_ReadDiskData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::BinaryStream pBuf;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ReadDiskData(pBuf, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, pBuf);
        }
    }

    Response response;
};

template<class T> Callback_PeSession_ReadDiskDataPtr
newCallback_PeSession_ReadDiskData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_ReadDiskData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeSession_ReadDiskDataPtr
newCallback_PeSession_ReadDiskData(T* instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_ReadDiskData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeSession_ReadDiskData : public Callback_PeSession_ReadDiskData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::PerpcIce::BinaryStream&, const CT&);

    Callback_PeSession_ReadDiskData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::BinaryStream pBuf;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ReadDiskData(pBuf, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, pBuf, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PeSession_ReadDiskDataPtr
newCallback_PeSession_ReadDiskData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_ReadDiskData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_ReadDiskDataPtr
newCallback_PeSession_ReadDiskData(T* instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_ReadDiskData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PeSession_ReadKvmBootData : public Callback_PeSession_ReadKvmBootData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, bool, bool, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::PerpcIce::BinaryStream&);

    CallbackNC_PeSession_ReadKvmBootData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
        bool isEnd;
        bool isSkip;
        ::std::string diskToken;
        ::Ice::Long LBA;
        ::Ice::Int dwSectorCount;
        ::PerpcIce::BinaryStream data;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ReadKvmBootData(isEnd, isSkip, diskToken, LBA, dwSectorCount, data, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, isEnd, isSkip, diskToken, LBA, dwSectorCount, data);
        }
    }

    Response response;
};

template<class T> Callback_PeSession_ReadKvmBootDataPtr
newCallback_PeSession_ReadKvmBootData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, bool, bool, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::PerpcIce::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_ReadKvmBootData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeSession_ReadKvmBootDataPtr
newCallback_PeSession_ReadKvmBootData(T* instance, void (T::*cb)(::Ice::Int, bool, bool, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::PerpcIce::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_ReadKvmBootData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeSession_ReadKvmBootData : public Callback_PeSession_ReadKvmBootData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, bool, bool, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::PerpcIce::BinaryStream&, const CT&);

    Callback_PeSession_ReadKvmBootData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
        bool isEnd;
        bool isSkip;
        ::std::string diskToken;
        ::Ice::Long LBA;
        ::Ice::Int dwSectorCount;
        ::PerpcIce::BinaryStream data;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ReadKvmBootData(isEnd, isSkip, diskToken, LBA, dwSectorCount, data, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, isEnd, isSkip, diskToken, LBA, dwSectorCount, data, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PeSession_ReadKvmBootDataPtr
newCallback_PeSession_ReadKvmBootData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, bool, bool, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::PerpcIce::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_ReadKvmBootData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_ReadKvmBootDataPtr
newCallback_PeSession_ReadKvmBootData(T* instance, void (T::*cb)(::Ice::Int, bool, bool, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::PerpcIce::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_ReadKvmBootData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PeSession_getUesdBlockBitmap : public Callback_PeSession_getUesdBlockBitmap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::PerpcIce::BinaryStream&);

    CallbackNC_PeSession_getUesdBlockBitmap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::BinaryStream bitmap;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getUesdBlockBitmap(bitmap, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, bitmap);
        }
    }

    Response response;
};

template<class T> Callback_PeSession_getUesdBlockBitmapPtr
newCallback_PeSession_getUesdBlockBitmap(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_getUesdBlockBitmap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeSession_getUesdBlockBitmapPtr
newCallback_PeSession_getUesdBlockBitmap(T* instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_getUesdBlockBitmap<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeSession_getUesdBlockBitmap : public Callback_PeSession_getUesdBlockBitmap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::PerpcIce::BinaryStream&, const CT&);

    Callback_PeSession_getUesdBlockBitmap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeSessionPrx __proxy = ::PerpcIce::PeSessionPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::BinaryStream bitmap;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getUesdBlockBitmap(bitmap, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, bitmap, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PeSession_getUesdBlockBitmapPtr
newCallback_PeSession_getUesdBlockBitmap(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_getUesdBlockBitmap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_getUesdBlockBitmapPtr
newCallback_PeSession_getUesdBlockBitmap(T* instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_getUesdBlockBitmap<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PeSession_Refresh : public Callback_PeSession_Refresh_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PeSession_Refresh(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PeSession_RefreshPtr
newCallback_PeSession_Refresh(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_Refresh<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeSession_RefreshPtr
newCallback_PeSession_Refresh(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_Refresh<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PeSession_RefreshPtr
newCallback_PeSession_Refresh(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_Refresh<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeSession_RefreshPtr
newCallback_PeSession_Refresh(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_Refresh<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeSession_Refresh : public Callback_PeSession_Refresh_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PeSession_Refresh(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PeSession_RefreshPtr
newCallback_PeSession_Refresh(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_Refresh<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_RefreshPtr
newCallback_PeSession_Refresh(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_Refresh<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_RefreshPtr
newCallback_PeSession_Refresh(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_Refresh<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_RefreshPtr
newCallback_PeSession_Refresh(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_Refresh<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PeSession_StartKvm : public Callback_PeSession_StartKvm_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PeSession_StartKvm(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PeSession_StartKvmPtr
newCallback_PeSession_StartKvm(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_StartKvm<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeSession_StartKvmPtr
newCallback_PeSession_StartKvm(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_StartKvm<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PeSession_StartKvmPtr
newCallback_PeSession_StartKvm(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_StartKvm<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeSession_StartKvmPtr
newCallback_PeSession_StartKvm(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_StartKvm<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeSession_StartKvm : public Callback_PeSession_StartKvm_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PeSession_StartKvm(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PeSession_StartKvmPtr
newCallback_PeSession_StartKvm(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_StartKvm<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_StartKvmPtr
newCallback_PeSession_StartKvm(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_StartKvm<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_StartKvmPtr
newCallback_PeSession_StartKvm(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_StartKvm<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_StartKvmPtr
newCallback_PeSession_StartKvm(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_StartKvm<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PeSession_destroy : public Callback_PeSession_destroy_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PeSession_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PeSession_destroyPtr
newCallback_PeSession_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeSession_destroyPtr
newCallback_PeSession_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_destroy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PeSession_destroyPtr
newCallback_PeSession_destroy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeSession_destroyPtr
newCallback_PeSession_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSession_destroy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeSession_destroy : public Callback_PeSession_destroy_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PeSession_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PeSession_destroyPtr
newCallback_PeSession_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_destroyPtr
newCallback_PeSession_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_destroyPtr
newCallback_PeSession_destroy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeSession_destroyPtr
newCallback_PeSession_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSession_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PeSessionFactory_CreateSession : public Callback_PeSessionFactory_CreateSession_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::PerpcIce::PeSessionPrx&);

    CallbackNC_PeSessionFactory_CreateSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeSessionFactoryPrx __proxy = ::PerpcIce::PeSessionFactoryPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::PeSessionPrx __ret;
        try
        {
            __ret = __proxy->end_CreateSession(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PeSessionFactory_CreateSessionPtr
newCallback_PeSessionFactory_CreateSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::PerpcIce::PeSessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSessionFactory_CreateSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeSessionFactory_CreateSessionPtr
newCallback_PeSessionFactory_CreateSession(T* instance, void (T::*cb)(const ::PerpcIce::PeSessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeSessionFactory_CreateSession<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeSessionFactory_CreateSession : public Callback_PeSessionFactory_CreateSession_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::PerpcIce::PeSessionPrx&, const CT&);

    Callback_PeSessionFactory_CreateSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::PerpcIce::PeSessionFactoryPrx __proxy = ::PerpcIce::PeSessionFactoryPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::PeSessionPrx __ret;
        try
        {
            __ret = __proxy->end_CreateSession(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PeSessionFactory_CreateSessionPtr
newCallback_PeSessionFactory_CreateSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::PerpcIce::PeSessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSessionFactory_CreateSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeSessionFactory_CreateSessionPtr
newCallback_PeSessionFactory_CreateSession(T* instance, void (T::*cb)(const ::PerpcIce::PeSessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeSessionFactory_CreateSession<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

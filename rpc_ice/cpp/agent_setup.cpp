// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `agent_setup.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <agent_setup.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __AgentSetup__AgentSetupReceiver__queryRunnerAbsPath_name = "queryRunnerAbsPath";

const ::std::string __AgentSetup__AgentSetupReceiver__searchBootFileAbsPath_name = "searchBootFileAbsPath";

const ::std::string __AgentSetup__AgentSetupReceiver__prepareAgentInfo_name = "prepareAgentInfo";

const ::std::string __AgentSetup__AgentSetupReceiver__getFileInfo_name = "getFileInfo";

const ::std::string __AgentSetup__AgentSetupReceiver__generateKeyInfos_name = "generateKeyInfos";

const ::std::string __AgentSetup__AgentSetupReceiver__open_name = "open";

const ::std::string __AgentSetup__AgentSetupReceiver__pread_name = "pread";

const ::std::string __AgentSetup__AgentSetupReceiver__pwrite_name = "pwrite";

const ::std::string __AgentSetup__AgentSetupReceiver__close_name = "close";

const ::std::string __AgentSetup__AgentSetupReceiver__extractFile_name = "extractFile";

const ::std::string __AgentSetup__AgentSetupReceiver__executeCommand_name = "executeCommand";

const ::std::string __AgentSetup__AgentSetupReceiver__reportStatus_name = "reportStatus";

const ::std::string __AgentSetup__AgentSetupReceiver__exit_name = "exit";

const ::std::string __AgentSetup__AgentSetupSession__queryName_name = "queryName";

const ::std::string __AgentSetup__AgentSetupSession__destroy_name = "destroy";

const ::std::string __AgentSetup__AgentSetupSession__initiateReceiver_name = "initiateReceiver";

const ::std::string __AgentSetup__AgentSetupSession__refresh_name = "refresh";

const ::std::string __AgentSetup__AgentSetupSession__startSetup_name = "startSetup";

const ::std::string __AgentSetup__AgentSetupSessionFactory__create_name = "create";

}
::IceProxy::Ice::Object* ::IceProxy::AgentSetup::upCast(::IceProxy::AgentSetup::AgentSetupReceiver* p) { return p; }

void
::IceProxy::AgentSetup::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::AgentSetup::AgentSetupReceiver>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::AgentSetup::AgentSetupReceiver;
        v->__copyFrom(proxy);
    }
}

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::queryRunnerAbsPath(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__queryRunnerAbsPath_name);
    ::IceInternal::Outgoing __og(this, __AgentSetup__AgentSetupReceiver__queryRunnerAbsPath_name, ::Ice::Idempotent, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::std::string __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_queryRunnerAbsPath(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__queryRunnerAbsPath_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__queryRunnerAbsPath_name, __del, __cookie);
    try
    {
        __result->prepare(__AgentSetup__AgentSetupReceiver__queryRunnerAbsPath_name, ::Ice::Idempotent, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::__begin_queryRunnerAbsPath(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
            ::std::string __ret;
            try
            {
                __ret = __proxy->end_queryRunnerAbsPath(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_queryRunnerAbsPath(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::end_queryRunnerAbsPath(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__queryRunnerAbsPath_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::searchBootFileAbsPath(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__searchBootFileAbsPath_name);
    ::IceInternal::Outgoing __og(this, __AgentSetup__AgentSetupReceiver__searchBootFileAbsPath_name, ::Ice::Idempotent, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::std::string __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_searchBootFileAbsPath(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__searchBootFileAbsPath_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__searchBootFileAbsPath_name, __del, __cookie);
    try
    {
        __result->prepare(__AgentSetup__AgentSetupReceiver__searchBootFileAbsPath_name, ::Ice::Idempotent, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::__begin_searchBootFileAbsPath(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
            ::std::string __ret;
            try
            {
                __ret = __proxy->end_searchBootFileAbsPath(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_searchBootFileAbsPath(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::end_searchBootFileAbsPath(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__searchBootFileAbsPath_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::prepareAgentInfo(const ::std::string& __p_flagJson, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__prepareAgentInfo_name);
    ::IceInternal::Outgoing __og(this, __AgentSetup__AgentSetupReceiver__prepareAgentInfo_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_flagJson);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::std::string __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_prepareAgentInfo(const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__prepareAgentInfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__prepareAgentInfo_name, __del, __cookie);
    try
    {
        __result->prepare(__AgentSetup__AgentSetupReceiver__prepareAgentInfo_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_flagJson);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::__begin_prepareAgentInfo(const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
            ::std::string __ret;
            try
            {
                __ret = __proxy->end_prepareAgentInfo(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_prepareAgentInfo(__p_flagJson, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::end_prepareAgentInfo(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__prepareAgentInfo_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::getFileInfo(const ::std::string& __p_fileName, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__getFileInfo_name);
    ::IceInternal::Outgoing __og(this, __AgentSetup__AgentSetupReceiver__getFileInfo_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_fileName);
        __os->write(__p_flagJson);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::std::string __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_getFileInfo(const ::std::string& __p_fileName, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__getFileInfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__getFileInfo_name, __del, __cookie);
    try
    {
        __result->prepare(__AgentSetup__AgentSetupReceiver__getFileInfo_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_fileName);
        __os->write(__p_flagJson);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::__begin_getFileInfo(const ::std::string& __p_fileName, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
            ::std::string __ret;
            try
            {
                __ret = __proxy->end_getFileInfo(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_getFileInfo(__p_fileName, __p_flagJson, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::end_getFileInfo(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__getFileInfo_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::AgentSetup::AgentSetupReceiver::generateKeyInfos(const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__generateKeyInfos_name);
    ::IceInternal::Outgoing __og(this, __AgentSetup__AgentSetupReceiver__generateKeyInfos_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_absFilePath);
        __os->write(__p_flagJson);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_generateKeyInfos(const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__generateKeyInfos_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__generateKeyInfos_name, __del, __cookie);
    try
    {
        __result->prepare(__AgentSetup__AgentSetupReceiver__generateKeyInfos_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_absFilePath);
        __os->write(__p_flagJson);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::__begin_generateKeyInfos(const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_generateKeyInfos(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_generateKeyInfos(__p_absFilePath, __p_flagJson, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::AgentSetup::AgentSetupReceiver::end_generateKeyInfos(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__generateKeyInfos_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::open(const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__open_name);
    ::IceInternal::Outgoing __og(this, __AgentSetup__AgentSetupReceiver__open_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_absFilePath);
        __os->write(__p_flagJson);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::std::string __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_open(const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__open_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__open_name, __del, __cookie);
    try
    {
        __result->prepare(__AgentSetup__AgentSetupReceiver__open_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_absFilePath);
        __os->write(__p_flagJson);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::__begin_open(const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
            ::std::string __ret;
            try
            {
                __ret = __proxy->end_open(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_open(__p_absFilePath, __p_flagJson, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::std::string
IceProxy::AgentSetup::AgentSetupReceiver::end_open(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__open_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::ByteSeq
IceProxy::AgentSetup::AgentSetupReceiver::pread(const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__pread_name);
    ::IceInternal::Outgoing __og(this, __AgentSetup__AgentSetupReceiver__pread_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_byteOffset);
        __os->write(__p_bytes);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::ByteSeq __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_pread(const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__pread_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__pread_name, __del, __cookie);
    try
    {
        __result->prepare(__AgentSetup__AgentSetupReceiver__pread_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_byteOffset);
        __os->write(__p_bytes);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::__begin_pread(const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Ice::ByteSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
            ::Ice::ByteSeq __ret;
            try
            {
                __ret = __proxy->end_pread(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::Ice::ByteSeq&)> _response;
    };
    return begin_pread(__p_handle, __p_byteOffset, __p_bytes, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::ByteSeq
IceProxy::AgentSetup::AgentSetupReceiver::end_pread(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__pread_name);
    ::Ice::ByteSeq __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::AgentSetup::AgentSetupReceiver::pwrite(const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::ByteSeq& __p_data, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__pwrite_name);
    ::IceInternal::Outgoing __og(this, __AgentSetup__AgentSetupReceiver__pwrite_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_byteOffset);
        __os->write(__p_bytes);
        __os->write(__p_data);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_pwrite(const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::ByteSeq& __p_data, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__pwrite_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__pwrite_name, __del, __cookie);
    try
    {
        __result->prepare(__AgentSetup__AgentSetupReceiver__pwrite_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __os->write(__p_byteOffset);
        __os->write(__p_bytes);
        __os->write(__p_data);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::__begin_pwrite(const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::ByteSeq& __p_data, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_pwrite(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_pwrite(__p_handle, __p_byteOffset, __p_bytes, __p_data, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::AgentSetup::AgentSetupReceiver::end_pwrite(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__pwrite_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::AgentSetup::AgentSetupReceiver::close(const ::std::string& __p_handle, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__close_name);
    ::IceInternal::Outgoing __og(this, __AgentSetup__AgentSetupReceiver__close_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_close(const ::std::string& __p_handle, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__close_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__close_name, __del, __cookie);
    try
    {
        __result->prepare(__AgentSetup__AgentSetupReceiver__close_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_handle);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::__begin_close(const ::std::string& __p_handle, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_close(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_close(__p_handle, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::AgentSetup::AgentSetupReceiver::end_close(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__close_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::AgentSetup::AgentSetupReceiver::extractFile(const ::std::string& __p_absSourceFilePath, const ::std::string& __p_absDestinationPath, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__extractFile_name);
    ::IceInternal::Outgoing __og(this, __AgentSetup__AgentSetupReceiver__extractFile_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_absSourceFilePath);
        __os->write(__p_absDestinationPath);
        __os->write(__p_flagJson);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_extractFile(const ::std::string& __p_absSourceFilePath, const ::std::string& __p_absDestinationPath, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__extractFile_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__extractFile_name, __del, __cookie);
    try
    {
        __result->prepare(__AgentSetup__AgentSetupReceiver__extractFile_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_absSourceFilePath);
        __os->write(__p_absDestinationPath);
        __os->write(__p_flagJson);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::__begin_extractFile(const ::std::string& __p_absSourceFilePath, const ::std::string& __p_absDestinationPath, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_extractFile(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_extractFile(__p_absSourceFilePath, __p_absDestinationPath, __p_flagJson, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::AgentSetup::AgentSetupReceiver::end_extractFile(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__extractFile_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

::Ice::Int
IceProxy::AgentSetup::AgentSetupReceiver::executeCommand(const ::std::string& __p_cmd, const ::std::string& __p_flagJson, ::Ice::StringSeq& __p_stdout, ::Ice::StringSeq& __p_stderr, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__executeCommand_name);
    ::IceInternal::Outgoing __og(this, __AgentSetup__AgentSetupReceiver__executeCommand_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __os->write(__p_flagJson);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_stdout);
    __is->read(__p_stderr);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_executeCommand(const ::std::string& __p_cmd, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__executeCommand_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__executeCommand_name, __del, __cookie);
    try
    {
        __result->prepare(__AgentSetup__AgentSetupReceiver__executeCommand_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __os->write(__p_flagJson);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::__begin_executeCommand(const ::std::string& __p_cmd, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
            ::Ice::StringSeq __p_stdout;
            ::Ice::StringSeq __p_stderr;
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_executeCommand(__p_stdout, __p_stderr, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_stdout, __p_stderr);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&)> _response;
    };
    return begin_executeCommand(__p_cmd, __p_flagJson, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::AgentSetup::AgentSetupReceiver::end_executeCommand(::Ice::StringSeq& __p_stdout, ::Ice::StringSeq& __p_stderr, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__executeCommand_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_stdout);
    __is->read(__p_stderr);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::AgentSetup::AgentSetupReceiver::reportStatus(const ::std::string& __p_contentJson, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__AgentSetup__AgentSetupReceiver__reportStatus_name);
    ::IceInternal::Outgoing __og(this, __AgentSetup__AgentSetupReceiver__reportStatus_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_contentJson);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_reportStatus(const ::std::string& __p_contentJson, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupReceiver__reportStatus_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__reportStatus_name, __del, __cookie);
    try
    {
        __result->prepare(__AgentSetup__AgentSetupReceiver__reportStatus_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_contentJson);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::__begin_reportStatus(const ::std::string& __p_contentJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::AgentSetup::AgentSetupReceiverPrx __proxy = ::AgentSetup::AgentSetupReceiverPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_reportStatus(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_reportStatus(__p_contentJson, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::AgentSetup::AgentSetupReceiver::end_reportStatus(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupReceiver__reportStatus_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::AgentSetup::AgentSetupReceiver::exit(::Ice::Int __p_returnCode, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __AgentSetup__AgentSetupReceiver__exit_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_returnCode);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupReceiver::begin_exit(::Ice::Int __p_returnCode, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupReceiver__exit_name, __del, __cookie);
    try
    {
        __result->prepare(__AgentSetup__AgentSetupReceiver__exit_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_returnCode);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::AgentSetup::AgentSetupReceiver::end_exit(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __AgentSetup__AgentSetupReceiver__exit_name);
}

const ::std::string&
IceProxy::AgentSetup::AgentSetupReceiver::ice_staticId()
{
    return ::AgentSetup::AgentSetupReceiver::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::AgentSetup::AgentSetupReceiver::__newInstance() const
{
    return new AgentSetupReceiver;
}
::IceProxy::Ice::Object* ::IceProxy::AgentSetup::upCast(::IceProxy::AgentSetup::AgentSetupSession* p) { return p; }

void
::IceProxy::AgentSetup::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::AgentSetup::AgentSetupSession>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::AgentSetup::AgentSetupSession;
        v->__copyFrom(proxy);
    }
}

::std::string
IceProxy::AgentSetup::AgentSetupSession::queryName(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__AgentSetup__AgentSetupSession__queryName_name);
    ::IceInternal::Outgoing __og(this, __AgentSetup__AgentSetupSession__queryName_name, ::Ice::Idempotent, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::std::string __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupSession::begin_queryName(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupSession__queryName_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupSession__queryName_name, __del, __cookie);
    try
    {
        __result->prepare(__AgentSetup__AgentSetupSession__queryName_name, ::Ice::Idempotent, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupSession::__begin_queryName(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::AgentSetup::AgentSetupSessionPrx __proxy = ::AgentSetup::AgentSetupSessionPrx::uncheckedCast(__result->getProxy());
            ::std::string __ret;
            try
            {
                __ret = __proxy->end_queryName(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_queryName(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::std::string
IceProxy::AgentSetup::AgentSetupSession::end_queryName(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupSession__queryName_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::AgentSetup::AgentSetupSession::destroy(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __AgentSetup__AgentSetupSession__destroy_name, ::Ice::Idempotent, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupSession::begin_destroy(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupSession__destroy_name, __del, __cookie);
    try
    {
        __result->prepare(__AgentSetup__AgentSetupSession__destroy_name, ::Ice::Idempotent, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::AgentSetup::AgentSetupSession::end_destroy(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __AgentSetup__AgentSetupSession__destroy_name);
}

void
IceProxy::AgentSetup::AgentSetupSession::initiateReceiver(const ::Ice::Identity& __p_ident, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__AgentSetup__AgentSetupSession__initiateReceiver_name);
    ::IceInternal::Outgoing __og(this, __AgentSetup__AgentSetupSession__initiateReceiver_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupSession::begin_initiateReceiver(const ::Ice::Identity& __p_ident, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupSession__initiateReceiver_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupSession__initiateReceiver_name, __del, __cookie);
    try
    {
        __result->prepare(__AgentSetup__AgentSetupSession__initiateReceiver_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ident);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupSession::__begin_initiateReceiver(const ::Ice::Identity& __p_ident, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::AgentSetup::AgentSetupSessionPrx __proxy = ::AgentSetup::AgentSetupSessionPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_initiateReceiver(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_initiateReceiver(__p_ident, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::AgentSetup::AgentSetupSession::end_initiateReceiver(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupSession__initiateReceiver_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::AgentSetup::AgentSetupSession::refresh(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __AgentSetup__AgentSetupSession__refresh_name, ::Ice::Idempotent, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupSession::begin_refresh(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupSession__refresh_name, __del, __cookie);
    try
    {
        __result->prepare(__AgentSetup__AgentSetupSession__refresh_name, ::Ice::Idempotent, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::AgentSetup::AgentSetupSession::end_refresh(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __AgentSetup__AgentSetupSession__refresh_name);
}

void
IceProxy::AgentSetup::AgentSetupSession::startSetup(const ::std::string& __p_flagJson, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__AgentSetup__AgentSetupSession__startSetup_name);
    ::IceInternal::Outgoing __og(this, __AgentSetup__AgentSetupSession__startSetup_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_flagJson);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupSession::begin_startSetup(const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupSession__startSetup_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupSession__startSetup_name, __del, __cookie);
    try
    {
        __result->prepare(__AgentSetup__AgentSetupSession__startSetup_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_flagJson);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupSession::__begin_startSetup(const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::AgentSetup::AgentSetupSessionPrx __proxy = ::AgentSetup::AgentSetupSessionPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_startSetup(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_startSetup(__p_flagJson, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::AgentSetup::AgentSetupSession::end_startSetup(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupSession__startSetup_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

const ::std::string&
IceProxy::AgentSetup::AgentSetupSession::ice_staticId()
{
    return ::AgentSetup::AgentSetupSession::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::AgentSetup::AgentSetupSession::__newInstance() const
{
    return new AgentSetupSession;
}
::IceProxy::Ice::Object* ::IceProxy::AgentSetup::upCast(::IceProxy::AgentSetup::AgentSetupSessionFactory* p) { return p; }

void
::IceProxy::AgentSetup::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::AgentSetup::AgentSetupSessionFactory>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::AgentSetup::AgentSetupSessionFactory;
        v->__copyFrom(proxy);
    }
}

::AgentSetup::AgentSetupSessionPrx
IceProxy::AgentSetup::AgentSetupSessionFactory::create(const ::std::string& __p_info, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__AgentSetup__AgentSetupSessionFactory__create_name);
    ::IceInternal::Outgoing __og(this, __AgentSetup__AgentSetupSessionFactory__create_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_info);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::AgentSetup::AgentSetupSessionPrx __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupSessionFactory::begin_create(const ::std::string& __p_info, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__AgentSetup__AgentSetupSessionFactory__create_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __AgentSetup__AgentSetupSessionFactory__create_name, __del, __cookie);
    try
    {
        __result->prepare(__AgentSetup__AgentSetupSessionFactory__create_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_info);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::AgentSetup::AgentSetupSessionFactory::__begin_create(const ::std::string& __p_info, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::AgentSetup::AgentSetupSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::AgentSetup::AgentSetupSessionPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::AgentSetup::AgentSetupSessionFactoryPrx __proxy = ::AgentSetup::AgentSetupSessionFactoryPrx::uncheckedCast(__result->getProxy());
            ::AgentSetup::AgentSetupSessionPrx __ret;
            try
            {
                __ret = __proxy->end_create(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::AgentSetup::AgentSetupSessionPrx&)> _response;
    };
    return begin_create(__p_info, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::AgentSetup::AgentSetupSessionPrx
IceProxy::AgentSetup::AgentSetupSessionFactory::end_create(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __AgentSetup__AgentSetupSessionFactory__create_name);
    ::AgentSetup::AgentSetupSessionPrx __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::AgentSetup::AgentSetupSessionFactory::ice_staticId()
{
    return ::AgentSetup::AgentSetupSessionFactory::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::AgentSetup::AgentSetupSessionFactory::__newInstance() const
{
    return new AgentSetupSessionFactory;
}

::Ice::Object* AgentSetup::upCast(::AgentSetup::AgentSetupReceiver* p) { return p; }

namespace
{
const ::std::string __AgentSetup__AgentSetupReceiver_ids[2] =
{
    "::AgentSetup::AgentSetupReceiver",
    "::Ice::Object"
};

}

bool
AgentSetup::AgentSetupReceiver::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__AgentSetup__AgentSetupReceiver_ids, __AgentSetup__AgentSetupReceiver_ids + 2, _s);
}

::std::vector< ::std::string>
AgentSetup::AgentSetupReceiver::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__AgentSetup__AgentSetupReceiver_ids[0], &__AgentSetup__AgentSetupReceiver_ids[2]);
}

const ::std::string&
AgentSetup::AgentSetupReceiver::ice_id(const ::Ice::Current&) const
{
    return __AgentSetup__AgentSetupReceiver_ids[0];
}

const ::std::string&
AgentSetup::AgentSetupReceiver::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::AgentSetup::AgentSetupReceiver";
    return typeId;
#else
    return __AgentSetup__AgentSetupReceiver_ids[0];
#endif
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___queryRunnerAbsPath(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    try
    {
        ::std::string __ret = queryRunnerAbsPath(__current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___searchBootFileAbsPath(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    try
    {
        ::std::string __ret = searchBootFileAbsPath(__current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___prepareAgentInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_flagJson;
    __is->read(__p_flagJson);
    __inS.endReadParams();
    try
    {
        ::std::string __ret = prepareAgentInfo(__p_flagJson, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___getFileInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_fileName;
    ::std::string __p_flagJson;
    __is->read(__p_fileName);
    __is->read(__p_flagJson);
    __inS.endReadParams();
    try
    {
        ::std::string __ret = getFileInfo(__p_fileName, __p_flagJson, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___generateKeyInfos(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_absFilePath;
    ::std::string __p_flagJson;
    __is->read(__p_absFilePath);
    __is->read(__p_flagJson);
    __inS.endReadParams();
    try
    {
        generateKeyInfos(__p_absFilePath, __p_flagJson, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___open(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_absFilePath;
    ::std::string __p_flagJson;
    __is->read(__p_absFilePath);
    __is->read(__p_flagJson);
    __inS.endReadParams();
    try
    {
        ::std::string __ret = open(__p_absFilePath, __p_flagJson, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___pread(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_handle;
    ::Ice::Long __p_byteOffset;
    ::Ice::Int __p_bytes;
    __is->read(__p_handle);
    __is->read(__p_byteOffset);
    __is->read(__p_bytes);
    __inS.endReadParams();
    try
    {
        ::Ice::ByteSeq __ret = pread(__p_handle, __p_byteOffset, __p_bytes, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___pwrite(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_handle;
    ::Ice::Long __p_byteOffset;
    ::Ice::Int __p_bytes;
    ::Ice::ByteSeq __p_data;
    __is->read(__p_handle);
    __is->read(__p_byteOffset);
    __is->read(__p_bytes);
    __is->read(__p_data);
    __inS.endReadParams();
    try
    {
        pwrite(__p_handle, __p_byteOffset, __p_bytes, __p_data, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___close(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_handle;
    __is->read(__p_handle);
    __inS.endReadParams();
    try
    {
        close(__p_handle, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___extractFile(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_absSourceFilePath;
    ::std::string __p_absDestinationPath;
    ::std::string __p_flagJson;
    __is->read(__p_absSourceFilePath);
    __is->read(__p_absDestinationPath);
    __is->read(__p_flagJson);
    __inS.endReadParams();
    try
    {
        extractFile(__p_absSourceFilePath, __p_absDestinationPath, __p_flagJson, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___executeCommand(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_cmd;
    ::std::string __p_flagJson;
    __is->read(__p_cmd);
    __is->read(__p_flagJson);
    __inS.endReadParams();
    ::Ice::StringSeq __p_stdout;
    ::Ice::StringSeq __p_stderr;
    try
    {
        ::Ice::Int __ret = executeCommand(__p_cmd, __p_flagJson, __p_stdout, __p_stderr, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_stdout);
        __os->write(__p_stderr);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___reportStatus(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_contentJson;
    __is->read(__p_contentJson);
    __inS.endReadParams();
    try
    {
        reportStatus(__p_contentJson, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::___exit(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_returnCode;
    __is->read(__p_returnCode);
    __inS.endReadParams();
    exit(__p_returnCode, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __AgentSetup__AgentSetupReceiver_all[] =
{
    "close",
    "executeCommand",
    "exit",
    "extractFile",
    "generateKeyInfos",
    "getFileInfo",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "open",
    "pread",
    "prepareAgentInfo",
    "pwrite",
    "queryRunnerAbsPath",
    "reportStatus",
    "searchBootFileAbsPath"
};

}

::Ice::DispatchStatus
AgentSetup::AgentSetupReceiver::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__AgentSetup__AgentSetupReceiver_all, __AgentSetup__AgentSetupReceiver_all + 17, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __AgentSetup__AgentSetupReceiver_all)
    {
        case 0:
        {
            return ___close(in, current);
        }
        case 1:
        {
            return ___executeCommand(in, current);
        }
        case 2:
        {
            return ___exit(in, current);
        }
        case 3:
        {
            return ___extractFile(in, current);
        }
        case 4:
        {
            return ___generateKeyInfos(in, current);
        }
        case 5:
        {
            return ___getFileInfo(in, current);
        }
        case 6:
        {
            return ___ice_id(in, current);
        }
        case 7:
        {
            return ___ice_ids(in, current);
        }
        case 8:
        {
            return ___ice_isA(in, current);
        }
        case 9:
        {
            return ___ice_ping(in, current);
        }
        case 10:
        {
            return ___open(in, current);
        }
        case 11:
        {
            return ___pread(in, current);
        }
        case 12:
        {
            return ___prepareAgentInfo(in, current);
        }
        case 13:
        {
            return ___pwrite(in, current);
        }
        case 14:
        {
            return ___queryRunnerAbsPath(in, current);
        }
        case 15:
        {
            return ___reportStatus(in, current);
        }
        case 16:
        {
            return ___searchBootFileAbsPath(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
AgentSetup::AgentSetupReceiver::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
AgentSetup::AgentSetupReceiver::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
AgentSetup::__patch(AgentSetupReceiverPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::AgentSetup::AgentSetupReceiverPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::AgentSetup::AgentSetupReceiver::ice_staticId(), v);
    }
}

::Ice::Object* AgentSetup::upCast(::AgentSetup::AgentSetupSession* p) { return p; }

namespace
{
const ::std::string __AgentSetup__AgentSetupSession_ids[2] =
{
    "::AgentSetup::AgentSetupSession",
    "::Ice::Object"
};

}

bool
AgentSetup::AgentSetupSession::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__AgentSetup__AgentSetupSession_ids, __AgentSetup__AgentSetupSession_ids + 2, _s);
}

::std::vector< ::std::string>
AgentSetup::AgentSetupSession::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__AgentSetup__AgentSetupSession_ids[0], &__AgentSetup__AgentSetupSession_ids[2]);
}

const ::std::string&
AgentSetup::AgentSetupSession::ice_id(const ::Ice::Current&) const
{
    return __AgentSetup__AgentSetupSession_ids[0];
}

const ::std::string&
AgentSetup::AgentSetupSession::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::AgentSetup::AgentSetupSession";
    return typeId;
#else
    return __AgentSetup__AgentSetupSession_ids[0];
#endif
}

::Ice::DispatchStatus
AgentSetup::AgentSetupSession::___queryName(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::std::string __ret = queryName(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupSession::___destroy(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    destroy(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupSession::___initiateReceiver(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Identity __p_ident;
    __is->read(__p_ident);
    __inS.endReadParams();
    try
    {
        initiateReceiver(__p_ident, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupSession::___refresh(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    refresh(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
AgentSetup::AgentSetupSession::___startSetup(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_flagJson;
    __is->read(__p_flagJson);
    __inS.endReadParams();
    try
    {
        startSetup(__p_flagJson, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __AgentSetup__AgentSetupSession_all[] =
{
    "destroy",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "initiateReceiver",
    "queryName",
    "refresh",
    "startSetup"
};

}

::Ice::DispatchStatus
AgentSetup::AgentSetupSession::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__AgentSetup__AgentSetupSession_all, __AgentSetup__AgentSetupSession_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __AgentSetup__AgentSetupSession_all)
    {
        case 0:
        {
            return ___destroy(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___initiateReceiver(in, current);
        }
        case 6:
        {
            return ___queryName(in, current);
        }
        case 7:
        {
            return ___refresh(in, current);
        }
        case 8:
        {
            return ___startSetup(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
AgentSetup::AgentSetupSession::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
AgentSetup::AgentSetupSession::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
AgentSetup::__patch(AgentSetupSessionPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::AgentSetup::AgentSetupSessionPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::AgentSetup::AgentSetupSession::ice_staticId(), v);
    }
}

::Ice::Object* AgentSetup::upCast(::AgentSetup::AgentSetupSessionFactory* p) { return p; }

namespace
{
const ::std::string __AgentSetup__AgentSetupSessionFactory_ids[2] =
{
    "::AgentSetup::AgentSetupSessionFactory",
    "::Ice::Object"
};

}

bool
AgentSetup::AgentSetupSessionFactory::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__AgentSetup__AgentSetupSessionFactory_ids, __AgentSetup__AgentSetupSessionFactory_ids + 2, _s);
}

::std::vector< ::std::string>
AgentSetup::AgentSetupSessionFactory::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__AgentSetup__AgentSetupSessionFactory_ids[0], &__AgentSetup__AgentSetupSessionFactory_ids[2]);
}

const ::std::string&
AgentSetup::AgentSetupSessionFactory::ice_id(const ::Ice::Current&) const
{
    return __AgentSetup__AgentSetupSessionFactory_ids[0];
}

const ::std::string&
AgentSetup::AgentSetupSessionFactory::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::AgentSetup::AgentSetupSessionFactory";
    return typeId;
#else
    return __AgentSetup__AgentSetupSessionFactory_ids[0];
#endif
}

::Ice::DispatchStatus
AgentSetup::AgentSetupSessionFactory::___create(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_info;
    __is->read(__p_info);
    __inS.endReadParams();
    try
    {
        ::AgentSetup::AgentSetupSessionPrx __ret = create(__p_info, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __AgentSetup__AgentSetupSessionFactory_all[] =
{
    "create",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
AgentSetup::AgentSetupSessionFactory::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__AgentSetup__AgentSetupSessionFactory_all, __AgentSetup__AgentSetupSessionFactory_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __AgentSetup__AgentSetupSessionFactory_all)
    {
        case 0:
        {
            return ___create(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
AgentSetup::AgentSetupSessionFactory::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
AgentSetup::AgentSetupSessionFactory::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
AgentSetup::__patch(AgentSetupSessionFactoryPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::AgentSetup::AgentSetupSessionFactoryPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::AgentSetup::AgentSetupSessionFactory::ice_staticId(), v);
    }
}

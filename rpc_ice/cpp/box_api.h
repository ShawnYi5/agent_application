// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `box_api.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____cpp_box_api_h__
#define ____cpp_box_api_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <utils.h>
#include <perpcice.h>
#include <logic.h>
#include <img.h>
#include <Ice/BuiltinSequences.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Box
{

class Apis;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Box::Apis>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Box::Apis*);

}

}

namespace Box
{

class Apis;
bool operator==(const Apis&, const Apis&);
bool operator<(const Apis&, const Apis&);
::Ice::Object* upCast(::Box::Apis*);
typedef ::IceInternal::Handle< ::Box::Apis> ApisPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Box::Apis> ApisPrx;
void __patch(ApisPtr&, const ::Ice::ObjectPtr&);

}

namespace Box
{

typedef ::std::vector< ::Ice::Byte> BinaryStream;

struct BackupFile
{
    BackupFile() :
        enableCDP(false)
    {
    }
    
    BackupFile(::Ice::Int __ice_diskIndex, const ::std::string& __ice_diskIdent, const ::IMG::ImageSnapshotIdent& __ice_snapshot, const ::IMG::ImageSnapshotIdents& __ice_lastSnapshot, ::Ice::Long __ice_diskByteSize, bool __ice_enableCDP, const ::BoxLogic::CDPConfig& __ice_cdpConfig, const ::std::string& __ice_jsonConfig) :
        diskIndex(__ice_diskIndex),
        diskIdent(__ice_diskIdent),
        snapshot(__ice_snapshot),
        lastSnapshot(__ice_lastSnapshot),
        diskByteSize(__ice_diskByteSize),
        enableCDP(__ice_enableCDP),
        cdpConfig(__ice_cdpConfig),
        jsonConfig(__ice_jsonConfig)
    {
    }
    

    ::Ice::Int diskIndex;
    ::std::string diskIdent;
    ::IMG::ImageSnapshotIdent snapshot;
    ::IMG::ImageSnapshotIdents lastSnapshot;
    ::Ice::Long diskByteSize;
    bool enableCDP;
    ::BoxLogic::CDPConfig cdpConfig;
    ::std::string jsonConfig;
};

typedef ::std::vector< ::Box::BackupFile> BackupFiles;

struct RestoreFile
{
    ::Ice::Int diskIndex;
    ::Ice::Long diskBytes;
    ::IMG::ImageSnapshotIdents snapshot;
};

typedef ::std::vector< ::Box::RestoreFile> RestoreFiles;

struct ServiceInfoStatus
{
    ::std::string lpDisplayName;
    ::std::string lpServiceName;
    ::Ice::Int dwServiceType;
    ::Ice::Int dwCurrentState;
    ::Ice::Int dwWin32ExitCode;
    ::Ice::Int dwServiceSpecificExitCode;
    ::Ice::Int dwProcessId;
    ::Ice::Int dwServiceFlags;

    bool operator==(const ServiceInfoStatus& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(lpDisplayName != __rhs.lpDisplayName)
        {
            return false;
        }
        if(lpServiceName != __rhs.lpServiceName)
        {
            return false;
        }
        if(dwServiceType != __rhs.dwServiceType)
        {
            return false;
        }
        if(dwCurrentState != __rhs.dwCurrentState)
        {
            return false;
        }
        if(dwWin32ExitCode != __rhs.dwWin32ExitCode)
        {
            return false;
        }
        if(dwServiceSpecificExitCode != __rhs.dwServiceSpecificExitCode)
        {
            return false;
        }
        if(dwProcessId != __rhs.dwProcessId)
        {
            return false;
        }
        if(dwServiceFlags != __rhs.dwServiceFlags)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ServiceInfoStatus& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(lpDisplayName < __rhs.lpDisplayName)
        {
            return true;
        }
        else if(__rhs.lpDisplayName < lpDisplayName)
        {
            return false;
        }
        if(lpServiceName < __rhs.lpServiceName)
        {
            return true;
        }
        else if(__rhs.lpServiceName < lpServiceName)
        {
            return false;
        }
        if(dwServiceType < __rhs.dwServiceType)
        {
            return true;
        }
        else if(__rhs.dwServiceType < dwServiceType)
        {
            return false;
        }
        if(dwCurrentState < __rhs.dwCurrentState)
        {
            return true;
        }
        else if(__rhs.dwCurrentState < dwCurrentState)
        {
            return false;
        }
        if(dwWin32ExitCode < __rhs.dwWin32ExitCode)
        {
            return true;
        }
        else if(__rhs.dwWin32ExitCode < dwWin32ExitCode)
        {
            return false;
        }
        if(dwServiceSpecificExitCode < __rhs.dwServiceSpecificExitCode)
        {
            return true;
        }
        else if(__rhs.dwServiceSpecificExitCode < dwServiceSpecificExitCode)
        {
            return false;
        }
        if(dwProcessId < __rhs.dwProcessId)
        {
            return true;
        }
        else if(__rhs.dwProcessId < dwProcessId)
        {
            return false;
        }
        if(dwServiceFlags < __rhs.dwServiceFlags)
        {
            return true;
        }
        else if(__rhs.dwServiceFlags < dwServiceFlags)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ServiceInfoStatus& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ServiceInfoStatus& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ServiceInfoStatus& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ServiceInfoStatus& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::Box::ServiceInfoStatus> ServiceInfoStatusS;

typedef ::std::vector< ::Ice::Int> vectorINT;

}

namespace Ice
{
template<>
struct StreamableTraits< ::Box::BackupFile>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 35;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Box::BackupFile, S>
{
    static void write(S* __os, const ::Box::BackupFile& v)
    {
        __os->write(v.diskIndex);
        __os->write(v.diskIdent);
        __os->write(v.snapshot);
        __os->write(v.lastSnapshot);
        __os->write(v.diskByteSize);
        __os->write(v.enableCDP);
        __os->write(v.cdpConfig);
        __os->write(v.jsonConfig);
    }
};

template<class S>
struct StreamReader< ::Box::BackupFile, S>
{
    static void read(S* __is, ::Box::BackupFile& v)
    {
        __is->read(v.diskIndex);
        __is->read(v.diskIdent);
        __is->read(v.snapshot);
        __is->read(v.lastSnapshot);
        __is->read(v.diskByteSize);
        __is->read(v.enableCDP);
        __is->read(v.cdpConfig);
        __is->read(v.jsonConfig);
    }
};

template<>
struct StreamableTraits< ::Box::RestoreFile>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Box::RestoreFile, S>
{
    static void write(S* __os, const ::Box::RestoreFile& v)
    {
        __os->write(v.diskIndex);
        __os->write(v.diskBytes);
        __os->write(v.snapshot);
    }
};

template<class S>
struct StreamReader< ::Box::RestoreFile, S>
{
    static void read(S* __is, ::Box::RestoreFile& v)
    {
        __is->read(v.diskIndex);
        __is->read(v.diskBytes);
        __is->read(v.snapshot);
    }
};

template<>
struct StreamableTraits< ::Box::ServiceInfoStatus>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 26;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Box::ServiceInfoStatus, S>
{
    static void write(S* __os, const ::Box::ServiceInfoStatus& v)
    {
        __os->write(v.lpDisplayName);
        __os->write(v.lpServiceName);
        __os->write(v.dwServiceType);
        __os->write(v.dwCurrentState);
        __os->write(v.dwWin32ExitCode);
        __os->write(v.dwServiceSpecificExitCode);
        __os->write(v.dwProcessId);
        __os->write(v.dwServiceFlags);
    }
};

template<class S>
struct StreamReader< ::Box::ServiceInfoStatus, S>
{
    static void read(S* __is, ::Box::ServiceInfoStatus& v)
    {
        __is->read(v.lpDisplayName);
        __is->read(v.lpServiceName);
        __is->read(v.dwServiceType);
        __is->read(v.dwCurrentState);
        __is->read(v.dwWin32ExitCode);
        __is->read(v.dwServiceSpecificExitCode);
        __is->read(v.dwProcessId);
        __is->read(v.dwServiceFlags);
    }
};

}

namespace Box
{

class Callback_Apis_ping_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_ping_Base> Callback_Apis_pingPtr;

class Callback_Apis_reloginAllHostSession_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_reloginAllHostSession_Base> Callback_Apis_reloginAllHostSessionPtr;

class Callback_Apis_isAgentLinked_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_isAgentLinked_Base> Callback_Apis_isAgentLinkedPtr;

class Callback_Apis_GetStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_GetStatus_Base> Callback_Apis_GetStatusPtr;

class Callback_Apis_queryDisksStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_queryDisksStatus_Base> Callback_Apis_queryDisksStatusPtr;

class Callback_Apis_JsonFunc_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_JsonFunc_Base> Callback_Apis_JsonFuncPtr;

class Callback_Apis_querySystemInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_querySystemInfo_Base> Callback_Apis_querySystemInfoPtr;

class Callback_Apis_backup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_backup_Base> Callback_Apis_backupPtr;

class Callback_Apis_forceCloseBackupFiles_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_forceCloseBackupFiles_Base> Callback_Apis_forceCloseBackupFilesPtr;

class Callback_Apis_getBackupInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_getBackupInfo_Base> Callback_Apis_getBackupInfoPtr;

class Callback_Apis_setBackupInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_setBackupInfo_Base> Callback_Apis_setBackupInfoPtr;

class Callback_Apis_queryLastBackupError_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_queryLastBackupError_Base> Callback_Apis_queryLastBackupErrorPtr;

class Callback_Apis_queryLastCdpError_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_queryLastCdpError_Base> Callback_Apis_queryLastCdpErrorPtr;

class Callback_Apis_stopCdpStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_stopCdpStatus_Base> Callback_Apis_stopCdpStatusPtr;

class Callback_Apis_volumeRestore_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_volumeRestore_Base> Callback_Apis_volumeRestorePtr;

class Callback_Apis_restore_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_restore_Base> Callback_Apis_restorePtr;

class Callback_Apis_setBootDataList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_setBootDataList_Base> Callback_Apis_setBootDataListPtr;

class Callback_Apis_notifyHighPriority_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_notifyHighPriority_Base> Callback_Apis_notifyHighPriorityPtr;

class Callback_Apis_ReadDiskWithPeHost_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_ReadDiskWithPeHost_Base> Callback_Apis_ReadDiskWithPeHostPtr;

class Callback_Apis_WriteDiskWithPeHost_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_WriteDiskWithPeHost_Base> Callback_Apis_WriteDiskWithPeHostPtr;

class Callback_Apis_QueryRWDiskWithPeHost_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_QueryRWDiskWithPeHost_Base> Callback_Apis_QueryRWDiskWithPeHostPtr;

class Callback_Apis_KvmStopped_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_KvmStopped_Base> Callback_Apis_KvmStoppedPtr;

class Callback_Apis_GetPeHostClassHWInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_GetPeHostClassHWInfo_Base> Callback_Apis_GetPeHostClassHWInfoPtr;

class Callback_Apis_GetPeHostNetAdapterInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_GetPeHostNetAdapterInfo_Base> Callback_Apis_GetPeHostNetAdapterInfoPtr;

class Callback_Apis_isPeHostLinked_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_isPeHostLinked_Base> Callback_Apis_isPeHostLinkedPtr;

class Callback_Apis_StartAgentPe_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_StartAgentPe_Base> Callback_Apis_StartAgentPePtr;

class Callback_Apis_fetchAgentDebugFile_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_fetchAgentDebugFile_Base> Callback_Apis_fetchAgentDebugFilePtr;

class Callback_Apis_queryRunnerAbsPathOnAgentSetup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_queryRunnerAbsPathOnAgentSetup_Base> Callback_Apis_queryRunnerAbsPathOnAgentSetupPtr;

class Callback_Apis_prepareInfoOnAgentSetup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_prepareInfoOnAgentSetup_Base> Callback_Apis_prepareInfoOnAgentSetupPtr;

class Callback_Apis_getFileInfoOnAgentSetup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_getFileInfoOnAgentSetup_Base> Callback_Apis_getFileInfoOnAgentSetupPtr;

class Callback_Apis_searchBootFileAbsPathOnAgentSetup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_searchBootFileAbsPathOnAgentSetup_Base> Callback_Apis_searchBootFileAbsPathOnAgentSetupPtr;

class Callback_Apis_generateKeyInfosOnAgentSetup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_generateKeyInfosOnAgentSetup_Base> Callback_Apis_generateKeyInfosOnAgentSetupPtr;

class Callback_Apis_openOnAgentSetup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_openOnAgentSetup_Base> Callback_Apis_openOnAgentSetupPtr;

class Callback_Apis_preadOnAgentSetup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_preadOnAgentSetup_Base> Callback_Apis_preadOnAgentSetupPtr;

class Callback_Apis_pwriteOnAgentSetup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_pwriteOnAgentSetup_Base> Callback_Apis_pwriteOnAgentSetupPtr;

class Callback_Apis_closeOnAgentSetup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_closeOnAgentSetup_Base> Callback_Apis_closeOnAgentSetupPtr;

class Callback_Apis_extractFileOnAgentSetup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_extractFileOnAgentSetup_Base> Callback_Apis_extractFileOnAgentSetupPtr;

class Callback_Apis_executeCommandOnAgentSetup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_executeCommandOnAgentSetup_Base> Callback_Apis_executeCommandOnAgentSetupPtr;

class Callback_Apis_reportStatusOnAgentSetup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_reportStatusOnAgentSetup_Base> Callback_Apis_reportStatusOnAgentSetupPtr;

class Callback_Apis_exitOnAgentSetup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_exitOnAgentSetup_Base> Callback_Apis_exitOnAgentSetupPtr;

class Callback_Apis_forceOfflineAgent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_forceOfflineAgent_Base> Callback_Apis_forceOfflineAgentPtr;

class Callback_Apis_forceOfflinePeHost_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_forceOfflinePeHost_Base> Callback_Apis_forceOfflinePeHostPtr;

class Callback_Apis_refreshNetwork_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_refreshNetwork_Base> Callback_Apis_refreshNetworkPtr;

class Callback_Apis_GetServiceList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_GetServiceList_Base> Callback_Apis_GetServiceListPtr;

class Callback_Apis_GetTcpListenList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_GetTcpListenList_Base> Callback_Apis_GetTcpListenListPtr;

class Callback_Apis_StartServiceSync_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_StartServiceSync_Base> Callback_Apis_StartServiceSyncPtr;

class Callback_Apis_StopServiceSync_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_StopServiceSync_Base> Callback_Apis_StopServiceSyncPtr;

class Callback_Apis_StartHttpDServiceAsync_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_StartHttpDServiceAsync_Base> Callback_Apis_StartHttpDServiceAsyncPtr;

class Callback_Apis_GetHttpDServiceListSync_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_GetHttpDServiceListSync_Base> Callback_Apis_GetHttpDServiceListSyncPtr;

class Callback_Apis_StopAllHttpDServiceSync_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_StopAllHttpDServiceSync_Base> Callback_Apis_StopAllHttpDServiceSyncPtr;

class Callback_Apis_testDisk_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_testDisk_Base> Callback_Apis_testDiskPtr;

class Callback_Apis_readDisk_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_readDisk_Base> Callback_Apis_readDiskPtr;

class Callback_Apis_writeDisk_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_writeDisk_Base> Callback_Apis_writeDiskPtr;

class Callback_Apis_JsonFuncV2_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_JsonFuncV2_Base> Callback_Apis_JsonFuncV2Ptr;

class Callback_Apis_PEJsonFunc_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Apis_PEJsonFunc_Base> Callback_Apis_PEJsonFuncPtr;

}

namespace IceProxy
{

namespace Box
{

class Apis : virtual public ::IceProxy::Ice::Object
{
public:

    void ping()
    {
        ping(0);
    }
    void ping(const ::Ice::Context& __ctx)
    {
        ping(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ping(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_ping(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_ping(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ping(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ping(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_ping(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ping(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ping(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_ping()
    {
        return begin_ping(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context& __ctx)
    {
        return begin_ping(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Box::Callback_Apis_pingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context& __ctx, const ::Box::Callback_Apis_pingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(&__ctx, __del, __cookie);
    }

    void end_ping(const ::Ice::AsyncResultPtr&);
    
private:

    void ping(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reloginAllHostSession(::Ice::Int __p_delaySeconds)
    {
        reloginAllHostSession(__p_delaySeconds, 0);
    }
    void reloginAllHostSession(::Ice::Int __p_delaySeconds, const ::Ice::Context& __ctx)
    {
        reloginAllHostSession(__p_delaySeconds, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reloginAllHostSession(::Ice::Int __p_delaySeconds, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloginAllHostSession(__p_delaySeconds, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reloginAllHostSession(::Ice::Int __p_delaySeconds, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloginAllHostSession(__p_delaySeconds, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloginAllHostSession(::Ice::Int __p_delaySeconds, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reloginAllHostSession(__p_delaySeconds, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reloginAllHostSession(::Ice::Int __p_delaySeconds, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reloginAllHostSession(__p_delaySeconds, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reloginAllHostSession(::Ice::Int __p_delaySeconds)
    {
        return begin_reloginAllHostSession(__p_delaySeconds, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloginAllHostSession(::Ice::Int __p_delaySeconds, const ::Ice::Context& __ctx)
    {
        return begin_reloginAllHostSession(__p_delaySeconds, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloginAllHostSession(::Ice::Int __p_delaySeconds, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloginAllHostSession(__p_delaySeconds, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloginAllHostSession(::Ice::Int __p_delaySeconds, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloginAllHostSession(__p_delaySeconds, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloginAllHostSession(::Ice::Int __p_delaySeconds, const ::Box::Callback_Apis_reloginAllHostSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloginAllHostSession(__p_delaySeconds, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reloginAllHostSession(::Ice::Int __p_delaySeconds, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_reloginAllHostSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reloginAllHostSession(__p_delaySeconds, &__ctx, __del, __cookie);
    }

    void end_reloginAllHostSession(const ::Ice::AsyncResultPtr&);
    
private:

    void reloginAllHostSession(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reloginAllHostSession(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isAgentLinked(const ::std::string& __p_hostName)
    {
        return isAgentLinked(__p_hostName, 0);
    }
    bool isAgentLinked(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        return isAgentLinked(__p_hostName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_isAgentLinked(const ::std::string& __p_hostName, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isAgentLinked(__p_hostName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isAgentLinked(const ::std::string& __p_hostName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isAgentLinked(__p_hostName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_isAgentLinked(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isAgentLinked(__p_hostName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isAgentLinked(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isAgentLinked(__p_hostName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_isAgentLinked(const ::std::string& __p_hostName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_isAgentLinked(const ::std::string& __p_hostName)
    {
        return begin_isAgentLinked(__p_hostName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isAgentLinked(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        return begin_isAgentLinked(__p_hostName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isAgentLinked(const ::std::string& __p_hostName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isAgentLinked(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isAgentLinked(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isAgentLinked(__p_hostName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isAgentLinked(const ::std::string& __p_hostName, const ::Box::Callback_Apis_isAgentLinkedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isAgentLinked(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isAgentLinked(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_isAgentLinkedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isAgentLinked(__p_hostName, &__ctx, __del, __cookie);
    }

    bool end_isAgentLinked(const ::Ice::AsyncResultPtr&);
    
private:

    bool isAgentLinked(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isAgentLinked(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::BoxLogic::AgentStatus GetStatus(const ::std::string& __p_hostName)
    {
        return GetStatus(__p_hostName, 0);
    }
    ::BoxLogic::AgentStatus GetStatus(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        return GetStatus(__p_hostName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetStatus(const ::std::string& __p_hostName, const ::IceInternal::Function<void (const ::BoxLogic::AgentStatus&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetStatus(__p_hostName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetStatus(const ::std::string& __p_hostName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetStatus(__p_hostName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetStatus(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::BoxLogic::AgentStatus&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetStatus(__p_hostName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetStatus(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetStatus(__p_hostName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetStatus(const ::std::string& __p_hostName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::BoxLogic::AgentStatus&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetStatus(const ::std::string& __p_hostName)
    {
        return begin_GetStatus(__p_hostName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetStatus(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        return begin_GetStatus(__p_hostName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetStatus(const ::std::string& __p_hostName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetStatus(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetStatus(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetStatus(__p_hostName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetStatus(const ::std::string& __p_hostName, const ::Box::Callback_Apis_GetStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetStatus(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetStatus(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_GetStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetStatus(__p_hostName, &__ctx, __del, __cookie);
    }

    ::BoxLogic::AgentStatus end_GetStatus(const ::Ice::AsyncResultPtr&);
    
private:

    ::BoxLogic::AgentStatus GetStatus(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetStatus(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void queryDisksStatus(const ::std::string& __p_hostName, ::BoxLogic::Disks& __p_disks, IceUtil::Optional< ::std::string>& __p_more)
    {
        queryDisksStatus(__p_hostName, __p_disks, __p_more, 0);
    }
    void queryDisksStatus(const ::std::string& __p_hostName, ::BoxLogic::Disks& __p_disks, IceUtil::Optional< ::std::string>& __p_more, const ::Ice::Context& __ctx)
    {
        queryDisksStatus(__p_hostName, __p_disks, __p_more, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_queryDisksStatus(const ::std::string& __p_hostName, const ::IceInternal::Function<void (const ::BoxLogic::Disks&, const IceUtil::Optional< ::std::string>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryDisksStatus(__p_hostName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryDisksStatus(const ::std::string& __p_hostName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryDisksStatus(__p_hostName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_queryDisksStatus(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::BoxLogic::Disks&, const IceUtil::Optional< ::std::string>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryDisksStatus(__p_hostName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryDisksStatus(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryDisksStatus(__p_hostName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_queryDisksStatus(const ::std::string& __p_hostName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::BoxLogic::Disks&, const IceUtil::Optional< ::std::string>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_queryDisksStatus(const ::std::string& __p_hostName)
    {
        return begin_queryDisksStatus(__p_hostName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryDisksStatus(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        return begin_queryDisksStatus(__p_hostName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryDisksStatus(const ::std::string& __p_hostName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryDisksStatus(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryDisksStatus(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryDisksStatus(__p_hostName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryDisksStatus(const ::std::string& __p_hostName, const ::Box::Callback_Apis_queryDisksStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryDisksStatus(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryDisksStatus(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_queryDisksStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryDisksStatus(__p_hostName, &__ctx, __del, __cookie);
    }

    void end_queryDisksStatus(::BoxLogic::Disks& __p_disks, IceUtil::Optional< ::std::string>& __p_more, const ::Ice::AsyncResultPtr&);
    
private:

    void queryDisksStatus(const ::std::string&, ::BoxLogic::Disks&, IceUtil::Optional< ::std::string>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_queryDisksStatus(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string JsonFunc(const ::std::string& __p_hostName, const ::std::string& __p_inputParam)
    {
        return JsonFunc(__p_hostName, __p_inputParam, 0);
    }
    ::std::string JsonFunc(const ::std::string& __p_hostName, const ::std::string& __p_inputParam, const ::Ice::Context& __ctx)
    {
        return JsonFunc(__p_hostName, __p_inputParam, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_JsonFunc(const ::std::string& __p_hostName, const ::std::string& __p_inputParam, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_JsonFunc(__p_hostName, __p_inputParam, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_JsonFunc(const ::std::string& __p_hostName, const ::std::string& __p_inputParam, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_JsonFunc(__p_hostName, __p_inputParam, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_JsonFunc(const ::std::string& __p_hostName, const ::std::string& __p_inputParam, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_JsonFunc(__p_hostName, __p_inputParam, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_JsonFunc(const ::std::string& __p_hostName, const ::std::string& __p_inputParam, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_JsonFunc(__p_hostName, __p_inputParam, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_JsonFunc(const ::std::string& __p_hostName, const ::std::string& __p_inputParam, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string& __p_hostName, const ::std::string& __p_inputParam)
    {
        return begin_JsonFunc(__p_hostName, __p_inputParam, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string& __p_hostName, const ::std::string& __p_inputParam, const ::Ice::Context& __ctx)
    {
        return begin_JsonFunc(__p_hostName, __p_inputParam, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string& __p_hostName, const ::std::string& __p_inputParam, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFunc(__p_hostName, __p_inputParam, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string& __p_hostName, const ::std::string& __p_inputParam, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFunc(__p_hostName, __p_inputParam, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string& __p_hostName, const ::std::string& __p_inputParam, const ::Box::Callback_Apis_JsonFuncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFunc(__p_hostName, __p_inputParam, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string& __p_hostName, const ::std::string& __p_inputParam, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_JsonFuncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFunc(__p_hostName, __p_inputParam, &__ctx, __del, __cookie);
    }

    ::std::string end_JsonFunc(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string JsonFunc(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string querySystemInfo(const ::std::string& __p_hostName)
    {
        return querySystemInfo(__p_hostName, 0);
    }
    ::std::string querySystemInfo(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        return querySystemInfo(__p_hostName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_querySystemInfo(const ::std::string& __p_hostName, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_querySystemInfo(__p_hostName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_querySystemInfo(const ::std::string& __p_hostName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_querySystemInfo(__p_hostName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_querySystemInfo(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_querySystemInfo(__p_hostName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_querySystemInfo(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_querySystemInfo(__p_hostName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_querySystemInfo(const ::std::string& __p_hostName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_querySystemInfo(const ::std::string& __p_hostName)
    {
        return begin_querySystemInfo(__p_hostName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_querySystemInfo(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        return begin_querySystemInfo(__p_hostName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_querySystemInfo(const ::std::string& __p_hostName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_querySystemInfo(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_querySystemInfo(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_querySystemInfo(__p_hostName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_querySystemInfo(const ::std::string& __p_hostName, const ::Box::Callback_Apis_querySystemInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_querySystemInfo(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_querySystemInfo(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_querySystemInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_querySystemInfo(__p_hostName, &__ctx, __del, __cookie);
    }

    ::std::string end_querySystemInfo(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string querySystemInfo(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_querySystemInfo(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void backup(const ::std::string& __p_hostName, const ::Box::BackupFiles& __p_images, ::Ice::Int __p_kiloBytesPerSecond, const IceUtil::Optional< ::std::string>& __p_jsonConfig)
    {
        backup(__p_hostName, __p_images, __p_kiloBytesPerSecond, __p_jsonConfig, 0);
    }
    void backup(const ::std::string& __p_hostName, const ::Box::BackupFiles& __p_images, ::Ice::Int __p_kiloBytesPerSecond, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::Ice::Context& __ctx)
    {
        backup(__p_hostName, __p_images, __p_kiloBytesPerSecond, __p_jsonConfig, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_backup(const ::std::string& __p_hostName, const ::Box::BackupFiles& __p_images, ::Ice::Int __p_kiloBytesPerSecond, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_backup(__p_hostName, __p_images, __p_kiloBytesPerSecond, __p_jsonConfig, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_backup(const ::std::string& __p_hostName, const ::Box::BackupFiles& __p_images, ::Ice::Int __p_kiloBytesPerSecond, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_backup(__p_hostName, __p_images, __p_kiloBytesPerSecond, __p_jsonConfig, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_backup(const ::std::string& __p_hostName, const ::Box::BackupFiles& __p_images, ::Ice::Int __p_kiloBytesPerSecond, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_backup(__p_hostName, __p_images, __p_kiloBytesPerSecond, __p_jsonConfig, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_backup(const ::std::string& __p_hostName, const ::Box::BackupFiles& __p_images, ::Ice::Int __p_kiloBytesPerSecond, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_backup(__p_hostName, __p_images, __p_kiloBytesPerSecond, __p_jsonConfig, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_backup(const ::std::string& __p_hostName, const ::Box::BackupFiles& __p_images, ::Ice::Int __p_kiloBytesPerSecond, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_backup(const ::std::string& __p_hostName, const ::Box::BackupFiles& __p_images, ::Ice::Int __p_kiloBytesPerSecond, const IceUtil::Optional< ::std::string>& __p_jsonConfig)
    {
        return begin_backup(__p_hostName, __p_images, __p_kiloBytesPerSecond, __p_jsonConfig, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_backup(const ::std::string& __p_hostName, const ::Box::BackupFiles& __p_images, ::Ice::Int __p_kiloBytesPerSecond, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::Ice::Context& __ctx)
    {
        return begin_backup(__p_hostName, __p_images, __p_kiloBytesPerSecond, __p_jsonConfig, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_backup(const ::std::string& __p_hostName, const ::Box::BackupFiles& __p_images, ::Ice::Int __p_kiloBytesPerSecond, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_backup(__p_hostName, __p_images, __p_kiloBytesPerSecond, __p_jsonConfig, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_backup(const ::std::string& __p_hostName, const ::Box::BackupFiles& __p_images, ::Ice::Int __p_kiloBytesPerSecond, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_backup(__p_hostName, __p_images, __p_kiloBytesPerSecond, __p_jsonConfig, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_backup(const ::std::string& __p_hostName, const ::Box::BackupFiles& __p_images, ::Ice::Int __p_kiloBytesPerSecond, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::Box::Callback_Apis_backupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_backup(__p_hostName, __p_images, __p_kiloBytesPerSecond, __p_jsonConfig, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_backup(const ::std::string& __p_hostName, const ::Box::BackupFiles& __p_images, ::Ice::Int __p_kiloBytesPerSecond, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_backupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_backup(__p_hostName, __p_images, __p_kiloBytesPerSecond, __p_jsonConfig, &__ctx, __del, __cookie);
    }

    void end_backup(const ::Ice::AsyncResultPtr&);
    
private:

    void backup(const ::std::string&, const ::Box::BackupFiles&, ::Ice::Int, const IceUtil::Optional< ::std::string>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_backup(const ::std::string&, const ::Box::BackupFiles&, ::Ice::Int, const IceUtil::Optional< ::std::string>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void forceCloseBackupFiles(const ::Ice::StringSeq& __p_files)
    {
        forceCloseBackupFiles(__p_files, 0);
    }
    void forceCloseBackupFiles(const ::Ice::StringSeq& __p_files, const ::Ice::Context& __ctx)
    {
        forceCloseBackupFiles(__p_files, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_forceCloseBackupFiles(const ::Ice::StringSeq& __p_files, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_forceCloseBackupFiles(__p_files, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_forceCloseBackupFiles(const ::Ice::StringSeq& __p_files, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_forceCloseBackupFiles(__p_files, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_forceCloseBackupFiles(const ::Ice::StringSeq& __p_files, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_forceCloseBackupFiles(__p_files, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_forceCloseBackupFiles(const ::Ice::StringSeq& __p_files, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_forceCloseBackupFiles(__p_files, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_forceCloseBackupFiles(const ::Ice::StringSeq& __p_files)
    {
        return begin_forceCloseBackupFiles(__p_files, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_forceCloseBackupFiles(const ::Ice::StringSeq& __p_files, const ::Ice::Context& __ctx)
    {
        return begin_forceCloseBackupFiles(__p_files, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_forceCloseBackupFiles(const ::Ice::StringSeq& __p_files, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_forceCloseBackupFiles(__p_files, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_forceCloseBackupFiles(const ::Ice::StringSeq& __p_files, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_forceCloseBackupFiles(__p_files, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_forceCloseBackupFiles(const ::Ice::StringSeq& __p_files, const ::Box::Callback_Apis_forceCloseBackupFilesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_forceCloseBackupFiles(__p_files, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_forceCloseBackupFiles(const ::Ice::StringSeq& __p_files, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_forceCloseBackupFilesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_forceCloseBackupFiles(__p_files, &__ctx, __del, __cookie);
    }

    void end_forceCloseBackupFiles(const ::Ice::AsyncResultPtr&);
    
private:

    void forceCloseBackupFiles(const ::Ice::StringSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_forceCloseBackupFiles(const ::Ice::StringSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson)
    {
        return getBackupInfo(__p_hostName, __p_inputJson, 0);
    }
    ::std::string getBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Ice::Context& __ctx)
    {
        return getBackupInfo(__p_hostName, __p_inputJson, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBackupInfo(__p_hostName, __p_inputJson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBackupInfo(__p_hostName, __p_inputJson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBackupInfo(__p_hostName, __p_inputJson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBackupInfo(__p_hostName, __p_inputJson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson)
    {
        return begin_getBackupInfo(__p_hostName, __p_inputJson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Ice::Context& __ctx)
    {
        return begin_getBackupInfo(__p_hostName, __p_inputJson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBackupInfo(__p_hostName, __p_inputJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBackupInfo(__p_hostName, __p_inputJson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Box::Callback_Apis_getBackupInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBackupInfo(__p_hostName, __p_inputJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_getBackupInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBackupInfo(__p_hostName, __p_inputJson, &__ctx, __del, __cookie);
    }

    ::std::string end_getBackupInfo(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getBackupInfo(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBackupInfo(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson)
    {
        setBackupInfo(__p_hostName, __p_inputJson, 0);
    }
    void setBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Ice::Context& __ctx)
    {
        setBackupInfo(__p_hostName, __p_inputJson, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setBackupInfo(__p_hostName, __p_inputJson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setBackupInfo(__p_hostName, __p_inputJson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setBackupInfo(__p_hostName, __p_inputJson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setBackupInfo(__p_hostName, __p_inputJson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson)
    {
        return begin_setBackupInfo(__p_hostName, __p_inputJson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Ice::Context& __ctx)
    {
        return begin_setBackupInfo(__p_hostName, __p_inputJson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBackupInfo(__p_hostName, __p_inputJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBackupInfo(__p_hostName, __p_inputJson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Box::Callback_Apis_setBackupInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBackupInfo(__p_hostName, __p_inputJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBackupInfo(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_setBackupInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBackupInfo(__p_hostName, __p_inputJson, &__ctx, __del, __cookie);
    }

    void end_setBackupInfo(const ::Ice::AsyncResultPtr&);
    
private:

    void setBackupInfo(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setBackupInfo(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string queryLastBackupError(const ::std::string& __p_hostName)
    {
        return queryLastBackupError(__p_hostName, 0);
    }
    ::std::string queryLastBackupError(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        return queryLastBackupError(__p_hostName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_queryLastBackupError(const ::std::string& __p_hostName, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryLastBackupError(__p_hostName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryLastBackupError(const ::std::string& __p_hostName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryLastBackupError(__p_hostName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_queryLastBackupError(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryLastBackupError(__p_hostName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryLastBackupError(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryLastBackupError(__p_hostName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_queryLastBackupError(const ::std::string& __p_hostName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_queryLastBackupError(const ::std::string& __p_hostName)
    {
        return begin_queryLastBackupError(__p_hostName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryLastBackupError(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        return begin_queryLastBackupError(__p_hostName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryLastBackupError(const ::std::string& __p_hostName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryLastBackupError(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryLastBackupError(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryLastBackupError(__p_hostName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryLastBackupError(const ::std::string& __p_hostName, const ::Box::Callback_Apis_queryLastBackupErrorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryLastBackupError(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryLastBackupError(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_queryLastBackupErrorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryLastBackupError(__p_hostName, &__ctx, __del, __cookie);
    }

    ::std::string end_queryLastBackupError(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string queryLastBackupError(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_queryLastBackupError(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string queryLastCdpError(const ::std::string& __p_hostName)
    {
        return queryLastCdpError(__p_hostName, 0);
    }
    ::std::string queryLastCdpError(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        return queryLastCdpError(__p_hostName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_queryLastCdpError(const ::std::string& __p_hostName, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryLastCdpError(__p_hostName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryLastCdpError(const ::std::string& __p_hostName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryLastCdpError(__p_hostName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_queryLastCdpError(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryLastCdpError(__p_hostName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryLastCdpError(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryLastCdpError(__p_hostName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_queryLastCdpError(const ::std::string& __p_hostName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_queryLastCdpError(const ::std::string& __p_hostName)
    {
        return begin_queryLastCdpError(__p_hostName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryLastCdpError(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        return begin_queryLastCdpError(__p_hostName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryLastCdpError(const ::std::string& __p_hostName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryLastCdpError(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryLastCdpError(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryLastCdpError(__p_hostName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryLastCdpError(const ::std::string& __p_hostName, const ::Box::Callback_Apis_queryLastCdpErrorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryLastCdpError(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryLastCdpError(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_queryLastCdpErrorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryLastCdpError(__p_hostName, &__ctx, __del, __cookie);
    }

    ::std::string end_queryLastCdpError(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string queryLastCdpError(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_queryLastCdpError(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void stopCdpStatus(const ::std::string& __p_hostName)
    {
        stopCdpStatus(__p_hostName, 0);
    }
    void stopCdpStatus(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        stopCdpStatus(__p_hostName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_stopCdpStatus(const ::std::string& __p_hostName, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_stopCdpStatus(__p_hostName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_stopCdpStatus(const ::std::string& __p_hostName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stopCdpStatus(__p_hostName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stopCdpStatus(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_stopCdpStatus(__p_hostName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_stopCdpStatus(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stopCdpStatus(__p_hostName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_stopCdpStatus(const ::std::string& __p_hostName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_stopCdpStatus(const ::std::string& __p_hostName)
    {
        return begin_stopCdpStatus(__p_hostName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopCdpStatus(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        return begin_stopCdpStatus(__p_hostName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopCdpStatus(const ::std::string& __p_hostName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopCdpStatus(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopCdpStatus(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopCdpStatus(__p_hostName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopCdpStatus(const ::std::string& __p_hostName, const ::Box::Callback_Apis_stopCdpStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopCdpStatus(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopCdpStatus(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_stopCdpStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopCdpStatus(__p_hostName, &__ctx, __del, __cookie);
    }

    void end_stopCdpStatus(const ::Ice::AsyncResultPtr&);
    
private:

    void stopCdpStatus(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_stopCdpStatus(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void volumeRestore(const ::std::string& __p_hostName, const ::std::string& __p_jsonConfig, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_dummyHost)
    {
        volumeRestore(__p_hostName, __p_jsonConfig, __p_images, __p_dummyHost, 0);
    }
    void volumeRestore(const ::std::string& __p_hostName, const ::std::string& __p_jsonConfig, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_dummyHost, const ::Ice::Context& __ctx)
    {
        volumeRestore(__p_hostName, __p_jsonConfig, __p_images, __p_dummyHost, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_volumeRestore(const ::std::string& __p_hostName, const ::std::string& __p_jsonConfig, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_dummyHost, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_volumeRestore(__p_hostName, __p_jsonConfig, __p_images, __p_dummyHost, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_volumeRestore(const ::std::string& __p_hostName, const ::std::string& __p_jsonConfig, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_dummyHost, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_volumeRestore(__p_hostName, __p_jsonConfig, __p_images, __p_dummyHost, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_volumeRestore(const ::std::string& __p_hostName, const ::std::string& __p_jsonConfig, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_dummyHost, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_volumeRestore(__p_hostName, __p_jsonConfig, __p_images, __p_dummyHost, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_volumeRestore(const ::std::string& __p_hostName, const ::std::string& __p_jsonConfig, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_dummyHost, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_volumeRestore(__p_hostName, __p_jsonConfig, __p_images, __p_dummyHost, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_volumeRestore(const ::std::string& __p_hostName, const ::std::string& __p_jsonConfig, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_dummyHost, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_volumeRestore(const ::std::string& __p_hostName, const ::std::string& __p_jsonConfig, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_dummyHost)
    {
        return begin_volumeRestore(__p_hostName, __p_jsonConfig, __p_images, __p_dummyHost, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_volumeRestore(const ::std::string& __p_hostName, const ::std::string& __p_jsonConfig, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_dummyHost, const ::Ice::Context& __ctx)
    {
        return begin_volumeRestore(__p_hostName, __p_jsonConfig, __p_images, __p_dummyHost, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_volumeRestore(const ::std::string& __p_hostName, const ::std::string& __p_jsonConfig, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_dummyHost, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_volumeRestore(__p_hostName, __p_jsonConfig, __p_images, __p_dummyHost, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_volumeRestore(const ::std::string& __p_hostName, const ::std::string& __p_jsonConfig, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_dummyHost, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_volumeRestore(__p_hostName, __p_jsonConfig, __p_images, __p_dummyHost, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_volumeRestore(const ::std::string& __p_hostName, const ::std::string& __p_jsonConfig, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_dummyHost, const ::Box::Callback_Apis_volumeRestorePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_volumeRestore(__p_hostName, __p_jsonConfig, __p_images, __p_dummyHost, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_volumeRestore(const ::std::string& __p_hostName, const ::std::string& __p_jsonConfig, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_dummyHost, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_volumeRestorePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_volumeRestore(__p_hostName, __p_jsonConfig, __p_images, __p_dummyHost, &__ctx, __del, __cookie);
    }

    void end_volumeRestore(const ::Ice::AsyncResultPtr&);
    
private:

    void volumeRestore(const ::std::string&, const ::std::string&, const ::Box::RestoreFiles&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_volumeRestore(const ::std::string&, const ::std::string&, const ::Box::RestoreFiles&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void restore(const ::std::string& __p_hostName, const ::PerpcIce::PeRestoreInfo& __p_info, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_jsonConfig)
    {
        restore(__p_hostName, __p_info, __p_images, __p_jsonConfig, 0);
    }
    void restore(const ::std::string& __p_hostName, const ::PerpcIce::PeRestoreInfo& __p_info, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_jsonConfig, const ::Ice::Context& __ctx)
    {
        restore(__p_hostName, __p_info, __p_images, __p_jsonConfig, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_restore(const ::std::string& __p_hostName, const ::PerpcIce::PeRestoreInfo& __p_info, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_jsonConfig, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_restore(__p_hostName, __p_info, __p_images, __p_jsonConfig, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_restore(const ::std::string& __p_hostName, const ::PerpcIce::PeRestoreInfo& __p_info, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_jsonConfig, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_restore(__p_hostName, __p_info, __p_images, __p_jsonConfig, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_restore(const ::std::string& __p_hostName, const ::PerpcIce::PeRestoreInfo& __p_info, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_jsonConfig, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_restore(__p_hostName, __p_info, __p_images, __p_jsonConfig, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_restore(const ::std::string& __p_hostName, const ::PerpcIce::PeRestoreInfo& __p_info, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_jsonConfig, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_restore(__p_hostName, __p_info, __p_images, __p_jsonConfig, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_restore(const ::std::string& __p_hostName, const ::PerpcIce::PeRestoreInfo& __p_info, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_jsonConfig, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_restore(const ::std::string& __p_hostName, const ::PerpcIce::PeRestoreInfo& __p_info, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_jsonConfig)
    {
        return begin_restore(__p_hostName, __p_info, __p_images, __p_jsonConfig, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_restore(const ::std::string& __p_hostName, const ::PerpcIce::PeRestoreInfo& __p_info, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_jsonConfig, const ::Ice::Context& __ctx)
    {
        return begin_restore(__p_hostName, __p_info, __p_images, __p_jsonConfig, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_restore(const ::std::string& __p_hostName, const ::PerpcIce::PeRestoreInfo& __p_info, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_jsonConfig, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_restore(__p_hostName, __p_info, __p_images, __p_jsonConfig, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_restore(const ::std::string& __p_hostName, const ::PerpcIce::PeRestoreInfo& __p_info, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_jsonConfig, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_restore(__p_hostName, __p_info, __p_images, __p_jsonConfig, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_restore(const ::std::string& __p_hostName, const ::PerpcIce::PeRestoreInfo& __p_info, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_jsonConfig, const ::Box::Callback_Apis_restorePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_restore(__p_hostName, __p_info, __p_images, __p_jsonConfig, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_restore(const ::std::string& __p_hostName, const ::PerpcIce::PeRestoreInfo& __p_info, const ::Box::RestoreFiles& __p_images, const ::std::string& __p_jsonConfig, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_restorePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_restore(__p_hostName, __p_info, __p_images, __p_jsonConfig, &__ctx, __del, __cookie);
    }

    void end_restore(const ::Ice::AsyncResultPtr&);
    
private:

    void restore(const ::std::string&, const ::PerpcIce::PeRestoreInfo&, const ::Box::RestoreFiles&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_restore(const ::std::string&, const ::PerpcIce::PeRestoreInfo&, const ::Box::RestoreFiles&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setBootDataList(const ::std::string& __p_hostName, const ::std::string& __p_filePath)
    {
        setBootDataList(__p_hostName, __p_filePath, 0);
    }
    void setBootDataList(const ::std::string& __p_hostName, const ::std::string& __p_filePath, const ::Ice::Context& __ctx)
    {
        setBootDataList(__p_hostName, __p_filePath, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setBootDataList(const ::std::string& __p_hostName, const ::std::string& __p_filePath, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setBootDataList(__p_hostName, __p_filePath, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setBootDataList(const ::std::string& __p_hostName, const ::std::string& __p_filePath, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setBootDataList(__p_hostName, __p_filePath, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setBootDataList(const ::std::string& __p_hostName, const ::std::string& __p_filePath, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setBootDataList(__p_hostName, __p_filePath, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setBootDataList(const ::std::string& __p_hostName, const ::std::string& __p_filePath, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setBootDataList(__p_hostName, __p_filePath, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setBootDataList(const ::std::string& __p_hostName, const ::std::string& __p_filePath, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setBootDataList(const ::std::string& __p_hostName, const ::std::string& __p_filePath)
    {
        return begin_setBootDataList(__p_hostName, __p_filePath, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setBootDataList(const ::std::string& __p_hostName, const ::std::string& __p_filePath, const ::Ice::Context& __ctx)
    {
        return begin_setBootDataList(__p_hostName, __p_filePath, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setBootDataList(const ::std::string& __p_hostName, const ::std::string& __p_filePath, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBootDataList(__p_hostName, __p_filePath, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBootDataList(const ::std::string& __p_hostName, const ::std::string& __p_filePath, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBootDataList(__p_hostName, __p_filePath, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBootDataList(const ::std::string& __p_hostName, const ::std::string& __p_filePath, const ::Box::Callback_Apis_setBootDataListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBootDataList(__p_hostName, __p_filePath, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBootDataList(const ::std::string& __p_hostName, const ::std::string& __p_filePath, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_setBootDataListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBootDataList(__p_hostName, __p_filePath, &__ctx, __del, __cookie);
    }

    void end_setBootDataList(const ::Ice::AsyncResultPtr&);
    
private:

    void setBootDataList(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setBootDataList(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void notifyHighPriority(::Ice::Long __p_imageFileHandle, ::Ice::Long __p_byteOffset)
    {
        notifyHighPriority(__p_imageFileHandle, __p_byteOffset, 0);
    }
    void notifyHighPriority(::Ice::Long __p_imageFileHandle, ::Ice::Long __p_byteOffset, const ::Ice::Context& __ctx)
    {
        notifyHighPriority(__p_imageFileHandle, __p_byteOffset, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_notifyHighPriority(::Ice::Long __p_imageFileHandle, ::Ice::Long __p_byteOffset, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_notifyHighPriority(__p_imageFileHandle, __p_byteOffset, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_notifyHighPriority(::Ice::Long __p_imageFileHandle, ::Ice::Long __p_byteOffset, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_notifyHighPriority(__p_imageFileHandle, __p_byteOffset, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_notifyHighPriority(::Ice::Long __p_imageFileHandle, ::Ice::Long __p_byteOffset, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_notifyHighPriority(__p_imageFileHandle, __p_byteOffset, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_notifyHighPriority(::Ice::Long __p_imageFileHandle, ::Ice::Long __p_byteOffset, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_notifyHighPriority(__p_imageFileHandle, __p_byteOffset, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_notifyHighPriority(::Ice::Long __p_imageFileHandle, ::Ice::Long __p_byteOffset, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_notifyHighPriority(::Ice::Long __p_imageFileHandle, ::Ice::Long __p_byteOffset)
    {
        return begin_notifyHighPriority(__p_imageFileHandle, __p_byteOffset, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_notifyHighPriority(::Ice::Long __p_imageFileHandle, ::Ice::Long __p_byteOffset, const ::Ice::Context& __ctx)
    {
        return begin_notifyHighPriority(__p_imageFileHandle, __p_byteOffset, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_notifyHighPriority(::Ice::Long __p_imageFileHandle, ::Ice::Long __p_byteOffset, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notifyHighPriority(__p_imageFileHandle, __p_byteOffset, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_notifyHighPriority(::Ice::Long __p_imageFileHandle, ::Ice::Long __p_byteOffset, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notifyHighPriority(__p_imageFileHandle, __p_byteOffset, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_notifyHighPriority(::Ice::Long __p_imageFileHandle, ::Ice::Long __p_byteOffset, const ::Box::Callback_Apis_notifyHighPriorityPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notifyHighPriority(__p_imageFileHandle, __p_byteOffset, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_notifyHighPriority(::Ice::Long __p_imageFileHandle, ::Ice::Long __p_byteOffset, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_notifyHighPriorityPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notifyHighPriority(__p_imageFileHandle, __p_byteOffset, &__ctx, __del, __cookie);
    }

    void end_notifyHighPriority(const ::Ice::AsyncResultPtr&);
    
private:

    void notifyHighPriority(::Ice::Long, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_notifyHighPriority(::Ice::Long, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int ReadDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, ::Box::BinaryStream& __p_data)
    {
        return ReadDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, __p_data, 0);
    }
    ::Ice::Int ReadDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, ::Box::BinaryStream& __p_data, const ::Ice::Context& __ctx)
    {
        return ReadDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, __p_data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ReadDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::IceInternal::Function<void (::Ice::Int, const ::Box::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ReadDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ReadDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ReadDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ReadDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Box::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ReadDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ReadDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ReadDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_ReadDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Box::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_ReadDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors)
    {
        return begin_ReadDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReadDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Ice::Context& __ctx)
    {
        return begin_ReadDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReadDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReadDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReadDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Box::Callback_Apis_ReadDiskWithPeHostPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReadDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_ReadDiskWithPeHostPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_ReadDiskWithPeHost(::Box::BinaryStream& __p_data, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int ReadDiskWithPeHost(const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Int, ::Box::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ReadDiskWithPeHost(const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int WriteDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Box::BinaryStream& __p_data)
    {
        return WriteDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, __p_data, 0);
    }
    ::Ice::Int WriteDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Box::BinaryStream& __p_data, const ::Ice::Context& __ctx)
    {
        return WriteDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, __p_data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_WriteDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Box::BinaryStream& __p_data, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_WriteDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, __p_data, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_WriteDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Box::BinaryStream& __p_data, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_WriteDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, __p_data, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_WriteDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Box::BinaryStream& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_WriteDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, __p_data, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_WriteDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Box::BinaryStream& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_WriteDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, __p_data, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_WriteDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Box::BinaryStream& __p_data, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_WriteDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Box::BinaryStream& __p_data)
    {
        return begin_WriteDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, __p_data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_WriteDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Box::BinaryStream& __p_data, const ::Ice::Context& __ctx)
    {
        return begin_WriteDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, __p_data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_WriteDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Box::BinaryStream& __p_data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_WriteDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, __p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_WriteDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Box::BinaryStream& __p_data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_WriteDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, __p_data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_WriteDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Box::BinaryStream& __p_data, const ::Box::Callback_Apis_WriteDiskWithPeHostPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_WriteDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, __p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_WriteDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::std::string& __p_token, ::Ice::Long __p_sectorOffset, ::Ice::Int __p_sectors, const ::Box::BinaryStream& __p_data, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_WriteDiskWithPeHostPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_WriteDiskWithPeHost(__p_peHostIdent, __p_token, __p_sectorOffset, __p_sectors, __p_data, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_WriteDiskWithPeHost(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int WriteDiskWithPeHost(const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Box::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_WriteDiskWithPeHost(const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Box::BinaryStream&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool QueryRWDiskWithPeHost(const ::std::string& __p_peHostIdent, ::Ice::Long& __p_totalSectors, ::Ice::Long& __p_sentSectors)
    {
        return QueryRWDiskWithPeHost(__p_peHostIdent, __p_totalSectors, __p_sentSectors, 0);
    }
    bool QueryRWDiskWithPeHost(const ::std::string& __p_peHostIdent, ::Ice::Long& __p_totalSectors, ::Ice::Long& __p_sentSectors, const ::Ice::Context& __ctx)
    {
        return QueryRWDiskWithPeHost(__p_peHostIdent, __p_totalSectors, __p_sentSectors, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_QueryRWDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::IceInternal::Function<void (bool, ::Ice::Long, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QueryRWDiskWithPeHost(__p_peHostIdent, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QueryRWDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QueryRWDiskWithPeHost(__p_peHostIdent, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_QueryRWDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, ::Ice::Long, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QueryRWDiskWithPeHost(__p_peHostIdent, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QueryRWDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QueryRWDiskWithPeHost(__p_peHostIdent, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_QueryRWDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, ::Ice::Long, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_QueryRWDiskWithPeHost(const ::std::string& __p_peHostIdent)
    {
        return begin_QueryRWDiskWithPeHost(__p_peHostIdent, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QueryRWDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx)
    {
        return begin_QueryRWDiskWithPeHost(__p_peHostIdent, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QueryRWDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryRWDiskWithPeHost(__p_peHostIdent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryRWDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryRWDiskWithPeHost(__p_peHostIdent, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryRWDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::Box::Callback_Apis_QueryRWDiskWithPeHostPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryRWDiskWithPeHost(__p_peHostIdent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryRWDiskWithPeHost(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_QueryRWDiskWithPeHostPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryRWDiskWithPeHost(__p_peHostIdent, &__ctx, __del, __cookie);
    }

    bool end_QueryRWDiskWithPeHost(::Ice::Long& __p_totalSectors, ::Ice::Long& __p_sentSectors, const ::Ice::AsyncResultPtr&);
    
private:

    bool QueryRWDiskWithPeHost(const ::std::string&, ::Ice::Long&, ::Ice::Long&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_QueryRWDiskWithPeHost(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void KvmStopped(const ::std::string& __p_peHostIdent)
    {
        KvmStopped(__p_peHostIdent, 0);
    }
    void KvmStopped(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx)
    {
        KvmStopped(__p_peHostIdent, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_KvmStopped(const ::std::string& __p_peHostIdent, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_KvmStopped(__p_peHostIdent, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_KvmStopped(const ::std::string& __p_peHostIdent, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_KvmStopped(__p_peHostIdent, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_KvmStopped(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_KvmStopped(__p_peHostIdent, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_KvmStopped(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_KvmStopped(__p_peHostIdent, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_KvmStopped(const ::std::string& __p_peHostIdent, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_KvmStopped(const ::std::string& __p_peHostIdent)
    {
        return begin_KvmStopped(__p_peHostIdent, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_KvmStopped(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx)
    {
        return begin_KvmStopped(__p_peHostIdent, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_KvmStopped(const ::std::string& __p_peHostIdent, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_KvmStopped(__p_peHostIdent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_KvmStopped(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_KvmStopped(__p_peHostIdent, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_KvmStopped(const ::std::string& __p_peHostIdent, const ::Box::Callback_Apis_KvmStoppedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_KvmStopped(__p_peHostIdent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_KvmStopped(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_KvmStoppedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_KvmStopped(__p_peHostIdent, &__ctx, __del, __cookie);
    }

    void end_KvmStopped(const ::Ice::AsyncResultPtr&);
    
private:

    void KvmStopped(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_KvmStopped(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetPeHostClassHWInfo(const ::std::string& __p_peHostIdent, const ::std::string& __p_classname, ::Ice::Int __p_parentLevel, ::PerpcIce::HWInfos& __p_hwinfo)
    {
        return GetPeHostClassHWInfo(__p_peHostIdent, __p_classname, __p_parentLevel, __p_hwinfo, 0);
    }
    ::Ice::Int GetPeHostClassHWInfo(const ::std::string& __p_peHostIdent, const ::std::string& __p_classname, ::Ice::Int __p_parentLevel, ::PerpcIce::HWInfos& __p_hwinfo, const ::Ice::Context& __ctx)
    {
        return GetPeHostClassHWInfo(__p_peHostIdent, __p_classname, __p_parentLevel, __p_hwinfo, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetPeHostClassHWInfo(const ::std::string& __p_peHostIdent, const ::std::string& __p_classname, ::Ice::Int __p_parentLevel, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::HWInfos&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetPeHostClassHWInfo(__p_peHostIdent, __p_classname, __p_parentLevel, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetPeHostClassHWInfo(const ::std::string& __p_peHostIdent, const ::std::string& __p_classname, ::Ice::Int __p_parentLevel, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetPeHostClassHWInfo(__p_peHostIdent, __p_classname, __p_parentLevel, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetPeHostClassHWInfo(const ::std::string& __p_peHostIdent, const ::std::string& __p_classname, ::Ice::Int __p_parentLevel, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::HWInfos&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetPeHostClassHWInfo(__p_peHostIdent, __p_classname, __p_parentLevel, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetPeHostClassHWInfo(const ::std::string& __p_peHostIdent, const ::std::string& __p_classname, ::Ice::Int __p_parentLevel, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetPeHostClassHWInfo(__p_peHostIdent, __p_classname, __p_parentLevel, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetPeHostClassHWInfo(const ::std::string& __p_peHostIdent, const ::std::string& __p_classname, ::Ice::Int __p_parentLevel, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::HWInfos&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetPeHostClassHWInfo(const ::std::string& __p_peHostIdent, const ::std::string& __p_classname, ::Ice::Int __p_parentLevel)
    {
        return begin_GetPeHostClassHWInfo(__p_peHostIdent, __p_classname, __p_parentLevel, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetPeHostClassHWInfo(const ::std::string& __p_peHostIdent, const ::std::string& __p_classname, ::Ice::Int __p_parentLevel, const ::Ice::Context& __ctx)
    {
        return begin_GetPeHostClassHWInfo(__p_peHostIdent, __p_classname, __p_parentLevel, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetPeHostClassHWInfo(const ::std::string& __p_peHostIdent, const ::std::string& __p_classname, ::Ice::Int __p_parentLevel, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetPeHostClassHWInfo(__p_peHostIdent, __p_classname, __p_parentLevel, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetPeHostClassHWInfo(const ::std::string& __p_peHostIdent, const ::std::string& __p_classname, ::Ice::Int __p_parentLevel, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetPeHostClassHWInfo(__p_peHostIdent, __p_classname, __p_parentLevel, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetPeHostClassHWInfo(const ::std::string& __p_peHostIdent, const ::std::string& __p_classname, ::Ice::Int __p_parentLevel, const ::Box::Callback_Apis_GetPeHostClassHWInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetPeHostClassHWInfo(__p_peHostIdent, __p_classname, __p_parentLevel, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetPeHostClassHWInfo(const ::std::string& __p_peHostIdent, const ::std::string& __p_classname, ::Ice::Int __p_parentLevel, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_GetPeHostClassHWInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetPeHostClassHWInfo(__p_peHostIdent, __p_classname, __p_parentLevel, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetPeHostClassHWInfo(::PerpcIce::HWInfos& __p_hwinfo, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetPeHostClassHWInfo(const ::std::string&, const ::std::string&, ::Ice::Int, ::PerpcIce::HWInfos&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetPeHostClassHWInfo(const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetPeHostNetAdapterInfo(const ::std::string& __p_peHostIdent, ::PerpcIce::NetAdapterInfos& __p_adapterInfos)
    {
        return GetPeHostNetAdapterInfo(__p_peHostIdent, __p_adapterInfos, 0);
    }
    ::Ice::Int GetPeHostNetAdapterInfo(const ::std::string& __p_peHostIdent, ::PerpcIce::NetAdapterInfos& __p_adapterInfos, const ::Ice::Context& __ctx)
    {
        return GetPeHostNetAdapterInfo(__p_peHostIdent, __p_adapterInfos, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetPeHostNetAdapterInfo(const ::std::string& __p_peHostIdent, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::NetAdapterInfos&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetPeHostNetAdapterInfo(__p_peHostIdent, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetPeHostNetAdapterInfo(const ::std::string& __p_peHostIdent, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetPeHostNetAdapterInfo(__p_peHostIdent, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetPeHostNetAdapterInfo(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::NetAdapterInfos&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetPeHostNetAdapterInfo(__p_peHostIdent, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetPeHostNetAdapterInfo(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetPeHostNetAdapterInfo(__p_peHostIdent, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetPeHostNetAdapterInfo(const ::std::string& __p_peHostIdent, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::PerpcIce::NetAdapterInfos&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetPeHostNetAdapterInfo(const ::std::string& __p_peHostIdent)
    {
        return begin_GetPeHostNetAdapterInfo(__p_peHostIdent, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetPeHostNetAdapterInfo(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx)
    {
        return begin_GetPeHostNetAdapterInfo(__p_peHostIdent, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetPeHostNetAdapterInfo(const ::std::string& __p_peHostIdent, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetPeHostNetAdapterInfo(__p_peHostIdent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetPeHostNetAdapterInfo(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetPeHostNetAdapterInfo(__p_peHostIdent, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetPeHostNetAdapterInfo(const ::std::string& __p_peHostIdent, const ::Box::Callback_Apis_GetPeHostNetAdapterInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetPeHostNetAdapterInfo(__p_peHostIdent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetPeHostNetAdapterInfo(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_GetPeHostNetAdapterInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetPeHostNetAdapterInfo(__p_peHostIdent, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetPeHostNetAdapterInfo(::PerpcIce::NetAdapterInfos& __p_adapterInfos, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetPeHostNetAdapterInfo(const ::std::string&, ::PerpcIce::NetAdapterInfos&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetPeHostNetAdapterInfo(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isPeHostLinked(const ::std::string& __p_peHostName)
    {
        return isPeHostLinked(__p_peHostName, 0);
    }
    bool isPeHostLinked(const ::std::string& __p_peHostName, const ::Ice::Context& __ctx)
    {
        return isPeHostLinked(__p_peHostName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_isPeHostLinked(const ::std::string& __p_peHostName, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isPeHostLinked(__p_peHostName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isPeHostLinked(const ::std::string& __p_peHostName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isPeHostLinked(__p_peHostName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_isPeHostLinked(const ::std::string& __p_peHostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isPeHostLinked(__p_peHostName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isPeHostLinked(const ::std::string& __p_peHostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isPeHostLinked(__p_peHostName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_isPeHostLinked(const ::std::string& __p_peHostName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_isPeHostLinked(const ::std::string& __p_peHostName)
    {
        return begin_isPeHostLinked(__p_peHostName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isPeHostLinked(const ::std::string& __p_peHostName, const ::Ice::Context& __ctx)
    {
        return begin_isPeHostLinked(__p_peHostName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isPeHostLinked(const ::std::string& __p_peHostName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isPeHostLinked(__p_peHostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isPeHostLinked(const ::std::string& __p_peHostName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isPeHostLinked(__p_peHostName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isPeHostLinked(const ::std::string& __p_peHostName, const ::Box::Callback_Apis_isPeHostLinkedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isPeHostLinked(__p_peHostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isPeHostLinked(const ::std::string& __p_peHostName, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_isPeHostLinkedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isPeHostLinked(__p_peHostName, &__ctx, __del, __cookie);
    }

    bool end_isPeHostLinked(const ::Ice::AsyncResultPtr&);
    
private:

    bool isPeHostLinked(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isPeHostLinked(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string StartAgentPe(const ::std::string& __p_hostName)
    {
        return StartAgentPe(__p_hostName, 0);
    }
    ::std::string StartAgentPe(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        return StartAgentPe(__p_hostName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_StartAgentPe(const ::std::string& __p_hostName, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StartAgentPe(__p_hostName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StartAgentPe(const ::std::string& __p_hostName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StartAgentPe(__p_hostName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_StartAgentPe(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StartAgentPe(__p_hostName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StartAgentPe(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StartAgentPe(__p_hostName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_StartAgentPe(const ::std::string& __p_hostName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_StartAgentPe(const ::std::string& __p_hostName)
    {
        return begin_StartAgentPe(__p_hostName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartAgentPe(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        return begin_StartAgentPe(__p_hostName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartAgentPe(const ::std::string& __p_hostName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartAgentPe(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartAgentPe(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartAgentPe(__p_hostName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartAgentPe(const ::std::string& __p_hostName, const ::Box::Callback_Apis_StartAgentPePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartAgentPe(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartAgentPe(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_StartAgentPePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartAgentPe(__p_hostName, &__ctx, __del, __cookie);
    }

    ::std::string end_StartAgentPe(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string StartAgentPe(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_StartAgentPe(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void fetchAgentDebugFile(const ::std::string& __p_hostName, const ::std::string& __p_path)
    {
        fetchAgentDebugFile(__p_hostName, __p_path, 0);
    }
    void fetchAgentDebugFile(const ::std::string& __p_hostName, const ::std::string& __p_path, const ::Ice::Context& __ctx)
    {
        fetchAgentDebugFile(__p_hostName, __p_path, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_fetchAgentDebugFile(const ::std::string& __p_hostName, const ::std::string& __p_path, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_fetchAgentDebugFile(__p_hostName, __p_path, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_fetchAgentDebugFile(const ::std::string& __p_hostName, const ::std::string& __p_path, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_fetchAgentDebugFile(__p_hostName, __p_path, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_fetchAgentDebugFile(const ::std::string& __p_hostName, const ::std::string& __p_path, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_fetchAgentDebugFile(__p_hostName, __p_path, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_fetchAgentDebugFile(const ::std::string& __p_hostName, const ::std::string& __p_path, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_fetchAgentDebugFile(__p_hostName, __p_path, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_fetchAgentDebugFile(const ::std::string& __p_hostName, const ::std::string& __p_path, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_fetchAgentDebugFile(const ::std::string& __p_hostName, const ::std::string& __p_path)
    {
        return begin_fetchAgentDebugFile(__p_hostName, __p_path, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fetchAgentDebugFile(const ::std::string& __p_hostName, const ::std::string& __p_path, const ::Ice::Context& __ctx)
    {
        return begin_fetchAgentDebugFile(__p_hostName, __p_path, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_fetchAgentDebugFile(const ::std::string& __p_hostName, const ::std::string& __p_path, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fetchAgentDebugFile(__p_hostName, __p_path, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fetchAgentDebugFile(const ::std::string& __p_hostName, const ::std::string& __p_path, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fetchAgentDebugFile(__p_hostName, __p_path, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fetchAgentDebugFile(const ::std::string& __p_hostName, const ::std::string& __p_path, const ::Box::Callback_Apis_fetchAgentDebugFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fetchAgentDebugFile(__p_hostName, __p_path, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_fetchAgentDebugFile(const ::std::string& __p_hostName, const ::std::string& __p_path, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_fetchAgentDebugFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_fetchAgentDebugFile(__p_hostName, __p_path, &__ctx, __del, __cookie);
    }

    void end_fetchAgentDebugFile(const ::Ice::AsyncResultPtr&);
    
private:

    void fetchAgentDebugFile(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_fetchAgentDebugFile(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string queryRunnerAbsPathOnAgentSetup(const ::std::string& __p_session)
    {
        return queryRunnerAbsPathOnAgentSetup(__p_session, 0);
    }
    ::std::string queryRunnerAbsPathOnAgentSetup(const ::std::string& __p_session, const ::Ice::Context& __ctx)
    {
        return queryRunnerAbsPathOnAgentSetup(__p_session, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_queryRunnerAbsPathOnAgentSetup(const ::std::string& __p_session, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryRunnerAbsPathOnAgentSetup(__p_session, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryRunnerAbsPathOnAgentSetup(const ::std::string& __p_session, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryRunnerAbsPathOnAgentSetup(__p_session, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_queryRunnerAbsPathOnAgentSetup(const ::std::string& __p_session, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryRunnerAbsPathOnAgentSetup(__p_session, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryRunnerAbsPathOnAgentSetup(const ::std::string& __p_session, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryRunnerAbsPathOnAgentSetup(__p_session, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_queryRunnerAbsPathOnAgentSetup(const ::std::string& __p_session, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_queryRunnerAbsPathOnAgentSetup(const ::std::string& __p_session)
    {
        return begin_queryRunnerAbsPathOnAgentSetup(__p_session, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryRunnerAbsPathOnAgentSetup(const ::std::string& __p_session, const ::Ice::Context& __ctx)
    {
        return begin_queryRunnerAbsPathOnAgentSetup(__p_session, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryRunnerAbsPathOnAgentSetup(const ::std::string& __p_session, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryRunnerAbsPathOnAgentSetup(__p_session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryRunnerAbsPathOnAgentSetup(const ::std::string& __p_session, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryRunnerAbsPathOnAgentSetup(__p_session, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryRunnerAbsPathOnAgentSetup(const ::std::string& __p_session, const ::Box::Callback_Apis_queryRunnerAbsPathOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryRunnerAbsPathOnAgentSetup(__p_session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryRunnerAbsPathOnAgentSetup(const ::std::string& __p_session, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_queryRunnerAbsPathOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryRunnerAbsPathOnAgentSetup(__p_session, &__ctx, __del, __cookie);
    }

    ::std::string end_queryRunnerAbsPathOnAgentSetup(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string queryRunnerAbsPathOnAgentSetup(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_queryRunnerAbsPathOnAgentSetup(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string prepareInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_flagJson)
    {
        return prepareInfoOnAgentSetup(__p_session, __p_flagJson, 0);
    }
    ::std::string prepareInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx)
    {
        return prepareInfoOnAgentSetup(__p_session, __p_flagJson, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_prepareInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_flagJson, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_prepareInfoOnAgentSetup(__p_session, __p_flagJson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_prepareInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_flagJson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_prepareInfoOnAgentSetup(__p_session, __p_flagJson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_prepareInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_prepareInfoOnAgentSetup(__p_session, __p_flagJson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_prepareInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_prepareInfoOnAgentSetup(__p_session, __p_flagJson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_prepareInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_prepareInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_flagJson)
    {
        return begin_prepareInfoOnAgentSetup(__p_session, __p_flagJson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_prepareInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx)
    {
        return begin_prepareInfoOnAgentSetup(__p_session, __p_flagJson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_prepareInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_flagJson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_prepareInfoOnAgentSetup(__p_session, __p_flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_prepareInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_prepareInfoOnAgentSetup(__p_session, __p_flagJson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_prepareInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_flagJson, const ::Box::Callback_Apis_prepareInfoOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_prepareInfoOnAgentSetup(__p_session, __p_flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_prepareInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_prepareInfoOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_prepareInfoOnAgentSetup(__p_session, __p_flagJson, &__ctx, __del, __cookie);
    }

    ::std::string end_prepareInfoOnAgentSetup(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string prepareInfoOnAgentSetup(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_prepareInfoOnAgentSetup(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getFileInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_fileName, const ::std::string& __p_flagJson)
    {
        return getFileInfoOnAgentSetup(__p_session, __p_fileName, __p_flagJson, 0);
    }
    ::std::string getFileInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_fileName, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx)
    {
        return getFileInfoOnAgentSetup(__p_session, __p_fileName, __p_flagJson, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getFileInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_fileName, const ::std::string& __p_flagJson, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFileInfoOnAgentSetup(__p_session, __p_fileName, __p_flagJson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFileInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_fileName, const ::std::string& __p_flagJson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFileInfoOnAgentSetup(__p_session, __p_fileName, __p_flagJson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getFileInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_fileName, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFileInfoOnAgentSetup(__p_session, __p_fileName, __p_flagJson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFileInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_fileName, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFileInfoOnAgentSetup(__p_session, __p_fileName, __p_flagJson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getFileInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_fileName, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getFileInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_fileName, const ::std::string& __p_flagJson)
    {
        return begin_getFileInfoOnAgentSetup(__p_session, __p_fileName, __p_flagJson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFileInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_fileName, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx)
    {
        return begin_getFileInfoOnAgentSetup(__p_session, __p_fileName, __p_flagJson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFileInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_fileName, const ::std::string& __p_flagJson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileInfoOnAgentSetup(__p_session, __p_fileName, __p_flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_fileName, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileInfoOnAgentSetup(__p_session, __p_fileName, __p_flagJson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_fileName, const ::std::string& __p_flagJson, const ::Box::Callback_Apis_getFileInfoOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileInfoOnAgentSetup(__p_session, __p_fileName, __p_flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileInfoOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_fileName, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_getFileInfoOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileInfoOnAgentSetup(__p_session, __p_fileName, __p_flagJson, &__ctx, __del, __cookie);
    }

    ::std::string end_getFileInfoOnAgentSetup(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getFileInfoOnAgentSetup(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFileInfoOnAgentSetup(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string searchBootFileAbsPathOnAgentSetup(const ::std::string& __p_session)
    {
        return searchBootFileAbsPathOnAgentSetup(__p_session, 0);
    }
    ::std::string searchBootFileAbsPathOnAgentSetup(const ::std::string& __p_session, const ::Ice::Context& __ctx)
    {
        return searchBootFileAbsPathOnAgentSetup(__p_session, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_searchBootFileAbsPathOnAgentSetup(const ::std::string& __p_session, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_searchBootFileAbsPathOnAgentSetup(__p_session, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_searchBootFileAbsPathOnAgentSetup(const ::std::string& __p_session, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_searchBootFileAbsPathOnAgentSetup(__p_session, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_searchBootFileAbsPathOnAgentSetup(const ::std::string& __p_session, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_searchBootFileAbsPathOnAgentSetup(__p_session, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_searchBootFileAbsPathOnAgentSetup(const ::std::string& __p_session, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_searchBootFileAbsPathOnAgentSetup(__p_session, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_searchBootFileAbsPathOnAgentSetup(const ::std::string& __p_session, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_searchBootFileAbsPathOnAgentSetup(const ::std::string& __p_session)
    {
        return begin_searchBootFileAbsPathOnAgentSetup(__p_session, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_searchBootFileAbsPathOnAgentSetup(const ::std::string& __p_session, const ::Ice::Context& __ctx)
    {
        return begin_searchBootFileAbsPathOnAgentSetup(__p_session, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_searchBootFileAbsPathOnAgentSetup(const ::std::string& __p_session, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchBootFileAbsPathOnAgentSetup(__p_session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchBootFileAbsPathOnAgentSetup(const ::std::string& __p_session, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchBootFileAbsPathOnAgentSetup(__p_session, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchBootFileAbsPathOnAgentSetup(const ::std::string& __p_session, const ::Box::Callback_Apis_searchBootFileAbsPathOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchBootFileAbsPathOnAgentSetup(__p_session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchBootFileAbsPathOnAgentSetup(const ::std::string& __p_session, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_searchBootFileAbsPathOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchBootFileAbsPathOnAgentSetup(__p_session, &__ctx, __del, __cookie);
    }

    ::std::string end_searchBootFileAbsPathOnAgentSetup(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string searchBootFileAbsPathOnAgentSetup(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_searchBootFileAbsPathOnAgentSetup(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void generateKeyInfosOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson)
    {
        generateKeyInfosOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, 0);
    }
    void generateKeyInfosOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx)
    {
        generateKeyInfosOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_generateKeyInfosOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_generateKeyInfosOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_generateKeyInfosOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_generateKeyInfosOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_generateKeyInfosOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_generateKeyInfosOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_generateKeyInfosOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_generateKeyInfosOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_generateKeyInfosOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_generateKeyInfosOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson)
    {
        return begin_generateKeyInfosOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_generateKeyInfosOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx)
    {
        return begin_generateKeyInfosOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_generateKeyInfosOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_generateKeyInfosOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_generateKeyInfosOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_generateKeyInfosOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_generateKeyInfosOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Box::Callback_Apis_generateKeyInfosOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_generateKeyInfosOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_generateKeyInfosOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_generateKeyInfosOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_generateKeyInfosOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, &__ctx, __del, __cookie);
    }

    void end_generateKeyInfosOnAgentSetup(const ::Ice::AsyncResultPtr&);
    
private:

    void generateKeyInfosOnAgentSetup(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_generateKeyInfosOnAgentSetup(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string openOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson)
    {
        return openOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, 0);
    }
    ::std::string openOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx)
    {
        return openOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_openOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_openOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_openOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_openOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_openOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_openOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_openOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_openOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_openOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_openOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson)
    {
        return begin_openOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_openOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx)
    {
        return begin_openOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_openOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_openOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_openOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_openOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_openOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Box::Callback_Apis_openOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_openOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_openOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absFilePath, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_openOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_openOnAgentSetup(__p_session, __p_absFilePath, __p_flagJson, &__ctx, __del, __cookie);
    }

    ::std::string end_openOnAgentSetup(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string openOnAgentSetup(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_openOnAgentSetup(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::ByteSeq preadOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes)
    {
        return preadOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, 0);
    }
    ::Ice::ByteSeq preadOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::Context& __ctx)
    {
        return preadOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_preadOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_preadOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_preadOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_preadOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_preadOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_preadOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_preadOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_preadOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_preadOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_preadOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes)
    {
        return begin_preadOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_preadOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::Context& __ctx)
    {
        return begin_preadOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_preadOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_preadOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_preadOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_preadOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_preadOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Box::Callback_Apis_preadOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_preadOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_preadOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_preadOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_preadOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, &__ctx, __del, __cookie);
    }

    ::Ice::ByteSeq end_preadOnAgentSetup(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::ByteSeq preadOnAgentSetup(const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_preadOnAgentSetup(const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void pwriteOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::ByteSeq& __p_data)
    {
        pwriteOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, __p_data, 0);
    }
    void pwriteOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::ByteSeq& __p_data, const ::Ice::Context& __ctx)
    {
        pwriteOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, __p_data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_pwriteOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::ByteSeq& __p_data, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_pwriteOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, __p_data, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_pwriteOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::ByteSeq& __p_data, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_pwriteOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, __p_data, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_pwriteOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::ByteSeq& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_pwriteOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, __p_data, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_pwriteOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::ByteSeq& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_pwriteOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, __p_data, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_pwriteOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::ByteSeq& __p_data, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_pwriteOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::ByteSeq& __p_data)
    {
        return begin_pwriteOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, __p_data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_pwriteOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::ByteSeq& __p_data, const ::Ice::Context& __ctx)
    {
        return begin_pwriteOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, __p_data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_pwriteOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::ByteSeq& __p_data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pwriteOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, __p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pwriteOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::ByteSeq& __p_data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pwriteOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, __p_data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pwriteOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::ByteSeq& __p_data, const ::Box::Callback_Apis_pwriteOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pwriteOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, __p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pwriteOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::ByteSeq& __p_data, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_pwriteOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pwriteOnAgentSetup(__p_session, __p_handle, __p_byteOffset, __p_bytes, __p_data, &__ctx, __del, __cookie);
    }

    void end_pwriteOnAgentSetup(const ::Ice::AsyncResultPtr&);
    
private:

    void pwriteOnAgentSetup(const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::ByteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_pwriteOnAgentSetup(const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::ByteSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void closeOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle)
    {
        closeOnAgentSetup(__p_session, __p_handle, 0);
    }
    void closeOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, const ::Ice::Context& __ctx)
    {
        closeOnAgentSetup(__p_session, __p_handle, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_closeOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_closeOnAgentSetup(__p_session, __p_handle, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_closeOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_closeOnAgentSetup(__p_session, __p_handle, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_closeOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_closeOnAgentSetup(__p_session, __p_handle, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_closeOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_closeOnAgentSetup(__p_session, __p_handle, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_closeOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_closeOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle)
    {
        return begin_closeOnAgentSetup(__p_session, __p_handle, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_closeOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, const ::Ice::Context& __ctx)
    {
        return begin_closeOnAgentSetup(__p_session, __p_handle, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_closeOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_closeOnAgentSetup(__p_session, __p_handle, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_closeOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_closeOnAgentSetup(__p_session, __p_handle, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_closeOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, const ::Box::Callback_Apis_closeOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_closeOnAgentSetup(__p_session, __p_handle, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_closeOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_handle, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_closeOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_closeOnAgentSetup(__p_session, __p_handle, &__ctx, __del, __cookie);
    }

    void end_closeOnAgentSetup(const ::Ice::AsyncResultPtr&);
    
private:

    void closeOnAgentSetup(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_closeOnAgentSetup(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void extractFileOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absSourceFilePath, const ::std::string& __p_absDestinationPath, const ::std::string& __p_flagJson)
    {
        extractFileOnAgentSetup(__p_session, __p_absSourceFilePath, __p_absDestinationPath, __p_flagJson, 0);
    }
    void extractFileOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absSourceFilePath, const ::std::string& __p_absDestinationPath, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx)
    {
        extractFileOnAgentSetup(__p_session, __p_absSourceFilePath, __p_absDestinationPath, __p_flagJson, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_extractFileOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absSourceFilePath, const ::std::string& __p_absDestinationPath, const ::std::string& __p_flagJson, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_extractFileOnAgentSetup(__p_session, __p_absSourceFilePath, __p_absDestinationPath, __p_flagJson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_extractFileOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absSourceFilePath, const ::std::string& __p_absDestinationPath, const ::std::string& __p_flagJson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_extractFileOnAgentSetup(__p_session, __p_absSourceFilePath, __p_absDestinationPath, __p_flagJson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_extractFileOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absSourceFilePath, const ::std::string& __p_absDestinationPath, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_extractFileOnAgentSetup(__p_session, __p_absSourceFilePath, __p_absDestinationPath, __p_flagJson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_extractFileOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absSourceFilePath, const ::std::string& __p_absDestinationPath, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_extractFileOnAgentSetup(__p_session, __p_absSourceFilePath, __p_absDestinationPath, __p_flagJson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_extractFileOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absSourceFilePath, const ::std::string& __p_absDestinationPath, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_extractFileOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absSourceFilePath, const ::std::string& __p_absDestinationPath, const ::std::string& __p_flagJson)
    {
        return begin_extractFileOnAgentSetup(__p_session, __p_absSourceFilePath, __p_absDestinationPath, __p_flagJson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_extractFileOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absSourceFilePath, const ::std::string& __p_absDestinationPath, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx)
    {
        return begin_extractFileOnAgentSetup(__p_session, __p_absSourceFilePath, __p_absDestinationPath, __p_flagJson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_extractFileOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absSourceFilePath, const ::std::string& __p_absDestinationPath, const ::std::string& __p_flagJson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_extractFileOnAgentSetup(__p_session, __p_absSourceFilePath, __p_absDestinationPath, __p_flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_extractFileOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absSourceFilePath, const ::std::string& __p_absDestinationPath, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_extractFileOnAgentSetup(__p_session, __p_absSourceFilePath, __p_absDestinationPath, __p_flagJson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_extractFileOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absSourceFilePath, const ::std::string& __p_absDestinationPath, const ::std::string& __p_flagJson, const ::Box::Callback_Apis_extractFileOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_extractFileOnAgentSetup(__p_session, __p_absSourceFilePath, __p_absDestinationPath, __p_flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_extractFileOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_absSourceFilePath, const ::std::string& __p_absDestinationPath, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_extractFileOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_extractFileOnAgentSetup(__p_session, __p_absSourceFilePath, __p_absDestinationPath, __p_flagJson, &__ctx, __del, __cookie);
    }

    void end_extractFileOnAgentSetup(const ::Ice::AsyncResultPtr&);
    
private:

    void extractFileOnAgentSetup(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_extractFileOnAgentSetup(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int executeCommandOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_cmd, const ::std::string& __p_flagJson, ::Ice::StringSeq& __p_stdout, ::Ice::StringSeq& __p_stderr)
    {
        return executeCommandOnAgentSetup(__p_session, __p_cmd, __p_flagJson, __p_stdout, __p_stderr, 0);
    }
    ::Ice::Int executeCommandOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_cmd, const ::std::string& __p_flagJson, ::Ice::StringSeq& __p_stdout, ::Ice::StringSeq& __p_stderr, const ::Ice::Context& __ctx)
    {
        return executeCommandOnAgentSetup(__p_session, __p_cmd, __p_flagJson, __p_stdout, __p_stderr, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_executeCommandOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_cmd, const ::std::string& __p_flagJson, const ::IceInternal::Function<void (::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_executeCommandOnAgentSetup(__p_session, __p_cmd, __p_flagJson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_executeCommandOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_cmd, const ::std::string& __p_flagJson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_executeCommandOnAgentSetup(__p_session, __p_cmd, __p_flagJson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_executeCommandOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_cmd, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_executeCommandOnAgentSetup(__p_session, __p_cmd, __p_flagJson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_executeCommandOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_cmd, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_executeCommandOnAgentSetup(__p_session, __p_cmd, __p_flagJson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_executeCommandOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_cmd, const ::std::string& __p_flagJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_executeCommandOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_cmd, const ::std::string& __p_flagJson)
    {
        return begin_executeCommandOnAgentSetup(__p_session, __p_cmd, __p_flagJson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_executeCommandOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_cmd, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx)
    {
        return begin_executeCommandOnAgentSetup(__p_session, __p_cmd, __p_flagJson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_executeCommandOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_cmd, const ::std::string& __p_flagJson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_executeCommandOnAgentSetup(__p_session, __p_cmd, __p_flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_executeCommandOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_cmd, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_executeCommandOnAgentSetup(__p_session, __p_cmd, __p_flagJson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_executeCommandOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_cmd, const ::std::string& __p_flagJson, const ::Box::Callback_Apis_executeCommandOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_executeCommandOnAgentSetup(__p_session, __p_cmd, __p_flagJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_executeCommandOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_cmd, const ::std::string& __p_flagJson, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_executeCommandOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_executeCommandOnAgentSetup(__p_session, __p_cmd, __p_flagJson, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_executeCommandOnAgentSetup(::Ice::StringSeq& __p_stdout, ::Ice::StringSeq& __p_stderr, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int executeCommandOnAgentSetup(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::StringSeq&, ::Ice::StringSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_executeCommandOnAgentSetup(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reportStatusOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_contentJson)
    {
        reportStatusOnAgentSetup(__p_session, __p_contentJson, 0);
    }
    void reportStatusOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_contentJson, const ::Ice::Context& __ctx)
    {
        reportStatusOnAgentSetup(__p_session, __p_contentJson, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reportStatusOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_contentJson, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_reportStatusOnAgentSetup(__p_session, __p_contentJson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_reportStatusOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_contentJson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reportStatusOnAgentSetup(__p_session, __p_contentJson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reportStatusOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_contentJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_reportStatusOnAgentSetup(__p_session, __p_contentJson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_reportStatusOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_contentJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reportStatusOnAgentSetup(__p_session, __p_contentJson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_reportStatusOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_contentJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_reportStatusOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_contentJson)
    {
        return begin_reportStatusOnAgentSetup(__p_session, __p_contentJson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reportStatusOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_contentJson, const ::Ice::Context& __ctx)
    {
        return begin_reportStatusOnAgentSetup(__p_session, __p_contentJson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reportStatusOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_contentJson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportStatusOnAgentSetup(__p_session, __p_contentJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reportStatusOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_contentJson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportStatusOnAgentSetup(__p_session, __p_contentJson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reportStatusOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_contentJson, const ::Box::Callback_Apis_reportStatusOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportStatusOnAgentSetup(__p_session, __p_contentJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reportStatusOnAgentSetup(const ::std::string& __p_session, const ::std::string& __p_contentJson, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_reportStatusOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportStatusOnAgentSetup(__p_session, __p_contentJson, &__ctx, __del, __cookie);
    }

    void end_reportStatusOnAgentSetup(const ::Ice::AsyncResultPtr&);
    
private:

    void reportStatusOnAgentSetup(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reportStatusOnAgentSetup(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void exitOnAgentSetup(const ::std::string& __p_session, ::Ice::Int __p_returnCode)
    {
        exitOnAgentSetup(__p_session, __p_returnCode, 0);
    }
    void exitOnAgentSetup(const ::std::string& __p_session, ::Ice::Int __p_returnCode, const ::Ice::Context& __ctx)
    {
        exitOnAgentSetup(__p_session, __p_returnCode, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_exitOnAgentSetup(const ::std::string& __p_session, ::Ice::Int __p_returnCode, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_exitOnAgentSetup(__p_session, __p_returnCode, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_exitOnAgentSetup(const ::std::string& __p_session, ::Ice::Int __p_returnCode, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_exitOnAgentSetup(__p_session, __p_returnCode, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_exitOnAgentSetup(const ::std::string& __p_session, ::Ice::Int __p_returnCode, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_exitOnAgentSetup(__p_session, __p_returnCode, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_exitOnAgentSetup(const ::std::string& __p_session, ::Ice::Int __p_returnCode, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_exitOnAgentSetup(__p_session, __p_returnCode, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_exitOnAgentSetup(const ::std::string& __p_session, ::Ice::Int __p_returnCode, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_exitOnAgentSetup(const ::std::string& __p_session, ::Ice::Int __p_returnCode)
    {
        return begin_exitOnAgentSetup(__p_session, __p_returnCode, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_exitOnAgentSetup(const ::std::string& __p_session, ::Ice::Int __p_returnCode, const ::Ice::Context& __ctx)
    {
        return begin_exitOnAgentSetup(__p_session, __p_returnCode, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_exitOnAgentSetup(const ::std::string& __p_session, ::Ice::Int __p_returnCode, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_exitOnAgentSetup(__p_session, __p_returnCode, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_exitOnAgentSetup(const ::std::string& __p_session, ::Ice::Int __p_returnCode, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_exitOnAgentSetup(__p_session, __p_returnCode, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_exitOnAgentSetup(const ::std::string& __p_session, ::Ice::Int __p_returnCode, const ::Box::Callback_Apis_exitOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_exitOnAgentSetup(__p_session, __p_returnCode, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_exitOnAgentSetup(const ::std::string& __p_session, ::Ice::Int __p_returnCode, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_exitOnAgentSetupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_exitOnAgentSetup(__p_session, __p_returnCode, &__ctx, __del, __cookie);
    }

    void end_exitOnAgentSetup(const ::Ice::AsyncResultPtr&);
    
private:

    void exitOnAgentSetup(const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_exitOnAgentSetup(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void forceOfflineAgent(const ::std::string& __p_hostName)
    {
        forceOfflineAgent(__p_hostName, 0);
    }
    void forceOfflineAgent(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        forceOfflineAgent(__p_hostName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_forceOfflineAgent(const ::std::string& __p_hostName, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_forceOfflineAgent(__p_hostName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_forceOfflineAgent(const ::std::string& __p_hostName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_forceOfflineAgent(__p_hostName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_forceOfflineAgent(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_forceOfflineAgent(__p_hostName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_forceOfflineAgent(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_forceOfflineAgent(__p_hostName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_forceOfflineAgent(const ::std::string& __p_hostName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_forceOfflineAgent(const ::std::string& __p_hostName)
    {
        return begin_forceOfflineAgent(__p_hostName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_forceOfflineAgent(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        return begin_forceOfflineAgent(__p_hostName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_forceOfflineAgent(const ::std::string& __p_hostName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_forceOfflineAgent(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_forceOfflineAgent(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_forceOfflineAgent(__p_hostName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_forceOfflineAgent(const ::std::string& __p_hostName, const ::Box::Callback_Apis_forceOfflineAgentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_forceOfflineAgent(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_forceOfflineAgent(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_forceOfflineAgentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_forceOfflineAgent(__p_hostName, &__ctx, __del, __cookie);
    }

    void end_forceOfflineAgent(const ::Ice::AsyncResultPtr&);
    
private:

    void forceOfflineAgent(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_forceOfflineAgent(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void forceOfflinePeHost(const ::std::string& __p_peHostIdent)
    {
        forceOfflinePeHost(__p_peHostIdent, 0);
    }
    void forceOfflinePeHost(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx)
    {
        forceOfflinePeHost(__p_peHostIdent, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_forceOfflinePeHost(const ::std::string& __p_peHostIdent, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_forceOfflinePeHost(__p_peHostIdent, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_forceOfflinePeHost(const ::std::string& __p_peHostIdent, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_forceOfflinePeHost(__p_peHostIdent, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_forceOfflinePeHost(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_forceOfflinePeHost(__p_peHostIdent, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_forceOfflinePeHost(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_forceOfflinePeHost(__p_peHostIdent, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_forceOfflinePeHost(const ::std::string& __p_peHostIdent, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_forceOfflinePeHost(const ::std::string& __p_peHostIdent)
    {
        return begin_forceOfflinePeHost(__p_peHostIdent, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_forceOfflinePeHost(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx)
    {
        return begin_forceOfflinePeHost(__p_peHostIdent, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_forceOfflinePeHost(const ::std::string& __p_peHostIdent, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_forceOfflinePeHost(__p_peHostIdent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_forceOfflinePeHost(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_forceOfflinePeHost(__p_peHostIdent, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_forceOfflinePeHost(const ::std::string& __p_peHostIdent, const ::Box::Callback_Apis_forceOfflinePeHostPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_forceOfflinePeHost(__p_peHostIdent, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_forceOfflinePeHost(const ::std::string& __p_peHostIdent, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_forceOfflinePeHostPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_forceOfflinePeHost(__p_peHostIdent, &__ctx, __del, __cookie);
    }

    void end_forceOfflinePeHost(const ::Ice::AsyncResultPtr&);
    
private:

    void forceOfflinePeHost(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_forceOfflinePeHost(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void refreshNetwork()
    {
        refreshNetwork(0);
    }
    void refreshNetwork(const ::Ice::Context& __ctx)
    {
        refreshNetwork(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_refreshNetwork(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_refreshNetwork(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_refreshNetwork(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_refreshNetwork(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_refreshNetwork(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_refreshNetwork(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_refreshNetwork(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_refreshNetwork(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_refreshNetwork()
    {
        return begin_refreshNetwork(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refreshNetwork(const ::Ice::Context& __ctx)
    {
        return begin_refreshNetwork(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refreshNetwork(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshNetwork(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refreshNetwork(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshNetwork(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refreshNetwork(const ::Box::Callback_Apis_refreshNetworkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshNetwork(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refreshNetwork(const ::Ice::Context& __ctx, const ::Box::Callback_Apis_refreshNetworkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshNetwork(&__ctx, __del, __cookie);
    }

    void end_refreshNetwork(const ::Ice::AsyncResultPtr&);
    
private:

    void refreshNetwork(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_refreshNetwork(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetServiceList(const ::std::string& __p_hostName, ::Box::ServiceInfoStatusS& __p_ServiceList)
    {
        return GetServiceList(__p_hostName, __p_ServiceList, 0);
    }
    ::Ice::Int GetServiceList(const ::std::string& __p_hostName, ::Box::ServiceInfoStatusS& __p_ServiceList, const ::Ice::Context& __ctx)
    {
        return GetServiceList(__p_hostName, __p_ServiceList, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetServiceList(const ::std::string& __p_hostName, const ::IceInternal::Function<void (::Ice::Int, const ::Box::ServiceInfoStatusS&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetServiceList(__p_hostName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetServiceList(const ::std::string& __p_hostName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetServiceList(__p_hostName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetServiceList(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Box::ServiceInfoStatusS&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetServiceList(__p_hostName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetServiceList(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetServiceList(__p_hostName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetServiceList(const ::std::string& __p_hostName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Box::ServiceInfoStatusS&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetServiceList(const ::std::string& __p_hostName)
    {
        return begin_GetServiceList(__p_hostName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetServiceList(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        return begin_GetServiceList(__p_hostName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetServiceList(const ::std::string& __p_hostName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetServiceList(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetServiceList(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetServiceList(__p_hostName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetServiceList(const ::std::string& __p_hostName, const ::Box::Callback_Apis_GetServiceListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetServiceList(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetServiceList(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_GetServiceListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetServiceList(__p_hostName, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetServiceList(::Box::ServiceInfoStatusS& __p_ServiceList, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetServiceList(const ::std::string&, ::Box::ServiceInfoStatusS&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetServiceList(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetTcpListenList(const ::std::string& __p_hostName, const ::Box::vectorINT& __p_portList, ::Box::vectorINT& __p_pidList)
    {
        return GetTcpListenList(__p_hostName, __p_portList, __p_pidList, 0);
    }
    ::Ice::Int GetTcpListenList(const ::std::string& __p_hostName, const ::Box::vectorINT& __p_portList, ::Box::vectorINT& __p_pidList, const ::Ice::Context& __ctx)
    {
        return GetTcpListenList(__p_hostName, __p_portList, __p_pidList, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetTcpListenList(const ::std::string& __p_hostName, const ::Box::vectorINT& __p_portList, const ::IceInternal::Function<void (::Ice::Int, const ::Box::vectorINT&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetTcpListenList(__p_hostName, __p_portList, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetTcpListenList(const ::std::string& __p_hostName, const ::Box::vectorINT& __p_portList, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetTcpListenList(__p_hostName, __p_portList, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetTcpListenList(const ::std::string& __p_hostName, const ::Box::vectorINT& __p_portList, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Box::vectorINT&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetTcpListenList(__p_hostName, __p_portList, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetTcpListenList(const ::std::string& __p_hostName, const ::Box::vectorINT& __p_portList, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetTcpListenList(__p_hostName, __p_portList, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetTcpListenList(const ::std::string& __p_hostName, const ::Box::vectorINT& __p_portList, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Box::vectorINT&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetTcpListenList(const ::std::string& __p_hostName, const ::Box::vectorINT& __p_portList)
    {
        return begin_GetTcpListenList(__p_hostName, __p_portList, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetTcpListenList(const ::std::string& __p_hostName, const ::Box::vectorINT& __p_portList, const ::Ice::Context& __ctx)
    {
        return begin_GetTcpListenList(__p_hostName, __p_portList, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetTcpListenList(const ::std::string& __p_hostName, const ::Box::vectorINT& __p_portList, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTcpListenList(__p_hostName, __p_portList, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetTcpListenList(const ::std::string& __p_hostName, const ::Box::vectorINT& __p_portList, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTcpListenList(__p_hostName, __p_portList, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetTcpListenList(const ::std::string& __p_hostName, const ::Box::vectorINT& __p_portList, const ::Box::Callback_Apis_GetTcpListenListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTcpListenList(__p_hostName, __p_portList, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetTcpListenList(const ::std::string& __p_hostName, const ::Box::vectorINT& __p_portList, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_GetTcpListenListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTcpListenList(__p_hostName, __p_portList, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetTcpListenList(::Box::vectorINT& __p_pidList, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetTcpListenList(const ::std::string&, const ::Box::vectorINT&, ::Box::vectorINT&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetTcpListenList(const ::std::string&, const ::Box::vectorINT&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int StartServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName)
    {
        return StartServiceSync(__p_hostName, __p_ServiceName, 0);
    }
    ::Ice::Int StartServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx)
    {
        return StartServiceSync(__p_hostName, __p_ServiceName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_StartServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StartServiceSync(__p_hostName, __p_ServiceName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StartServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StartServiceSync(__p_hostName, __p_ServiceName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_StartServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StartServiceSync(__p_hostName, __p_ServiceName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StartServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StartServiceSync(__p_hostName, __p_ServiceName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_StartServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_StartServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName)
    {
        return begin_StartServiceSync(__p_hostName, __p_ServiceName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx)
    {
        return begin_StartServiceSync(__p_hostName, __p_ServiceName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartServiceSync(__p_hostName, __p_ServiceName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartServiceSync(__p_hostName, __p_ServiceName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::Box::Callback_Apis_StartServiceSyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartServiceSync(__p_hostName, __p_ServiceName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_StartServiceSyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartServiceSync(__p_hostName, __p_ServiceName, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_StartServiceSync(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int StartServiceSync(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_StartServiceSync(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int StopServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName)
    {
        return StopServiceSync(__p_hostName, __p_ServiceName, 0);
    }
    ::Ice::Int StopServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx)
    {
        return StopServiceSync(__p_hostName, __p_ServiceName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_StopServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StopServiceSync(__p_hostName, __p_ServiceName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StopServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StopServiceSync(__p_hostName, __p_ServiceName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_StopServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StopServiceSync(__p_hostName, __p_ServiceName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StopServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StopServiceSync(__p_hostName, __p_ServiceName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_StopServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_StopServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName)
    {
        return begin_StopServiceSync(__p_hostName, __p_ServiceName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StopServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx)
    {
        return begin_StopServiceSync(__p_hostName, __p_ServiceName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StopServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopServiceSync(__p_hostName, __p_ServiceName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopServiceSync(__p_hostName, __p_ServiceName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::Box::Callback_Apis_StopServiceSyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopServiceSync(__p_hostName, __p_ServiceName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopServiceSync(const ::std::string& __p_hostName, const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_StopServiceSyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopServiceSync(__p_hostName, __p_ServiceName, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_StopServiceSync(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int StopServiceSync(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_StopServiceSync(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int StartHttpDServiceAsync(const ::std::string& __p_hostName, ::Ice::Int __p_port, const ::Box::BinaryStream& __p_bs)
    {
        return StartHttpDServiceAsync(__p_hostName, __p_port, __p_bs, 0);
    }
    ::Ice::Int StartHttpDServiceAsync(const ::std::string& __p_hostName, ::Ice::Int __p_port, const ::Box::BinaryStream& __p_bs, const ::Ice::Context& __ctx)
    {
        return StartHttpDServiceAsync(__p_hostName, __p_port, __p_bs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_StartHttpDServiceAsync(const ::std::string& __p_hostName, ::Ice::Int __p_port, const ::Box::BinaryStream& __p_bs, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StartHttpDServiceAsync(__p_hostName, __p_port, __p_bs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StartHttpDServiceAsync(const ::std::string& __p_hostName, ::Ice::Int __p_port, const ::Box::BinaryStream& __p_bs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StartHttpDServiceAsync(__p_hostName, __p_port, __p_bs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_StartHttpDServiceAsync(const ::std::string& __p_hostName, ::Ice::Int __p_port, const ::Box::BinaryStream& __p_bs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StartHttpDServiceAsync(__p_hostName, __p_port, __p_bs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StartHttpDServiceAsync(const ::std::string& __p_hostName, ::Ice::Int __p_port, const ::Box::BinaryStream& __p_bs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StartHttpDServiceAsync(__p_hostName, __p_port, __p_bs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_StartHttpDServiceAsync(const ::std::string& __p_hostName, ::Ice::Int __p_port, const ::Box::BinaryStream& __p_bs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_StartHttpDServiceAsync(const ::std::string& __p_hostName, ::Ice::Int __p_port, const ::Box::BinaryStream& __p_bs)
    {
        return begin_StartHttpDServiceAsync(__p_hostName, __p_port, __p_bs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartHttpDServiceAsync(const ::std::string& __p_hostName, ::Ice::Int __p_port, const ::Box::BinaryStream& __p_bs, const ::Ice::Context& __ctx)
    {
        return begin_StartHttpDServiceAsync(__p_hostName, __p_port, __p_bs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartHttpDServiceAsync(const ::std::string& __p_hostName, ::Ice::Int __p_port, const ::Box::BinaryStream& __p_bs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartHttpDServiceAsync(__p_hostName, __p_port, __p_bs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartHttpDServiceAsync(const ::std::string& __p_hostName, ::Ice::Int __p_port, const ::Box::BinaryStream& __p_bs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartHttpDServiceAsync(__p_hostName, __p_port, __p_bs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartHttpDServiceAsync(const ::std::string& __p_hostName, ::Ice::Int __p_port, const ::Box::BinaryStream& __p_bs, const ::Box::Callback_Apis_StartHttpDServiceAsyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartHttpDServiceAsync(__p_hostName, __p_port, __p_bs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartHttpDServiceAsync(const ::std::string& __p_hostName, ::Ice::Int __p_port, const ::Box::BinaryStream& __p_bs, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_StartHttpDServiceAsyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartHttpDServiceAsync(__p_hostName, __p_port, __p_bs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_StartHttpDServiceAsync(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int StartHttpDServiceAsync(const ::std::string&, ::Ice::Int, const ::Box::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_StartHttpDServiceAsync(const ::std::string&, ::Ice::Int, const ::Box::BinaryStream&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetHttpDServiceListSync(const ::std::string& __p_hostName, ::Box::vectorINT& __p_pidList)
    {
        return GetHttpDServiceListSync(__p_hostName, __p_pidList, 0);
    }
    ::Ice::Int GetHttpDServiceListSync(const ::std::string& __p_hostName, ::Box::vectorINT& __p_pidList, const ::Ice::Context& __ctx)
    {
        return GetHttpDServiceListSync(__p_hostName, __p_pidList, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetHttpDServiceListSync(const ::std::string& __p_hostName, const ::IceInternal::Function<void (::Ice::Int, const ::Box::vectorINT&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetHttpDServiceListSync(__p_hostName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetHttpDServiceListSync(const ::std::string& __p_hostName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetHttpDServiceListSync(__p_hostName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetHttpDServiceListSync(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Box::vectorINT&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetHttpDServiceListSync(__p_hostName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetHttpDServiceListSync(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetHttpDServiceListSync(__p_hostName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetHttpDServiceListSync(const ::std::string& __p_hostName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Box::vectorINT&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetHttpDServiceListSync(const ::std::string& __p_hostName)
    {
        return begin_GetHttpDServiceListSync(__p_hostName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetHttpDServiceListSync(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        return begin_GetHttpDServiceListSync(__p_hostName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetHttpDServiceListSync(const ::std::string& __p_hostName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetHttpDServiceListSync(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetHttpDServiceListSync(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetHttpDServiceListSync(__p_hostName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetHttpDServiceListSync(const ::std::string& __p_hostName, const ::Box::Callback_Apis_GetHttpDServiceListSyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetHttpDServiceListSync(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetHttpDServiceListSync(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_GetHttpDServiceListSyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetHttpDServiceListSync(__p_hostName, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetHttpDServiceListSync(::Box::vectorINT& __p_pidList, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetHttpDServiceListSync(const ::std::string&, ::Box::vectorINT&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetHttpDServiceListSync(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int StopAllHttpDServiceSync(const ::std::string& __p_hostName)
    {
        return StopAllHttpDServiceSync(__p_hostName, 0);
    }
    ::Ice::Int StopAllHttpDServiceSync(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        return StopAllHttpDServiceSync(__p_hostName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_StopAllHttpDServiceSync(const ::std::string& __p_hostName, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StopAllHttpDServiceSync(__p_hostName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StopAllHttpDServiceSync(const ::std::string& __p_hostName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StopAllHttpDServiceSync(__p_hostName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_StopAllHttpDServiceSync(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StopAllHttpDServiceSync(__p_hostName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StopAllHttpDServiceSync(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StopAllHttpDServiceSync(__p_hostName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_StopAllHttpDServiceSync(const ::std::string& __p_hostName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_StopAllHttpDServiceSync(const ::std::string& __p_hostName)
    {
        return begin_StopAllHttpDServiceSync(__p_hostName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StopAllHttpDServiceSync(const ::std::string& __p_hostName, const ::Ice::Context& __ctx)
    {
        return begin_StopAllHttpDServiceSync(__p_hostName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StopAllHttpDServiceSync(const ::std::string& __p_hostName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopAllHttpDServiceSync(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopAllHttpDServiceSync(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopAllHttpDServiceSync(__p_hostName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopAllHttpDServiceSync(const ::std::string& __p_hostName, const ::Box::Callback_Apis_StopAllHttpDServiceSyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopAllHttpDServiceSync(__p_hostName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopAllHttpDServiceSync(const ::std::string& __p_hostName, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_StopAllHttpDServiceSyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopAllHttpDServiceSync(__p_hostName, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_StopAllHttpDServiceSync(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int StopAllHttpDServiceSync(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_StopAllHttpDServiceSync(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int testDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors)
    {
        return testDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0);
    }
    ::Ice::Int testDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx)
    {
        return testDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_testDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_testDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_testDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_testDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_testDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_testDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_testDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_testDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_testDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_testDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors)
    {
        return begin_testDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_testDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx)
    {
        return begin_testDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_testDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_testDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_testDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_testDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_testDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Box::Callback_Apis_testDiskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_testDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_testDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_testDiskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_testDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_testDisk(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int testDisk(const ::std::string&, ::Ice::Int, ::Ice::Long, ::Ice::Short, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_testDisk(const ::std::string&, ::Ice::Int, ::Ice::Long, ::Ice::Short, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int readDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, ::Box::BinaryStream& __p_bs)
    {
        return readDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, __p_bs, 0);
    }
    ::Ice::Int readDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, ::Box::BinaryStream& __p_bs, const ::Ice::Context& __ctx)
    {
        return readDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, __p_bs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_readDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::IceInternal::Function<void (::Ice::Int, const ::Box::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_readDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_readDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_readDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_readDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Box::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_readDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_readDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_readDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_readDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Box::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_readDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors)
    {
        return begin_readDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx)
    {
        return begin_readDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Box::Callback_Apis_readDiskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_readDiskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_readDisk(::Box::BinaryStream& __p_bs, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int readDisk(const ::std::string&, ::Ice::Int, ::Ice::Long, ::Ice::Short, ::Box::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_readDisk(const ::std::string&, ::Ice::Int, ::Ice::Long, ::Ice::Short, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int writeDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::Box::BinaryStream& __p_bs)
    {
        return writeDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, 0);
    }
    ::Ice::Int writeDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::Box::BinaryStream& __p_bs, const ::Ice::Context& __ctx)
    {
        return writeDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_writeDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::Box::BinaryStream& __p_bs, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_writeDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_writeDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::Box::BinaryStream& __p_bs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writeDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_writeDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::Box::BinaryStream& __p_bs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_writeDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_writeDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::Box::BinaryStream& __p_bs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writeDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_writeDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::Box::BinaryStream& __p_bs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_writeDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::Box::BinaryStream& __p_bs)
    {
        return begin_writeDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::Box::BinaryStream& __p_bs, const ::Ice::Context& __ctx)
    {
        return begin_writeDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::Box::BinaryStream& __p_bs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::Box::BinaryStream& __p_bs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::Box::BinaryStream& __p_bs, const ::Box::Callback_Apis_writeDiskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeDisk(const ::std::string& __p_hostName, ::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::Box::BinaryStream& __p_bs, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_writeDiskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeDisk(__p_hostName, __p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_writeDisk(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int writeDisk(const ::std::string&, ::Ice::Int, ::Ice::Long, ::Ice::Short, const ::Box::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeDisk(const ::std::string&, ::Ice::Int, ::Ice::Long, ::Ice::Short, const ::Box::BinaryStream&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string JsonFuncV2(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, ::Box::BinaryStream& __p_outputBs)
    {
        return JsonFuncV2(__p_hostName, __p_inputJson, __p_inputBs, __p_outputBs, 0);
    }
    ::std::string JsonFuncV2(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, ::Box::BinaryStream& __p_outputBs, const ::Ice::Context& __ctx)
    {
        return JsonFuncV2(__p_hostName, __p_inputJson, __p_inputBs, __p_outputBs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_JsonFuncV2(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::IceInternal::Function<void (const ::std::string&, const ::Box::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_JsonFuncV2(__p_hostName, __p_inputJson, __p_inputBs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_JsonFuncV2(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_JsonFuncV2(__p_hostName, __p_inputJson, __p_inputBs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_JsonFuncV2(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&, const ::Box::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_JsonFuncV2(__p_hostName, __p_inputJson, __p_inputBs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_JsonFuncV2(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_JsonFuncV2(__p_hostName, __p_inputJson, __p_inputBs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_JsonFuncV2(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&, const ::Box::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_JsonFuncV2(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs)
    {
        return begin_JsonFuncV2(__p_hostName, __p_inputJson, __p_inputBs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_JsonFuncV2(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::Ice::Context& __ctx)
    {
        return begin_JsonFuncV2(__p_hostName, __p_inputJson, __p_inputBs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_JsonFuncV2(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFuncV2(__p_hostName, __p_inputJson, __p_inputBs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_JsonFuncV2(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFuncV2(__p_hostName, __p_inputJson, __p_inputBs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_JsonFuncV2(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::Box::Callback_Apis_JsonFuncV2Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFuncV2(__p_hostName, __p_inputJson, __p_inputBs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_JsonFuncV2(const ::std::string& __p_hostName, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_JsonFuncV2Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFuncV2(__p_hostName, __p_inputJson, __p_inputBs, &__ctx, __del, __cookie);
    }

    ::std::string end_JsonFuncV2(::Box::BinaryStream& __p_outputBs, const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string JsonFuncV2(const ::std::string&, const ::std::string&, const ::Box::BinaryStream&, ::Box::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_JsonFuncV2(const ::std::string&, const ::std::string&, const ::Box::BinaryStream&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string PEJsonFunc(const ::std::string& __p_peHostIdent, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, ::Box::BinaryStream& __p_outputBs)
    {
        return PEJsonFunc(__p_peHostIdent, __p_inputJson, __p_inputBs, __p_outputBs, 0);
    }
    ::std::string PEJsonFunc(const ::std::string& __p_peHostIdent, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, ::Box::BinaryStream& __p_outputBs, const ::Ice::Context& __ctx)
    {
        return PEJsonFunc(__p_peHostIdent, __p_inputJson, __p_inputBs, __p_outputBs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_PEJsonFunc(const ::std::string& __p_peHostIdent, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::IceInternal::Function<void (const ::std::string&, const ::Box::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_PEJsonFunc(__p_peHostIdent, __p_inputJson, __p_inputBs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_PEJsonFunc(const ::std::string& __p_peHostIdent, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PEJsonFunc(__p_peHostIdent, __p_inputJson, __p_inputBs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_PEJsonFunc(const ::std::string& __p_peHostIdent, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&, const ::Box::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_PEJsonFunc(__p_peHostIdent, __p_inputJson, __p_inputBs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_PEJsonFunc(const ::std::string& __p_peHostIdent, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PEJsonFunc(__p_peHostIdent, __p_inputJson, __p_inputBs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_PEJsonFunc(const ::std::string& __p_peHostIdent, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&, const ::Box::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_PEJsonFunc(const ::std::string& __p_peHostIdent, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs)
    {
        return begin_PEJsonFunc(__p_peHostIdent, __p_inputJson, __p_inputBs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PEJsonFunc(const ::std::string& __p_peHostIdent, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::Ice::Context& __ctx)
    {
        return begin_PEJsonFunc(__p_peHostIdent, __p_inputJson, __p_inputBs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PEJsonFunc(const ::std::string& __p_peHostIdent, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PEJsonFunc(__p_peHostIdent, __p_inputJson, __p_inputBs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PEJsonFunc(const ::std::string& __p_peHostIdent, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PEJsonFunc(__p_peHostIdent, __p_inputJson, __p_inputBs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PEJsonFunc(const ::std::string& __p_peHostIdent, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::Box::Callback_Apis_PEJsonFuncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PEJsonFunc(__p_peHostIdent, __p_inputJson, __p_inputBs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PEJsonFunc(const ::std::string& __p_peHostIdent, const ::std::string& __p_inputJson, const ::Box::BinaryStream& __p_inputBs, const ::Ice::Context& __ctx, const ::Box::Callback_Apis_PEJsonFuncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PEJsonFunc(__p_peHostIdent, __p_inputJson, __p_inputBs, &__ctx, __del, __cookie);
    }

    ::std::string end_PEJsonFunc(::Box::BinaryStream& __p_outputBs, const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string PEJsonFunc(const ::std::string&, const ::std::string&, const ::Box::BinaryStream&, ::Box::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_PEJsonFunc(const ::std::string&, const ::std::string&, const ::Box::BinaryStream&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Apis> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_secure(bool __secure) const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_twoway() const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_oneway() const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_batchOneway() const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_datagram() const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_batchDatagram() const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_compress(bool __compress) const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Apis> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Apis*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace Box
{

class Apis : virtual public ::Ice::Object
{
public:

    typedef ApisPrx ProxyType;
    typedef ApisPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void ping(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ping(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reloginAllHostSession(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reloginAllHostSession(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isAgentLinked(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isAgentLinked(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::BoxLogic::AgentStatus GetStatus(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void queryDisksStatus(const ::std::string&, ::BoxLogic::Disks&, IceUtil::Optional< ::std::string>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___queryDisksStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string JsonFunc(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___JsonFunc(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string querySystemInfo(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___querySystemInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void backup(const ::std::string&, const ::Box::BackupFiles&, ::Ice::Int, const IceUtil::Optional< ::std::string>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___backup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void forceCloseBackupFiles(const ::Ice::StringSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___forceCloseBackupFiles(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getBackupInfo(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBackupInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setBackupInfo(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setBackupInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string queryLastBackupError(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___queryLastBackupError(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string queryLastCdpError(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___queryLastCdpError(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stopCdpStatus(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___stopCdpStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void volumeRestore(const ::std::string&, const ::std::string&, const ::Box::RestoreFiles&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___volumeRestore(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void restore(const ::std::string&, const ::PerpcIce::PeRestoreInfo&, const ::Box::RestoreFiles&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___restore(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setBootDataList(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setBootDataList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void notifyHighPriority(::Ice::Long, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___notifyHighPriority(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ReadDiskWithPeHost(const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Int, ::Box::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ReadDiskWithPeHost(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int WriteDiskWithPeHost(const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Box::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___WriteDiskWithPeHost(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool QueryRWDiskWithPeHost(const ::std::string&, ::Ice::Long&, ::Ice::Long&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___QueryRWDiskWithPeHost(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void KvmStopped(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___KvmStopped(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetPeHostClassHWInfo(const ::std::string&, const ::std::string&, ::Ice::Int, ::PerpcIce::HWInfos&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetPeHostClassHWInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetPeHostNetAdapterInfo(const ::std::string&, ::PerpcIce::NetAdapterInfos&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetPeHostNetAdapterInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isPeHostLinked(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isPeHostLinked(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string StartAgentPe(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___StartAgentPe(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void fetchAgentDebugFile(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___fetchAgentDebugFile(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string queryRunnerAbsPathOnAgentSetup(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___queryRunnerAbsPathOnAgentSetup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string prepareInfoOnAgentSetup(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___prepareInfoOnAgentSetup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getFileInfoOnAgentSetup(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getFileInfoOnAgentSetup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string searchBootFileAbsPathOnAgentSetup(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___searchBootFileAbsPathOnAgentSetup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void generateKeyInfosOnAgentSetup(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___generateKeyInfosOnAgentSetup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string openOnAgentSetup(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___openOnAgentSetup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::ByteSeq preadOnAgentSetup(const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___preadOnAgentSetup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void pwriteOnAgentSetup(const ::std::string&, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::ByteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___pwriteOnAgentSetup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void closeOnAgentSetup(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___closeOnAgentSetup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void extractFileOnAgentSetup(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___extractFileOnAgentSetup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int executeCommandOnAgentSetup(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::StringSeq&, ::Ice::StringSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___executeCommandOnAgentSetup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reportStatusOnAgentSetup(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reportStatusOnAgentSetup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void exitOnAgentSetup(const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___exitOnAgentSetup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void forceOfflineAgent(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___forceOfflineAgent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void forceOfflinePeHost(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___forceOfflinePeHost(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void refreshNetwork(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___refreshNetwork(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetServiceList(const ::std::string&, ::Box::ServiceInfoStatusS&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetServiceList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetTcpListenList(const ::std::string&, const ::Box::vectorINT&, ::Box::vectorINT&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetTcpListenList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int StartServiceSync(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___StartServiceSync(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int StopServiceSync(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___StopServiceSync(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int StartHttpDServiceAsync(const ::std::string&, ::Ice::Int, const ::Box::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___StartHttpDServiceAsync(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetHttpDServiceListSync(const ::std::string&, ::Box::vectorINT&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetHttpDServiceListSync(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int StopAllHttpDServiceSync(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___StopAllHttpDServiceSync(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int testDisk(const ::std::string&, ::Ice::Int, ::Ice::Long, ::Ice::Short, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___testDisk(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int readDisk(const ::std::string&, ::Ice::Int, ::Ice::Long, ::Ice::Short, ::Box::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___readDisk(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int writeDisk(const ::std::string&, ::Ice::Int, ::Ice::Long, ::Ice::Short, const ::Box::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeDisk(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string JsonFuncV2(const ::std::string&, const ::std::string&, const ::Box::BinaryStream&, ::Box::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___JsonFuncV2(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string PEJsonFunc(const ::std::string&, const ::std::string&, const ::Box::BinaryStream&, ::Box::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___PEJsonFunc(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Apis& l, const Apis& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Apis& l, const Apis& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Box
{

template<class T>
class CallbackNC_Apis_ping : public Callback_Apis_ping_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_ping(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Apis_pingPtr
newCallback_Apis_ping(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_ping<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_pingPtr
newCallback_Apis_ping(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_ping<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_pingPtr
newCallback_Apis_ping(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_ping<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_pingPtr
newCallback_Apis_ping(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_ping<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_ping : public Callback_Apis_ping_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_ping(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Apis_pingPtr
newCallback_Apis_ping(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_ping<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_pingPtr
newCallback_Apis_ping(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_ping<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_pingPtr
newCallback_Apis_ping(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_ping<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_pingPtr
newCallback_Apis_ping(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_ping<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_reloginAllHostSession : public Callback_Apis_reloginAllHostSession_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_reloginAllHostSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Apis_reloginAllHostSessionPtr
newCallback_Apis_reloginAllHostSession(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_reloginAllHostSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_reloginAllHostSessionPtr
newCallback_Apis_reloginAllHostSession(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_reloginAllHostSession<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_reloginAllHostSessionPtr
newCallback_Apis_reloginAllHostSession(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_reloginAllHostSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_reloginAllHostSessionPtr
newCallback_Apis_reloginAllHostSession(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_reloginAllHostSession<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_reloginAllHostSession : public Callback_Apis_reloginAllHostSession_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_reloginAllHostSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Apis_reloginAllHostSessionPtr
newCallback_Apis_reloginAllHostSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_reloginAllHostSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_reloginAllHostSessionPtr
newCallback_Apis_reloginAllHostSession(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_reloginAllHostSession<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_reloginAllHostSessionPtr
newCallback_Apis_reloginAllHostSession(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_reloginAllHostSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_reloginAllHostSessionPtr
newCallback_Apis_reloginAllHostSession(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_reloginAllHostSession<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_isAgentLinked : public Callback_Apis_isAgentLinked_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Apis_isAgentLinked(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isAgentLinked(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_isAgentLinkedPtr
newCallback_Apis_isAgentLinked(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_isAgentLinked<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_isAgentLinkedPtr
newCallback_Apis_isAgentLinked(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_isAgentLinked<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_isAgentLinked : public Callback_Apis_isAgentLinked_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Apis_isAgentLinked(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isAgentLinked(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_isAgentLinkedPtr
newCallback_Apis_isAgentLinked(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_isAgentLinked<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_isAgentLinkedPtr
newCallback_Apis_isAgentLinked(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_isAgentLinked<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_GetStatus : public Callback_Apis_GetStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::BoxLogic::AgentStatus&);

    CallbackNC_Apis_GetStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::BoxLogic::AgentStatus __ret;
        try
        {
            __ret = __proxy->end_GetStatus(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_GetStatusPtr
newCallback_Apis_GetStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::BoxLogic::AgentStatus&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_GetStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_GetStatusPtr
newCallback_Apis_GetStatus(T* instance, void (T::*cb)(const ::BoxLogic::AgentStatus&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_GetStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_GetStatus : public Callback_Apis_GetStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::BoxLogic::AgentStatus&, const CT&);

    Callback_Apis_GetStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::BoxLogic::AgentStatus __ret;
        try
        {
            __ret = __proxy->end_GetStatus(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_GetStatusPtr
newCallback_Apis_GetStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::BoxLogic::AgentStatus&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_GetStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_GetStatusPtr
newCallback_Apis_GetStatus(T* instance, void (T::*cb)(const ::BoxLogic::AgentStatus&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_GetStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_queryDisksStatus : public Callback_Apis_queryDisksStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::BoxLogic::Disks&, const IceUtil::Optional< ::std::string>&);

    CallbackNC_Apis_queryDisksStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::BoxLogic::Disks disks;
        IceUtil::Optional< ::std::string> more;
        try
        {
            __proxy->end_queryDisksStatus(disks, more, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(disks, more);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_queryDisksStatusPtr
newCallback_Apis_queryDisksStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::BoxLogic::Disks&, const IceUtil::Optional< ::std::string>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_queryDisksStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_queryDisksStatusPtr
newCallback_Apis_queryDisksStatus(T* instance, void (T::*cb)(const ::BoxLogic::Disks&, const IceUtil::Optional< ::std::string>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_queryDisksStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_queryDisksStatus : public Callback_Apis_queryDisksStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::BoxLogic::Disks&, const IceUtil::Optional< ::std::string>&, const CT&);

    Callback_Apis_queryDisksStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::BoxLogic::Disks disks;
        IceUtil::Optional< ::std::string> more;
        try
        {
            __proxy->end_queryDisksStatus(disks, more, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(disks, more, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_queryDisksStatusPtr
newCallback_Apis_queryDisksStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::BoxLogic::Disks&, const IceUtil::Optional< ::std::string>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_queryDisksStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_queryDisksStatusPtr
newCallback_Apis_queryDisksStatus(T* instance, void (T::*cb)(const ::BoxLogic::Disks&, const IceUtil::Optional< ::std::string>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_queryDisksStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_JsonFunc : public Callback_Apis_JsonFunc_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Apis_JsonFunc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_JsonFunc(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_JsonFuncPtr
newCallback_Apis_JsonFunc(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_JsonFunc<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_JsonFuncPtr
newCallback_Apis_JsonFunc(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_JsonFunc<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_JsonFunc : public Callback_Apis_JsonFunc_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Apis_JsonFunc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_JsonFunc(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_JsonFuncPtr
newCallback_Apis_JsonFunc(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_JsonFunc<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_JsonFuncPtr
newCallback_Apis_JsonFunc(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_JsonFunc<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_querySystemInfo : public Callback_Apis_querySystemInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Apis_querySystemInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_querySystemInfo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_querySystemInfoPtr
newCallback_Apis_querySystemInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_querySystemInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_querySystemInfoPtr
newCallback_Apis_querySystemInfo(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_querySystemInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_querySystemInfo : public Callback_Apis_querySystemInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Apis_querySystemInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_querySystemInfo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_querySystemInfoPtr
newCallback_Apis_querySystemInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_querySystemInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_querySystemInfoPtr
newCallback_Apis_querySystemInfo(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_querySystemInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_backup : public Callback_Apis_backup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_backup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_backup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_backupPtr
newCallback_Apis_backup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_backup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_backupPtr
newCallback_Apis_backup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_backup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_backupPtr
newCallback_Apis_backup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_backup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_backupPtr
newCallback_Apis_backup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_backup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_backup : public Callback_Apis_backup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_backup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_backup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_backupPtr
newCallback_Apis_backup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_backup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_backupPtr
newCallback_Apis_backup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_backup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_backupPtr
newCallback_Apis_backup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_backup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_backupPtr
newCallback_Apis_backup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_backup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_forceCloseBackupFiles : public Callback_Apis_forceCloseBackupFiles_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_forceCloseBackupFiles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Apis_forceCloseBackupFilesPtr
newCallback_Apis_forceCloseBackupFiles(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_forceCloseBackupFiles<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_forceCloseBackupFilesPtr
newCallback_Apis_forceCloseBackupFiles(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_forceCloseBackupFiles<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_forceCloseBackupFilesPtr
newCallback_Apis_forceCloseBackupFiles(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_forceCloseBackupFiles<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_forceCloseBackupFilesPtr
newCallback_Apis_forceCloseBackupFiles(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_forceCloseBackupFiles<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_forceCloseBackupFiles : public Callback_Apis_forceCloseBackupFiles_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_forceCloseBackupFiles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Apis_forceCloseBackupFilesPtr
newCallback_Apis_forceCloseBackupFiles(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_forceCloseBackupFiles<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_forceCloseBackupFilesPtr
newCallback_Apis_forceCloseBackupFiles(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_forceCloseBackupFiles<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_forceCloseBackupFilesPtr
newCallback_Apis_forceCloseBackupFiles(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_forceCloseBackupFiles<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_forceCloseBackupFilesPtr
newCallback_Apis_forceCloseBackupFiles(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_forceCloseBackupFiles<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_getBackupInfo : public Callback_Apis_getBackupInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Apis_getBackupInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getBackupInfo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_getBackupInfoPtr
newCallback_Apis_getBackupInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_getBackupInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_getBackupInfoPtr
newCallback_Apis_getBackupInfo(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_getBackupInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_getBackupInfo : public Callback_Apis_getBackupInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Apis_getBackupInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getBackupInfo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_getBackupInfoPtr
newCallback_Apis_getBackupInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_getBackupInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_getBackupInfoPtr
newCallback_Apis_getBackupInfo(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_getBackupInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_setBackupInfo : public Callback_Apis_setBackupInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_setBackupInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setBackupInfo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_setBackupInfoPtr
newCallback_Apis_setBackupInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_setBackupInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_setBackupInfoPtr
newCallback_Apis_setBackupInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_setBackupInfo<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_setBackupInfoPtr
newCallback_Apis_setBackupInfo(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_setBackupInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_setBackupInfoPtr
newCallback_Apis_setBackupInfo(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_setBackupInfo<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_setBackupInfo : public Callback_Apis_setBackupInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_setBackupInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setBackupInfo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_setBackupInfoPtr
newCallback_Apis_setBackupInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_setBackupInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_setBackupInfoPtr
newCallback_Apis_setBackupInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_setBackupInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_setBackupInfoPtr
newCallback_Apis_setBackupInfo(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_setBackupInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_setBackupInfoPtr
newCallback_Apis_setBackupInfo(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_setBackupInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_queryLastBackupError : public Callback_Apis_queryLastBackupError_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Apis_queryLastBackupError(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_queryLastBackupError(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_queryLastBackupErrorPtr
newCallback_Apis_queryLastBackupError(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_queryLastBackupError<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_queryLastBackupErrorPtr
newCallback_Apis_queryLastBackupError(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_queryLastBackupError<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_queryLastBackupError : public Callback_Apis_queryLastBackupError_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Apis_queryLastBackupError(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_queryLastBackupError(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_queryLastBackupErrorPtr
newCallback_Apis_queryLastBackupError(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_queryLastBackupError<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_queryLastBackupErrorPtr
newCallback_Apis_queryLastBackupError(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_queryLastBackupError<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_queryLastCdpError : public Callback_Apis_queryLastCdpError_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Apis_queryLastCdpError(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_queryLastCdpError(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_queryLastCdpErrorPtr
newCallback_Apis_queryLastCdpError(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_queryLastCdpError<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_queryLastCdpErrorPtr
newCallback_Apis_queryLastCdpError(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_queryLastCdpError<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_queryLastCdpError : public Callback_Apis_queryLastCdpError_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Apis_queryLastCdpError(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_queryLastCdpError(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_queryLastCdpErrorPtr
newCallback_Apis_queryLastCdpError(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_queryLastCdpError<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_queryLastCdpErrorPtr
newCallback_Apis_queryLastCdpError(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_queryLastCdpError<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_stopCdpStatus : public Callback_Apis_stopCdpStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_stopCdpStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_stopCdpStatus(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_stopCdpStatusPtr
newCallback_Apis_stopCdpStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_stopCdpStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_stopCdpStatusPtr
newCallback_Apis_stopCdpStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_stopCdpStatus<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_stopCdpStatusPtr
newCallback_Apis_stopCdpStatus(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_stopCdpStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_stopCdpStatusPtr
newCallback_Apis_stopCdpStatus(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_stopCdpStatus<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_stopCdpStatus : public Callback_Apis_stopCdpStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_stopCdpStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_stopCdpStatus(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_stopCdpStatusPtr
newCallback_Apis_stopCdpStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_stopCdpStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_stopCdpStatusPtr
newCallback_Apis_stopCdpStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_stopCdpStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_stopCdpStatusPtr
newCallback_Apis_stopCdpStatus(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_stopCdpStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_stopCdpStatusPtr
newCallback_Apis_stopCdpStatus(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_stopCdpStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_volumeRestore : public Callback_Apis_volumeRestore_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_volumeRestore(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_volumeRestore(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_volumeRestorePtr
newCallback_Apis_volumeRestore(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_volumeRestore<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_volumeRestorePtr
newCallback_Apis_volumeRestore(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_volumeRestore<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_volumeRestorePtr
newCallback_Apis_volumeRestore(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_volumeRestore<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_volumeRestorePtr
newCallback_Apis_volumeRestore(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_volumeRestore<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_volumeRestore : public Callback_Apis_volumeRestore_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_volumeRestore(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_volumeRestore(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_volumeRestorePtr
newCallback_Apis_volumeRestore(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_volumeRestore<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_volumeRestorePtr
newCallback_Apis_volumeRestore(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_volumeRestore<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_volumeRestorePtr
newCallback_Apis_volumeRestore(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_volumeRestore<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_volumeRestorePtr
newCallback_Apis_volumeRestore(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_volumeRestore<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_restore : public Callback_Apis_restore_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_restore(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_restore(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_restorePtr
newCallback_Apis_restore(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_restore<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_restorePtr
newCallback_Apis_restore(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_restore<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_restorePtr
newCallback_Apis_restore(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_restore<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_restorePtr
newCallback_Apis_restore(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_restore<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_restore : public Callback_Apis_restore_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_restore(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_restore(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_restorePtr
newCallback_Apis_restore(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_restore<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_restorePtr
newCallback_Apis_restore(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_restore<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_restorePtr
newCallback_Apis_restore(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_restore<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_restorePtr
newCallback_Apis_restore(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_restore<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_setBootDataList : public Callback_Apis_setBootDataList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_setBootDataList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setBootDataList(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_setBootDataListPtr
newCallback_Apis_setBootDataList(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_setBootDataList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_setBootDataListPtr
newCallback_Apis_setBootDataList(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_setBootDataList<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_setBootDataListPtr
newCallback_Apis_setBootDataList(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_setBootDataList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_setBootDataListPtr
newCallback_Apis_setBootDataList(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_setBootDataList<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_setBootDataList : public Callback_Apis_setBootDataList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_setBootDataList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setBootDataList(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_setBootDataListPtr
newCallback_Apis_setBootDataList(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_setBootDataList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_setBootDataListPtr
newCallback_Apis_setBootDataList(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_setBootDataList<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_setBootDataListPtr
newCallback_Apis_setBootDataList(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_setBootDataList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_setBootDataListPtr
newCallback_Apis_setBootDataList(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_setBootDataList<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_notifyHighPriority : public Callback_Apis_notifyHighPriority_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_notifyHighPriority(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_notifyHighPriority(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_notifyHighPriorityPtr
newCallback_Apis_notifyHighPriority(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_notifyHighPriority<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_notifyHighPriorityPtr
newCallback_Apis_notifyHighPriority(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_notifyHighPriority<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_notifyHighPriorityPtr
newCallback_Apis_notifyHighPriority(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_notifyHighPriority<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_notifyHighPriorityPtr
newCallback_Apis_notifyHighPriority(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_notifyHighPriority<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_notifyHighPriority : public Callback_Apis_notifyHighPriority_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_notifyHighPriority(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_notifyHighPriority(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_notifyHighPriorityPtr
newCallback_Apis_notifyHighPriority(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_notifyHighPriority<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_notifyHighPriorityPtr
newCallback_Apis_notifyHighPriority(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_notifyHighPriority<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_notifyHighPriorityPtr
newCallback_Apis_notifyHighPriority(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_notifyHighPriority<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_notifyHighPriorityPtr
newCallback_Apis_notifyHighPriority(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_notifyHighPriority<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_ReadDiskWithPeHost : public Callback_Apis_ReadDiskWithPeHost_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::Box::BinaryStream&);

    CallbackNC_Apis_ReadDiskWithPeHost(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Box::BinaryStream data;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ReadDiskWithPeHost(data, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, data);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_ReadDiskWithPeHostPtr
newCallback_Apis_ReadDiskWithPeHost(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Box::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_ReadDiskWithPeHost<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_ReadDiskWithPeHostPtr
newCallback_Apis_ReadDiskWithPeHost(T* instance, void (T::*cb)(::Ice::Int, const ::Box::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_ReadDiskWithPeHost<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_ReadDiskWithPeHost : public Callback_Apis_ReadDiskWithPeHost_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::Box::BinaryStream&, const CT&);

    Callback_Apis_ReadDiskWithPeHost(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Box::BinaryStream data;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ReadDiskWithPeHost(data, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, data, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_ReadDiskWithPeHostPtr
newCallback_Apis_ReadDiskWithPeHost(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Box::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_ReadDiskWithPeHost<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_ReadDiskWithPeHostPtr
newCallback_Apis_ReadDiskWithPeHost(T* instance, void (T::*cb)(::Ice::Int, const ::Box::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_ReadDiskWithPeHost<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_WriteDiskWithPeHost : public Callback_Apis_WriteDiskWithPeHost_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Apis_WriteDiskWithPeHost(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_WriteDiskWithPeHost(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_WriteDiskWithPeHostPtr
newCallback_Apis_WriteDiskWithPeHost(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_WriteDiskWithPeHost<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_WriteDiskWithPeHostPtr
newCallback_Apis_WriteDiskWithPeHost(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_WriteDiskWithPeHost<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_WriteDiskWithPeHost : public Callback_Apis_WriteDiskWithPeHost_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Apis_WriteDiskWithPeHost(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_WriteDiskWithPeHost(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_WriteDiskWithPeHostPtr
newCallback_Apis_WriteDiskWithPeHost(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_WriteDiskWithPeHost<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_WriteDiskWithPeHostPtr
newCallback_Apis_WriteDiskWithPeHost(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_WriteDiskWithPeHost<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_QueryRWDiskWithPeHost : public Callback_Apis_QueryRWDiskWithPeHost_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, ::Ice::Long, ::Ice::Long);

    CallbackNC_Apis_QueryRWDiskWithPeHost(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long totalSectors;
        ::Ice::Long sentSectors;
        bool __ret;
        try
        {
            __ret = __proxy->end_QueryRWDiskWithPeHost(totalSectors, sentSectors, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, totalSectors, sentSectors);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_QueryRWDiskWithPeHostPtr
newCallback_Apis_QueryRWDiskWithPeHost(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, ::Ice::Long, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_QueryRWDiskWithPeHost<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_QueryRWDiskWithPeHostPtr
newCallback_Apis_QueryRWDiskWithPeHost(T* instance, void (T::*cb)(bool, ::Ice::Long, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_QueryRWDiskWithPeHost<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_QueryRWDiskWithPeHost : public Callback_Apis_QueryRWDiskWithPeHost_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, ::Ice::Long, ::Ice::Long, const CT&);

    Callback_Apis_QueryRWDiskWithPeHost(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long totalSectors;
        ::Ice::Long sentSectors;
        bool __ret;
        try
        {
            __ret = __proxy->end_QueryRWDiskWithPeHost(totalSectors, sentSectors, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, totalSectors, sentSectors, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_QueryRWDiskWithPeHostPtr
newCallback_Apis_QueryRWDiskWithPeHost(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, ::Ice::Long, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_QueryRWDiskWithPeHost<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_QueryRWDiskWithPeHostPtr
newCallback_Apis_QueryRWDiskWithPeHost(T* instance, void (T::*cb)(bool, ::Ice::Long, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_QueryRWDiskWithPeHost<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_KvmStopped : public Callback_Apis_KvmStopped_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_KvmStopped(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_KvmStopped(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_KvmStoppedPtr
newCallback_Apis_KvmStopped(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_KvmStopped<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_KvmStoppedPtr
newCallback_Apis_KvmStopped(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_KvmStopped<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_KvmStoppedPtr
newCallback_Apis_KvmStopped(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_KvmStopped<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_KvmStoppedPtr
newCallback_Apis_KvmStopped(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_KvmStopped<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_KvmStopped : public Callback_Apis_KvmStopped_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_KvmStopped(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_KvmStopped(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_KvmStoppedPtr
newCallback_Apis_KvmStopped(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_KvmStopped<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_KvmStoppedPtr
newCallback_Apis_KvmStopped(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_KvmStopped<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_KvmStoppedPtr
newCallback_Apis_KvmStopped(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_KvmStopped<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_KvmStoppedPtr
newCallback_Apis_KvmStopped(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_KvmStopped<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_GetPeHostClassHWInfo : public Callback_Apis_GetPeHostClassHWInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::PerpcIce::HWInfos&);

    CallbackNC_Apis_GetPeHostClassHWInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::HWInfos hwinfo;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetPeHostClassHWInfo(hwinfo, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, hwinfo);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_GetPeHostClassHWInfoPtr
newCallback_Apis_GetPeHostClassHWInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::HWInfos&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_GetPeHostClassHWInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_GetPeHostClassHWInfoPtr
newCallback_Apis_GetPeHostClassHWInfo(T* instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::HWInfos&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_GetPeHostClassHWInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_GetPeHostClassHWInfo : public Callback_Apis_GetPeHostClassHWInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::PerpcIce::HWInfos&, const CT&);

    Callback_Apis_GetPeHostClassHWInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::HWInfos hwinfo;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetPeHostClassHWInfo(hwinfo, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, hwinfo, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_GetPeHostClassHWInfoPtr
newCallback_Apis_GetPeHostClassHWInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::HWInfos&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_GetPeHostClassHWInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_GetPeHostClassHWInfoPtr
newCallback_Apis_GetPeHostClassHWInfo(T* instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::HWInfos&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_GetPeHostClassHWInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_GetPeHostNetAdapterInfo : public Callback_Apis_GetPeHostNetAdapterInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::PerpcIce::NetAdapterInfos&);

    CallbackNC_Apis_GetPeHostNetAdapterInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::NetAdapterInfos adapterInfos;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetPeHostNetAdapterInfo(adapterInfos, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, adapterInfos);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_GetPeHostNetAdapterInfoPtr
newCallback_Apis_GetPeHostNetAdapterInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::NetAdapterInfos&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_GetPeHostNetAdapterInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_GetPeHostNetAdapterInfoPtr
newCallback_Apis_GetPeHostNetAdapterInfo(T* instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::NetAdapterInfos&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_GetPeHostNetAdapterInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_GetPeHostNetAdapterInfo : public Callback_Apis_GetPeHostNetAdapterInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::PerpcIce::NetAdapterInfos&, const CT&);

    Callback_Apis_GetPeHostNetAdapterInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::PerpcIce::NetAdapterInfos adapterInfos;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetPeHostNetAdapterInfo(adapterInfos, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, adapterInfos, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_GetPeHostNetAdapterInfoPtr
newCallback_Apis_GetPeHostNetAdapterInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::NetAdapterInfos&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_GetPeHostNetAdapterInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_GetPeHostNetAdapterInfoPtr
newCallback_Apis_GetPeHostNetAdapterInfo(T* instance, void (T::*cb)(::Ice::Int, const ::PerpcIce::NetAdapterInfos&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_GetPeHostNetAdapterInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_isPeHostLinked : public Callback_Apis_isPeHostLinked_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Apis_isPeHostLinked(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isPeHostLinked(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_isPeHostLinkedPtr
newCallback_Apis_isPeHostLinked(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_isPeHostLinked<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_isPeHostLinkedPtr
newCallback_Apis_isPeHostLinked(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_isPeHostLinked<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_isPeHostLinked : public Callback_Apis_isPeHostLinked_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Apis_isPeHostLinked(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isPeHostLinked(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_isPeHostLinkedPtr
newCallback_Apis_isPeHostLinked(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_isPeHostLinked<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_isPeHostLinkedPtr
newCallback_Apis_isPeHostLinked(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_isPeHostLinked<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_StartAgentPe : public Callback_Apis_StartAgentPe_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Apis_StartAgentPe(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_StartAgentPe(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_StartAgentPePtr
newCallback_Apis_StartAgentPe(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_StartAgentPe<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_StartAgentPePtr
newCallback_Apis_StartAgentPe(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_StartAgentPe<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_StartAgentPe : public Callback_Apis_StartAgentPe_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Apis_StartAgentPe(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_StartAgentPe(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_StartAgentPePtr
newCallback_Apis_StartAgentPe(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_StartAgentPe<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_StartAgentPePtr
newCallback_Apis_StartAgentPe(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_StartAgentPe<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_fetchAgentDebugFile : public Callback_Apis_fetchAgentDebugFile_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_fetchAgentDebugFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_fetchAgentDebugFile(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_fetchAgentDebugFilePtr
newCallback_Apis_fetchAgentDebugFile(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_fetchAgentDebugFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_fetchAgentDebugFilePtr
newCallback_Apis_fetchAgentDebugFile(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_fetchAgentDebugFile<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_fetchAgentDebugFilePtr
newCallback_Apis_fetchAgentDebugFile(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_fetchAgentDebugFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_fetchAgentDebugFilePtr
newCallback_Apis_fetchAgentDebugFile(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_fetchAgentDebugFile<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_fetchAgentDebugFile : public Callback_Apis_fetchAgentDebugFile_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_fetchAgentDebugFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_fetchAgentDebugFile(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_fetchAgentDebugFilePtr
newCallback_Apis_fetchAgentDebugFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_fetchAgentDebugFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_fetchAgentDebugFilePtr
newCallback_Apis_fetchAgentDebugFile(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_fetchAgentDebugFile<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_fetchAgentDebugFilePtr
newCallback_Apis_fetchAgentDebugFile(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_fetchAgentDebugFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_fetchAgentDebugFilePtr
newCallback_Apis_fetchAgentDebugFile(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_fetchAgentDebugFile<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_queryRunnerAbsPathOnAgentSetup : public Callback_Apis_queryRunnerAbsPathOnAgentSetup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Apis_queryRunnerAbsPathOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_queryRunnerAbsPathOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_queryRunnerAbsPathOnAgentSetupPtr
newCallback_Apis_queryRunnerAbsPathOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_queryRunnerAbsPathOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_queryRunnerAbsPathOnAgentSetupPtr
newCallback_Apis_queryRunnerAbsPathOnAgentSetup(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_queryRunnerAbsPathOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_queryRunnerAbsPathOnAgentSetup : public Callback_Apis_queryRunnerAbsPathOnAgentSetup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Apis_queryRunnerAbsPathOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_queryRunnerAbsPathOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_queryRunnerAbsPathOnAgentSetupPtr
newCallback_Apis_queryRunnerAbsPathOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_queryRunnerAbsPathOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_queryRunnerAbsPathOnAgentSetupPtr
newCallback_Apis_queryRunnerAbsPathOnAgentSetup(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_queryRunnerAbsPathOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_prepareInfoOnAgentSetup : public Callback_Apis_prepareInfoOnAgentSetup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Apis_prepareInfoOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_prepareInfoOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_prepareInfoOnAgentSetupPtr
newCallback_Apis_prepareInfoOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_prepareInfoOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_prepareInfoOnAgentSetupPtr
newCallback_Apis_prepareInfoOnAgentSetup(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_prepareInfoOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_prepareInfoOnAgentSetup : public Callback_Apis_prepareInfoOnAgentSetup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Apis_prepareInfoOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_prepareInfoOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_prepareInfoOnAgentSetupPtr
newCallback_Apis_prepareInfoOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_prepareInfoOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_prepareInfoOnAgentSetupPtr
newCallback_Apis_prepareInfoOnAgentSetup(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_prepareInfoOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_getFileInfoOnAgentSetup : public Callback_Apis_getFileInfoOnAgentSetup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Apis_getFileInfoOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getFileInfoOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_getFileInfoOnAgentSetupPtr
newCallback_Apis_getFileInfoOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_getFileInfoOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_getFileInfoOnAgentSetupPtr
newCallback_Apis_getFileInfoOnAgentSetup(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_getFileInfoOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_getFileInfoOnAgentSetup : public Callback_Apis_getFileInfoOnAgentSetup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Apis_getFileInfoOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getFileInfoOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_getFileInfoOnAgentSetupPtr
newCallback_Apis_getFileInfoOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_getFileInfoOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_getFileInfoOnAgentSetupPtr
newCallback_Apis_getFileInfoOnAgentSetup(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_getFileInfoOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_searchBootFileAbsPathOnAgentSetup : public Callback_Apis_searchBootFileAbsPathOnAgentSetup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Apis_searchBootFileAbsPathOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_searchBootFileAbsPathOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_searchBootFileAbsPathOnAgentSetupPtr
newCallback_Apis_searchBootFileAbsPathOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_searchBootFileAbsPathOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_searchBootFileAbsPathOnAgentSetupPtr
newCallback_Apis_searchBootFileAbsPathOnAgentSetup(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_searchBootFileAbsPathOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_searchBootFileAbsPathOnAgentSetup : public Callback_Apis_searchBootFileAbsPathOnAgentSetup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Apis_searchBootFileAbsPathOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_searchBootFileAbsPathOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_searchBootFileAbsPathOnAgentSetupPtr
newCallback_Apis_searchBootFileAbsPathOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_searchBootFileAbsPathOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_searchBootFileAbsPathOnAgentSetupPtr
newCallback_Apis_searchBootFileAbsPathOnAgentSetup(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_searchBootFileAbsPathOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_generateKeyInfosOnAgentSetup : public Callback_Apis_generateKeyInfosOnAgentSetup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_generateKeyInfosOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_generateKeyInfosOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_generateKeyInfosOnAgentSetupPtr
newCallback_Apis_generateKeyInfosOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_generateKeyInfosOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_generateKeyInfosOnAgentSetupPtr
newCallback_Apis_generateKeyInfosOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_generateKeyInfosOnAgentSetup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_generateKeyInfosOnAgentSetupPtr
newCallback_Apis_generateKeyInfosOnAgentSetup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_generateKeyInfosOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_generateKeyInfosOnAgentSetupPtr
newCallback_Apis_generateKeyInfosOnAgentSetup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_generateKeyInfosOnAgentSetup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_generateKeyInfosOnAgentSetup : public Callback_Apis_generateKeyInfosOnAgentSetup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_generateKeyInfosOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_generateKeyInfosOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_generateKeyInfosOnAgentSetupPtr
newCallback_Apis_generateKeyInfosOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_generateKeyInfosOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_generateKeyInfosOnAgentSetupPtr
newCallback_Apis_generateKeyInfosOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_generateKeyInfosOnAgentSetup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_generateKeyInfosOnAgentSetupPtr
newCallback_Apis_generateKeyInfosOnAgentSetup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_generateKeyInfosOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_generateKeyInfosOnAgentSetupPtr
newCallback_Apis_generateKeyInfosOnAgentSetup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_generateKeyInfosOnAgentSetup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_openOnAgentSetup : public Callback_Apis_openOnAgentSetup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Apis_openOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_openOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_openOnAgentSetupPtr
newCallback_Apis_openOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_openOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_openOnAgentSetupPtr
newCallback_Apis_openOnAgentSetup(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_openOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_openOnAgentSetup : public Callback_Apis_openOnAgentSetup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Apis_openOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_openOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_openOnAgentSetupPtr
newCallback_Apis_openOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_openOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_openOnAgentSetupPtr
newCallback_Apis_openOnAgentSetup(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_openOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_preadOnAgentSetup : public Callback_Apis_preadOnAgentSetup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Ice::ByteSeq&);

    CallbackNC_Apis_preadOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_preadOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_preadOnAgentSetupPtr
newCallback_Apis_preadOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_preadOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_preadOnAgentSetupPtr
newCallback_Apis_preadOnAgentSetup(T* instance, void (T::*cb)(const ::Ice::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_preadOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_preadOnAgentSetup : public Callback_Apis_preadOnAgentSetup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Ice::ByteSeq&, const CT&);

    Callback_Apis_preadOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_preadOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_preadOnAgentSetupPtr
newCallback_Apis_preadOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_preadOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_preadOnAgentSetupPtr
newCallback_Apis_preadOnAgentSetup(T* instance, void (T::*cb)(const ::Ice::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_preadOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_pwriteOnAgentSetup : public Callback_Apis_pwriteOnAgentSetup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_pwriteOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_pwriteOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_pwriteOnAgentSetupPtr
newCallback_Apis_pwriteOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_pwriteOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_pwriteOnAgentSetupPtr
newCallback_Apis_pwriteOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_pwriteOnAgentSetup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_pwriteOnAgentSetupPtr
newCallback_Apis_pwriteOnAgentSetup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_pwriteOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_pwriteOnAgentSetupPtr
newCallback_Apis_pwriteOnAgentSetup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_pwriteOnAgentSetup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_pwriteOnAgentSetup : public Callback_Apis_pwriteOnAgentSetup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_pwriteOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_pwriteOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_pwriteOnAgentSetupPtr
newCallback_Apis_pwriteOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_pwriteOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_pwriteOnAgentSetupPtr
newCallback_Apis_pwriteOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_pwriteOnAgentSetup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_pwriteOnAgentSetupPtr
newCallback_Apis_pwriteOnAgentSetup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_pwriteOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_pwriteOnAgentSetupPtr
newCallback_Apis_pwriteOnAgentSetup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_pwriteOnAgentSetup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_closeOnAgentSetup : public Callback_Apis_closeOnAgentSetup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_closeOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_closeOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_closeOnAgentSetupPtr
newCallback_Apis_closeOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_closeOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_closeOnAgentSetupPtr
newCallback_Apis_closeOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_closeOnAgentSetup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_closeOnAgentSetupPtr
newCallback_Apis_closeOnAgentSetup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_closeOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_closeOnAgentSetupPtr
newCallback_Apis_closeOnAgentSetup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_closeOnAgentSetup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_closeOnAgentSetup : public Callback_Apis_closeOnAgentSetup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_closeOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_closeOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_closeOnAgentSetupPtr
newCallback_Apis_closeOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_closeOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_closeOnAgentSetupPtr
newCallback_Apis_closeOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_closeOnAgentSetup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_closeOnAgentSetupPtr
newCallback_Apis_closeOnAgentSetup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_closeOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_closeOnAgentSetupPtr
newCallback_Apis_closeOnAgentSetup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_closeOnAgentSetup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_extractFileOnAgentSetup : public Callback_Apis_extractFileOnAgentSetup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_extractFileOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_extractFileOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_extractFileOnAgentSetupPtr
newCallback_Apis_extractFileOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_extractFileOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_extractFileOnAgentSetupPtr
newCallback_Apis_extractFileOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_extractFileOnAgentSetup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_extractFileOnAgentSetupPtr
newCallback_Apis_extractFileOnAgentSetup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_extractFileOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_extractFileOnAgentSetupPtr
newCallback_Apis_extractFileOnAgentSetup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_extractFileOnAgentSetup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_extractFileOnAgentSetup : public Callback_Apis_extractFileOnAgentSetup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_extractFileOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_extractFileOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_extractFileOnAgentSetupPtr
newCallback_Apis_extractFileOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_extractFileOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_extractFileOnAgentSetupPtr
newCallback_Apis_extractFileOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_extractFileOnAgentSetup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_extractFileOnAgentSetupPtr
newCallback_Apis_extractFileOnAgentSetup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_extractFileOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_extractFileOnAgentSetupPtr
newCallback_Apis_extractFileOnAgentSetup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_extractFileOnAgentSetup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_executeCommandOnAgentSetup : public Callback_Apis_executeCommandOnAgentSetup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&);

    CallbackNC_Apis_executeCommandOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::StringSeq stdout;
        ::Ice::StringSeq stderr;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_executeCommandOnAgentSetup(stdout, stderr, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, stdout, stderr);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_executeCommandOnAgentSetupPtr
newCallback_Apis_executeCommandOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_executeCommandOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_executeCommandOnAgentSetupPtr
newCallback_Apis_executeCommandOnAgentSetup(T* instance, void (T::*cb)(::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_executeCommandOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_executeCommandOnAgentSetup : public Callback_Apis_executeCommandOnAgentSetup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&, const CT&);

    Callback_Apis_executeCommandOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::StringSeq stdout;
        ::Ice::StringSeq stderr;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_executeCommandOnAgentSetup(stdout, stderr, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, stdout, stderr, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_executeCommandOnAgentSetupPtr
newCallback_Apis_executeCommandOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_executeCommandOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_executeCommandOnAgentSetupPtr
newCallback_Apis_executeCommandOnAgentSetup(T* instance, void (T::*cb)(::Ice::Int, const ::Ice::StringSeq&, const ::Ice::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_executeCommandOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_reportStatusOnAgentSetup : public Callback_Apis_reportStatusOnAgentSetup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_reportStatusOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_reportStatusOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_reportStatusOnAgentSetupPtr
newCallback_Apis_reportStatusOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_reportStatusOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_reportStatusOnAgentSetupPtr
newCallback_Apis_reportStatusOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_reportStatusOnAgentSetup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_reportStatusOnAgentSetupPtr
newCallback_Apis_reportStatusOnAgentSetup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_reportStatusOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_reportStatusOnAgentSetupPtr
newCallback_Apis_reportStatusOnAgentSetup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_reportStatusOnAgentSetup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_reportStatusOnAgentSetup : public Callback_Apis_reportStatusOnAgentSetup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_reportStatusOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_reportStatusOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_reportStatusOnAgentSetupPtr
newCallback_Apis_reportStatusOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_reportStatusOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_reportStatusOnAgentSetupPtr
newCallback_Apis_reportStatusOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_reportStatusOnAgentSetup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_reportStatusOnAgentSetupPtr
newCallback_Apis_reportStatusOnAgentSetup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_reportStatusOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_reportStatusOnAgentSetupPtr
newCallback_Apis_reportStatusOnAgentSetup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_reportStatusOnAgentSetup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_exitOnAgentSetup : public Callback_Apis_exitOnAgentSetup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_exitOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_exitOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_exitOnAgentSetupPtr
newCallback_Apis_exitOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_exitOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_exitOnAgentSetupPtr
newCallback_Apis_exitOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_exitOnAgentSetup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_exitOnAgentSetupPtr
newCallback_Apis_exitOnAgentSetup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_exitOnAgentSetup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_exitOnAgentSetupPtr
newCallback_Apis_exitOnAgentSetup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_exitOnAgentSetup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_exitOnAgentSetup : public Callback_Apis_exitOnAgentSetup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_exitOnAgentSetup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_exitOnAgentSetup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_exitOnAgentSetupPtr
newCallback_Apis_exitOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_exitOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_exitOnAgentSetupPtr
newCallback_Apis_exitOnAgentSetup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_exitOnAgentSetup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_exitOnAgentSetupPtr
newCallback_Apis_exitOnAgentSetup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_exitOnAgentSetup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_exitOnAgentSetupPtr
newCallback_Apis_exitOnAgentSetup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_exitOnAgentSetup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_forceOfflineAgent : public Callback_Apis_forceOfflineAgent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_forceOfflineAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_forceOfflineAgent(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_forceOfflineAgentPtr
newCallback_Apis_forceOfflineAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_forceOfflineAgent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_forceOfflineAgentPtr
newCallback_Apis_forceOfflineAgent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_forceOfflineAgent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_forceOfflineAgentPtr
newCallback_Apis_forceOfflineAgent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_forceOfflineAgent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_forceOfflineAgentPtr
newCallback_Apis_forceOfflineAgent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_forceOfflineAgent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_forceOfflineAgent : public Callback_Apis_forceOfflineAgent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_forceOfflineAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_forceOfflineAgent(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_forceOfflineAgentPtr
newCallback_Apis_forceOfflineAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_forceOfflineAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_forceOfflineAgentPtr
newCallback_Apis_forceOfflineAgent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_forceOfflineAgent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_forceOfflineAgentPtr
newCallback_Apis_forceOfflineAgent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_forceOfflineAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_forceOfflineAgentPtr
newCallback_Apis_forceOfflineAgent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_forceOfflineAgent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_forceOfflinePeHost : public Callback_Apis_forceOfflinePeHost_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_forceOfflinePeHost(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_forceOfflinePeHost(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_forceOfflinePeHostPtr
newCallback_Apis_forceOfflinePeHost(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_forceOfflinePeHost<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_forceOfflinePeHostPtr
newCallback_Apis_forceOfflinePeHost(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_forceOfflinePeHost<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_forceOfflinePeHostPtr
newCallback_Apis_forceOfflinePeHost(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_forceOfflinePeHost<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_forceOfflinePeHostPtr
newCallback_Apis_forceOfflinePeHost(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_forceOfflinePeHost<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_forceOfflinePeHost : public Callback_Apis_forceOfflinePeHost_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_forceOfflinePeHost(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_forceOfflinePeHost(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_forceOfflinePeHostPtr
newCallback_Apis_forceOfflinePeHost(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_forceOfflinePeHost<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_forceOfflinePeHostPtr
newCallback_Apis_forceOfflinePeHost(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_forceOfflinePeHost<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_forceOfflinePeHostPtr
newCallback_Apis_forceOfflinePeHost(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_forceOfflinePeHost<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_forceOfflinePeHostPtr
newCallback_Apis_forceOfflinePeHost(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_forceOfflinePeHost<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_refreshNetwork : public Callback_Apis_refreshNetwork_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Apis_refreshNetwork(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Apis_refreshNetworkPtr
newCallback_Apis_refreshNetwork(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_refreshNetwork<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_refreshNetworkPtr
newCallback_Apis_refreshNetwork(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_refreshNetwork<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Apis_refreshNetworkPtr
newCallback_Apis_refreshNetwork(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_refreshNetwork<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_refreshNetworkPtr
newCallback_Apis_refreshNetwork(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_refreshNetwork<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_refreshNetwork : public Callback_Apis_refreshNetwork_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Apis_refreshNetwork(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Apis_refreshNetworkPtr
newCallback_Apis_refreshNetwork(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_refreshNetwork<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_refreshNetworkPtr
newCallback_Apis_refreshNetwork(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_refreshNetwork<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_refreshNetworkPtr
newCallback_Apis_refreshNetwork(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_refreshNetwork<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_refreshNetworkPtr
newCallback_Apis_refreshNetwork(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_refreshNetwork<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_GetServiceList : public Callback_Apis_GetServiceList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::Box::ServiceInfoStatusS&);

    CallbackNC_Apis_GetServiceList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Box::ServiceInfoStatusS ServiceList;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetServiceList(ServiceList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, ServiceList);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_GetServiceListPtr
newCallback_Apis_GetServiceList(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Box::ServiceInfoStatusS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_GetServiceList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_GetServiceListPtr
newCallback_Apis_GetServiceList(T* instance, void (T::*cb)(::Ice::Int, const ::Box::ServiceInfoStatusS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_GetServiceList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_GetServiceList : public Callback_Apis_GetServiceList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::Box::ServiceInfoStatusS&, const CT&);

    Callback_Apis_GetServiceList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Box::ServiceInfoStatusS ServiceList;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetServiceList(ServiceList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, ServiceList, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_GetServiceListPtr
newCallback_Apis_GetServiceList(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Box::ServiceInfoStatusS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_GetServiceList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_GetServiceListPtr
newCallback_Apis_GetServiceList(T* instance, void (T::*cb)(::Ice::Int, const ::Box::ServiceInfoStatusS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_GetServiceList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_GetTcpListenList : public Callback_Apis_GetTcpListenList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::Box::vectorINT&);

    CallbackNC_Apis_GetTcpListenList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Box::vectorINT pidList;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetTcpListenList(pidList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, pidList);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_GetTcpListenListPtr
newCallback_Apis_GetTcpListenList(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Box::vectorINT&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_GetTcpListenList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_GetTcpListenListPtr
newCallback_Apis_GetTcpListenList(T* instance, void (T::*cb)(::Ice::Int, const ::Box::vectorINT&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_GetTcpListenList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_GetTcpListenList : public Callback_Apis_GetTcpListenList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::Box::vectorINT&, const CT&);

    Callback_Apis_GetTcpListenList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Box::vectorINT pidList;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetTcpListenList(pidList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, pidList, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_GetTcpListenListPtr
newCallback_Apis_GetTcpListenList(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Box::vectorINT&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_GetTcpListenList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_GetTcpListenListPtr
newCallback_Apis_GetTcpListenList(T* instance, void (T::*cb)(::Ice::Int, const ::Box::vectorINT&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_GetTcpListenList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_StartServiceSync : public Callback_Apis_StartServiceSync_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Apis_StartServiceSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StartServiceSync(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_StartServiceSyncPtr
newCallback_Apis_StartServiceSync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_StartServiceSync<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_StartServiceSyncPtr
newCallback_Apis_StartServiceSync(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_StartServiceSync<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_StartServiceSync : public Callback_Apis_StartServiceSync_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Apis_StartServiceSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StartServiceSync(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_StartServiceSyncPtr
newCallback_Apis_StartServiceSync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_StartServiceSync<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_StartServiceSyncPtr
newCallback_Apis_StartServiceSync(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_StartServiceSync<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_StopServiceSync : public Callback_Apis_StopServiceSync_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Apis_StopServiceSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StopServiceSync(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_StopServiceSyncPtr
newCallback_Apis_StopServiceSync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_StopServiceSync<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_StopServiceSyncPtr
newCallback_Apis_StopServiceSync(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_StopServiceSync<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_StopServiceSync : public Callback_Apis_StopServiceSync_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Apis_StopServiceSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StopServiceSync(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_StopServiceSyncPtr
newCallback_Apis_StopServiceSync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_StopServiceSync<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_StopServiceSyncPtr
newCallback_Apis_StopServiceSync(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_StopServiceSync<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_StartHttpDServiceAsync : public Callback_Apis_StartHttpDServiceAsync_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Apis_StartHttpDServiceAsync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StartHttpDServiceAsync(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_StartHttpDServiceAsyncPtr
newCallback_Apis_StartHttpDServiceAsync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_StartHttpDServiceAsync<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_StartHttpDServiceAsyncPtr
newCallback_Apis_StartHttpDServiceAsync(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_StartHttpDServiceAsync<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_StartHttpDServiceAsync : public Callback_Apis_StartHttpDServiceAsync_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Apis_StartHttpDServiceAsync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StartHttpDServiceAsync(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_StartHttpDServiceAsyncPtr
newCallback_Apis_StartHttpDServiceAsync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_StartHttpDServiceAsync<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_StartHttpDServiceAsyncPtr
newCallback_Apis_StartHttpDServiceAsync(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_StartHttpDServiceAsync<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_GetHttpDServiceListSync : public Callback_Apis_GetHttpDServiceListSync_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::Box::vectorINT&);

    CallbackNC_Apis_GetHttpDServiceListSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Box::vectorINT pidList;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetHttpDServiceListSync(pidList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, pidList);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_GetHttpDServiceListSyncPtr
newCallback_Apis_GetHttpDServiceListSync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Box::vectorINT&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_GetHttpDServiceListSync<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_GetHttpDServiceListSyncPtr
newCallback_Apis_GetHttpDServiceListSync(T* instance, void (T::*cb)(::Ice::Int, const ::Box::vectorINT&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_GetHttpDServiceListSync<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_GetHttpDServiceListSync : public Callback_Apis_GetHttpDServiceListSync_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::Box::vectorINT&, const CT&);

    Callback_Apis_GetHttpDServiceListSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Box::vectorINT pidList;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetHttpDServiceListSync(pidList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, pidList, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_GetHttpDServiceListSyncPtr
newCallback_Apis_GetHttpDServiceListSync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Box::vectorINT&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_GetHttpDServiceListSync<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_GetHttpDServiceListSyncPtr
newCallback_Apis_GetHttpDServiceListSync(T* instance, void (T::*cb)(::Ice::Int, const ::Box::vectorINT&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_GetHttpDServiceListSync<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_StopAllHttpDServiceSync : public Callback_Apis_StopAllHttpDServiceSync_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Apis_StopAllHttpDServiceSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StopAllHttpDServiceSync(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_StopAllHttpDServiceSyncPtr
newCallback_Apis_StopAllHttpDServiceSync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_StopAllHttpDServiceSync<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_StopAllHttpDServiceSyncPtr
newCallback_Apis_StopAllHttpDServiceSync(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_StopAllHttpDServiceSync<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_StopAllHttpDServiceSync : public Callback_Apis_StopAllHttpDServiceSync_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Apis_StopAllHttpDServiceSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StopAllHttpDServiceSync(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_StopAllHttpDServiceSyncPtr
newCallback_Apis_StopAllHttpDServiceSync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_StopAllHttpDServiceSync<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_StopAllHttpDServiceSyncPtr
newCallback_Apis_StopAllHttpDServiceSync(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_StopAllHttpDServiceSync<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_testDisk : public Callback_Apis_testDisk_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Apis_testDisk(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_testDisk(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_testDiskPtr
newCallback_Apis_testDisk(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_testDisk<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_testDiskPtr
newCallback_Apis_testDisk(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_testDisk<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_testDisk : public Callback_Apis_testDisk_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Apis_testDisk(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_testDisk(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_testDiskPtr
newCallback_Apis_testDisk(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_testDisk<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_testDiskPtr
newCallback_Apis_testDisk(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_testDisk<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_readDisk : public Callback_Apis_readDisk_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::Box::BinaryStream&);

    CallbackNC_Apis_readDisk(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Box::BinaryStream bs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_readDisk(bs, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, bs);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_readDiskPtr
newCallback_Apis_readDisk(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Box::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_readDisk<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_readDiskPtr
newCallback_Apis_readDisk(T* instance, void (T::*cb)(::Ice::Int, const ::Box::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_readDisk<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_readDisk : public Callback_Apis_readDisk_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::Box::BinaryStream&, const CT&);

    Callback_Apis_readDisk(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Box::BinaryStream bs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_readDisk(bs, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, bs, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_readDiskPtr
newCallback_Apis_readDisk(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Box::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_readDisk<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_readDiskPtr
newCallback_Apis_readDisk(T* instance, void (T::*cb)(::Ice::Int, const ::Box::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_readDisk<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_writeDisk : public Callback_Apis_writeDisk_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Apis_writeDisk(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_writeDisk(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_writeDiskPtr
newCallback_Apis_writeDisk(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_writeDisk<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_writeDiskPtr
newCallback_Apis_writeDisk(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_writeDisk<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_writeDisk : public Callback_Apis_writeDisk_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Apis_writeDisk(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_writeDisk(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_writeDiskPtr
newCallback_Apis_writeDisk(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_writeDisk<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_writeDiskPtr
newCallback_Apis_writeDisk(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_writeDisk<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_JsonFuncV2 : public Callback_Apis_JsonFuncV2_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&, const ::Box::BinaryStream&);

    CallbackNC_Apis_JsonFuncV2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Box::BinaryStream outputBs;
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_JsonFuncV2(outputBs, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, outputBs);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_JsonFuncV2Ptr
newCallback_Apis_JsonFuncV2(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const ::Box::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_JsonFuncV2<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_JsonFuncV2Ptr
newCallback_Apis_JsonFuncV2(T* instance, void (T::*cb)(const ::std::string&, const ::Box::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_JsonFuncV2<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_JsonFuncV2 : public Callback_Apis_JsonFuncV2_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const ::Box::BinaryStream&, const CT&);

    Callback_Apis_JsonFuncV2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Box::BinaryStream outputBs;
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_JsonFuncV2(outputBs, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, outputBs, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_JsonFuncV2Ptr
newCallback_Apis_JsonFuncV2(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const ::Box::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_JsonFuncV2<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_JsonFuncV2Ptr
newCallback_Apis_JsonFuncV2(T* instance, void (T::*cb)(const ::std::string&, const ::Box::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_JsonFuncV2<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Apis_PEJsonFunc : public Callback_Apis_PEJsonFunc_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&, const ::Box::BinaryStream&);

    CallbackNC_Apis_PEJsonFunc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Box::BinaryStream outputBs;
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_PEJsonFunc(outputBs, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, outputBs);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Apis_PEJsonFuncPtr
newCallback_Apis_PEJsonFunc(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const ::Box::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_PEJsonFunc<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Apis_PEJsonFuncPtr
newCallback_Apis_PEJsonFunc(T* instance, void (T::*cb)(const ::std::string&, const ::Box::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Apis_PEJsonFunc<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Apis_PEJsonFunc : public Callback_Apis_PEJsonFunc_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const ::Box::BinaryStream&, const CT&);

    Callback_Apis_PEJsonFunc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Box::ApisPrx __proxy = ::Box::ApisPrx::uncheckedCast(__result->getProxy());
        ::Box::BinaryStream outputBs;
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_PEJsonFunc(outputBs, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, outputBs, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Apis_PEJsonFuncPtr
newCallback_Apis_PEJsonFunc(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const ::Box::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_PEJsonFunc<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Apis_PEJsonFuncPtr
newCallback_Apis_PEJsonFunc(T* instance, void (T::*cb)(const ::std::string&, const ::Box::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Apis_PEJsonFunc<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif

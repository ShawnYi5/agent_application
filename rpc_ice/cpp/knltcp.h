// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `knltcp.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____cpp_knltcp_h__
#define ____cpp_knltcp_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <utils.h>
#include <img.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace KTService
{

class KTS;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::KTService::KTS>&);
::IceProxy::Ice::Object* upCast(::IceProxy::KTService::KTS*);

}

}

namespace KTService
{

class KTS;
bool operator==(const KTS&, const KTS&);
bool operator<(const KTS&, const KTS&);
::Ice::Object* upCast(::KTService::KTS*);
typedef ::IceInternal::Handle< ::KTService::KTS> KTSPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::KTService::KTS> KTSPrx;
void __patch(KTSPtr&, const ::Ice::ObjectPtr&);

}

namespace KTService
{

typedef ::std::vector< ::Ice::Byte> BinaryStream;

struct Token
{
    Token() :
        keepAliveIntervalSeconds(3600),
        expiryMinutes(1440),
        diskBytes(ICE_INT64(0))
    {
    }
    
    Token(const ::std::string& __ice_token, const ::IMG::ImageSnapshotIdents& __ice_snapshot, ::Ice::Int __ice_keepAliveIntervalSeconds, ::Ice::Int __ice_expiryMinutes, ::Ice::Long __ice_diskBytes) :
        token(__ice_token),
        snapshot(__ice_snapshot),
        keepAliveIntervalSeconds(__ice_keepAliveIntervalSeconds),
        expiryMinutes(__ice_expiryMinutes),
        diskBytes(__ice_diskBytes)
    {
    }
    

    ::std::string token;
    ::IMG::ImageSnapshotIdents snapshot;
    ::Ice::Int keepAliveIntervalSeconds;
    ::Ice::Int expiryMinutes;
    ::Ice::Long diskBytes;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::KTService::Token>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 18;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::KTService::Token, S>
{
    static void write(S* __os, const ::KTService::Token& v)
    {
        __os->write(v.token);
        __os->write(v.snapshot);
        __os->write(v.keepAliveIntervalSeconds);
        __os->write(v.expiryMinutes);
        __os->write(v.diskBytes);
    }
};

template<class S>
struct StreamReader< ::KTService::Token, S>
{
    static void read(S* __is, ::KTService::Token& v)
    {
        __is->read(v.token);
        __is->read(v.snapshot);
        __is->read(v.keepAliveIntervalSeconds);
        __is->read(v.expiryMinutes);
        __is->read(v.diskBytes);
    }
};

}

namespace KTService
{

class Callback_KTS_ping_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_KTS_ping_Base> Callback_KTS_pingPtr;

class Callback_KTS_update_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_KTS_update_Base> Callback_KTS_updatePtr;

class Callback_KTS_updateTrafficControl_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_KTS_updateTrafficControl_Base> Callback_KTS_updateTrafficControlPtr;

class Callback_KTS_refreshNetwork_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_KTS_refreshNetwork_Base> Callback_KTS_refreshNetworkPtr;

class Callback_KTS_setPreReadBitmap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_KTS_setPreReadBitmap_Base> Callback_KTS_setPreReadBitmapPtr;

}

namespace IceProxy
{

namespace KTService
{

class KTS : virtual public ::IceProxy::Ice::Object
{
public:

    void ping()
    {
        ping(0);
    }
    void ping(const ::Ice::Context& __ctx)
    {
        ping(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ping(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_ping(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_ping(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ping(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ping(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_ping(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ping(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ping(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_ping()
    {
        return begin_ping(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context& __ctx)
    {
        return begin_ping(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::KTService::Callback_KTS_pingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context& __ctx, const ::KTService::Callback_KTS_pingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(&__ctx, __del, __cookie);
    }

    void end_ping(const ::Ice::AsyncResultPtr&);
    
private:

    void ping(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void update(const ::KTService::Token& __p_token)
    {
        update(__p_token, 0);
    }
    void update(const ::KTService::Token& __p_token, const ::Ice::Context& __ctx)
    {
        update(__p_token, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_update(const ::KTService::Token& __p_token, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_update(__p_token, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_update(const ::KTService::Token& __p_token, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_update(__p_token, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_update(const ::KTService::Token& __p_token, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_update(__p_token, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_update(const ::KTService::Token& __p_token, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_update(__p_token, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_update(const ::KTService::Token& __p_token, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_update(const ::KTService::Token& __p_token)
    {
        return begin_update(__p_token, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_update(const ::KTService::Token& __p_token, const ::Ice::Context& __ctx)
    {
        return begin_update(__p_token, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_update(const ::KTService::Token& __p_token, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(__p_token, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::KTService::Token& __p_token, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(__p_token, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::KTService::Token& __p_token, const ::KTService::Callback_KTS_updatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(__p_token, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::KTService::Token& __p_token, const ::Ice::Context& __ctx, const ::KTService::Callback_KTS_updatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(__p_token, &__ctx, __del, __cookie);
    }

    void end_update(const ::Ice::AsyncResultPtr&);
    
private:

    void update(const ::KTService::Token&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_update(const ::KTService::Token&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void updateTrafficControl(::Ice::Long __p_ioSession, const ::std::string& __p_ident, ::Ice::Int __p_kiloBytesPerSecond)
    {
        updateTrafficControl(__p_ioSession, __p_ident, __p_kiloBytesPerSecond, 0);
    }
    void updateTrafficControl(::Ice::Long __p_ioSession, const ::std::string& __p_ident, ::Ice::Int __p_kiloBytesPerSecond, const ::Ice::Context& __ctx)
    {
        updateTrafficControl(__p_ioSession, __p_ident, __p_kiloBytesPerSecond, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateTrafficControl(::Ice::Long __p_ioSession, const ::std::string& __p_ident, ::Ice::Int __p_kiloBytesPerSecond, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateTrafficControl(__p_ioSession, __p_ident, __p_kiloBytesPerSecond, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateTrafficControl(::Ice::Long __p_ioSession, const ::std::string& __p_ident, ::Ice::Int __p_kiloBytesPerSecond, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateTrafficControl(__p_ioSession, __p_ident, __p_kiloBytesPerSecond, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateTrafficControl(::Ice::Long __p_ioSession, const ::std::string& __p_ident, ::Ice::Int __p_kiloBytesPerSecond, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateTrafficControl(__p_ioSession, __p_ident, __p_kiloBytesPerSecond, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateTrafficControl(::Ice::Long __p_ioSession, const ::std::string& __p_ident, ::Ice::Int __p_kiloBytesPerSecond, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateTrafficControl(__p_ioSession, __p_ident, __p_kiloBytesPerSecond, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_updateTrafficControl(::Ice::Long __p_ioSession, const ::std::string& __p_ident, ::Ice::Int __p_kiloBytesPerSecond, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_updateTrafficControl(::Ice::Long __p_ioSession, const ::std::string& __p_ident, ::Ice::Int __p_kiloBytesPerSecond)
    {
        return begin_updateTrafficControl(__p_ioSession, __p_ident, __p_kiloBytesPerSecond, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateTrafficControl(::Ice::Long __p_ioSession, const ::std::string& __p_ident, ::Ice::Int __p_kiloBytesPerSecond, const ::Ice::Context& __ctx)
    {
        return begin_updateTrafficControl(__p_ioSession, __p_ident, __p_kiloBytesPerSecond, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateTrafficControl(::Ice::Long __p_ioSession, const ::std::string& __p_ident, ::Ice::Int __p_kiloBytesPerSecond, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateTrafficControl(__p_ioSession, __p_ident, __p_kiloBytesPerSecond, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateTrafficControl(::Ice::Long __p_ioSession, const ::std::string& __p_ident, ::Ice::Int __p_kiloBytesPerSecond, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateTrafficControl(__p_ioSession, __p_ident, __p_kiloBytesPerSecond, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateTrafficControl(::Ice::Long __p_ioSession, const ::std::string& __p_ident, ::Ice::Int __p_kiloBytesPerSecond, const ::KTService::Callback_KTS_updateTrafficControlPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateTrafficControl(__p_ioSession, __p_ident, __p_kiloBytesPerSecond, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateTrafficControl(::Ice::Long __p_ioSession, const ::std::string& __p_ident, ::Ice::Int __p_kiloBytesPerSecond, const ::Ice::Context& __ctx, const ::KTService::Callback_KTS_updateTrafficControlPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateTrafficControl(__p_ioSession, __p_ident, __p_kiloBytesPerSecond, &__ctx, __del, __cookie);
    }

    void end_updateTrafficControl(const ::Ice::AsyncResultPtr&);
    
private:

    void updateTrafficControl(::Ice::Long, const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateTrafficControl(::Ice::Long, const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void refreshNetwork()
    {
        refreshNetwork(0);
    }
    void refreshNetwork(const ::Ice::Context& __ctx)
    {
        refreshNetwork(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_refreshNetwork(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_refreshNetwork(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_refreshNetwork(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_refreshNetwork(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_refreshNetwork(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_refreshNetwork(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_refreshNetwork(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_refreshNetwork(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_refreshNetwork()
    {
        return begin_refreshNetwork(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refreshNetwork(const ::Ice::Context& __ctx)
    {
        return begin_refreshNetwork(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refreshNetwork(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshNetwork(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refreshNetwork(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshNetwork(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refreshNetwork(const ::KTService::Callback_KTS_refreshNetworkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshNetwork(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refreshNetwork(const ::Ice::Context& __ctx, const ::KTService::Callback_KTS_refreshNetworkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshNetwork(&__ctx, __del, __cookie);
    }

    void end_refreshNetwork(const ::Ice::AsyncResultPtr&);
    
private:

    void refreshNetwork(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_refreshNetwork(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPreReadBitmap(const ::KTService::Token& __p_token, ::Ice::Long __p_index, const ::KTService::BinaryStream& __p_bitmap)
    {
        setPreReadBitmap(__p_token, __p_index, __p_bitmap, 0);
    }
    void setPreReadBitmap(const ::KTService::Token& __p_token, ::Ice::Long __p_index, const ::KTService::BinaryStream& __p_bitmap, const ::Ice::Context& __ctx)
    {
        setPreReadBitmap(__p_token, __p_index, __p_bitmap, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPreReadBitmap(const ::KTService::Token& __p_token, ::Ice::Long __p_index, const ::KTService::BinaryStream& __p_bitmap, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPreReadBitmap(const ::KTService::Token& __p_token, ::Ice::Long __p_index, const ::KTService::BinaryStream& __p_bitmap, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPreReadBitmap(const ::KTService::Token& __p_token, ::Ice::Long __p_index, const ::KTService::BinaryStream& __p_bitmap, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPreReadBitmap(const ::KTService::Token& __p_token, ::Ice::Long __p_index, const ::KTService::BinaryStream& __p_bitmap, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setPreReadBitmap(const ::KTService::Token& __p_token, ::Ice::Long __p_index, const ::KTService::BinaryStream& __p_bitmap, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setPreReadBitmap(const ::KTService::Token& __p_token, ::Ice::Long __p_index, const ::KTService::BinaryStream& __p_bitmap)
    {
        return begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPreReadBitmap(const ::KTService::Token& __p_token, ::Ice::Long __p_index, const ::KTService::BinaryStream& __p_bitmap, const ::Ice::Context& __ctx)
    {
        return begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPreReadBitmap(const ::KTService::Token& __p_token, ::Ice::Long __p_index, const ::KTService::BinaryStream& __p_bitmap, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPreReadBitmap(const ::KTService::Token& __p_token, ::Ice::Long __p_index, const ::KTService::BinaryStream& __p_bitmap, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPreReadBitmap(const ::KTService::Token& __p_token, ::Ice::Long __p_index, const ::KTService::BinaryStream& __p_bitmap, const ::KTService::Callback_KTS_setPreReadBitmapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPreReadBitmap(const ::KTService::Token& __p_token, ::Ice::Long __p_index, const ::KTService::BinaryStream& __p_bitmap, const ::Ice::Context& __ctx, const ::KTService::Callback_KTS_setPreReadBitmapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, &__ctx, __del, __cookie);
    }

    void end_setPreReadBitmap(const ::Ice::AsyncResultPtr&);
    
private:

    void setPreReadBitmap(const ::KTService::Token&, ::Ice::Long, const ::KTService::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPreReadBitmap(const ::KTService::Token&, ::Ice::Long, const ::KTService::BinaryStream&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<KTS> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_secure(bool __secure) const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_twoway() const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_oneway() const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_batchOneway() const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_datagram() const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_batchDatagram() const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_compress(bool __compress) const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_timeout(int __timeout) const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<KTS> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<KTS*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace KTService
{

class KTS : virtual public ::Ice::Object
{
public:

    typedef KTSPrx ProxyType;
    typedef KTSPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void ping(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ping(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void update(const ::KTService::Token&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___update(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void updateTrafficControl(::Ice::Long, const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateTrafficControl(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void refreshNetwork(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___refreshNetwork(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPreReadBitmap(const ::KTService::Token&, ::Ice::Long, const ::KTService::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPreReadBitmap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const KTS& l, const KTS& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const KTS& l, const KTS& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace KTService
{

template<class T>
class CallbackNC_KTS_ping : public Callback_KTS_ping_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_KTS_ping(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_KTS_pingPtr
newCallback_KTS_ping(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_ping<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_KTS_pingPtr
newCallback_KTS_ping(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_ping<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_KTS_pingPtr
newCallback_KTS_ping(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_ping<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_KTS_pingPtr
newCallback_KTS_ping(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_ping<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_KTS_ping : public Callback_KTS_ping_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_KTS_ping(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_KTS_pingPtr
newCallback_KTS_ping(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_ping<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_KTS_pingPtr
newCallback_KTS_ping(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_ping<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_KTS_pingPtr
newCallback_KTS_ping(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_ping<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_KTS_pingPtr
newCallback_KTS_ping(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_ping<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_KTS_update : public Callback_KTS_update_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_KTS_update(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::KTService::KTSPrx __proxy = ::KTService::KTSPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_update(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_KTS_updatePtr
newCallback_KTS_update(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_update<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_KTS_updatePtr
newCallback_KTS_update(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_update<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_KTS_updatePtr
newCallback_KTS_update(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_update<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_KTS_updatePtr
newCallback_KTS_update(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_update<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_KTS_update : public Callback_KTS_update_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_KTS_update(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::KTService::KTSPrx __proxy = ::KTService::KTSPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_update(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_KTS_updatePtr
newCallback_KTS_update(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_update<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_KTS_updatePtr
newCallback_KTS_update(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_update<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_KTS_updatePtr
newCallback_KTS_update(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_update<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_KTS_updatePtr
newCallback_KTS_update(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_update<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_KTS_updateTrafficControl : public Callback_KTS_updateTrafficControl_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_KTS_updateTrafficControl(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::KTService::KTSPrx __proxy = ::KTService::KTSPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_updateTrafficControl(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_KTS_updateTrafficControlPtr
newCallback_KTS_updateTrafficControl(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_updateTrafficControl<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_KTS_updateTrafficControlPtr
newCallback_KTS_updateTrafficControl(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_updateTrafficControl<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_KTS_updateTrafficControlPtr
newCallback_KTS_updateTrafficControl(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_updateTrafficControl<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_KTS_updateTrafficControlPtr
newCallback_KTS_updateTrafficControl(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_updateTrafficControl<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_KTS_updateTrafficControl : public Callback_KTS_updateTrafficControl_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_KTS_updateTrafficControl(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::KTService::KTSPrx __proxy = ::KTService::KTSPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_updateTrafficControl(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_KTS_updateTrafficControlPtr
newCallback_KTS_updateTrafficControl(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_updateTrafficControl<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_KTS_updateTrafficControlPtr
newCallback_KTS_updateTrafficControl(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_updateTrafficControl<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_KTS_updateTrafficControlPtr
newCallback_KTS_updateTrafficControl(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_updateTrafficControl<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_KTS_updateTrafficControlPtr
newCallback_KTS_updateTrafficControl(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_updateTrafficControl<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_KTS_refreshNetwork : public Callback_KTS_refreshNetwork_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_KTS_refreshNetwork(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_KTS_refreshNetworkPtr
newCallback_KTS_refreshNetwork(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_refreshNetwork<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_KTS_refreshNetworkPtr
newCallback_KTS_refreshNetwork(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_refreshNetwork<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_KTS_refreshNetworkPtr
newCallback_KTS_refreshNetwork(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_refreshNetwork<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_KTS_refreshNetworkPtr
newCallback_KTS_refreshNetwork(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_refreshNetwork<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_KTS_refreshNetwork : public Callback_KTS_refreshNetwork_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_KTS_refreshNetwork(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_KTS_refreshNetworkPtr
newCallback_KTS_refreshNetwork(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_refreshNetwork<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_KTS_refreshNetworkPtr
newCallback_KTS_refreshNetwork(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_refreshNetwork<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_KTS_refreshNetworkPtr
newCallback_KTS_refreshNetwork(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_refreshNetwork<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_KTS_refreshNetworkPtr
newCallback_KTS_refreshNetwork(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_refreshNetwork<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_KTS_setPreReadBitmap : public Callback_KTS_setPreReadBitmap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_KTS_setPreReadBitmap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::KTService::KTSPrx __proxy = ::KTService::KTSPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setPreReadBitmap(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_KTS_setPreReadBitmapPtr
newCallback_KTS_setPreReadBitmap(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_setPreReadBitmap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_KTS_setPreReadBitmapPtr
newCallback_KTS_setPreReadBitmap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_setPreReadBitmap<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_KTS_setPreReadBitmapPtr
newCallback_KTS_setPreReadBitmap(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_setPreReadBitmap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_KTS_setPreReadBitmapPtr
newCallback_KTS_setPreReadBitmap(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_KTS_setPreReadBitmap<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_KTS_setPreReadBitmap : public Callback_KTS_setPreReadBitmap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_KTS_setPreReadBitmap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::KTService::KTSPrx __proxy = ::KTService::KTSPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setPreReadBitmap(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_KTS_setPreReadBitmapPtr
newCallback_KTS_setPreReadBitmap(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_setPreReadBitmap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_KTS_setPreReadBitmapPtr
newCallback_KTS_setPreReadBitmap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_setPreReadBitmap<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_KTS_setPreReadBitmapPtr
newCallback_KTS_setPreReadBitmap(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_setPreReadBitmap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_KTS_setPreReadBitmapPtr
newCallback_KTS_setPreReadBitmap(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_KTS_setPreReadBitmap<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif

// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `img.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____cpp_img_h__
#define ____cpp_img_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <utils.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace IMG
{

class ImgService;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IMG::ImgService>&);
::IceProxy::Ice::Object* upCast(::IceProxy::IMG::ImgService*);

}

}

namespace IMG
{

class ImgService;
bool operator==(const ImgService&, const ImgService&);
bool operator<(const ImgService&, const ImgService&);
::Ice::Object* upCast(::IMG::ImgService*);
typedef ::IceInternal::Handle< ::IMG::ImgService> ImgServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IMG::ImgService> ImgServicePrx;
void __patch(ImgServicePtr&, const ::Ice::ObjectPtr&);

}

namespace IMG
{

typedef ::std::vector< ::Ice::Byte> BinaryStream;

struct DuplicateFileSector
{
    ::Ice::Long diskByteOffset;
    ::Ice::Long diskBytes;
    ::Ice::Long fileByteOffset;
    ::std::string fileIdent;

    bool operator==(const DuplicateFileSector& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(diskByteOffset != __rhs.diskByteOffset)
        {
            return false;
        }
        if(diskBytes != __rhs.diskBytes)
        {
            return false;
        }
        if(fileByteOffset != __rhs.fileByteOffset)
        {
            return false;
        }
        if(fileIdent != __rhs.fileIdent)
        {
            return false;
        }
        return true;
    }

    bool operator<(const DuplicateFileSector& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(diskByteOffset < __rhs.diskByteOffset)
        {
            return true;
        }
        else if(__rhs.diskByteOffset < diskByteOffset)
        {
            return false;
        }
        if(diskBytes < __rhs.diskBytes)
        {
            return true;
        }
        else if(__rhs.diskBytes < diskBytes)
        {
            return false;
        }
        if(fileByteOffset < __rhs.fileByteOffset)
        {
            return true;
        }
        else if(__rhs.fileByteOffset < fileByteOffset)
        {
            return false;
        }
        if(fileIdent < __rhs.fileIdent)
        {
            return true;
        }
        else if(__rhs.fileIdent < fileIdent)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const DuplicateFileSector& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const DuplicateFileSector& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const DuplicateFileSector& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const DuplicateFileSector& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::IMG::DuplicateFileSector> DuplicateFileSectors;

struct FileSector
{
    ::Ice::Long diskByteOffset;
    ::Ice::Long diskBytes;

    bool operator==(const FileSector& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(diskByteOffset != __rhs.diskByteOffset)
        {
            return false;
        }
        if(diskBytes != __rhs.diskBytes)
        {
            return false;
        }
        return true;
    }

    bool operator<(const FileSector& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(diskByteOffset < __rhs.diskByteOffset)
        {
            return true;
        }
        else if(__rhs.diskByteOffset < diskByteOffset)
        {
            return false;
        }
        if(diskBytes < __rhs.diskBytes)
        {
            return true;
        }
        else if(__rhs.diskBytes < diskBytes)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const FileSector& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const FileSector& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const FileSector& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const FileSector& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::IMG::FileSector> FileSectors;

struct ImageSnapshotIdent
{
    ::std::string path;
    ::std::string snapshot;

    bool operator==(const ImageSnapshotIdent& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(path != __rhs.path)
        {
            return false;
        }
        if(snapshot != __rhs.snapshot)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ImageSnapshotIdent& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(path < __rhs.path)
        {
            return true;
        }
        else if(__rhs.path < path)
        {
            return false;
        }
        if(snapshot < __rhs.snapshot)
        {
            return true;
        }
        else if(__rhs.snapshot < snapshot)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ImageSnapshotIdent& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ImageSnapshotIdent& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ImageSnapshotIdent& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ImageSnapshotIdent& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::IMG::ImageSnapshotIdent> ImageSnapshotIdents;

typedef ::std::vector< ::Ice::Long> BlockIndexes;

}

namespace Ice
{
template<>
struct StreamableTraits< ::IMG::DuplicateFileSector>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 25;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::IMG::DuplicateFileSector, S>
{
    static void write(S* __os, const ::IMG::DuplicateFileSector& v)
    {
        __os->write(v.diskByteOffset);
        __os->write(v.diskBytes);
        __os->write(v.fileByteOffset);
        __os->write(v.fileIdent);
    }
};

template<class S>
struct StreamReader< ::IMG::DuplicateFileSector, S>
{
    static void read(S* __is, ::IMG::DuplicateFileSector& v)
    {
        __is->read(v.diskByteOffset);
        __is->read(v.diskBytes);
        __is->read(v.fileByteOffset);
        __is->read(v.fileIdent);
    }
};

template<>
struct StreamableTraits< ::IMG::FileSector>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::IMG::FileSector, S>
{
    static void write(S* __os, const ::IMG::FileSector& v)
    {
        __os->write(v.diskByteOffset);
        __os->write(v.diskBytes);
    }
};

template<class S>
struct StreamReader< ::IMG::FileSector, S>
{
    static void read(S* __is, ::IMG::FileSector& v)
    {
        __is->read(v.diskByteOffset);
        __is->read(v.diskBytes);
    }
};

template<>
struct StreamableTraits< ::IMG::ImageSnapshotIdent>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::IMG::ImageSnapshotIdent, S>
{
    static void write(S* __os, const ::IMG::ImageSnapshotIdent& v)
    {
        __os->write(v.path);
        __os->write(v.snapshot);
    }
};

template<class S>
struct StreamReader< ::IMG::ImageSnapshotIdent, S>
{
    static void read(S* __is, ::IMG::ImageSnapshotIdent& v)
    {
        __is->read(v.path);
        __is->read(v.snapshot);
    }
};

}

namespace IMG
{

class Callback_ImgService_create_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgService_create_Base> Callback_ImgService_createPtr;

class Callback_ImgService_setUsedBlockBitmap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgService_setUsedBlockBitmap_Base> Callback_ImgService_setUsedBlockBitmapPtr;

class Callback_ImgService_cleanUsedBlockBitmap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgService_cleanUsedBlockBitmap_Base> Callback_ImgService_cleanUsedBlockBitmapPtr;

class Callback_ImgService_setDuplicateFileSectors_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgService_setDuplicateFileSectors_Base> Callback_ImgService_setDuplicateFileSectorsPtr;

class Callback_ImgService_open_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgService_open_Base> Callback_ImgService_openPtr;

class Callback_ImgService_getTotalUesdBlockBitmap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgService_getTotalUesdBlockBitmap_Base> Callback_ImgService_getTotalUesdBlockBitmapPtr;

class Callback_ImgService_getAllFileSectors_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgService_getAllFileSectors_Base> Callback_ImgService_getAllFileSectorsPtr;

class Callback_ImgService_read_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgService_read_Base> Callback_ImgService_readPtr;

class Callback_ImgService_readEx_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgService_readEx_Base> Callback_ImgService_readExPtr;

class Callback_ImgService_write_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgService_write_Base> Callback_ImgService_writePtr;

class Callback_ImgService_writeCdp_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgService_writeCdp_Base> Callback_ImgService_writeCdpPtr;

class Callback_ImgService_writeCdpByIndex_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgService_writeCdpByIndex_Base> Callback_ImgService_writeCdpByIndexPtr;

class Callback_ImgService_writeCdpByTmeAndIndex_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgService_writeCdpByTmeAndIndex_Base> Callback_ImgService_writeCdpByTmeAndIndexPtr;

class Callback_ImgService_close_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgService_close_Base> Callback_ImgService_closePtr;

class Callback_ImgService_GetSnSize_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgService_GetSnSize_Base> Callback_ImgService_GetSnSizePtr;

class Callback_ImgService_DelSnaport_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgService_DelSnaport_Base> Callback_ImgService_DelSnaportPtr;

class Callback_ImgService_RenameSnapshot_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgService_RenameSnapshot_Base> Callback_ImgService_RenameSnapshotPtr;

class Callback_ImgService_GetOnSnMapFile_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImgService_GetOnSnMapFile_Base> Callback_ImgService_GetOnSnMapFilePtr;

}

namespace IceProxy
{

namespace IMG
{

class ImgService : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Long create(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IMG::ImageSnapshotIdents& __p_lastSnapshot, ::Ice::Long __p_diskByteSize, const ::std::string& __p_flag)
    {
        return create(__p_ident, __p_lastSnapshot, __p_diskByteSize, __p_flag, 0);
    }
    ::Ice::Long create(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IMG::ImageSnapshotIdents& __p_lastSnapshot, ::Ice::Long __p_diskByteSize, const ::std::string& __p_flag, const ::Ice::Context& __ctx)
    {
        return create(__p_ident, __p_lastSnapshot, __p_diskByteSize, __p_flag, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_create(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IMG::ImageSnapshotIdents& __p_lastSnapshot, ::Ice::Long __p_diskByteSize, const ::std::string& __p_flag, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_create(__p_ident, __p_lastSnapshot, __p_diskByteSize, __p_flag, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_create(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IMG::ImageSnapshotIdents& __p_lastSnapshot, ::Ice::Long __p_diskByteSize, const ::std::string& __p_flag, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_create(__p_ident, __p_lastSnapshot, __p_diskByteSize, __p_flag, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_create(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IMG::ImageSnapshotIdents& __p_lastSnapshot, ::Ice::Long __p_diskByteSize, const ::std::string& __p_flag, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_create(__p_ident, __p_lastSnapshot, __p_diskByteSize, __p_flag, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_create(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IMG::ImageSnapshotIdents& __p_lastSnapshot, ::Ice::Long __p_diskByteSize, const ::std::string& __p_flag, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_create(__p_ident, __p_lastSnapshot, __p_diskByteSize, __p_flag, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_create(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IMG::ImageSnapshotIdents& __p_lastSnapshot, ::Ice::Long __p_diskByteSize, const ::std::string& __p_flag, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_create(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IMG::ImageSnapshotIdents& __p_lastSnapshot, ::Ice::Long __p_diskByteSize, const ::std::string& __p_flag)
    {
        return begin_create(__p_ident, __p_lastSnapshot, __p_diskByteSize, __p_flag, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_create(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IMG::ImageSnapshotIdents& __p_lastSnapshot, ::Ice::Long __p_diskByteSize, const ::std::string& __p_flag, const ::Ice::Context& __ctx)
    {
        return begin_create(__p_ident, __p_lastSnapshot, __p_diskByteSize, __p_flag, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_create(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IMG::ImageSnapshotIdents& __p_lastSnapshot, ::Ice::Long __p_diskByteSize, const ::std::string& __p_flag, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(__p_ident, __p_lastSnapshot, __p_diskByteSize, __p_flag, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IMG::ImageSnapshotIdents& __p_lastSnapshot, ::Ice::Long __p_diskByteSize, const ::std::string& __p_flag, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(__p_ident, __p_lastSnapshot, __p_diskByteSize, __p_flag, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IMG::ImageSnapshotIdents& __p_lastSnapshot, ::Ice::Long __p_diskByteSize, const ::std::string& __p_flag, const ::IMG::Callback_ImgService_createPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(__p_ident, __p_lastSnapshot, __p_diskByteSize, __p_flag, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IMG::ImageSnapshotIdents& __p_lastSnapshot, ::Ice::Long __p_diskByteSize, const ::std::string& __p_flag, const ::Ice::Context& __ctx, const ::IMG::Callback_ImgService_createPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(__p_ident, __p_lastSnapshot, __p_diskByteSize, __p_flag, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_create(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long create(const ::IMG::ImageSnapshotIdent&, const ::IMG::ImageSnapshotIdents&, ::Ice::Long, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_create(const ::IMG::ImageSnapshotIdent&, const ::IMG::ImageSnapshotIdents&, ::Ice::Long, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int setUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BinaryStream& __p_bitmap, bool __p_completed)
    {
        return setUsedBlockBitmap(__p_handle, __p_bitmap, __p_completed, 0);
    }
    ::Ice::Int setUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context& __ctx)
    {
        return setUsedBlockBitmap(__p_handle, __p_bitmap, __p_completed, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BinaryStream& __p_bitmap, bool __p_completed, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setUsedBlockBitmap(__p_handle, __p_bitmap, __p_completed, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BinaryStream& __p_bitmap, bool __p_completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUsedBlockBitmap(__p_handle, __p_bitmap, __p_completed, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setUsedBlockBitmap(__p_handle, __p_bitmap, __p_completed, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setUsedBlockBitmap(__p_handle, __p_bitmap, __p_completed, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BinaryStream& __p_bitmap, bool __p_completed)
    {
        return begin_setUsedBlockBitmap(__p_handle, __p_bitmap, __p_completed, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context& __ctx)
    {
        return begin_setUsedBlockBitmap(__p_handle, __p_bitmap, __p_completed, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUsedBlockBitmap(__p_handle, __p_bitmap, __p_completed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUsedBlockBitmap(__p_handle, __p_bitmap, __p_completed, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BinaryStream& __p_bitmap, bool __p_completed, const ::IMG::Callback_ImgService_setUsedBlockBitmapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUsedBlockBitmap(__p_handle, __p_bitmap, __p_completed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context& __ctx, const ::IMG::Callback_ImgService_setUsedBlockBitmapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setUsedBlockBitmap(__p_handle, __p_bitmap, __p_completed, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_setUsedBlockBitmap(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int setUsedBlockBitmap(::Ice::Long, const ::IMG::BinaryStream&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setUsedBlockBitmap(::Ice::Long, const ::IMG::BinaryStream&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int cleanUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BlockIndexes& __p_indexes)
    {
        return cleanUsedBlockBitmap(__p_handle, __p_indexes, 0);
    }
    ::Ice::Int cleanUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BlockIndexes& __p_indexes, const ::Ice::Context& __ctx)
    {
        return cleanUsedBlockBitmap(__p_handle, __p_indexes, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_cleanUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BlockIndexes& __p_indexes, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_cleanUsedBlockBitmap(__p_handle, __p_indexes, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_cleanUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BlockIndexes& __p_indexes, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cleanUsedBlockBitmap(__p_handle, __p_indexes, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cleanUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BlockIndexes& __p_indexes, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_cleanUsedBlockBitmap(__p_handle, __p_indexes, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_cleanUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BlockIndexes& __p_indexes, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cleanUsedBlockBitmap(__p_handle, __p_indexes, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_cleanUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BlockIndexes& __p_indexes, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_cleanUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BlockIndexes& __p_indexes)
    {
        return begin_cleanUsedBlockBitmap(__p_handle, __p_indexes, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cleanUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BlockIndexes& __p_indexes, const ::Ice::Context& __ctx)
    {
        return begin_cleanUsedBlockBitmap(__p_handle, __p_indexes, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cleanUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BlockIndexes& __p_indexes, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cleanUsedBlockBitmap(__p_handle, __p_indexes, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cleanUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BlockIndexes& __p_indexes, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cleanUsedBlockBitmap(__p_handle, __p_indexes, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cleanUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BlockIndexes& __p_indexes, const ::IMG::Callback_ImgService_cleanUsedBlockBitmapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cleanUsedBlockBitmap(__p_handle, __p_indexes, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cleanUsedBlockBitmap(::Ice::Long __p_handle, const ::IMG::BlockIndexes& __p_indexes, const ::Ice::Context& __ctx, const ::IMG::Callback_ImgService_cleanUsedBlockBitmapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cleanUsedBlockBitmap(__p_handle, __p_indexes, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_cleanUsedBlockBitmap(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int cleanUsedBlockBitmap(::Ice::Long, const ::IMG::BlockIndexes&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cleanUsedBlockBitmap(::Ice::Long, const ::IMG::BlockIndexes&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int setDuplicateFileSectors(::Ice::Long __p_handle, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed)
    {
        return setDuplicateFileSectors(__p_handle, __p_sectors, __p_completed, 0);
    }
    ::Ice::Int setDuplicateFileSectors(::Ice::Long __p_handle, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::Context& __ctx)
    {
        return setDuplicateFileSectors(__p_handle, __p_sectors, __p_completed, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setDuplicateFileSectors(::Ice::Long __p_handle, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setDuplicateFileSectors(__p_handle, __p_sectors, __p_completed, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setDuplicateFileSectors(::Ice::Long __p_handle, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDuplicateFileSectors(__p_handle, __p_sectors, __p_completed, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDuplicateFileSectors(::Ice::Long __p_handle, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setDuplicateFileSectors(__p_handle, __p_sectors, __p_completed, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setDuplicateFileSectors(::Ice::Long __p_handle, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDuplicateFileSectors(__p_handle, __p_sectors, __p_completed, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setDuplicateFileSectors(::Ice::Long __p_handle, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setDuplicateFileSectors(::Ice::Long __p_handle, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed)
    {
        return begin_setDuplicateFileSectors(__p_handle, __p_sectors, __p_completed, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDuplicateFileSectors(::Ice::Long __p_handle, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::Context& __ctx)
    {
        return begin_setDuplicateFileSectors(__p_handle, __p_sectors, __p_completed, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDuplicateFileSectors(::Ice::Long __p_handle, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDuplicateFileSectors(__p_handle, __p_sectors, __p_completed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDuplicateFileSectors(::Ice::Long __p_handle, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDuplicateFileSectors(__p_handle, __p_sectors, __p_completed, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDuplicateFileSectors(::Ice::Long __p_handle, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::IMG::Callback_ImgService_setDuplicateFileSectorsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDuplicateFileSectors(__p_handle, __p_sectors, __p_completed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDuplicateFileSectors(::Ice::Long __p_handle, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::Context& __ctx, const ::IMG::Callback_ImgService_setDuplicateFileSectorsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDuplicateFileSectors(__p_handle, __p_sectors, __p_completed, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_setDuplicateFileSectors(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int setDuplicateFileSectors(::Ice::Long, const ::IMG::DuplicateFileSectors&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDuplicateFileSectors(::Ice::Long, const ::IMG::DuplicateFileSectors&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Long open(const ::IMG::ImageSnapshotIdents& __p_ident, const ::std::string& __p_flag)
    {
        return open(__p_ident, __p_flag, 0);
    }
    ::Ice::Long open(const ::IMG::ImageSnapshotIdents& __p_ident, const ::std::string& __p_flag, const ::Ice::Context& __ctx)
    {
        return open(__p_ident, __p_flag, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_open(const ::IMG::ImageSnapshotIdents& __p_ident, const ::std::string& __p_flag, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_open(__p_ident, __p_flag, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_open(const ::IMG::ImageSnapshotIdents& __p_ident, const ::std::string& __p_flag, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_open(__p_ident, __p_flag, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_open(const ::IMG::ImageSnapshotIdents& __p_ident, const ::std::string& __p_flag, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_open(__p_ident, __p_flag, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_open(const ::IMG::ImageSnapshotIdents& __p_ident, const ::std::string& __p_flag, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_open(__p_ident, __p_flag, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_open(const ::IMG::ImageSnapshotIdents& __p_ident, const ::std::string& __p_flag, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_open(const ::IMG::ImageSnapshotIdents& __p_ident, const ::std::string& __p_flag)
    {
        return begin_open(__p_ident, __p_flag, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_open(const ::IMG::ImageSnapshotIdents& __p_ident, const ::std::string& __p_flag, const ::Ice::Context& __ctx)
    {
        return begin_open(__p_ident, __p_flag, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_open(const ::IMG::ImageSnapshotIdents& __p_ident, const ::std::string& __p_flag, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_open(__p_ident, __p_flag, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_open(const ::IMG::ImageSnapshotIdents& __p_ident, const ::std::string& __p_flag, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_open(__p_ident, __p_flag, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_open(const ::IMG::ImageSnapshotIdents& __p_ident, const ::std::string& __p_flag, const ::IMG::Callback_ImgService_openPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_open(__p_ident, __p_flag, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_open(const ::IMG::ImageSnapshotIdents& __p_ident, const ::std::string& __p_flag, const ::Ice::Context& __ctx, const ::IMG::Callback_ImgService_openPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_open(__p_ident, __p_flag, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_open(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long open(const ::IMG::ImageSnapshotIdents&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_open(const ::IMG::ImageSnapshotIdents&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getTotalUesdBlockBitmap(::Ice::Long __p_handle, ::Ice::Int __p_index, ::IMG::BinaryStream& __p_bitmap, bool& __p_finish)
    {
        return getTotalUesdBlockBitmap(__p_handle, __p_index, __p_bitmap, __p_finish, 0);
    }
    ::Ice::Int getTotalUesdBlockBitmap(::Ice::Long __p_handle, ::Ice::Int __p_index, ::IMG::BinaryStream& __p_bitmap, bool& __p_finish, const ::Ice::Context& __ctx)
    {
        return getTotalUesdBlockBitmap(__p_handle, __p_index, __p_bitmap, __p_finish, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getTotalUesdBlockBitmap(::Ice::Long __p_handle, ::Ice::Int __p_index, const ::IceInternal::Function<void (::Ice::Int, const ::IMG::BinaryStream&, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTotalUesdBlockBitmap(__p_handle, __p_index, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTotalUesdBlockBitmap(::Ice::Long __p_handle, ::Ice::Int __p_index, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTotalUesdBlockBitmap(__p_handle, __p_index, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getTotalUesdBlockBitmap(::Ice::Long __p_handle, ::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::IMG::BinaryStream&, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTotalUesdBlockBitmap(__p_handle, __p_index, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTotalUesdBlockBitmap(::Ice::Long __p_handle, ::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTotalUesdBlockBitmap(__p_handle, __p_index, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getTotalUesdBlockBitmap(::Ice::Long __p_handle, ::Ice::Int __p_index, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::IMG::BinaryStream&, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getTotalUesdBlockBitmap(::Ice::Long __p_handle, ::Ice::Int __p_index)
    {
        return begin_getTotalUesdBlockBitmap(__p_handle, __p_index, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTotalUesdBlockBitmap(::Ice::Long __p_handle, ::Ice::Int __p_index, const ::Ice::Context& __ctx)
    {
        return begin_getTotalUesdBlockBitmap(__p_handle, __p_index, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTotalUesdBlockBitmap(::Ice::Long __p_handle, ::Ice::Int __p_index, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTotalUesdBlockBitmap(__p_handle, __p_index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTotalUesdBlockBitmap(::Ice::Long __p_handle, ::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTotalUesdBlockBitmap(__p_handle, __p_index, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTotalUesdBlockBitmap(::Ice::Long __p_handle, ::Ice::Int __p_index, const ::IMG::Callback_ImgService_getTotalUesdBlockBitmapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTotalUesdBlockBitmap(__p_handle, __p_index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTotalUesdBlockBitmap(::Ice::Long __p_handle, ::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::IMG::Callback_ImgService_getTotalUesdBlockBitmapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTotalUesdBlockBitmap(__p_handle, __p_index, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_getTotalUesdBlockBitmap(::IMG::BinaryStream& __p_bitmap, bool& __p_finish, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getTotalUesdBlockBitmap(::Ice::Long, ::Ice::Int, ::IMG::BinaryStream&, bool&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTotalUesdBlockBitmap(::Ice::Long, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Long getAllFileSectors(::Ice::Long __p_handle, ::Ice::Long __p_index, ::IMG::FileSectors& __p_sectors, bool& __p_finish)
    {
        return getAllFileSectors(__p_handle, __p_index, __p_sectors, __p_finish, 0);
    }
    ::Ice::Long getAllFileSectors(::Ice::Long __p_handle, ::Ice::Long __p_index, ::IMG::FileSectors& __p_sectors, bool& __p_finish, const ::Ice::Context& __ctx)
    {
        return getAllFileSectors(__p_handle, __p_index, __p_sectors, __p_finish, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAllFileSectors(::Ice::Long __p_handle, ::Ice::Long __p_index, const ::IceInternal::Function<void (::Ice::Long, const ::IMG::FileSectors&, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAllFileSectors(__p_handle, __p_index, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAllFileSectors(::Ice::Long __p_handle, ::Ice::Long __p_index, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAllFileSectors(__p_handle, __p_index, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAllFileSectors(::Ice::Long __p_handle, ::Ice::Long __p_index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long, const ::IMG::FileSectors&, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAllFileSectors(__p_handle, __p_index, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAllFileSectors(::Ice::Long __p_handle, ::Ice::Long __p_index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAllFileSectors(__p_handle, __p_index, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAllFileSectors(::Ice::Long __p_handle, ::Ice::Long __p_index, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long, const ::IMG::FileSectors&, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAllFileSectors(::Ice::Long __p_handle, ::Ice::Long __p_index)
    {
        return begin_getAllFileSectors(__p_handle, __p_index, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllFileSectors(::Ice::Long __p_handle, ::Ice::Long __p_index, const ::Ice::Context& __ctx)
    {
        return begin_getAllFileSectors(__p_handle, __p_index, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllFileSectors(::Ice::Long __p_handle, ::Ice::Long __p_index, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllFileSectors(__p_handle, __p_index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllFileSectors(::Ice::Long __p_handle, ::Ice::Long __p_index, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllFileSectors(__p_handle, __p_index, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllFileSectors(::Ice::Long __p_handle, ::Ice::Long __p_index, const ::IMG::Callback_ImgService_getAllFileSectorsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllFileSectors(__p_handle, __p_index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllFileSectors(::Ice::Long __p_handle, ::Ice::Long __p_index, const ::Ice::Context& __ctx, const ::IMG::Callback_ImgService_getAllFileSectorsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAllFileSectors(__p_handle, __p_index, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_getAllFileSectors(::IMG::FileSectors& __p_sectors, bool& __p_finish, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long getAllFileSectors(::Ice::Long, ::Ice::Long, ::IMG::FileSectors&, bool&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAllFileSectors(::Ice::Long, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int read(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, ::IMG::BinaryStream& __p_data)
    {
        return read(__p_handle, __p_byteOffset, __p_byteSize, __p_data, 0);
    }
    ::Ice::Int read(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, ::IMG::BinaryStream& __p_data, const ::Ice::Context& __ctx)
    {
        return read(__p_handle, __p_byteOffset, __p_byteSize, __p_data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_read(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::IceInternal::Function<void (::Ice::Int, const ::IMG::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_read(__p_handle, __p_byteOffset, __p_byteSize, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_read(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_read(__p_handle, __p_byteOffset, __p_byteSize, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_read(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::IMG::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_read(__p_handle, __p_byteOffset, __p_byteSize, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_read(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_read(__p_handle, __p_byteOffset, __p_byteSize, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_read(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::IMG::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_read(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize)
    {
        return begin_read(__p_handle, __p_byteOffset, __p_byteSize, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::Ice::Context& __ctx)
    {
        return begin_read(__p_handle, __p_byteOffset, __p_byteSize, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(__p_handle, __p_byteOffset, __p_byteSize, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(__p_handle, __p_byteOffset, __p_byteSize, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::IMG::Callback_ImgService_readPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(__p_handle, __p_byteOffset, __p_byteSize, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_read(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::Ice::Context& __ctx, const ::IMG::Callback_ImgService_readPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(__p_handle, __p_byteOffset, __p_byteSize, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_read(::IMG::BinaryStream& __p_data, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int read(::Ice::Long, ::Ice::Long, ::Ice::Int, ::IMG::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_read(::Ice::Long, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int readEx(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, ::IMG::BinaryStream& __p_data)
    {
        return readEx(__p_handle, __p_byteOffset, __p_byteSize, __p_data, 0);
    }
    ::Ice::Int readEx(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, ::IMG::BinaryStream& __p_data, const ::Ice::Context& __ctx)
    {
        return readEx(__p_handle, __p_byteOffset, __p_byteSize, __p_data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_readEx(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::IceInternal::Function<void (::Ice::Int, const ::IMG::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_readEx(__p_handle, __p_byteOffset, __p_byteSize, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_readEx(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_readEx(__p_handle, __p_byteOffset, __p_byteSize, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_readEx(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::IMG::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_readEx(__p_handle, __p_byteOffset, __p_byteSize, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_readEx(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_readEx(__p_handle, __p_byteOffset, __p_byteSize, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_readEx(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::IMG::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_readEx(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize)
    {
        return begin_readEx(__p_handle, __p_byteOffset, __p_byteSize, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readEx(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::Ice::Context& __ctx)
    {
        return begin_readEx(__p_handle, __p_byteOffset, __p_byteSize, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readEx(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readEx(__p_handle, __p_byteOffset, __p_byteSize, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readEx(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readEx(__p_handle, __p_byteOffset, __p_byteSize, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readEx(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::IMG::Callback_ImgService_readExPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readEx(__p_handle, __p_byteOffset, __p_byteSize, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readEx(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, ::Ice::Int __p_byteSize, const ::Ice::Context& __ctx, const ::IMG::Callback_ImgService_readExPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readEx(__p_handle, __p_byteOffset, __p_byteSize, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_readEx(::IMG::BinaryStream& __p_data, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int readEx(::Ice::Long, ::Ice::Long, ::Ice::Int, ::IMG::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_readEx(::Ice::Long, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int write(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data)
    {
        return write(__p_handle, __p_byteOffset, __p_data, 0);
    }
    ::Ice::Int write(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, const ::Ice::Context& __ctx)
    {
        return write(__p_handle, __p_byteOffset, __p_data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_write(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_write(__p_handle, __p_byteOffset, __p_data, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_write(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_write(__p_handle, __p_byteOffset, __p_data, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_write(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_write(__p_handle, __p_byteOffset, __p_data, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_write(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_write(__p_handle, __p_byteOffset, __p_data, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_write(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_write(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data)
    {
        return begin_write(__p_handle, __p_byteOffset, __p_data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_write(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, const ::Ice::Context& __ctx)
    {
        return begin_write(__p_handle, __p_byteOffset, __p_data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_write(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_write(__p_handle, __p_byteOffset, __p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_write(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_write(__p_handle, __p_byteOffset, __p_data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_write(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, const ::IMG::Callback_ImgService_writePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_write(__p_handle, __p_byteOffset, __p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_write(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, const ::Ice::Context& __ctx, const ::IMG::Callback_ImgService_writePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_write(__p_handle, __p_byteOffset, __p_data, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_write(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int write(::Ice::Long, ::Ice::Long, const ::IMG::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_write(::Ice::Long, ::Ice::Long, const ::IMG::BinaryStream&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int writeCdp(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota)
    {
        return writeCdp(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, 0);
    }
    ::Ice::Int writeCdp(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, const ::Ice::Context& __ctx)
    {
        return writeCdp(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_writeCdp(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_writeCdp(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_writeCdp(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writeCdp(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_writeCdp(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_writeCdp(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_writeCdp(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writeCdp(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_writeCdp(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_writeCdp(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota)
    {
        return begin_writeCdp(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeCdp(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, const ::Ice::Context& __ctx)
    {
        return begin_writeCdp(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeCdp(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeCdp(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeCdp(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeCdp(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeCdp(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, const ::IMG::Callback_ImgService_writeCdpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeCdp(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeCdp(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, const ::Ice::Context& __ctx, const ::IMG::Callback_ImgService_writeCdpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeCdp(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_writeCdp(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int writeCdp(::Ice::Long, ::Ice::Long, const ::IMG::BinaryStream&, bool, ::Ice::Long, ::Ice::Int, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeCdp(::Ice::Long, ::Ice::Long, const ::IMG::BinaryStream&, bool, ::Ice::Long, ::Ice::Int, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int writeCdpByIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2)
    {
        return writeCdpByIndex(__p_handle, __p_byteOffset, __p_data, __p_index, __p_rev1, __p_rev2, 0);
    }
    ::Ice::Int writeCdpByIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context& __ctx)
    {
        return writeCdpByIndex(__p_handle, __p_byteOffset, __p_data, __p_index, __p_rev1, __p_rev2, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_writeCdpByIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_writeCdpByIndex(__p_handle, __p_byteOffset, __p_data, __p_index, __p_rev1, __p_rev2, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_writeCdpByIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writeCdpByIndex(__p_handle, __p_byteOffset, __p_data, __p_index, __p_rev1, __p_rev2, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_writeCdpByIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_writeCdpByIndex(__p_handle, __p_byteOffset, __p_data, __p_index, __p_rev1, __p_rev2, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_writeCdpByIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writeCdpByIndex(__p_handle, __p_byteOffset, __p_data, __p_index, __p_rev1, __p_rev2, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_writeCdpByIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_writeCdpByIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2)
    {
        return begin_writeCdpByIndex(__p_handle, __p_byteOffset, __p_data, __p_index, __p_rev1, __p_rev2, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeCdpByIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context& __ctx)
    {
        return begin_writeCdpByIndex(__p_handle, __p_byteOffset, __p_data, __p_index, __p_rev1, __p_rev2, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeCdpByIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeCdpByIndex(__p_handle, __p_byteOffset, __p_data, __p_index, __p_rev1, __p_rev2, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeCdpByIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeCdpByIndex(__p_handle, __p_byteOffset, __p_data, __p_index, __p_rev1, __p_rev2, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeCdpByIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::IMG::Callback_ImgService_writeCdpByIndexPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeCdpByIndex(__p_handle, __p_byteOffset, __p_data, __p_index, __p_rev1, __p_rev2, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeCdpByIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context& __ctx, const ::IMG::Callback_ImgService_writeCdpByIndexPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeCdpByIndex(__p_handle, __p_byteOffset, __p_data, __p_index, __p_rev1, __p_rev2, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_writeCdpByIndex(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int writeCdpByIndex(::Ice::Long, ::Ice::Long, const ::IMG::BinaryStream&, ::Ice::Long, ::Ice::Long, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeCdpByIndex(::Ice::Long, ::Ice::Long, const ::IMG::BinaryStream&, ::Ice::Long, ::Ice::Long, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int writeCdpByTmeAndIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2)
    {
        return writeCdpByTmeAndIndex(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, __p_index, __p_rev1, __p_rev2, 0);
    }
    ::Ice::Int writeCdpByTmeAndIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context& __ctx)
    {
        return writeCdpByTmeAndIndex(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, __p_index, __p_rev1, __p_rev2, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_writeCdpByTmeAndIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_writeCdpByTmeAndIndex(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, __p_index, __p_rev1, __p_rev2, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_writeCdpByTmeAndIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writeCdpByTmeAndIndex(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, __p_index, __p_rev1, __p_rev2, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_writeCdpByTmeAndIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_writeCdpByTmeAndIndex(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, __p_index, __p_rev1, __p_rev2, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_writeCdpByTmeAndIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writeCdpByTmeAndIndex(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, __p_index, __p_rev1, __p_rev2, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_writeCdpByTmeAndIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_writeCdpByTmeAndIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2)
    {
        return begin_writeCdpByTmeAndIndex(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, __p_index, __p_rev1, __p_rev2, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeCdpByTmeAndIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context& __ctx)
    {
        return begin_writeCdpByTmeAndIndex(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, __p_index, __p_rev1, __p_rev2, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeCdpByTmeAndIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeCdpByTmeAndIndex(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, __p_index, __p_rev1, __p_rev2, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeCdpByTmeAndIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeCdpByTmeAndIndex(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, __p_index, __p_rev1, __p_rev2, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeCdpByTmeAndIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::IMG::Callback_ImgService_writeCdpByTmeAndIndexPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeCdpByTmeAndIndex(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, __p_index, __p_rev1, __p_rev2, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeCdpByTmeAndIndex(::Ice::Long __p_handle, ::Ice::Long __p_byteOffset, const ::IMG::BinaryStream& __p_data, bool __p_enableTime, ::Ice::Long __p_timeSeconds, ::Ice::Int __p_timeMicroseconds, bool __p_IgnoreQuota, ::Ice::Long __p_index, ::Ice::Long __p_rev1, ::Ice::Long __p_rev2, const ::Ice::Context& __ctx, const ::IMG::Callback_ImgService_writeCdpByTmeAndIndexPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeCdpByTmeAndIndex(__p_handle, __p_byteOffset, __p_data, __p_enableTime, __p_timeSeconds, __p_timeMicroseconds, __p_IgnoreQuota, __p_index, __p_rev1, __p_rev2, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_writeCdpByTmeAndIndex(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int writeCdpByTmeAndIndex(::Ice::Long, ::Ice::Long, const ::IMG::BinaryStream&, bool, ::Ice::Long, ::Ice::Int, bool, ::Ice::Long, ::Ice::Long, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeCdpByTmeAndIndex(::Ice::Long, ::Ice::Long, const ::IMG::BinaryStream&, bool, ::Ice::Long, ::Ice::Int, bool, ::Ice::Long, ::Ice::Long, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void close(::Ice::Long __p_handle, bool __p_success)
    {
        close(__p_handle, __p_success, 0);
    }
    void close(::Ice::Long __p_handle, bool __p_success, const ::Ice::Context& __ctx)
    {
        close(__p_handle, __p_success, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_close(::Ice::Long __p_handle, bool __p_success, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_close(__p_handle, __p_success, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_close(::Ice::Long __p_handle, bool __p_success, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_close(__p_handle, __p_success, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_close(::Ice::Long __p_handle, bool __p_success, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_close(__p_handle, __p_success, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_close(::Ice::Long __p_handle, bool __p_success, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_close(__p_handle, __p_success, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_close(::Ice::Long __p_handle, bool __p_success, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_close(::Ice::Long __p_handle, bool __p_success)
    {
        return begin_close(__p_handle, __p_success, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_close(::Ice::Long __p_handle, bool __p_success, const ::Ice::Context& __ctx)
    {
        return begin_close(__p_handle, __p_success, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_close(::Ice::Long __p_handle, bool __p_success, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(__p_handle, __p_success, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_close(::Ice::Long __p_handle, bool __p_success, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(__p_handle, __p_success, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_close(::Ice::Long __p_handle, bool __p_success, const ::IMG::Callback_ImgService_closePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(__p_handle, __p_success, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_close(::Ice::Long __p_handle, bool __p_success, const ::Ice::Context& __ctx, const ::IMG::Callback_ImgService_closePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_close(__p_handle, __p_success, &__ctx, __del, __cookie);
    }

    void end_close(const ::Ice::AsyncResultPtr&);
    
private:

    void close(::Ice::Long, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_close(::Ice::Long, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Long GetSnSize(::Ice::Long __p_handle)
    {
        return GetSnSize(__p_handle, 0);
    }
    ::Ice::Long GetSnSize(::Ice::Long __p_handle, const ::Ice::Context& __ctx)
    {
        return GetSnSize(__p_handle, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetSnSize(::Ice::Long __p_handle, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetSnSize(__p_handle, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetSnSize(::Ice::Long __p_handle, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetSnSize(__p_handle, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetSnSize(::Ice::Long __p_handle, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetSnSize(__p_handle, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetSnSize(::Ice::Long __p_handle, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetSnSize(__p_handle, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetSnSize(::Ice::Long __p_handle, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetSnSize(::Ice::Long __p_handle)
    {
        return begin_GetSnSize(__p_handle, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetSnSize(::Ice::Long __p_handle, const ::Ice::Context& __ctx)
    {
        return begin_GetSnSize(__p_handle, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetSnSize(::Ice::Long __p_handle, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSnSize(__p_handle, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetSnSize(::Ice::Long __p_handle, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSnSize(__p_handle, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetSnSize(::Ice::Long __p_handle, const ::IMG::Callback_ImgService_GetSnSizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSnSize(__p_handle, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetSnSize(::Ice::Long __p_handle, const ::Ice::Context& __ctx, const ::IMG::Callback_ImgService_GetSnSizePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSnSize(__p_handle, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_GetSnSize(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long GetSnSize(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetSnSize(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int DelSnaport(const ::IMG::ImageSnapshotIdent& __p_ident)
    {
        return DelSnaport(__p_ident, 0);
    }
    ::Ice::Int DelSnaport(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context& __ctx)
    {
        return DelSnaport(__p_ident, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_DelSnaport(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_DelSnaport(__p_ident, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_DelSnaport(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_DelSnaport(__p_ident, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_DelSnaport(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_DelSnaport(__p_ident, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_DelSnaport(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_DelSnaport(__p_ident, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_DelSnaport(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_DelSnaport(const ::IMG::ImageSnapshotIdent& __p_ident)
    {
        return begin_DelSnaport(__p_ident, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DelSnaport(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context& __ctx)
    {
        return begin_DelSnaport(__p_ident, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DelSnaport(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DelSnaport(__p_ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DelSnaport(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DelSnaport(__p_ident, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DelSnaport(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IMG::Callback_ImgService_DelSnaportPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DelSnaport(__p_ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DelSnaport(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context& __ctx, const ::IMG::Callback_ImgService_DelSnaportPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DelSnaport(__p_ident, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_DelSnaport(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int DelSnaport(const ::IMG::ImageSnapshotIdent&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_DelSnaport(const ::IMG::ImageSnapshotIdent&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RenameSnapshot(const ::IMG::ImageSnapshotIdent& __p_ident, const ::std::string& __p_newSnapshot)
    {
        return RenameSnapshot(__p_ident, __p_newSnapshot, 0);
    }
    ::Ice::Int RenameSnapshot(const ::IMG::ImageSnapshotIdent& __p_ident, const ::std::string& __p_newSnapshot, const ::Ice::Context& __ctx)
    {
        return RenameSnapshot(__p_ident, __p_newSnapshot, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RenameSnapshot(const ::IMG::ImageSnapshotIdent& __p_ident, const ::std::string& __p_newSnapshot, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RenameSnapshot(__p_ident, __p_newSnapshot, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RenameSnapshot(const ::IMG::ImageSnapshotIdent& __p_ident, const ::std::string& __p_newSnapshot, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RenameSnapshot(__p_ident, __p_newSnapshot, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RenameSnapshot(const ::IMG::ImageSnapshotIdent& __p_ident, const ::std::string& __p_newSnapshot, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RenameSnapshot(__p_ident, __p_newSnapshot, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RenameSnapshot(const ::IMG::ImageSnapshotIdent& __p_ident, const ::std::string& __p_newSnapshot, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RenameSnapshot(__p_ident, __p_newSnapshot, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_RenameSnapshot(const ::IMG::ImageSnapshotIdent& __p_ident, const ::std::string& __p_newSnapshot, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_RenameSnapshot(const ::IMG::ImageSnapshotIdent& __p_ident, const ::std::string& __p_newSnapshot)
    {
        return begin_RenameSnapshot(__p_ident, __p_newSnapshot, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RenameSnapshot(const ::IMG::ImageSnapshotIdent& __p_ident, const ::std::string& __p_newSnapshot, const ::Ice::Context& __ctx)
    {
        return begin_RenameSnapshot(__p_ident, __p_newSnapshot, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RenameSnapshot(const ::IMG::ImageSnapshotIdent& __p_ident, const ::std::string& __p_newSnapshot, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RenameSnapshot(__p_ident, __p_newSnapshot, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RenameSnapshot(const ::IMG::ImageSnapshotIdent& __p_ident, const ::std::string& __p_newSnapshot, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RenameSnapshot(__p_ident, __p_newSnapshot, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RenameSnapshot(const ::IMG::ImageSnapshotIdent& __p_ident, const ::std::string& __p_newSnapshot, const ::IMG::Callback_ImgService_RenameSnapshotPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RenameSnapshot(__p_ident, __p_newSnapshot, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RenameSnapshot(const ::IMG::ImageSnapshotIdent& __p_ident, const ::std::string& __p_newSnapshot, const ::Ice::Context& __ctx, const ::IMG::Callback_ImgService_RenameSnapshotPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RenameSnapshot(__p_ident, __p_newSnapshot, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RenameSnapshot(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RenameSnapshot(const ::IMG::ImageSnapshotIdent&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RenameSnapshot(const ::IMG::ImageSnapshotIdent&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& __p_ident)
    {
        return GetOnSnMapFile(__p_ident, 0);
    }
    ::std::string GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context& __ctx)
    {
        return GetOnSnMapFile(__p_ident, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetOnSnMapFile(__p_ident, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetOnSnMapFile(__p_ident, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetOnSnMapFile(__p_ident, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetOnSnMapFile(__p_ident, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& __p_ident)
    {
        return begin_GetOnSnMapFile(__p_ident, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context& __ctx)
    {
        return begin_GetOnSnMapFile(__p_ident, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetOnSnMapFile(__p_ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetOnSnMapFile(__p_ident, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& __p_ident, const ::IMG::Callback_ImgService_GetOnSnMapFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetOnSnMapFile(__p_ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetOnSnMapFile(const ::IMG::ImageSnapshotIdent& __p_ident, const ::Ice::Context& __ctx, const ::IMG::Callback_ImgService_GetOnSnMapFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetOnSnMapFile(__p_ident, &__ctx, __del, __cookie);
    }

    ::std::string end_GetOnSnMapFile(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string GetOnSnMapFile(const ::IMG::ImageSnapshotIdent&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetOnSnMapFile(const ::IMG::ImageSnapshotIdent&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ImgService> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_secure(bool __secure) const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_twoway() const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_oneway() const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_batchOneway() const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_datagram() const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_batchDatagram() const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_compress(bool __compress) const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ImgService> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ImgService*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IMG
{

class ImgService : virtual public ::Ice::Object
{
public:

    typedef ImgServicePrx ProxyType;
    typedef ImgServicePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Long create(const ::IMG::ImageSnapshotIdent&, const ::IMG::ImageSnapshotIdents&, ::Ice::Long, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___create(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int setUsedBlockBitmap(::Ice::Long, const ::IMG::BinaryStream&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setUsedBlockBitmap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int cleanUsedBlockBitmap(::Ice::Long, const ::IMG::BlockIndexes&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cleanUsedBlockBitmap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int setDuplicateFileSectors(::Ice::Long, const ::IMG::DuplicateFileSectors&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDuplicateFileSectors(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Long open(const ::IMG::ImageSnapshotIdents&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___open(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getTotalUesdBlockBitmap(::Ice::Long, ::Ice::Int, ::IMG::BinaryStream&, bool&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getTotalUesdBlockBitmap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Long getAllFileSectors(::Ice::Long, ::Ice::Long, ::IMG::FileSectors&, bool&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAllFileSectors(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int read(::Ice::Long, ::Ice::Long, ::Ice::Int, ::IMG::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___read(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int readEx(::Ice::Long, ::Ice::Long, ::Ice::Int, ::IMG::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___readEx(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int write(::Ice::Long, ::Ice::Long, const ::IMG::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___write(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int writeCdp(::Ice::Long, ::Ice::Long, const ::IMG::BinaryStream&, bool, ::Ice::Long, ::Ice::Int, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeCdp(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int writeCdpByIndex(::Ice::Long, ::Ice::Long, const ::IMG::BinaryStream&, ::Ice::Long, ::Ice::Long, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeCdpByIndex(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int writeCdpByTmeAndIndex(::Ice::Long, ::Ice::Long, const ::IMG::BinaryStream&, bool, ::Ice::Long, ::Ice::Int, bool, ::Ice::Long, ::Ice::Long, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeCdpByTmeAndIndex(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void close(::Ice::Long, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___close(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Long GetSnSize(::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetSnSize(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int DelSnaport(const ::IMG::ImageSnapshotIdent&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___DelSnaport(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int RenameSnapshot(const ::IMG::ImageSnapshotIdent&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RenameSnapshot(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string GetOnSnMapFile(const ::IMG::ImageSnapshotIdent&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetOnSnMapFile(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const ImgService& l, const ImgService& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ImgService& l, const ImgService& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace IMG
{

template<class T>
class CallbackNC_ImgService_create : public Callback_ImgService_create_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_ImgService_create(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_create(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ImgService_createPtr
newCallback_ImgService_create(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_create<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgService_createPtr
newCallback_ImgService_create(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_create<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgService_create : public Callback_ImgService_create_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_ImgService_create(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_create(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ImgService_createPtr
newCallback_ImgService_create(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_create<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_createPtr
newCallback_ImgService_create(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_create<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgService_setUsedBlockBitmap : public Callback_ImgService_setUsedBlockBitmap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_ImgService_setUsedBlockBitmap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setUsedBlockBitmap(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ImgService_setUsedBlockBitmapPtr
newCallback_ImgService_setUsedBlockBitmap(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_setUsedBlockBitmap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgService_setUsedBlockBitmapPtr
newCallback_ImgService_setUsedBlockBitmap(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_setUsedBlockBitmap<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgService_setUsedBlockBitmap : public Callback_ImgService_setUsedBlockBitmap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_ImgService_setUsedBlockBitmap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setUsedBlockBitmap(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ImgService_setUsedBlockBitmapPtr
newCallback_ImgService_setUsedBlockBitmap(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_setUsedBlockBitmap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_setUsedBlockBitmapPtr
newCallback_ImgService_setUsedBlockBitmap(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_setUsedBlockBitmap<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgService_cleanUsedBlockBitmap : public Callback_ImgService_cleanUsedBlockBitmap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_ImgService_cleanUsedBlockBitmap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_cleanUsedBlockBitmap(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ImgService_cleanUsedBlockBitmapPtr
newCallback_ImgService_cleanUsedBlockBitmap(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_cleanUsedBlockBitmap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgService_cleanUsedBlockBitmapPtr
newCallback_ImgService_cleanUsedBlockBitmap(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_cleanUsedBlockBitmap<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgService_cleanUsedBlockBitmap : public Callback_ImgService_cleanUsedBlockBitmap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_ImgService_cleanUsedBlockBitmap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_cleanUsedBlockBitmap(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ImgService_cleanUsedBlockBitmapPtr
newCallback_ImgService_cleanUsedBlockBitmap(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_cleanUsedBlockBitmap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_cleanUsedBlockBitmapPtr
newCallback_ImgService_cleanUsedBlockBitmap(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_cleanUsedBlockBitmap<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgService_setDuplicateFileSectors : public Callback_ImgService_setDuplicateFileSectors_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_ImgService_setDuplicateFileSectors(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setDuplicateFileSectors(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ImgService_setDuplicateFileSectorsPtr
newCallback_ImgService_setDuplicateFileSectors(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_setDuplicateFileSectors<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgService_setDuplicateFileSectorsPtr
newCallback_ImgService_setDuplicateFileSectors(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_setDuplicateFileSectors<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgService_setDuplicateFileSectors : public Callback_ImgService_setDuplicateFileSectors_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_ImgService_setDuplicateFileSectors(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setDuplicateFileSectors(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ImgService_setDuplicateFileSectorsPtr
newCallback_ImgService_setDuplicateFileSectors(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_setDuplicateFileSectors<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_setDuplicateFileSectorsPtr
newCallback_ImgService_setDuplicateFileSectors(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_setDuplicateFileSectors<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgService_open : public Callback_ImgService_open_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_ImgService_open(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_open(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ImgService_openPtr
newCallback_ImgService_open(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_open<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgService_openPtr
newCallback_ImgService_open(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_open<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgService_open : public Callback_ImgService_open_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_ImgService_open(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_open(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ImgService_openPtr
newCallback_ImgService_open(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_open<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_openPtr
newCallback_ImgService_open(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_open<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgService_getTotalUesdBlockBitmap : public Callback_ImgService_getTotalUesdBlockBitmap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::IMG::BinaryStream&, bool);

    CallbackNC_ImgService_getTotalUesdBlockBitmap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::IMG::BinaryStream bitmap;
        bool finish;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getTotalUesdBlockBitmap(bitmap, finish, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, bitmap, finish);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ImgService_getTotalUesdBlockBitmapPtr
newCallback_ImgService_getTotalUesdBlockBitmap(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::IMG::BinaryStream&, bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_getTotalUesdBlockBitmap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgService_getTotalUesdBlockBitmapPtr
newCallback_ImgService_getTotalUesdBlockBitmap(T* instance, void (T::*cb)(::Ice::Int, const ::IMG::BinaryStream&, bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_getTotalUesdBlockBitmap<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgService_getTotalUesdBlockBitmap : public Callback_ImgService_getTotalUesdBlockBitmap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::IMG::BinaryStream&, bool, const CT&);

    Callback_ImgService_getTotalUesdBlockBitmap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::IMG::BinaryStream bitmap;
        bool finish;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getTotalUesdBlockBitmap(bitmap, finish, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, bitmap, finish, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ImgService_getTotalUesdBlockBitmapPtr
newCallback_ImgService_getTotalUesdBlockBitmap(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::IMG::BinaryStream&, bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_getTotalUesdBlockBitmap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_getTotalUesdBlockBitmapPtr
newCallback_ImgService_getTotalUesdBlockBitmap(T* instance, void (T::*cb)(::Ice::Int, const ::IMG::BinaryStream&, bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_getTotalUesdBlockBitmap<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgService_getAllFileSectors : public Callback_ImgService_getAllFileSectors_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long, const ::IMG::FileSectors&, bool);

    CallbackNC_ImgService_getAllFileSectors(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::IMG::FileSectors sectors;
        bool finish;
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_getAllFileSectors(sectors, finish, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, sectors, finish);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ImgService_getAllFileSectorsPtr
newCallback_ImgService_getAllFileSectors(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const ::IMG::FileSectors&, bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_getAllFileSectors<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgService_getAllFileSectorsPtr
newCallback_ImgService_getAllFileSectors(T* instance, void (T::*cb)(::Ice::Long, const ::IMG::FileSectors&, bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_getAllFileSectors<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgService_getAllFileSectors : public Callback_ImgService_getAllFileSectors_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const ::IMG::FileSectors&, bool, const CT&);

    Callback_ImgService_getAllFileSectors(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::IMG::FileSectors sectors;
        bool finish;
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_getAllFileSectors(sectors, finish, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, sectors, finish, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ImgService_getAllFileSectorsPtr
newCallback_ImgService_getAllFileSectors(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const ::IMG::FileSectors&, bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_getAllFileSectors<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_getAllFileSectorsPtr
newCallback_ImgService_getAllFileSectors(T* instance, void (T::*cb)(::Ice::Long, const ::IMG::FileSectors&, bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_getAllFileSectors<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgService_read : public Callback_ImgService_read_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::IMG::BinaryStream&);

    CallbackNC_ImgService_read(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::IMG::BinaryStream data;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_read(data, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, data);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ImgService_readPtr
newCallback_ImgService_read(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::IMG::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_read<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgService_readPtr
newCallback_ImgService_read(T* instance, void (T::*cb)(::Ice::Int, const ::IMG::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_read<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgService_read : public Callback_ImgService_read_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::IMG::BinaryStream&, const CT&);

    Callback_ImgService_read(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::IMG::BinaryStream data;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_read(data, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, data, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ImgService_readPtr
newCallback_ImgService_read(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::IMG::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_read<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_readPtr
newCallback_ImgService_read(T* instance, void (T::*cb)(::Ice::Int, const ::IMG::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_read<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgService_readEx : public Callback_ImgService_readEx_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::IMG::BinaryStream&);

    CallbackNC_ImgService_readEx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::IMG::BinaryStream data;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_readEx(data, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, data);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ImgService_readExPtr
newCallback_ImgService_readEx(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::IMG::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_readEx<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgService_readExPtr
newCallback_ImgService_readEx(T* instance, void (T::*cb)(::Ice::Int, const ::IMG::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_readEx<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgService_readEx : public Callback_ImgService_readEx_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::IMG::BinaryStream&, const CT&);

    Callback_ImgService_readEx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::IMG::BinaryStream data;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_readEx(data, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, data, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ImgService_readExPtr
newCallback_ImgService_readEx(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::IMG::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_readEx<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_readExPtr
newCallback_ImgService_readEx(T* instance, void (T::*cb)(::Ice::Int, const ::IMG::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_readEx<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgService_write : public Callback_ImgService_write_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_ImgService_write(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_write(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ImgService_writePtr
newCallback_ImgService_write(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_write<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgService_writePtr
newCallback_ImgService_write(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_write<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgService_write : public Callback_ImgService_write_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_ImgService_write(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_write(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ImgService_writePtr
newCallback_ImgService_write(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_write<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_writePtr
newCallback_ImgService_write(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_write<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgService_writeCdp : public Callback_ImgService_writeCdp_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_ImgService_writeCdp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_writeCdp(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ImgService_writeCdpPtr
newCallback_ImgService_writeCdp(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_writeCdp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgService_writeCdpPtr
newCallback_ImgService_writeCdp(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_writeCdp<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgService_writeCdp : public Callback_ImgService_writeCdp_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_ImgService_writeCdp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_writeCdp(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ImgService_writeCdpPtr
newCallback_ImgService_writeCdp(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_writeCdp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_writeCdpPtr
newCallback_ImgService_writeCdp(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_writeCdp<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgService_writeCdpByIndex : public Callback_ImgService_writeCdpByIndex_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_ImgService_writeCdpByIndex(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_writeCdpByIndex(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ImgService_writeCdpByIndexPtr
newCallback_ImgService_writeCdpByIndex(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_writeCdpByIndex<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgService_writeCdpByIndexPtr
newCallback_ImgService_writeCdpByIndex(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_writeCdpByIndex<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgService_writeCdpByIndex : public Callback_ImgService_writeCdpByIndex_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_ImgService_writeCdpByIndex(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_writeCdpByIndex(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ImgService_writeCdpByIndexPtr
newCallback_ImgService_writeCdpByIndex(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_writeCdpByIndex<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_writeCdpByIndexPtr
newCallback_ImgService_writeCdpByIndex(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_writeCdpByIndex<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgService_writeCdpByTmeAndIndex : public Callback_ImgService_writeCdpByTmeAndIndex_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_ImgService_writeCdpByTmeAndIndex(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_writeCdpByTmeAndIndex(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ImgService_writeCdpByTmeAndIndexPtr
newCallback_ImgService_writeCdpByTmeAndIndex(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_writeCdpByTmeAndIndex<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgService_writeCdpByTmeAndIndexPtr
newCallback_ImgService_writeCdpByTmeAndIndex(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_writeCdpByTmeAndIndex<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgService_writeCdpByTmeAndIndex : public Callback_ImgService_writeCdpByTmeAndIndex_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_ImgService_writeCdpByTmeAndIndex(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_writeCdpByTmeAndIndex(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ImgService_writeCdpByTmeAndIndexPtr
newCallback_ImgService_writeCdpByTmeAndIndex(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_writeCdpByTmeAndIndex<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_writeCdpByTmeAndIndexPtr
newCallback_ImgService_writeCdpByTmeAndIndex(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_writeCdpByTmeAndIndex<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgService_close : public Callback_ImgService_close_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ImgService_close(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_close(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ImgService_closePtr
newCallback_ImgService_close(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_close<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgService_closePtr
newCallback_ImgService_close(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_close<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ImgService_closePtr
newCallback_ImgService_close(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_close<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgService_closePtr
newCallback_ImgService_close(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_close<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgService_close : public Callback_ImgService_close_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ImgService_close(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_close(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ImgService_closePtr
newCallback_ImgService_close(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_close<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_closePtr
newCallback_ImgService_close(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_close<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_closePtr
newCallback_ImgService_close(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_close<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_closePtr
newCallback_ImgService_close(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_close<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ImgService_GetSnSize : public Callback_ImgService_GetSnSize_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_ImgService_GetSnSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_GetSnSize(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ImgService_GetSnSizePtr
newCallback_ImgService_GetSnSize(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_GetSnSize<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgService_GetSnSizePtr
newCallback_ImgService_GetSnSize(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_GetSnSize<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgService_GetSnSize : public Callback_ImgService_GetSnSize_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_ImgService_GetSnSize(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_GetSnSize(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ImgService_GetSnSizePtr
newCallback_ImgService_GetSnSize(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_GetSnSize<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_GetSnSizePtr
newCallback_ImgService_GetSnSize(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_GetSnSize<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgService_DelSnaport : public Callback_ImgService_DelSnaport_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_ImgService_DelSnaport(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_DelSnaport(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ImgService_DelSnaportPtr
newCallback_ImgService_DelSnaport(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_DelSnaport<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgService_DelSnaportPtr
newCallback_ImgService_DelSnaport(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_DelSnaport<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgService_DelSnaport : public Callback_ImgService_DelSnaport_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_ImgService_DelSnaport(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_DelSnaport(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ImgService_DelSnaportPtr
newCallback_ImgService_DelSnaport(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_DelSnaport<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_DelSnaportPtr
newCallback_ImgService_DelSnaport(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_DelSnaport<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgService_RenameSnapshot : public Callback_ImgService_RenameSnapshot_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_ImgService_RenameSnapshot(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RenameSnapshot(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ImgService_RenameSnapshotPtr
newCallback_ImgService_RenameSnapshot(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_RenameSnapshot<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgService_RenameSnapshotPtr
newCallback_ImgService_RenameSnapshot(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_RenameSnapshot<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgService_RenameSnapshot : public Callback_ImgService_RenameSnapshot_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_ImgService_RenameSnapshot(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RenameSnapshot(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ImgService_RenameSnapshotPtr
newCallback_ImgService_RenameSnapshot(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_RenameSnapshot<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_RenameSnapshotPtr
newCallback_ImgService_RenameSnapshot(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_RenameSnapshot<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ImgService_GetOnSnMapFile : public Callback_ImgService_GetOnSnMapFile_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_ImgService_GetOnSnMapFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_GetOnSnMapFile(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ImgService_GetOnSnMapFilePtr
newCallback_ImgService_GetOnSnMapFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_GetOnSnMapFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ImgService_GetOnSnMapFilePtr
newCallback_ImgService_GetOnSnMapFile(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImgService_GetOnSnMapFile<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ImgService_GetOnSnMapFile : public Callback_ImgService_GetOnSnMapFile_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_ImgService_GetOnSnMapFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IMG::ImgServicePrx __proxy = ::IMG::ImgServicePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_GetOnSnMapFile(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ImgService_GetOnSnMapFilePtr
newCallback_ImgService_GetOnSnMapFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_GetOnSnMapFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ImgService_GetOnSnMapFilePtr
newCallback_ImgService_GetOnSnMapFile(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImgService_GetOnSnMapFile<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif

// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `duplicate_file.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <duplicate_file.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __DuplicateFilePool__UpdateProgressReceiver__ReportProgess_name = "ReportProgess";

const ::std::string __DuplicateFilePool__FilePool__update_name = "update";

const ::std::string __DuplicateFilePool__FilePool__queryFilesFromClient_name = "queryFilesFromClient";

const ::std::string __DuplicateFilePool__FilePool__readFile_name = "readFile";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::DuplicateFilePool::upCast(::IceProxy::DuplicateFilePool::UpdateProgressReceiver* p) { return p; }

void
::IceProxy::DuplicateFilePool::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::DuplicateFilePool::UpdateProgressReceiver>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::DuplicateFilePool::UpdateProgressReceiver;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::DuplicateFilePool::UpdateProgressReceiver::ReportProgess(bool __p_finished, ::Ice::Long __p_totalFileNumber, ::Ice::Long __p_importedFileNumber, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __DuplicateFilePool__UpdateProgressReceiver__ReportProgess_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_finished);
        __os->write(__p_totalFileNumber);
        __os->write(__p_importedFileNumber);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::DuplicateFilePool::UpdateProgressReceiver::begin_ReportProgess(bool __p_finished, ::Ice::Long __p_totalFileNumber, ::Ice::Long __p_importedFileNumber, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DuplicateFilePool__UpdateProgressReceiver__ReportProgess_name, __del, __cookie);
    try
    {
        __result->prepare(__DuplicateFilePool__UpdateProgressReceiver__ReportProgess_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_finished);
        __os->write(__p_totalFileNumber);
        __os->write(__p_importedFileNumber);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::DuplicateFilePool::UpdateProgressReceiver::end_ReportProgess(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __DuplicateFilePool__UpdateProgressReceiver__ReportProgess_name);
}

const ::std::string&
IceProxy::DuplicateFilePool::UpdateProgressReceiver::ice_staticId()
{
    return ::DuplicateFilePool::UpdateProgressReceiver::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::DuplicateFilePool::UpdateProgressReceiver::__newInstance() const
{
    return new UpdateProgressReceiver;
}
::IceProxy::Ice::Object* ::IceProxy::DuplicateFilePool::upCast(::IceProxy::DuplicateFilePool::FilePool* p) { return p; }

void
::IceProxy::DuplicateFilePool::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::DuplicateFilePool::FilePool>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::DuplicateFilePool::FilePool;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::DuplicateFilePool::FilePool::update(const ::std::string& __p_path, const ::Ice::Identity& __p_ident, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DuplicateFilePool__FilePool__update_name);
    ::IceInternal::Outgoing __og(this, __DuplicateFilePool__FilePool__update_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_path);
        __os->write(__p_ident);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DuplicateFilePool::FilePool::begin_update(const ::std::string& __p_path, const ::Ice::Identity& __p_ident, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DuplicateFilePool__FilePool__update_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DuplicateFilePool__FilePool__update_name, __del, __cookie);
    try
    {
        __result->prepare(__DuplicateFilePool__FilePool__update_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_path);
        __os->write(__p_ident);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DuplicateFilePool::FilePool::__begin_update(const ::std::string& __p_path, const ::Ice::Identity& __p_ident, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DuplicateFilePool::FilePoolPrx __proxy = ::DuplicateFilePool::FilePoolPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_update(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_update(__p_path, __p_ident, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::DuplicateFilePool::FilePool::end_update(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DuplicateFilePool__FilePool__update_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::DuplicateFilePool::FilePool::queryFilesFromClient(const ::std::string& __p_inPath, const ::std::string& __p_outPath, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DuplicateFilePool__FilePool__queryFilesFromClient_name);
    ::IceInternal::Outgoing __og(this, __DuplicateFilePool__FilePool__queryFilesFromClient_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_inPath);
        __os->write(__p_outPath);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::DuplicateFilePool::FilePool::begin_queryFilesFromClient(const ::std::string& __p_inPath, const ::std::string& __p_outPath, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DuplicateFilePool__FilePool__queryFilesFromClient_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DuplicateFilePool__FilePool__queryFilesFromClient_name, __del, __cookie);
    try
    {
        __result->prepare(__DuplicateFilePool__FilePool__queryFilesFromClient_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_inPath);
        __os->write(__p_outPath);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DuplicateFilePool::FilePool::__begin_queryFilesFromClient(const ::std::string& __p_inPath, const ::std::string& __p_outPath, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DuplicateFilePool::FilePoolPrx __proxy = ::DuplicateFilePool::FilePoolPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_queryFilesFromClient(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_queryFilesFromClient(__p_inPath, __p_outPath, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::DuplicateFilePool::FilePool::end_queryFilesFromClient(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DuplicateFilePool__FilePool__queryFilesFromClient_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

::DuplicateFilePool::BinaryStream
IceProxy::DuplicateFilePool::FilePool::readFile(const ::std::string& __p_identInPool, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__DuplicateFilePool__FilePool__readFile_name);
    ::IceInternal::Outgoing __og(this, __DuplicateFilePool__FilePool__readFile_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_identInPool);
        __os->write(__p_byteOffset);
        __os->write(__p_bytes);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::DuplicateFilePool::BinaryStream __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::DuplicateFilePool::FilePool::begin_readFile(const ::std::string& __p_identInPool, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__DuplicateFilePool__FilePool__readFile_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __DuplicateFilePool__FilePool__readFile_name, __del, __cookie);
    try
    {
        __result->prepare(__DuplicateFilePool__FilePool__readFile_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_identInPool);
        __os->write(__p_byteOffset);
        __os->write(__p_bytes);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::DuplicateFilePool::FilePool::__begin_readFile(const ::std::string& __p_identInPool, ::Ice::Long __p_byteOffset, ::Ice::Int __p_bytes, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::DuplicateFilePool::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::DuplicateFilePool::BinaryStream&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::DuplicateFilePool::FilePoolPrx __proxy = ::DuplicateFilePool::FilePoolPrx::uncheckedCast(__result->getProxy());
            ::DuplicateFilePool::BinaryStream __ret;
            try
            {
                __ret = __proxy->end_readFile(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::DuplicateFilePool::BinaryStream&)> _response;
    };
    return begin_readFile(__p_identInPool, __p_byteOffset, __p_bytes, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::DuplicateFilePool::BinaryStream
IceProxy::DuplicateFilePool::FilePool::end_readFile(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __DuplicateFilePool__FilePool__readFile_name);
    ::DuplicateFilePool::BinaryStream __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::DuplicateFilePool::FilePool::ice_staticId()
{
    return ::DuplicateFilePool::FilePool::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::DuplicateFilePool::FilePool::__newInstance() const
{
    return new FilePool;
}

::Ice::Object* DuplicateFilePool::upCast(::DuplicateFilePool::UpdateProgressReceiver* p) { return p; }

namespace
{
const ::std::string __DuplicateFilePool__UpdateProgressReceiver_ids[2] =
{
    "::DuplicateFilePool::UpdateProgressReceiver",
    "::Ice::Object"
};

}

bool
DuplicateFilePool::UpdateProgressReceiver::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__DuplicateFilePool__UpdateProgressReceiver_ids, __DuplicateFilePool__UpdateProgressReceiver_ids + 2, _s);
}

::std::vector< ::std::string>
DuplicateFilePool::UpdateProgressReceiver::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__DuplicateFilePool__UpdateProgressReceiver_ids[0], &__DuplicateFilePool__UpdateProgressReceiver_ids[2]);
}

const ::std::string&
DuplicateFilePool::UpdateProgressReceiver::ice_id(const ::Ice::Current&) const
{
    return __DuplicateFilePool__UpdateProgressReceiver_ids[0];
}

const ::std::string&
DuplicateFilePool::UpdateProgressReceiver::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::DuplicateFilePool::UpdateProgressReceiver";
    return typeId;
#else
    return __DuplicateFilePool__UpdateProgressReceiver_ids[0];
#endif
}

::Ice::DispatchStatus
DuplicateFilePool::UpdateProgressReceiver::___ReportProgess(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    bool __p_finished;
    ::Ice::Long __p_totalFileNumber;
    ::Ice::Long __p_importedFileNumber;
    __is->read(__p_finished);
    __is->read(__p_totalFileNumber);
    __is->read(__p_importedFileNumber);
    __inS.endReadParams();
    ReportProgess(__p_finished, __p_totalFileNumber, __p_importedFileNumber, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __DuplicateFilePool__UpdateProgressReceiver_all[] =
{
    "ReportProgess",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
DuplicateFilePool::UpdateProgressReceiver::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__DuplicateFilePool__UpdateProgressReceiver_all, __DuplicateFilePool__UpdateProgressReceiver_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __DuplicateFilePool__UpdateProgressReceiver_all)
    {
        case 0:
        {
            return ___ReportProgess(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
DuplicateFilePool::UpdateProgressReceiver::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
DuplicateFilePool::UpdateProgressReceiver::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
DuplicateFilePool::__patch(UpdateProgressReceiverPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::DuplicateFilePool::UpdateProgressReceiverPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::DuplicateFilePool::UpdateProgressReceiver::ice_staticId(), v);
    }
}

::Ice::Object* DuplicateFilePool::upCast(::DuplicateFilePool::FilePool* p) { return p; }

namespace
{
const ::std::string __DuplicateFilePool__FilePool_ids[2] =
{
    "::DuplicateFilePool::FilePool",
    "::Ice::Object"
};

}

bool
DuplicateFilePool::FilePool::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__DuplicateFilePool__FilePool_ids, __DuplicateFilePool__FilePool_ids + 2, _s);
}

::std::vector< ::std::string>
DuplicateFilePool::FilePool::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__DuplicateFilePool__FilePool_ids[0], &__DuplicateFilePool__FilePool_ids[2]);
}

const ::std::string&
DuplicateFilePool::FilePool::ice_id(const ::Ice::Current&) const
{
    return __DuplicateFilePool__FilePool_ids[0];
}

const ::std::string&
DuplicateFilePool::FilePool::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::DuplicateFilePool::FilePool";
    return typeId;
#else
    return __DuplicateFilePool__FilePool_ids[0];
#endif
}

::Ice::DispatchStatus
DuplicateFilePool::FilePool::___update(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_path;
    ::Ice::Identity __p_ident;
    __is->read(__p_path);
    __is->read(__p_ident);
    __inS.endReadParams();
    try
    {
        update(__p_path, __p_ident, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DuplicateFilePool::FilePool::___queryFilesFromClient(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_inPath;
    ::std::string __p_outPath;
    __is->read(__p_inPath);
    __is->read(__p_outPath);
    __inS.endReadParams();
    try
    {
        queryFilesFromClient(__p_inPath, __p_outPath, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
DuplicateFilePool::FilePool::___readFile(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_identInPool;
    ::Ice::Long __p_byteOffset;
    ::Ice::Int __p_bytes;
    __is->read(__p_identInPool);
    __is->read(__p_byteOffset);
    __is->read(__p_bytes);
    __inS.endReadParams();
    try
    {
        ::DuplicateFilePool::BinaryStream __ret = readFile(__p_identInPool, __p_byteOffset, __p_bytes, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __DuplicateFilePool__FilePool_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "queryFilesFromClient",
    "readFile",
    "update"
};

}

::Ice::DispatchStatus
DuplicateFilePool::FilePool::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__DuplicateFilePool__FilePool_all, __DuplicateFilePool__FilePool_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __DuplicateFilePool__FilePool_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___queryFilesFromClient(in, current);
        }
        case 5:
        {
            return ___readFile(in, current);
        }
        case 6:
        {
            return ___update(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
DuplicateFilePool::FilePool::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
DuplicateFilePool::FilePool::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
DuplicateFilePool::__patch(FilePoolPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::DuplicateFilePool::FilePoolPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::DuplicateFilePool::FilePool::ice_staticId(), v);
    }
}

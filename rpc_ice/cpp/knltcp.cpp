// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `knltcp.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <knltcp.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __KTService__KTS__ping_name = "ping";

const ::std::string __KTService__KTS__update_name = "update";

const ::std::string __KTService__KTS__updateTrafficControl_name = "updateTrafficControl";

const ::std::string __KTService__KTS__refreshNetwork_name = "refreshNetwork";

const ::std::string __KTService__KTS__setPreReadBitmap_name = "setPreReadBitmap";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::KTService::upCast(::IceProxy::KTService::KTS* p) { return p; }

void
::IceProxy::KTService::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::KTService::KTS>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::KTService::KTS;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::KTService::KTS::ping(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __KTService__KTS__ping_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::KTService::KTS::begin_ping(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __KTService__KTS__ping_name, __del, __cookie);
    try
    {
        __result->prepare(__KTService__KTS__ping_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::KTService::KTS::end_ping(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __KTService__KTS__ping_name);
}

void
IceProxy::KTService::KTS::update(const ::KTService::Token& __p_token, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__KTService__KTS__update_name);
    ::IceInternal::Outgoing __og(this, __KTService__KTS__update_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_token);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::KTService::KTS::begin_update(const ::KTService::Token& __p_token, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__KTService__KTS__update_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __KTService__KTS__update_name, __del, __cookie);
    try
    {
        __result->prepare(__KTService__KTS__update_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_token);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::KTService::KTS::__begin_update(const ::KTService::Token& __p_token, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::KTService::KTSPrx __proxy = ::KTService::KTSPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_update(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_update(__p_token, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::KTService::KTS::end_update(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __KTService__KTS__update_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::KTService::KTS::updateTrafficControl(::Ice::Long __p_ioSession, const ::std::string& __p_ident, ::Ice::Int __p_kiloBytesPerSecond, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__KTService__KTS__updateTrafficControl_name);
    ::IceInternal::Outgoing __og(this, __KTService__KTS__updateTrafficControl_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ioSession);
        __os->write(__p_ident);
        __os->write(__p_kiloBytesPerSecond);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::KTService::KTS::begin_updateTrafficControl(::Ice::Long __p_ioSession, const ::std::string& __p_ident, ::Ice::Int __p_kiloBytesPerSecond, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__KTService__KTS__updateTrafficControl_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __KTService__KTS__updateTrafficControl_name, __del, __cookie);
    try
    {
        __result->prepare(__KTService__KTS__updateTrafficControl_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ioSession);
        __os->write(__p_ident);
        __os->write(__p_kiloBytesPerSecond);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::KTService::KTS::__begin_updateTrafficControl(::Ice::Long __p_ioSession, const ::std::string& __p_ident, ::Ice::Int __p_kiloBytesPerSecond, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::KTService::KTSPrx __proxy = ::KTService::KTSPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_updateTrafficControl(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_updateTrafficControl(__p_ioSession, __p_ident, __p_kiloBytesPerSecond, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::KTService::KTS::end_updateTrafficControl(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __KTService__KTS__updateTrafficControl_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::KTService::KTS::refreshNetwork(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __KTService__KTS__refreshNetwork_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::KTService::KTS::begin_refreshNetwork(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __KTService__KTS__refreshNetwork_name, __del, __cookie);
    try
    {
        __result->prepare(__KTService__KTS__refreshNetwork_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::KTService::KTS::end_refreshNetwork(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __KTService__KTS__refreshNetwork_name);
}

void
IceProxy::KTService::KTS::setPreReadBitmap(const ::KTService::Token& __p_token, ::Ice::Long __p_index, const ::KTService::BinaryStream& __p_bitmap, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__KTService__KTS__setPreReadBitmap_name);
    ::IceInternal::Outgoing __og(this, __KTService__KTS__setPreReadBitmap_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_token);
        __os->write(__p_index);
        __os->write(__p_bitmap);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::KTService::KTS::begin_setPreReadBitmap(const ::KTService::Token& __p_token, ::Ice::Long __p_index, const ::KTService::BinaryStream& __p_bitmap, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__KTService__KTS__setPreReadBitmap_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __KTService__KTS__setPreReadBitmap_name, __del, __cookie);
    try
    {
        __result->prepare(__KTService__KTS__setPreReadBitmap_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_token);
        __os->write(__p_index);
        __os->write(__p_bitmap);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::KTService::KTS::__begin_setPreReadBitmap(const ::KTService::Token& __p_token, ::Ice::Long __p_index, const ::KTService::BinaryStream& __p_bitmap, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::KTService::KTSPrx __proxy = ::KTService::KTSPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_setPreReadBitmap(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::KTService::KTS::end_setPreReadBitmap(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __KTService__KTS__setPreReadBitmap_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Utils::SystemError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

const ::std::string&
IceProxy::KTService::KTS::ice_staticId()
{
    return ::KTService::KTS::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::KTService::KTS::__newInstance() const
{
    return new KTS;
}

::Ice::Object* KTService::upCast(::KTService::KTS* p) { return p; }

namespace
{
const ::std::string __KTService__KTS_ids[2] =
{
    "::Ice::Object",
    "::KTService::KTS"
};

}

bool
KTService::KTS::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__KTService__KTS_ids, __KTService__KTS_ids + 2, _s);
}

::std::vector< ::std::string>
KTService::KTS::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__KTService__KTS_ids[0], &__KTService__KTS_ids[2]);
}

const ::std::string&
KTService::KTS::ice_id(const ::Ice::Current&) const
{
    return __KTService__KTS_ids[1];
}

const ::std::string&
KTService::KTS::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::KTService::KTS";
    return typeId;
#else
    return __KTService__KTS_ids[1];
#endif
}

::Ice::DispatchStatus
KTService::KTS::___ping(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ping(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
KTService::KTS::___update(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::KTService::Token __p_token;
    __is->read(__p_token);
    __inS.endReadParams();
    try
    {
        update(__p_token, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
KTService::KTS::___updateTrafficControl(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Long __p_ioSession;
    ::std::string __p_ident;
    ::Ice::Int __p_kiloBytesPerSecond;
    __is->read(__p_ioSession);
    __is->read(__p_ident);
    __is->read(__p_kiloBytesPerSecond);
    __inS.endReadParams();
    try
    {
        updateTrafficControl(__p_ioSession, __p_ident, __p_kiloBytesPerSecond, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
KTService::KTS::___refreshNetwork(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    refreshNetwork(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
KTService::KTS::___setPreReadBitmap(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::KTService::Token __p_token;
    ::Ice::Long __p_index;
    ::KTService::BinaryStream __p_bitmap;
    __is->read(__p_token);
    __is->read(__p_index);
    __is->read(__p_bitmap);
    __inS.endReadParams();
    try
    {
        setPreReadBitmap(__p_token, __p_index, __p_bitmap, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Utils::SystemError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __KTService__KTS_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "ping",
    "refreshNetwork",
    "setPreReadBitmap",
    "update",
    "updateTrafficControl"
};

}

::Ice::DispatchStatus
KTService::KTS::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__KTService__KTS_all, __KTService__KTS_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __KTService__KTS_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___ping(in, current);
        }
        case 5:
        {
            return ___refreshNetwork(in, current);
        }
        case 6:
        {
            return ___setPreReadBitmap(in, current);
        }
        case 7:
        {
            return ___update(in, current);
        }
        case 8:
        {
            return ___updateTrafficControl(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
KTService::KTS::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
KTService::KTS::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
KTService::__patch(KTSPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::KTService::KTSPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::KTService::KTS::ice_staticId(), v);
    }
}

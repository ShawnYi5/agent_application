// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `vps_agent.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____cpp_vps_agent_h__
#define ____cpp_vps_agent_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/Identity.h>
#include <utils.h>
#include <img.h>
#include <logic.h>
#include <box_api.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace VpsAgent
{

class Services;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::VpsAgent::Services>&);
::IceProxy::Ice::Object* upCast(::IceProxy::VpsAgent::Services*);

class Backup;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::VpsAgent::Backup>&);
::IceProxy::Ice::Object* upCast(::IceProxy::VpsAgent::Backup*);

class Restore;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::VpsAgent::Restore>&);
::IceProxy::Ice::Object* upCast(::IceProxy::VpsAgent::Restore*);

class AgentReceiver;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::VpsAgent::AgentReceiver>&);
::IceProxy::Ice::Object* upCast(::IceProxy::VpsAgent::AgentReceiver*);

class Session;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::VpsAgent::Session>&);
::IceProxy::Ice::Object* upCast(::IceProxy::VpsAgent::Session*);

class SessionFactory;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::VpsAgent::SessionFactory>&);
::IceProxy::Ice::Object* upCast(::IceProxy::VpsAgent::SessionFactory*);

}

}

namespace VpsAgent
{

class Services;
bool operator==(const Services&, const Services&);
bool operator<(const Services&, const Services&);
::Ice::Object* upCast(::VpsAgent::Services*);
typedef ::IceInternal::Handle< ::VpsAgent::Services> ServicesPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::VpsAgent::Services> ServicesPrx;
void __patch(ServicesPtr&, const ::Ice::ObjectPtr&);

class Backup;
bool operator==(const Backup&, const Backup&);
bool operator<(const Backup&, const Backup&);
::Ice::Object* upCast(::VpsAgent::Backup*);
typedef ::IceInternal::Handle< ::VpsAgent::Backup> BackupPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::VpsAgent::Backup> BackupPrx;
void __patch(BackupPtr&, const ::Ice::ObjectPtr&);

class Restore;
bool operator==(const Restore&, const Restore&);
bool operator<(const Restore&, const Restore&);
::Ice::Object* upCast(::VpsAgent::Restore*);
typedef ::IceInternal::Handle< ::VpsAgent::Restore> RestorePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::VpsAgent::Restore> RestorePrx;
void __patch(RestorePtr&, const ::Ice::ObjectPtr&);

class AgentReceiver;
bool operator==(const AgentReceiver&, const AgentReceiver&);
bool operator<(const AgentReceiver&, const AgentReceiver&);
::Ice::Object* upCast(::VpsAgent::AgentReceiver*);
typedef ::IceInternal::Handle< ::VpsAgent::AgentReceiver> AgentReceiverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::VpsAgent::AgentReceiver> AgentReceiverPrx;
void __patch(AgentReceiverPtr&, const ::Ice::ObjectPtr&);

class Session;
bool operator==(const Session&, const Session&);
bool operator<(const Session&, const Session&);
::Ice::Object* upCast(::VpsAgent::Session*);
typedef ::IceInternal::Handle< ::VpsAgent::Session> SessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::VpsAgent::Session> SessionPrx;
void __patch(SessionPtr&, const ::Ice::ObjectPtr&);

class SessionFactory;
bool operator==(const SessionFactory&, const SessionFactory&);
bool operator<(const SessionFactory&, const SessionFactory&);
::Ice::Object* upCast(::VpsAgent::SessionFactory*);
typedef ::IceInternal::Handle< ::VpsAgent::SessionFactory> SessionFactoryPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::VpsAgent::SessionFactory> SessionFactoryPrx;
void __patch(SessionFactoryPtr&, const ::Ice::ObjectPtr&);

}

namespace VpsAgent
{

typedef ::std::vector< ::Ice::Byte> BinaryStream;

struct SectorRange
{
    ::Ice::Long startSectorOffset;
    ::Ice::Int numberOfSectors;

    bool operator==(const SectorRange& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(startSectorOffset != __rhs.startSectorOffset)
        {
            return false;
        }
        if(numberOfSectors != __rhs.numberOfSectors)
        {
            return false;
        }
        return true;
    }

    bool operator<(const SectorRange& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(startSectorOffset < __rhs.startSectorOffset)
        {
            return true;
        }
        else if(__rhs.startSectorOffset < startSectorOffset)
        {
            return false;
        }
        if(numberOfSectors < __rhs.numberOfSectors)
        {
            return true;
        }
        else if(__rhs.numberOfSectors < numberOfSectors)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const SectorRange& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const SectorRange& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const SectorRange& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const SectorRange& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct LargeSectorRange
{
    ::Ice::Long startSectorOffset;
    ::Ice::Long numberOfSectors;

    bool operator==(const LargeSectorRange& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(startSectorOffset != __rhs.startSectorOffset)
        {
            return false;
        }
        if(numberOfSectors != __rhs.numberOfSectors)
        {
            return false;
        }
        return true;
    }

    bool operator<(const LargeSectorRange& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(startSectorOffset < __rhs.startSectorOffset)
        {
            return true;
        }
        else if(__rhs.startSectorOffset < startSectorOffset)
        {
            return false;
        }
        if(numberOfSectors < __rhs.numberOfSectors)
        {
            return true;
        }
        else if(__rhs.numberOfSectors < numberOfSectors)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const LargeSectorRange& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const LargeSectorRange& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const LargeSectorRange& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const LargeSectorRange& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct DataLocation
{
    ::Ice::Int diskIndex;
    ::Ice::Int diskBlockOffset;

    bool operator==(const DataLocation& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(diskIndex != __rhs.diskIndex)
        {
            return false;
        }
        if(diskBlockOffset != __rhs.diskBlockOffset)
        {
            return false;
        }
        return true;
    }

    bool operator<(const DataLocation& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(diskIndex < __rhs.diskIndex)
        {
            return true;
        }
        else if(__rhs.diskIndex < diskIndex)
        {
            return false;
        }
        if(diskBlockOffset < __rhs.diskBlockOffset)
        {
            return true;
        }
        else if(__rhs.diskBlockOffset < diskBlockOffset)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const DataLocation& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const DataLocation& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const DataLocation& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const DataLocation& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct DataBlock
{
    ::VpsAgent::DataLocation location;
    ::VpsAgent::BinaryStream data;
};

struct PostSector
{
    ::Ice::Int type;
    ::Ice::Int diskIndex;
    ::Ice::Int byteOffsetInBuffer;
    ::Ice::Int numberOfByteInBuffer;
    ::Ice::Long sectorOffset;
    ::Ice::Short numberOfSectors;

    bool operator==(const PostSector& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(diskIndex != __rhs.diskIndex)
        {
            return false;
        }
        if(byteOffsetInBuffer != __rhs.byteOffsetInBuffer)
        {
            return false;
        }
        if(numberOfByteInBuffer != __rhs.numberOfByteInBuffer)
        {
            return false;
        }
        if(sectorOffset != __rhs.sectorOffset)
        {
            return false;
        }
        if(numberOfSectors != __rhs.numberOfSectors)
        {
            return false;
        }
        return true;
    }

    bool operator<(const PostSector& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(diskIndex < __rhs.diskIndex)
        {
            return true;
        }
        else if(__rhs.diskIndex < diskIndex)
        {
            return false;
        }
        if(byteOffsetInBuffer < __rhs.byteOffsetInBuffer)
        {
            return true;
        }
        else if(__rhs.byteOffsetInBuffer < byteOffsetInBuffer)
        {
            return false;
        }
        if(numberOfByteInBuffer < __rhs.numberOfByteInBuffer)
        {
            return true;
        }
        else if(__rhs.numberOfByteInBuffer < numberOfByteInBuffer)
        {
            return false;
        }
        if(sectorOffset < __rhs.sectorOffset)
        {
            return true;
        }
        else if(__rhs.sectorOffset < sectorOffset)
        {
            return false;
        }
        if(numberOfSectors < __rhs.numberOfSectors)
        {
            return true;
        }
        else if(__rhs.numberOfSectors < numberOfSectors)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const PostSector& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const PostSector& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const PostSector& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const PostSector& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::VpsAgent::PostSector> PostSectors;

struct PostExtData
{
    ::Ice::Int diskIndex;
    ::Ice::Long sectorOffset;
    ::Ice::Short numberOfSectors;
    ::Ice::Int extType;
    ::VpsAgent::BinaryStream extData;
};

typedef ::std::vector< ::VpsAgent::PostExtData> PostExtDataVector;

struct GetExtData
{
    ::Ice::Int diskIndex;
    ::Ice::Int extType;
    ::Ice::Long sectorOffset;
    ::Ice::Int bitCount;

    bool operator==(const GetExtData& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(diskIndex != __rhs.diskIndex)
        {
            return false;
        }
        if(extType != __rhs.extType)
        {
            return false;
        }
        if(sectorOffset != __rhs.sectorOffset)
        {
            return false;
        }
        if(bitCount != __rhs.bitCount)
        {
            return false;
        }
        return true;
    }

    bool operator<(const GetExtData& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(diskIndex < __rhs.diskIndex)
        {
            return true;
        }
        else if(__rhs.diskIndex < diskIndex)
        {
            return false;
        }
        if(extType < __rhs.extType)
        {
            return true;
        }
        else if(__rhs.extType < extType)
        {
            return false;
        }
        if(sectorOffset < __rhs.sectorOffset)
        {
            return true;
        }
        else if(__rhs.sectorOffset < sectorOffset)
        {
            return false;
        }
        if(bitCount < __rhs.bitCount)
        {
            return true;
        }
        else if(__rhs.bitCount < bitCount)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const GetExtData& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const GetExtData& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const GetExtData& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const GetExtData& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::VpsAgent::GetExtData> GetExtDataVector;

class AgentModuleError : public ::Utils::SystemError
{
public:

    AgentModuleError() {}
    AgentModuleError(const ::std::string&, const ::std::string&, ::Ice::Long, const ::std::string&);
    virtual ~AgentModuleError() throw();

    virtual ::std::string ice_name() const;
    virtual AgentModuleError* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string moduleName;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Utils::SystemError::__writeImpl;
    using ::Utils::SystemError::__readImpl;
};

static AgentModuleError __AgentModuleError_init;

struct SnapshotName
{
    SnapshotName() :
        startCDP(false)
    {
    }
    
    SnapshotName(::Ice::Int __ice_diskIndex, const ::std::string& __ice_diskIdent, const ::std::string& __ice_snapshot, bool __ice_startCDP, const ::BoxLogic::CDPConfig& __ice_cdpConfig) :
        diskIndex(__ice_diskIndex),
        diskIdent(__ice_diskIdent),
        snapshot(__ice_snapshot),
        startCDP(__ice_startCDP),
        cdpConfig(__ice_cdpConfig)
    {
    }
    

    ::Ice::Int diskIndex;
    ::std::string diskIdent;
    ::std::string snapshot;
    bool startCDP;
    ::BoxLogic::CDPConfig cdpConfig;

    bool operator==(const SnapshotName& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(diskIndex != __rhs.diskIndex)
        {
            return false;
        }
        if(diskIdent != __rhs.diskIdent)
        {
            return false;
        }
        if(snapshot != __rhs.snapshot)
        {
            return false;
        }
        if(startCDP != __rhs.startCDP)
        {
            return false;
        }
        if(cdpConfig != __rhs.cdpConfig)
        {
            return false;
        }
        return true;
    }

    bool operator<(const SnapshotName& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(diskIndex < __rhs.diskIndex)
        {
            return true;
        }
        else if(__rhs.diskIndex < diskIndex)
        {
            return false;
        }
        if(diskIdent < __rhs.diskIdent)
        {
            return true;
        }
        else if(__rhs.diskIdent < diskIdent)
        {
            return false;
        }
        if(snapshot < __rhs.snapshot)
        {
            return true;
        }
        else if(__rhs.snapshot < snapshot)
        {
            return false;
        }
        if(startCDP < __rhs.startCDP)
        {
            return true;
        }
        else if(__rhs.startCDP < startCDP)
        {
            return false;
        }
        if(cdpConfig < __rhs.cdpConfig)
        {
            return true;
        }
        else if(__rhs.cdpConfig < cdpConfig)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const SnapshotName& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const SnapshotName& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const SnapshotName& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const SnapshotName& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::VpsAgent::SnapshotName> SnapshotNames;

struct SnapshotConfig
{
    ::Ice::Int diskIndex;
    ::std::string jsonConfig;

    bool operator==(const SnapshotConfig& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(diskIndex != __rhs.diskIndex)
        {
            return false;
        }
        if(jsonConfig != __rhs.jsonConfig)
        {
            return false;
        }
        return true;
    }

    bool operator<(const SnapshotConfig& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(diskIndex < __rhs.diskIndex)
        {
            return true;
        }
        else if(__rhs.diskIndex < diskIndex)
        {
            return false;
        }
        if(jsonConfig < __rhs.jsonConfig)
        {
            return true;
        }
        else if(__rhs.jsonConfig < jsonConfig)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const SnapshotConfig& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const SnapshotConfig& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const SnapshotConfig& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const SnapshotConfig& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::VpsAgent::SnapshotConfig> SnapshotConfigs;

enum BackupErrorType
{
    SystemError = 1,
    SbdError = 2,
    NetError = 3,
    DriverError = 4
};

struct AgentIdentification
{
    ::BoxLogic::AgentIdentification ident;
    ::std::string Identity;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::VpsAgent::SectorRange>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::VpsAgent::SectorRange, S>
{
    static void write(S* __os, const ::VpsAgent::SectorRange& v)
    {
        __os->write(v.startSectorOffset);
        __os->write(v.numberOfSectors);
    }
};

template<class S>
struct StreamReader< ::VpsAgent::SectorRange, S>
{
    static void read(S* __is, ::VpsAgent::SectorRange& v)
    {
        __is->read(v.startSectorOffset);
        __is->read(v.numberOfSectors);
    }
};

template<>
struct StreamableTraits< ::VpsAgent::LargeSectorRange>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::VpsAgent::LargeSectorRange, S>
{
    static void write(S* __os, const ::VpsAgent::LargeSectorRange& v)
    {
        __os->write(v.startSectorOffset);
        __os->write(v.numberOfSectors);
    }
};

template<class S>
struct StreamReader< ::VpsAgent::LargeSectorRange, S>
{
    static void read(S* __is, ::VpsAgent::LargeSectorRange& v)
    {
        __is->read(v.startSectorOffset);
        __is->read(v.numberOfSectors);
    }
};

template<>
struct StreamableTraits< ::VpsAgent::DataLocation>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::VpsAgent::DataLocation, S>
{
    static void write(S* __os, const ::VpsAgent::DataLocation& v)
    {
        __os->write(v.diskIndex);
        __os->write(v.diskBlockOffset);
    }
};

template<class S>
struct StreamReader< ::VpsAgent::DataLocation, S>
{
    static void read(S* __is, ::VpsAgent::DataLocation& v)
    {
        __is->read(v.diskIndex);
        __is->read(v.diskBlockOffset);
    }
};

template<>
struct StreamableTraits< ::VpsAgent::DataBlock>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::VpsAgent::DataBlock, S>
{
    static void write(S* __os, const ::VpsAgent::DataBlock& v)
    {
        __os->write(v.location);
        __os->write(v.data);
    }
};

template<class S>
struct StreamReader< ::VpsAgent::DataBlock, S>
{
    static void read(S* __is, ::VpsAgent::DataBlock& v)
    {
        __is->read(v.location);
        __is->read(v.data);
    }
};

template<>
struct StreamableTraits< ::VpsAgent::PostSector>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 26;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::VpsAgent::PostSector, S>
{
    static void write(S* __os, const ::VpsAgent::PostSector& v)
    {
        __os->write(v.type);
        __os->write(v.diskIndex);
        __os->write(v.byteOffsetInBuffer);
        __os->write(v.numberOfByteInBuffer);
        __os->write(v.sectorOffset);
        __os->write(v.numberOfSectors);
    }
};

template<class S>
struct StreamReader< ::VpsAgent::PostSector, S>
{
    static void read(S* __is, ::VpsAgent::PostSector& v)
    {
        __is->read(v.type);
        __is->read(v.diskIndex);
        __is->read(v.byteOffsetInBuffer);
        __is->read(v.numberOfByteInBuffer);
        __is->read(v.sectorOffset);
        __is->read(v.numberOfSectors);
    }
};

template<>
struct StreamableTraits< ::VpsAgent::PostExtData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 19;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::VpsAgent::PostExtData, S>
{
    static void write(S* __os, const ::VpsAgent::PostExtData& v)
    {
        __os->write(v.diskIndex);
        __os->write(v.sectorOffset);
        __os->write(v.numberOfSectors);
        __os->write(v.extType);
        __os->write(v.extData);
    }
};

template<class S>
struct StreamReader< ::VpsAgent::PostExtData, S>
{
    static void read(S* __is, ::VpsAgent::PostExtData& v)
    {
        __is->read(v.diskIndex);
        __is->read(v.sectorOffset);
        __is->read(v.numberOfSectors);
        __is->read(v.extType);
        __is->read(v.extData);
    }
};

template<>
struct StreamableTraits< ::VpsAgent::GetExtData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 20;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::VpsAgent::GetExtData, S>
{
    static void write(S* __os, const ::VpsAgent::GetExtData& v)
    {
        __os->write(v.diskIndex);
        __os->write(v.extType);
        __os->write(v.sectorOffset);
        __os->write(v.bitCount);
    }
};

template<class S>
struct StreamReader< ::VpsAgent::GetExtData, S>
{
    static void read(S* __is, ::VpsAgent::GetExtData& v)
    {
        __is->read(v.diskIndex);
        __is->read(v.extType);
        __is->read(v.sectorOffset);
        __is->read(v.bitCount);
    }
};

template<>
struct StreamableTraits< ::VpsAgent::AgentModuleError>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::VpsAgent::SnapshotName>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::VpsAgent::SnapshotName, S>
{
    static void write(S* __os, const ::VpsAgent::SnapshotName& v)
    {
        __os->write(v.diskIndex);
        __os->write(v.diskIdent);
        __os->write(v.snapshot);
        __os->write(v.startCDP);
        __os->write(v.cdpConfig);
    }
};

template<class S>
struct StreamReader< ::VpsAgent::SnapshotName, S>
{
    static void read(S* __is, ::VpsAgent::SnapshotName& v)
    {
        __is->read(v.diskIndex);
        __is->read(v.diskIdent);
        __is->read(v.snapshot);
        __is->read(v.startCDP);
        __is->read(v.cdpConfig);
    }
};

template<>
struct StreamableTraits< ::VpsAgent::SnapshotConfig>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::VpsAgent::SnapshotConfig, S>
{
    static void write(S* __os, const ::VpsAgent::SnapshotConfig& v)
    {
        __os->write(v.diskIndex);
        __os->write(v.jsonConfig);
    }
};

template<class S>
struct StreamReader< ::VpsAgent::SnapshotConfig, S>
{
    static void read(S* __is, ::VpsAgent::SnapshotConfig& v)
    {
        __is->read(v.diskIndex);
        __is->read(v.jsonConfig);
    }
};

template<>
struct StreamableTraits< ::VpsAgent::BackupErrorType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 1;
    static const int maxValue = 4;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::VpsAgent::AgentIdentification>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::VpsAgent::AgentIdentification, S>
{
    static void write(S* __os, const ::VpsAgent::AgentIdentification& v)
    {
        __os->write(v.ident);
        __os->write(v.Identity);
    }
};

template<class S>
struct StreamReader< ::VpsAgent::AgentIdentification, S>
{
    static void read(S* __is, ::VpsAgent::AgentIdentification& v)
    {
        __is->read(v.ident);
        __is->read(v.Identity);
    }
};

}

namespace VpsAgent
{

class Callback_Services_ping_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Services_ping_Base> Callback_Services_pingPtr;

class Callback_Backup_PostSectorData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Backup_PostSectorData_Base> Callback_Backup_PostSectorDataPtr;

class Callback_Backup_PostSectorDataEx_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Backup_PostSectorDataEx_Base> Callback_Backup_PostSectorDataExPtr;

class Callback_Backup_PostSectorDataExV2_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Backup_PostSectorDataExV2_Base> Callback_Backup_PostSectorDataExV2Ptr;

class Callback_Backup_PostBakDataExt_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Backup_PostBakDataExt_Base> Callback_Backup_PostBakDataExtPtr;

class Callback_Backup_GetBakDataExt_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Backup_GetBakDataExt_Base> Callback_Backup_GetBakDataExtPtr;

class Callback_Backup_PostUsedBlockBitmap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Backup_PostUsedBlockBitmap_Base> Callback_Backup_PostUsedBlockBitmapPtr;

class Callback_Backup_PostDuplicateFileSectors_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Backup_PostDuplicateFileSectors_Base> Callback_Backup_PostDuplicateFileSectorsPtr;

class Callback_Backup_PostCurrentFileList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Backup_PostCurrentFileList_Base> Callback_Backup_PostCurrentFileListPtr;

class Callback_Backup_GetFileListFromDuplicateFilePool_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Backup_GetFileListFromDuplicateFilePool_Base> Callback_Backup_GetFileListFromDuplicateFilePoolPtr;

class Callback_Backup_ReportStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Backup_ReportStatus_Base> Callback_Backup_ReportStatusPtr;

class Callback_Backup_Exit_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Backup_Exit_Base> Callback_Backup_ExitPtr;

class Callback_Restore_getUesdBlockBitmap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Restore_getUesdBlockBitmap_Base> Callback_Restore_getUesdBlockBitmapPtr;

class Callback_Restore_reportStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Restore_reportStatus_Base> Callback_Restore_reportStatusPtr;

class Callback_AgentReceiver_check_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_check_Base> Callback_AgentReceiver_checkPtr;

class Callback_AgentReceiver_JsonFunc_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_JsonFunc_Base> Callback_AgentReceiver_JsonFuncPtr;

class Callback_AgentReceiver_QuerySystemInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_QuerySystemInfo_Base> Callback_AgentReceiver_QuerySystemInfoPtr;

class Callback_AgentReceiver_QueryDisksStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_QueryDisksStatus_Base> Callback_AgentReceiver_QueryDisksStatusPtr;

class Callback_AgentReceiver_DoBackup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_DoBackup_Base> Callback_AgentReceiver_DoBackupPtr;

class Callback_AgentReceiver_DoBackupEx_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_DoBackupEx_Base> Callback_AgentReceiver_DoBackupExPtr;

class Callback_AgentReceiver_GetLastBackupError_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_GetLastBackupError_Base> Callback_AgentReceiver_GetLastBackupErrorPtr;

class Callback_AgentReceiver_GetLastCdpError_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_GetLastCdpError_Base> Callback_AgentReceiver_GetLastCdpErrorPtr;

class Callback_AgentReceiver_StartAgentPe_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_StartAgentPe_Base> Callback_AgentReceiver_StartAgentPePtr;

class Callback_AgentReceiver_CancelBackup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_CancelBackup_Base> Callback_AgentReceiver_CancelBackupPtr;

class Callback_AgentReceiver_NotifyHighPriority_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_NotifyHighPriority_Base> Callback_AgentReceiver_NotifyHighPriorityPtr;

class Callback_AgentReceiver_GetStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_GetStatus_Base> Callback_AgentReceiver_GetStatusPtr;

class Callback_AgentReceiver_StopCdpStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_StopCdpStatus_Base> Callback_AgentReceiver_StopCdpStatusPtr;

class Callback_AgentReceiver_PackDebugFiles_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_PackDebugFiles_Base> Callback_AgentReceiver_PackDebugFilesPtr;

class Callback_AgentReceiver_FetchDebugPacket_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_FetchDebugPacket_Base> Callback_AgentReceiver_FetchDebugPacketPtr;

class Callback_AgentReceiver_DoRestore_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_DoRestore_Base> Callback_AgentReceiver_DoRestorePtr;

class Callback_AgentReceiver_CancelRestore_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_CancelRestore_Base> Callback_AgentReceiver_CancelRestorePtr;

class Callback_AgentReceiver_GetServiceList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_GetServiceList_Base> Callback_AgentReceiver_GetServiceListPtr;

class Callback_AgentReceiver_GetTcpListenList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_GetTcpListenList_Base> Callback_AgentReceiver_GetTcpListenListPtr;

class Callback_AgentReceiver_StartServiceSync_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_StartServiceSync_Base> Callback_AgentReceiver_StartServiceSyncPtr;

class Callback_AgentReceiver_StopServiceSync_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_StopServiceSync_Base> Callback_AgentReceiver_StopServiceSyncPtr;

class Callback_AgentReceiver_StartHttpDServiceAsync_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_StartHttpDServiceAsync_Base> Callback_AgentReceiver_StartHttpDServiceAsyncPtr;

class Callback_AgentReceiver_GetHttpDServiceListSync_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_GetHttpDServiceListSync_Base> Callback_AgentReceiver_GetHttpDServiceListSyncPtr;

class Callback_AgentReceiver_StopAllHttpDServiceSync_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_StopAllHttpDServiceSync_Base> Callback_AgentReceiver_StopAllHttpDServiceSyncPtr;

class Callback_AgentReceiver_testdisk_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_testdisk_Base> Callback_AgentReceiver_testdiskPtr;

class Callback_AgentReceiver_readdisk_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_readdisk_Base> Callback_AgentReceiver_readdiskPtr;

class Callback_AgentReceiver_writedisk_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_writedisk_Base> Callback_AgentReceiver_writediskPtr;

class Callback_AgentReceiver_JsonFuncV2_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AgentReceiver_JsonFuncV2_Base> Callback_AgentReceiver_JsonFuncV2Ptr;

class Callback_Session_QueryName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_QueryName_Base> Callback_Session_QueryNamePtr;

class Callback_Session_QueryIdentity_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_QueryIdentity_Base> Callback_Session_QueryIdentityPtr;

class Callback_Session_QuerySoftIdent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_QuerySoftIdent_Base> Callback_Session_QuerySoftIdentPtr;

class Callback_Session_QueryJsonData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_QueryJsonData_Base> Callback_Session_QueryJsonDataPtr;

class Callback_Session_destroy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_destroy_Base> Callback_Session_destroyPtr;

class Callback_Session_initiateReceiver_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_initiateReceiver_Base> Callback_Session_initiateReceiverPtr;

class Callback_Session_refresh_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_refresh_Base> Callback_Session_refreshPtr;

class Callback_Session_reportRestoreStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_reportRestoreStatus_Base> Callback_Session_reportRestoreStatusPtr;

class Callback_Session_queryLastCdpDetailByRestoreToken_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_queryLastCdpDetailByRestoreToken_Base> Callback_Session_queryLastCdpDetailByRestoreTokenPtr;

class Callback_Session_queryLastCdpDetailByCdpToken_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_queryLastCdpDetailByCdpToken_Base> Callback_Session_queryLastCdpDetailByCdpTokenPtr;

class Callback_Session_setPreReadBitmap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_setPreReadBitmap_Base> Callback_Session_setPreReadBitmapPtr;

class Callback_SessionFactory_create_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SessionFactory_create_Base> Callback_SessionFactory_createPtr;

}

namespace IceProxy
{

namespace VpsAgent
{

class Services : virtual public ::IceProxy::Ice::Object
{
public:

    void ping()
    {
        ping(0);
    }
    void ping(const ::Ice::Context& __ctx)
    {
        ping(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ping(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_ping(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_ping(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ping(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ping(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_ping(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ping(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ping(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_ping()
    {
        return begin_ping(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context& __ctx)
    {
        return begin_ping(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::VpsAgent::Callback_Services_pingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Services_pingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ping(&__ctx, __del, __cookie);
    }

    void end_ping(const ::Ice::AsyncResultPtr&);
    
private:

    void ping(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Services> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_secure(bool __secure) const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_twoway() const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_oneway() const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_batchOneway() const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_datagram() const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_batchDatagram() const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_compress(bool __compress) const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Services> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Services*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Backup : virtual public ::IceProxy::Ice::Object
{
public:

    void PostSectorData(::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data)
    {
        PostSectorData(__p_diskIndex, __p_range, __p_data, 0);
    }
    void PostSectorData(::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context& __ctx)
    {
        PostSectorData(__p_diskIndex, __p_range, __p_data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_PostSectorData(::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_PostSectorData(__p_diskIndex, __p_range, __p_data, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_PostSectorData(::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PostSectorData(__p_diskIndex, __p_range, __p_data, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_PostSectorData(::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_PostSectorData(__p_diskIndex, __p_range, __p_data, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_PostSectorData(::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PostSectorData(__p_diskIndex, __p_range, __p_data, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_PostSectorData(::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_PostSectorData(::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data)
    {
        return begin_PostSectorData(__p_diskIndex, __p_range, __p_data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PostSectorData(::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context& __ctx)
    {
        return begin_PostSectorData(__p_diskIndex, __p_range, __p_data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PostSectorData(::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostSectorData(__p_diskIndex, __p_range, __p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostSectorData(::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostSectorData(__p_diskIndex, __p_range, __p_data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostSectorData(::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::VpsAgent::Callback_Backup_PostSectorDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostSectorData(__p_diskIndex, __p_range, __p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostSectorData(::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Backup_PostSectorDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostSectorData(__p_diskIndex, __p_range, __p_data, &__ctx, __del, __cookie);
    }

    void end_PostSectorData(const ::Ice::AsyncResultPtr&);
    
private:

    void PostSectorData(::Ice::Int, const ::VpsAgent::SectorRange&, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_PostSectorData(::Ice::Int, const ::VpsAgent::SectorRange&, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void PostSectorDataEx(::Ice::Int __p_type, ::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data)
    {
        PostSectorDataEx(__p_type, __p_diskIndex, __p_range, __p_data, 0);
    }
    void PostSectorDataEx(::Ice::Int __p_type, ::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context& __ctx)
    {
        PostSectorDataEx(__p_type, __p_diskIndex, __p_range, __p_data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_PostSectorDataEx(::Ice::Int __p_type, ::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_PostSectorDataEx(__p_type, __p_diskIndex, __p_range, __p_data, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_PostSectorDataEx(::Ice::Int __p_type, ::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PostSectorDataEx(__p_type, __p_diskIndex, __p_range, __p_data, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_PostSectorDataEx(::Ice::Int __p_type, ::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_PostSectorDataEx(__p_type, __p_diskIndex, __p_range, __p_data, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_PostSectorDataEx(::Ice::Int __p_type, ::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PostSectorDataEx(__p_type, __p_diskIndex, __p_range, __p_data, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_PostSectorDataEx(::Ice::Int __p_type, ::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_PostSectorDataEx(::Ice::Int __p_type, ::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data)
    {
        return begin_PostSectorDataEx(__p_type, __p_diskIndex, __p_range, __p_data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PostSectorDataEx(::Ice::Int __p_type, ::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context& __ctx)
    {
        return begin_PostSectorDataEx(__p_type, __p_diskIndex, __p_range, __p_data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PostSectorDataEx(::Ice::Int __p_type, ::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostSectorDataEx(__p_type, __p_diskIndex, __p_range, __p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostSectorDataEx(::Ice::Int __p_type, ::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostSectorDataEx(__p_type, __p_diskIndex, __p_range, __p_data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostSectorDataEx(::Ice::Int __p_type, ::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::VpsAgent::Callback_Backup_PostSectorDataExPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostSectorDataEx(__p_type, __p_diskIndex, __p_range, __p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostSectorDataEx(::Ice::Int __p_type, ::Ice::Int __p_diskIndex, const ::VpsAgent::SectorRange& __p_range, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Backup_PostSectorDataExPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostSectorDataEx(__p_type, __p_diskIndex, __p_range, __p_data, &__ctx, __del, __cookie);
    }

    void end_PostSectorDataEx(const ::Ice::AsyncResultPtr&);
    
private:

    void PostSectorDataEx(::Ice::Int, ::Ice::Int, const ::VpsAgent::SectorRange&, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_PostSectorDataEx(::Ice::Int, ::Ice::Int, const ::VpsAgent::SectorRange&, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void PostSectorDataExV2(const ::VpsAgent::PostSectors& __p_sectors, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data)
    {
        PostSectorDataExV2(__p_sectors, __p_data, 0);
    }
    void PostSectorDataExV2(const ::VpsAgent::PostSectors& __p_sectors, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context& __ctx)
    {
        PostSectorDataExV2(__p_sectors, __p_data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_PostSectorDataExV2(const ::VpsAgent::PostSectors& __p_sectors, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_PostSectorDataExV2(__p_sectors, __p_data, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_PostSectorDataExV2(const ::VpsAgent::PostSectors& __p_sectors, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PostSectorDataExV2(__p_sectors, __p_data, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_PostSectorDataExV2(const ::VpsAgent::PostSectors& __p_sectors, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_PostSectorDataExV2(__p_sectors, __p_data, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_PostSectorDataExV2(const ::VpsAgent::PostSectors& __p_sectors, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PostSectorDataExV2(__p_sectors, __p_data, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_PostSectorDataExV2(const ::VpsAgent::PostSectors& __p_sectors, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_PostSectorDataExV2(const ::VpsAgent::PostSectors& __p_sectors, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data)
    {
        return begin_PostSectorDataExV2(__p_sectors, __p_data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PostSectorDataExV2(const ::VpsAgent::PostSectors& __p_sectors, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context& __ctx)
    {
        return begin_PostSectorDataExV2(__p_sectors, __p_data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PostSectorDataExV2(const ::VpsAgent::PostSectors& __p_sectors, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostSectorDataExV2(__p_sectors, __p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostSectorDataExV2(const ::VpsAgent::PostSectors& __p_sectors, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostSectorDataExV2(__p_sectors, __p_data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostSectorDataExV2(const ::VpsAgent::PostSectors& __p_sectors, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::VpsAgent::Callback_Backup_PostSectorDataExV2Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostSectorDataExV2(__p_sectors, __p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostSectorDataExV2(const ::VpsAgent::PostSectors& __p_sectors, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __p_data, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Backup_PostSectorDataExV2Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostSectorDataExV2(__p_sectors, __p_data, &__ctx, __del, __cookie);
    }

    void end_PostSectorDataExV2(const ::Ice::AsyncResultPtr&);
    
private:

    void PostSectorDataExV2(const ::VpsAgent::PostSectors&, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_PostSectorDataExV2(const ::VpsAgent::PostSectors&, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void PostBakDataExt(const ::VpsAgent::PostExtDataVector& __p_extDataVector)
    {
        PostBakDataExt(__p_extDataVector, 0);
    }
    void PostBakDataExt(const ::VpsAgent::PostExtDataVector& __p_extDataVector, const ::Ice::Context& __ctx)
    {
        PostBakDataExt(__p_extDataVector, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_PostBakDataExt(const ::VpsAgent::PostExtDataVector& __p_extDataVector, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_PostBakDataExt(__p_extDataVector, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_PostBakDataExt(const ::VpsAgent::PostExtDataVector& __p_extDataVector, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PostBakDataExt(__p_extDataVector, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_PostBakDataExt(const ::VpsAgent::PostExtDataVector& __p_extDataVector, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_PostBakDataExt(__p_extDataVector, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_PostBakDataExt(const ::VpsAgent::PostExtDataVector& __p_extDataVector, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PostBakDataExt(__p_extDataVector, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_PostBakDataExt(const ::VpsAgent::PostExtDataVector& __p_extDataVector, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_PostBakDataExt(const ::VpsAgent::PostExtDataVector& __p_extDataVector)
    {
        return begin_PostBakDataExt(__p_extDataVector, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PostBakDataExt(const ::VpsAgent::PostExtDataVector& __p_extDataVector, const ::Ice::Context& __ctx)
    {
        return begin_PostBakDataExt(__p_extDataVector, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PostBakDataExt(const ::VpsAgent::PostExtDataVector& __p_extDataVector, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostBakDataExt(__p_extDataVector, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostBakDataExt(const ::VpsAgent::PostExtDataVector& __p_extDataVector, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostBakDataExt(__p_extDataVector, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostBakDataExt(const ::VpsAgent::PostExtDataVector& __p_extDataVector, const ::VpsAgent::Callback_Backup_PostBakDataExtPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostBakDataExt(__p_extDataVector, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostBakDataExt(const ::VpsAgent::PostExtDataVector& __p_extDataVector, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Backup_PostBakDataExtPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostBakDataExt(__p_extDataVector, &__ctx, __del, __cookie);
    }

    void end_PostBakDataExt(const ::Ice::AsyncResultPtr&);
    
private:

    void PostBakDataExt(const ::VpsAgent::PostExtDataVector&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_PostBakDataExt(const ::VpsAgent::PostExtDataVector&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool GetBakDataExt(const ::VpsAgent::GetExtDataVector& __p_extTypeVector, ::VpsAgent::PostExtDataVector& __p_extDataVector)
    {
        return GetBakDataExt(__p_extTypeVector, __p_extDataVector, 0);
    }
    bool GetBakDataExt(const ::VpsAgent::GetExtDataVector& __p_extTypeVector, ::VpsAgent::PostExtDataVector& __p_extDataVector, const ::Ice::Context& __ctx)
    {
        return GetBakDataExt(__p_extTypeVector, __p_extDataVector, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetBakDataExt(const ::VpsAgent::GetExtDataVector& __p_extTypeVector, const ::IceInternal::Function<void (bool, const ::VpsAgent::PostExtDataVector&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBakDataExt(__p_extTypeVector, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBakDataExt(const ::VpsAgent::GetExtDataVector& __p_extTypeVector, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBakDataExt(__p_extTypeVector, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetBakDataExt(const ::VpsAgent::GetExtDataVector& __p_extTypeVector, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::VpsAgent::PostExtDataVector&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBakDataExt(__p_extTypeVector, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBakDataExt(const ::VpsAgent::GetExtDataVector& __p_extTypeVector, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBakDataExt(__p_extTypeVector, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetBakDataExt(const ::VpsAgent::GetExtDataVector& __p_extTypeVector, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::VpsAgent::PostExtDataVector&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetBakDataExt(const ::VpsAgent::GetExtDataVector& __p_extTypeVector)
    {
        return begin_GetBakDataExt(__p_extTypeVector, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBakDataExt(const ::VpsAgent::GetExtDataVector& __p_extTypeVector, const ::Ice::Context& __ctx)
    {
        return begin_GetBakDataExt(__p_extTypeVector, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBakDataExt(const ::VpsAgent::GetExtDataVector& __p_extTypeVector, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBakDataExt(__p_extTypeVector, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBakDataExt(const ::VpsAgent::GetExtDataVector& __p_extTypeVector, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBakDataExt(__p_extTypeVector, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBakDataExt(const ::VpsAgent::GetExtDataVector& __p_extTypeVector, const ::VpsAgent::Callback_Backup_GetBakDataExtPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBakDataExt(__p_extTypeVector, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBakDataExt(const ::VpsAgent::GetExtDataVector& __p_extTypeVector, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Backup_GetBakDataExtPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBakDataExt(__p_extTypeVector, &__ctx, __del, __cookie);
    }

    bool end_GetBakDataExt(::VpsAgent::PostExtDataVector& __p_extDataVector, const ::Ice::AsyncResultPtr&);
    
private:

    bool GetBakDataExt(const ::VpsAgent::GetExtDataVector&, ::VpsAgent::PostExtDataVector&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetBakDataExt(const ::VpsAgent::GetExtDataVector&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void PostUsedBlockBitmap(::Ice::Int __p_diskIndex, const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed)
    {
        PostUsedBlockBitmap(__p_diskIndex, __p_bitmap, __p_completed, 0);
    }
    void PostUsedBlockBitmap(::Ice::Int __p_diskIndex, const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context& __ctx)
    {
        PostUsedBlockBitmap(__p_diskIndex, __p_bitmap, __p_completed, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_PostUsedBlockBitmap(::Ice::Int __p_diskIndex, const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_PostUsedBlockBitmap(__p_diskIndex, __p_bitmap, __p_completed, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_PostUsedBlockBitmap(::Ice::Int __p_diskIndex, const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PostUsedBlockBitmap(__p_diskIndex, __p_bitmap, __p_completed, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_PostUsedBlockBitmap(::Ice::Int __p_diskIndex, const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_PostUsedBlockBitmap(__p_diskIndex, __p_bitmap, __p_completed, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_PostUsedBlockBitmap(::Ice::Int __p_diskIndex, const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PostUsedBlockBitmap(__p_diskIndex, __p_bitmap, __p_completed, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_PostUsedBlockBitmap(::Ice::Int __p_diskIndex, const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_PostUsedBlockBitmap(::Ice::Int __p_diskIndex, const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed)
    {
        return begin_PostUsedBlockBitmap(__p_diskIndex, __p_bitmap, __p_completed, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PostUsedBlockBitmap(::Ice::Int __p_diskIndex, const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context& __ctx)
    {
        return begin_PostUsedBlockBitmap(__p_diskIndex, __p_bitmap, __p_completed, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PostUsedBlockBitmap(::Ice::Int __p_diskIndex, const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostUsedBlockBitmap(__p_diskIndex, __p_bitmap, __p_completed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostUsedBlockBitmap(::Ice::Int __p_diskIndex, const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostUsedBlockBitmap(__p_diskIndex, __p_bitmap, __p_completed, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostUsedBlockBitmap(::Ice::Int __p_diskIndex, const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::VpsAgent::Callback_Backup_PostUsedBlockBitmapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostUsedBlockBitmap(__p_diskIndex, __p_bitmap, __p_completed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostUsedBlockBitmap(::Ice::Int __p_diskIndex, const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Backup_PostUsedBlockBitmapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostUsedBlockBitmap(__p_diskIndex, __p_bitmap, __p_completed, &__ctx, __del, __cookie);
    }

    void end_PostUsedBlockBitmap(const ::Ice::AsyncResultPtr&);
    
private:

    void PostUsedBlockBitmap(::Ice::Int, const ::VpsAgent::BinaryStream&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_PostUsedBlockBitmap(::Ice::Int, const ::VpsAgent::BinaryStream&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void PostDuplicateFileSectors(::Ice::Int __p_diskIndex, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed)
    {
        PostDuplicateFileSectors(__p_diskIndex, __p_sectors, __p_completed, 0);
    }
    void PostDuplicateFileSectors(::Ice::Int __p_diskIndex, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::Context& __ctx)
    {
        PostDuplicateFileSectors(__p_diskIndex, __p_sectors, __p_completed, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_PostDuplicateFileSectors(::Ice::Int __p_diskIndex, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_PostDuplicateFileSectors(__p_diskIndex, __p_sectors, __p_completed, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_PostDuplicateFileSectors(::Ice::Int __p_diskIndex, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PostDuplicateFileSectors(__p_diskIndex, __p_sectors, __p_completed, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_PostDuplicateFileSectors(::Ice::Int __p_diskIndex, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_PostDuplicateFileSectors(__p_diskIndex, __p_sectors, __p_completed, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_PostDuplicateFileSectors(::Ice::Int __p_diskIndex, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PostDuplicateFileSectors(__p_diskIndex, __p_sectors, __p_completed, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_PostDuplicateFileSectors(::Ice::Int __p_diskIndex, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_PostDuplicateFileSectors(::Ice::Int __p_diskIndex, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed)
    {
        return begin_PostDuplicateFileSectors(__p_diskIndex, __p_sectors, __p_completed, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PostDuplicateFileSectors(::Ice::Int __p_diskIndex, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::Context& __ctx)
    {
        return begin_PostDuplicateFileSectors(__p_diskIndex, __p_sectors, __p_completed, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PostDuplicateFileSectors(::Ice::Int __p_diskIndex, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostDuplicateFileSectors(__p_diskIndex, __p_sectors, __p_completed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostDuplicateFileSectors(::Ice::Int __p_diskIndex, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostDuplicateFileSectors(__p_diskIndex, __p_sectors, __p_completed, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostDuplicateFileSectors(::Ice::Int __p_diskIndex, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::VpsAgent::Callback_Backup_PostDuplicateFileSectorsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostDuplicateFileSectors(__p_diskIndex, __p_sectors, __p_completed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostDuplicateFileSectors(::Ice::Int __p_diskIndex, const ::IMG::DuplicateFileSectors& __p_sectors, bool __p_completed, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Backup_PostDuplicateFileSectorsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostDuplicateFileSectors(__p_diskIndex, __p_sectors, __p_completed, &__ctx, __del, __cookie);
    }

    void end_PostDuplicateFileSectors(const ::Ice::AsyncResultPtr&);
    
private:

    void PostDuplicateFileSectors(::Ice::Int, const ::IMG::DuplicateFileSectors&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_PostDuplicateFileSectors(::Ice::Int, const ::IMG::DuplicateFileSectors&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void PostCurrentFileList(const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed)
    {
        PostCurrentFileList(__p_bitmap, __p_completed, 0);
    }
    void PostCurrentFileList(const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context& __ctx)
    {
        PostCurrentFileList(__p_bitmap, __p_completed, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_PostCurrentFileList(const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_PostCurrentFileList(__p_bitmap, __p_completed, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_PostCurrentFileList(const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PostCurrentFileList(__p_bitmap, __p_completed, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_PostCurrentFileList(const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_PostCurrentFileList(__p_bitmap, __p_completed, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_PostCurrentFileList(const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PostCurrentFileList(__p_bitmap, __p_completed, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_PostCurrentFileList(const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_PostCurrentFileList(const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed)
    {
        return begin_PostCurrentFileList(__p_bitmap, __p_completed, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PostCurrentFileList(const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context& __ctx)
    {
        return begin_PostCurrentFileList(__p_bitmap, __p_completed, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PostCurrentFileList(const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostCurrentFileList(__p_bitmap, __p_completed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostCurrentFileList(const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostCurrentFileList(__p_bitmap, __p_completed, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostCurrentFileList(const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::VpsAgent::Callback_Backup_PostCurrentFileListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostCurrentFileList(__p_bitmap, __p_completed, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PostCurrentFileList(const ::VpsAgent::BinaryStream& __p_bitmap, bool __p_completed, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Backup_PostCurrentFileListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PostCurrentFileList(__p_bitmap, __p_completed, &__ctx, __del, __cookie);
    }

    void end_PostCurrentFileList(const ::Ice::AsyncResultPtr&);
    
private:

    void PostCurrentFileList(const ::VpsAgent::BinaryStream&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_PostCurrentFileList(const ::VpsAgent::BinaryStream&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool GetFileListFromDuplicateFilePool(::VpsAgent::BinaryStream& __p_bitmap)
    {
        return GetFileListFromDuplicateFilePool(__p_bitmap, 0);
    }
    bool GetFileListFromDuplicateFilePool(::VpsAgent::BinaryStream& __p_bitmap, const ::Ice::Context& __ctx)
    {
        return GetFileListFromDuplicateFilePool(__p_bitmap, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetFileListFromDuplicateFilePool(const ::IceInternal::Function<void (bool, const ::VpsAgent::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetFileListFromDuplicateFilePool(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetFileListFromDuplicateFilePool(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetFileListFromDuplicateFilePool(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetFileListFromDuplicateFilePool(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::VpsAgent::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetFileListFromDuplicateFilePool(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetFileListFromDuplicateFilePool(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetFileListFromDuplicateFilePool(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetFileListFromDuplicateFilePool(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::VpsAgent::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetFileListFromDuplicateFilePool()
    {
        return begin_GetFileListFromDuplicateFilePool(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetFileListFromDuplicateFilePool(const ::Ice::Context& __ctx)
    {
        return begin_GetFileListFromDuplicateFilePool(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetFileListFromDuplicateFilePool(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFileListFromDuplicateFilePool(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFileListFromDuplicateFilePool(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFileListFromDuplicateFilePool(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFileListFromDuplicateFilePool(const ::VpsAgent::Callback_Backup_GetFileListFromDuplicateFilePoolPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFileListFromDuplicateFilePool(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFileListFromDuplicateFilePool(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Backup_GetFileListFromDuplicateFilePoolPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFileListFromDuplicateFilePool(&__ctx, __del, __cookie);
    }

    bool end_GetFileListFromDuplicateFilePool(::VpsAgent::BinaryStream& __p_bitmap, const ::Ice::AsyncResultPtr&);
    
private:

    bool GetFileListFromDuplicateFilePool(::VpsAgent::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetFileListFromDuplicateFilePool(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void ReportStatus(const ::BoxLogic::BackupProgress& __p_progress)
    {
        ReportStatus(__p_progress, 0);
    }
    void ReportStatus(const ::BoxLogic::BackupProgress& __p_progress, const ::Ice::Context& __ctx)
    {
        ReportStatus(__p_progress, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ReportStatus(const ::BoxLogic::BackupProgress& __p_progress, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ReportStatus(__p_progress, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ReportStatus(const ::BoxLogic::BackupProgress& __p_progress, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ReportStatus(__p_progress, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ReportStatus(const ::BoxLogic::BackupProgress& __p_progress, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ReportStatus(__p_progress, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ReportStatus(const ::BoxLogic::BackupProgress& __p_progress, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ReportStatus(__p_progress, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_ReportStatus(const ::BoxLogic::BackupProgress& __p_progress, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_ReportStatus(const ::BoxLogic::BackupProgress& __p_progress)
    {
        return begin_ReportStatus(__p_progress, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReportStatus(const ::BoxLogic::BackupProgress& __p_progress, const ::Ice::Context& __ctx)
    {
        return begin_ReportStatus(__p_progress, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReportStatus(const ::BoxLogic::BackupProgress& __p_progress, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReportStatus(__p_progress, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReportStatus(const ::BoxLogic::BackupProgress& __p_progress, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReportStatus(__p_progress, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReportStatus(const ::BoxLogic::BackupProgress& __p_progress, const ::VpsAgent::Callback_Backup_ReportStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReportStatus(__p_progress, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReportStatus(const ::BoxLogic::BackupProgress& __p_progress, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Backup_ReportStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReportStatus(__p_progress, &__ctx, __del, __cookie);
    }

    void end_ReportStatus(const ::Ice::AsyncResultPtr&);
    
private:

    void ReportStatus(const ::BoxLogic::BackupProgress&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ReportStatus(const ::BoxLogic::BackupProgress&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void Exit(::BoxLogic::BackupFinishCode __p_code)
    {
        Exit(__p_code, 0);
    }
    void Exit(::BoxLogic::BackupFinishCode __p_code, const ::Ice::Context& __ctx)
    {
        Exit(__p_code, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_Exit(::BoxLogic::BackupFinishCode __p_code, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_Exit(__p_code, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_Exit(::BoxLogic::BackupFinishCode __p_code, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_Exit(__p_code, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_Exit(::BoxLogic::BackupFinishCode __p_code, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_Exit(__p_code, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_Exit(::BoxLogic::BackupFinishCode __p_code, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_Exit(__p_code, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_Exit(::BoxLogic::BackupFinishCode __p_code, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_Exit(::BoxLogic::BackupFinishCode __p_code)
    {
        return begin_Exit(__p_code, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Exit(::BoxLogic::BackupFinishCode __p_code, const ::Ice::Context& __ctx)
    {
        return begin_Exit(__p_code, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Exit(::BoxLogic::BackupFinishCode __p_code, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Exit(__p_code, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Exit(::BoxLogic::BackupFinishCode __p_code, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Exit(__p_code, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Exit(::BoxLogic::BackupFinishCode __p_code, const ::VpsAgent::Callback_Backup_ExitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Exit(__p_code, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Exit(::BoxLogic::BackupFinishCode __p_code, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Backup_ExitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Exit(__p_code, &__ctx, __del, __cookie);
    }

    void end_Exit(const ::Ice::AsyncResultPtr&);
    
private:

    void Exit(::BoxLogic::BackupFinishCode, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Exit(::BoxLogic::BackupFinishCode, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Backup> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_secure(bool __secure) const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_twoway() const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_oneway() const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_batchOneway() const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_datagram() const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_batchDatagram() const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_compress(bool __compress) const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Backup> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Backup*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Restore : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int getUesdBlockBitmap(const ::std::string& __p_token, ::Ice::Int __p_index, ::VpsAgent::BinaryStream& __p_bitmap)
    {
        return getUesdBlockBitmap(__p_token, __p_index, __p_bitmap, 0);
    }
    ::Ice::Int getUesdBlockBitmap(const ::std::string& __p_token, ::Ice::Int __p_index, ::VpsAgent::BinaryStream& __p_bitmap, const ::Ice::Context& __ctx)
    {
        return getUesdBlockBitmap(__p_token, __p_index, __p_bitmap, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getUesdBlockBitmap(const ::std::string& __p_token, ::Ice::Int __p_index, const ::IceInternal::Function<void (::Ice::Int, const ::VpsAgent::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getUesdBlockBitmap(__p_token, __p_index, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getUesdBlockBitmap(const ::std::string& __p_token, ::Ice::Int __p_index, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getUesdBlockBitmap(__p_token, __p_index, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getUesdBlockBitmap(const ::std::string& __p_token, ::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::VpsAgent::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getUesdBlockBitmap(__p_token, __p_index, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getUesdBlockBitmap(const ::std::string& __p_token, ::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getUesdBlockBitmap(__p_token, __p_index, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getUesdBlockBitmap(const ::std::string& __p_token, ::Ice::Int __p_index, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::VpsAgent::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getUesdBlockBitmap(const ::std::string& __p_token, ::Ice::Int __p_index)
    {
        return begin_getUesdBlockBitmap(__p_token, __p_index, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUesdBlockBitmap(const ::std::string& __p_token, ::Ice::Int __p_index, const ::Ice::Context& __ctx)
    {
        return begin_getUesdBlockBitmap(__p_token, __p_index, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUesdBlockBitmap(const ::std::string& __p_token, ::Ice::Int __p_index, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUesdBlockBitmap(__p_token, __p_index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUesdBlockBitmap(const ::std::string& __p_token, ::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUesdBlockBitmap(__p_token, __p_index, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUesdBlockBitmap(const ::std::string& __p_token, ::Ice::Int __p_index, const ::VpsAgent::Callback_Restore_getUesdBlockBitmapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUesdBlockBitmap(__p_token, __p_index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUesdBlockBitmap(const ::std::string& __p_token, ::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Restore_getUesdBlockBitmapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUesdBlockBitmap(__p_token, __p_index, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_getUesdBlockBitmap(::VpsAgent::BinaryStream& __p_bitmap, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getUesdBlockBitmap(const ::std::string&, ::Ice::Int, ::VpsAgent::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getUesdBlockBitmap(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reportStatus(::BoxLogic::RestoreStageCode __p_code, const ::std::string& __p_msg, const ::std::string& __p_debug)
    {
        reportStatus(__p_code, __p_msg, __p_debug, 0);
    }
    void reportStatus(::BoxLogic::RestoreStageCode __p_code, const ::std::string& __p_msg, const ::std::string& __p_debug, const ::Ice::Context& __ctx)
    {
        reportStatus(__p_code, __p_msg, __p_debug, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reportStatus(::BoxLogic::RestoreStageCode __p_code, const ::std::string& __p_msg, const ::std::string& __p_debug, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_reportStatus(__p_code, __p_msg, __p_debug, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_reportStatus(::BoxLogic::RestoreStageCode __p_code, const ::std::string& __p_msg, const ::std::string& __p_debug, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reportStatus(__p_code, __p_msg, __p_debug, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reportStatus(::BoxLogic::RestoreStageCode __p_code, const ::std::string& __p_msg, const ::std::string& __p_debug, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_reportStatus(__p_code, __p_msg, __p_debug, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_reportStatus(::BoxLogic::RestoreStageCode __p_code, const ::std::string& __p_msg, const ::std::string& __p_debug, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reportStatus(__p_code, __p_msg, __p_debug, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_reportStatus(::BoxLogic::RestoreStageCode __p_code, const ::std::string& __p_msg, const ::std::string& __p_debug, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_reportStatus(::BoxLogic::RestoreStageCode __p_code, const ::std::string& __p_msg, const ::std::string& __p_debug)
    {
        return begin_reportStatus(__p_code, __p_msg, __p_debug, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reportStatus(::BoxLogic::RestoreStageCode __p_code, const ::std::string& __p_msg, const ::std::string& __p_debug, const ::Ice::Context& __ctx)
    {
        return begin_reportStatus(__p_code, __p_msg, __p_debug, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reportStatus(::BoxLogic::RestoreStageCode __p_code, const ::std::string& __p_msg, const ::std::string& __p_debug, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportStatus(__p_code, __p_msg, __p_debug, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reportStatus(::BoxLogic::RestoreStageCode __p_code, const ::std::string& __p_msg, const ::std::string& __p_debug, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportStatus(__p_code, __p_msg, __p_debug, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reportStatus(::BoxLogic::RestoreStageCode __p_code, const ::std::string& __p_msg, const ::std::string& __p_debug, const ::VpsAgent::Callback_Restore_reportStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportStatus(__p_code, __p_msg, __p_debug, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reportStatus(::BoxLogic::RestoreStageCode __p_code, const ::std::string& __p_msg, const ::std::string& __p_debug, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Restore_reportStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportStatus(__p_code, __p_msg, __p_debug, &__ctx, __del, __cookie);
    }

    void end_reportStatus(const ::Ice::AsyncResultPtr&);
    
private:

    void reportStatus(::BoxLogic::RestoreStageCode, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reportStatus(::BoxLogic::RestoreStageCode, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Restore> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_secure(bool __secure) const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_twoway() const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_oneway() const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_batchOneway() const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_datagram() const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_batchDatagram() const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_compress(bool __compress) const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Restore> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Restore*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class AgentReceiver : virtual public ::IceProxy::Ice::Object
{
public:

    void check()
    {
        check(0);
    }
    void check(const ::Ice::Context& __ctx)
    {
        check(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_check(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_check(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_check(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_check(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_check(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_check(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_check(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_check(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_check(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_check()
    {
        return begin_check(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_check(const ::Ice::Context& __ctx)
    {
        return begin_check(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_check(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_check(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_check(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_check(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_check(const ::VpsAgent::Callback_AgentReceiver_checkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_check(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_check(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_checkPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_check(&__ctx, __del, __cookie);
    }

    void end_check(const ::Ice::AsyncResultPtr&);
    
private:

    void check(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_check(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string JsonFunc(const ::std::string& __p_InputParam)
    {
        return JsonFunc(__p_InputParam, 0);
    }
    ::std::string JsonFunc(const ::std::string& __p_InputParam, const ::Ice::Context& __ctx)
    {
        return JsonFunc(__p_InputParam, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_JsonFunc(const ::std::string& __p_InputParam, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_JsonFunc(__p_InputParam, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_JsonFunc(const ::std::string& __p_InputParam, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_JsonFunc(__p_InputParam, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_JsonFunc(const ::std::string& __p_InputParam, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_JsonFunc(__p_InputParam, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_JsonFunc(const ::std::string& __p_InputParam, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_JsonFunc(__p_InputParam, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_JsonFunc(const ::std::string& __p_InputParam, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string& __p_InputParam)
    {
        return begin_JsonFunc(__p_InputParam, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string& __p_InputParam, const ::Ice::Context& __ctx)
    {
        return begin_JsonFunc(__p_InputParam, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string& __p_InputParam, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFunc(__p_InputParam, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string& __p_InputParam, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFunc(__p_InputParam, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string& __p_InputParam, const ::VpsAgent::Callback_AgentReceiver_JsonFuncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFunc(__p_InputParam, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string& __p_InputParam, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_JsonFuncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFunc(__p_InputParam, &__ctx, __del, __cookie);
    }

    ::std::string end_JsonFunc(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string JsonFunc(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_JsonFunc(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string QuerySystemInfo()
    {
        return QuerySystemInfo(0);
    }
    ::std::string QuerySystemInfo(const ::Ice::Context& __ctx)
    {
        return QuerySystemInfo(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_QuerySystemInfo(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QuerySystemInfo(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QuerySystemInfo(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QuerySystemInfo(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_QuerySystemInfo(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QuerySystemInfo(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QuerySystemInfo(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QuerySystemInfo(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_QuerySystemInfo(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_QuerySystemInfo()
    {
        return begin_QuerySystemInfo(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QuerySystemInfo(const ::Ice::Context& __ctx)
    {
        return begin_QuerySystemInfo(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QuerySystemInfo(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySystemInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QuerySystemInfo(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySystemInfo(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QuerySystemInfo(const ::VpsAgent::Callback_AgentReceiver_QuerySystemInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySystemInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QuerySystemInfo(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_QuerySystemInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySystemInfo(&__ctx, __del, __cookie);
    }

    ::std::string end_QuerySystemInfo(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string QuerySystemInfo(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_QuerySystemInfo(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void QueryDisksStatus(::BoxLogic::Disks& __p_disks, IceUtil::Optional< ::std::string>& __p_more)
    {
        QueryDisksStatus(__p_disks, __p_more, 0);
    }
    void QueryDisksStatus(::BoxLogic::Disks& __p_disks, IceUtil::Optional< ::std::string>& __p_more, const ::Ice::Context& __ctx)
    {
        QueryDisksStatus(__p_disks, __p_more, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_QueryDisksStatus(const ::IceInternal::Function<void (const ::BoxLogic::Disks&, const IceUtil::Optional< ::std::string>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QueryDisksStatus(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QueryDisksStatus(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QueryDisksStatus(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_QueryDisksStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::BoxLogic::Disks&, const IceUtil::Optional< ::std::string>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QueryDisksStatus(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QueryDisksStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QueryDisksStatus(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_QueryDisksStatus(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::BoxLogic::Disks&, const IceUtil::Optional< ::std::string>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_QueryDisksStatus()
    {
        return begin_QueryDisksStatus(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QueryDisksStatus(const ::Ice::Context& __ctx)
    {
        return begin_QueryDisksStatus(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QueryDisksStatus(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryDisksStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryDisksStatus(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryDisksStatus(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryDisksStatus(const ::VpsAgent::Callback_AgentReceiver_QueryDisksStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryDisksStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryDisksStatus(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_QueryDisksStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryDisksStatus(&__ctx, __del, __cookie);
    }

    void end_QueryDisksStatus(::BoxLogic::Disks& __p_disks, IceUtil::Optional< ::std::string>& __p_more, const ::Ice::AsyncResultPtr&);
    
private:

    void QueryDisksStatus(::BoxLogic::Disks&, IceUtil::Optional< ::std::string>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_QueryDisksStatus(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void DoBackup(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::BackupPrx& __p_prx)
    {
        DoBackup(__p_snapshots, __p_prx, 0);
    }
    void DoBackup(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::BackupPrx& __p_prx, const ::Ice::Context& __ctx)
    {
        DoBackup(__p_snapshots, __p_prx, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_DoBackup(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::BackupPrx& __p_prx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_DoBackup(__p_snapshots, __p_prx, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_DoBackup(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::BackupPrx& __p_prx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_DoBackup(__p_snapshots, __p_prx, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_DoBackup(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::BackupPrx& __p_prx, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_DoBackup(__p_snapshots, __p_prx, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_DoBackup(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::BackupPrx& __p_prx, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_DoBackup(__p_snapshots, __p_prx, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_DoBackup(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::BackupPrx& __p_prx, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_DoBackup(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::BackupPrx& __p_prx)
    {
        return begin_DoBackup(__p_snapshots, __p_prx, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DoBackup(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::BackupPrx& __p_prx, const ::Ice::Context& __ctx)
    {
        return begin_DoBackup(__p_snapshots, __p_prx, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DoBackup(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::BackupPrx& __p_prx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DoBackup(__p_snapshots, __p_prx, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DoBackup(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::BackupPrx& __p_prx, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DoBackup(__p_snapshots, __p_prx, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DoBackup(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::BackupPrx& __p_prx, const ::VpsAgent::Callback_AgentReceiver_DoBackupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DoBackup(__p_snapshots, __p_prx, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DoBackup(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::BackupPrx& __p_prx, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_DoBackupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DoBackup(__p_snapshots, __p_prx, &__ctx, __del, __cookie);
    }

    void end_DoBackup(const ::Ice::AsyncResultPtr&);
    
private:

    void DoBackup(const ::VpsAgent::SnapshotNames&, const ::VpsAgent::BackupPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_DoBackup(const ::VpsAgent::SnapshotNames&, const ::VpsAgent::BackupPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void DoBackupEx(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::SnapshotConfigs& __p_configs, const ::VpsAgent::BackupPrx& __p_prx, const IceUtil::Optional< ::std::string>& __p_jsonConfig)
    {
        DoBackupEx(__p_snapshots, __p_configs, __p_prx, __p_jsonConfig, 0);
    }
    void DoBackupEx(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::SnapshotConfigs& __p_configs, const ::VpsAgent::BackupPrx& __p_prx, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::Ice::Context& __ctx)
    {
        DoBackupEx(__p_snapshots, __p_configs, __p_prx, __p_jsonConfig, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_DoBackupEx(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::SnapshotConfigs& __p_configs, const ::VpsAgent::BackupPrx& __p_prx, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_DoBackupEx(__p_snapshots, __p_configs, __p_prx, __p_jsonConfig, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_DoBackupEx(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::SnapshotConfigs& __p_configs, const ::VpsAgent::BackupPrx& __p_prx, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_DoBackupEx(__p_snapshots, __p_configs, __p_prx, __p_jsonConfig, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_DoBackupEx(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::SnapshotConfigs& __p_configs, const ::VpsAgent::BackupPrx& __p_prx, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_DoBackupEx(__p_snapshots, __p_configs, __p_prx, __p_jsonConfig, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_DoBackupEx(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::SnapshotConfigs& __p_configs, const ::VpsAgent::BackupPrx& __p_prx, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_DoBackupEx(__p_snapshots, __p_configs, __p_prx, __p_jsonConfig, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_DoBackupEx(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::SnapshotConfigs& __p_configs, const ::VpsAgent::BackupPrx& __p_prx, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_DoBackupEx(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::SnapshotConfigs& __p_configs, const ::VpsAgent::BackupPrx& __p_prx, const IceUtil::Optional< ::std::string>& __p_jsonConfig)
    {
        return begin_DoBackupEx(__p_snapshots, __p_configs, __p_prx, __p_jsonConfig, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DoBackupEx(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::SnapshotConfigs& __p_configs, const ::VpsAgent::BackupPrx& __p_prx, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::Ice::Context& __ctx)
    {
        return begin_DoBackupEx(__p_snapshots, __p_configs, __p_prx, __p_jsonConfig, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DoBackupEx(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::SnapshotConfigs& __p_configs, const ::VpsAgent::BackupPrx& __p_prx, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DoBackupEx(__p_snapshots, __p_configs, __p_prx, __p_jsonConfig, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DoBackupEx(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::SnapshotConfigs& __p_configs, const ::VpsAgent::BackupPrx& __p_prx, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DoBackupEx(__p_snapshots, __p_configs, __p_prx, __p_jsonConfig, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DoBackupEx(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::SnapshotConfigs& __p_configs, const ::VpsAgent::BackupPrx& __p_prx, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::VpsAgent::Callback_AgentReceiver_DoBackupExPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DoBackupEx(__p_snapshots, __p_configs, __p_prx, __p_jsonConfig, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DoBackupEx(const ::VpsAgent::SnapshotNames& __p_snapshots, const ::VpsAgent::SnapshotConfigs& __p_configs, const ::VpsAgent::BackupPrx& __p_prx, const IceUtil::Optional< ::std::string>& __p_jsonConfig, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_DoBackupExPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DoBackupEx(__p_snapshots, __p_configs, __p_prx, __p_jsonConfig, &__ctx, __del, __cookie);
    }

    void end_DoBackupEx(const ::Ice::AsyncResultPtr&);
    
private:

    void DoBackupEx(const ::VpsAgent::SnapshotNames&, const ::VpsAgent::SnapshotConfigs&, const ::VpsAgent::BackupPrx&, const IceUtil::Optional< ::std::string>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_DoBackupEx(const ::VpsAgent::SnapshotNames&, const ::VpsAgent::SnapshotConfigs&, const ::VpsAgent::BackupPrx&, const IceUtil::Optional< ::std::string>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string GetLastBackupError()
    {
        return GetLastBackupError(0);
    }
    ::std::string GetLastBackupError(const ::Ice::Context& __ctx)
    {
        return GetLastBackupError(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetLastBackupError(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetLastBackupError(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetLastBackupError(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetLastBackupError(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetLastBackupError(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetLastBackupError(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetLastBackupError(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetLastBackupError(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetLastBackupError(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetLastBackupError()
    {
        return begin_GetLastBackupError(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetLastBackupError(const ::Ice::Context& __ctx)
    {
        return begin_GetLastBackupError(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetLastBackupError(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLastBackupError(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetLastBackupError(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLastBackupError(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetLastBackupError(const ::VpsAgent::Callback_AgentReceiver_GetLastBackupErrorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLastBackupError(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetLastBackupError(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_GetLastBackupErrorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLastBackupError(&__ctx, __del, __cookie);
    }

    ::std::string end_GetLastBackupError(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string GetLastBackupError(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetLastBackupError(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string GetLastCdpError()
    {
        return GetLastCdpError(0);
    }
    ::std::string GetLastCdpError(const ::Ice::Context& __ctx)
    {
        return GetLastCdpError(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetLastCdpError(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetLastCdpError(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetLastCdpError(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetLastCdpError(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetLastCdpError(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetLastCdpError(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetLastCdpError(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetLastCdpError(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetLastCdpError(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetLastCdpError()
    {
        return begin_GetLastCdpError(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetLastCdpError(const ::Ice::Context& __ctx)
    {
        return begin_GetLastCdpError(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetLastCdpError(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLastCdpError(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetLastCdpError(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLastCdpError(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetLastCdpError(const ::VpsAgent::Callback_AgentReceiver_GetLastCdpErrorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLastCdpError(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetLastCdpError(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_GetLastCdpErrorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLastCdpError(&__ctx, __del, __cookie);
    }

    ::std::string end_GetLastCdpError(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string GetLastCdpError(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetLastCdpError(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int StartAgentPe(::std::string& __p_peHostIdent)
    {
        return StartAgentPe(__p_peHostIdent, 0);
    }
    ::Ice::Int StartAgentPe(::std::string& __p_peHostIdent, const ::Ice::Context& __ctx)
    {
        return StartAgentPe(__p_peHostIdent, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_StartAgentPe(const ::IceInternal::Function<void (::Ice::Int, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StartAgentPe(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StartAgentPe(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StartAgentPe(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_StartAgentPe(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StartAgentPe(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StartAgentPe(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StartAgentPe(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_StartAgentPe(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_StartAgentPe()
    {
        return begin_StartAgentPe(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartAgentPe(const ::Ice::Context& __ctx)
    {
        return begin_StartAgentPe(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartAgentPe(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartAgentPe(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartAgentPe(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartAgentPe(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartAgentPe(const ::VpsAgent::Callback_AgentReceiver_StartAgentPePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartAgentPe(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartAgentPe(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_StartAgentPePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartAgentPe(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_StartAgentPe(::std::string& __p_peHostIdent, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int StartAgentPe(::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_StartAgentPe(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void CancelBackup()
    {
        CancelBackup(0);
    }
    void CancelBackup(const ::Ice::Context& __ctx)
    {
        CancelBackup(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_CancelBackup(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_CancelBackup(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_CancelBackup(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_CancelBackup(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_CancelBackup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_CancelBackup(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_CancelBackup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_CancelBackup(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_CancelBackup(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_CancelBackup()
    {
        return begin_CancelBackup(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CancelBackup(const ::Ice::Context& __ctx)
    {
        return begin_CancelBackup(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CancelBackup(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CancelBackup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CancelBackup(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CancelBackup(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CancelBackup(const ::VpsAgent::Callback_AgentReceiver_CancelBackupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CancelBackup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CancelBackup(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_CancelBackupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CancelBackup(&__ctx, __del, __cookie);
    }

    void end_CancelBackup(const ::Ice::AsyncResultPtr&);
    
private:

    void CancelBackup(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_CancelBackup(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void NotifyHighPriority(const ::std::string& __p_diskIdent, ::Ice::Long __p_byteOffset)
    {
        NotifyHighPriority(__p_diskIdent, __p_byteOffset, 0);
    }
    void NotifyHighPriority(const ::std::string& __p_diskIdent, ::Ice::Long __p_byteOffset, const ::Ice::Context& __ctx)
    {
        NotifyHighPriority(__p_diskIdent, __p_byteOffset, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_NotifyHighPriority(const ::std::string& __p_diskIdent, ::Ice::Long __p_byteOffset, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_NotifyHighPriority(__p_diskIdent, __p_byteOffset, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_NotifyHighPriority(const ::std::string& __p_diskIdent, ::Ice::Long __p_byteOffset, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_NotifyHighPriority(__p_diskIdent, __p_byteOffset, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_NotifyHighPriority(const ::std::string& __p_diskIdent, ::Ice::Long __p_byteOffset, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_NotifyHighPriority(__p_diskIdent, __p_byteOffset, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_NotifyHighPriority(const ::std::string& __p_diskIdent, ::Ice::Long __p_byteOffset, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_NotifyHighPriority(__p_diskIdent, __p_byteOffset, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_NotifyHighPriority(const ::std::string& __p_diskIdent, ::Ice::Long __p_byteOffset, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_NotifyHighPriority(const ::std::string& __p_diskIdent, ::Ice::Long __p_byteOffset)
    {
        return begin_NotifyHighPriority(__p_diskIdent, __p_byteOffset, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_NotifyHighPriority(const ::std::string& __p_diskIdent, ::Ice::Long __p_byteOffset, const ::Ice::Context& __ctx)
    {
        return begin_NotifyHighPriority(__p_diskIdent, __p_byteOffset, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_NotifyHighPriority(const ::std::string& __p_diskIdent, ::Ice::Long __p_byteOffset, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NotifyHighPriority(__p_diskIdent, __p_byteOffset, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_NotifyHighPriority(const ::std::string& __p_diskIdent, ::Ice::Long __p_byteOffset, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NotifyHighPriority(__p_diskIdent, __p_byteOffset, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_NotifyHighPriority(const ::std::string& __p_diskIdent, ::Ice::Long __p_byteOffset, const ::VpsAgent::Callback_AgentReceiver_NotifyHighPriorityPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NotifyHighPriority(__p_diskIdent, __p_byteOffset, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_NotifyHighPriority(const ::std::string& __p_diskIdent, ::Ice::Long __p_byteOffset, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_NotifyHighPriorityPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_NotifyHighPriority(__p_diskIdent, __p_byteOffset, &__ctx, __del, __cookie);
    }

    void end_NotifyHighPriority(const ::Ice::AsyncResultPtr&);
    
private:

    void NotifyHighPriority(const ::std::string&, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_NotifyHighPriority(const ::std::string&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::BoxLogic::AgentStatus GetStatus()
    {
        return GetStatus(0);
    }
    ::BoxLogic::AgentStatus GetStatus(const ::Ice::Context& __ctx)
    {
        return GetStatus(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetStatus(const ::IceInternal::Function<void (const ::BoxLogic::AgentStatus&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetStatus(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetStatus(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetStatus(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::BoxLogic::AgentStatus&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetStatus(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetStatus(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetStatus(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::BoxLogic::AgentStatus&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetStatus()
    {
        return begin_GetStatus(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetStatus(const ::Ice::Context& __ctx)
    {
        return begin_GetStatus(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetStatus(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetStatus(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetStatus(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetStatus(const ::VpsAgent::Callback_AgentReceiver_GetStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetStatus(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_GetStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetStatus(&__ctx, __del, __cookie);
    }

    ::BoxLogic::AgentStatus end_GetStatus(const ::Ice::AsyncResultPtr&);
    
private:

    ::BoxLogic::AgentStatus GetStatus(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetStatus(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void StopCdpStatus()
    {
        StopCdpStatus(0);
    }
    void StopCdpStatus(const ::Ice::Context& __ctx)
    {
        StopCdpStatus(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_StopCdpStatus(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_StopCdpStatus(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_StopCdpStatus(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StopCdpStatus(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_StopCdpStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_StopCdpStatus(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_StopCdpStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StopCdpStatus(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_StopCdpStatus()
    {
        return begin_StopCdpStatus(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StopCdpStatus(const ::Ice::Context& __ctx)
    {
        return begin_StopCdpStatus(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StopCdpStatus(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopCdpStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopCdpStatus(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopCdpStatus(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopCdpStatus(const ::VpsAgent::Callback_AgentReceiver_StopCdpStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopCdpStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopCdpStatus(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_StopCdpStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopCdpStatus(&__ctx, __del, __cookie);
    }

    void end_StopCdpStatus(const ::Ice::AsyncResultPtr&);
    
private:

    void StopCdpStatus(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_StopCdpStatus(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool PackDebugFiles()
    {
        return PackDebugFiles(0);
    }
    bool PackDebugFiles(const ::Ice::Context& __ctx)
    {
        return PackDebugFiles(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_PackDebugFiles(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_PackDebugFiles(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_PackDebugFiles(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PackDebugFiles(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_PackDebugFiles(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_PackDebugFiles(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_PackDebugFiles(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_PackDebugFiles(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_PackDebugFiles(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_PackDebugFiles()
    {
        return begin_PackDebugFiles(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PackDebugFiles(const ::Ice::Context& __ctx)
    {
        return begin_PackDebugFiles(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_PackDebugFiles(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PackDebugFiles(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PackDebugFiles(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PackDebugFiles(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PackDebugFiles(const ::VpsAgent::Callback_AgentReceiver_PackDebugFilesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PackDebugFiles(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_PackDebugFiles(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_PackDebugFilesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_PackDebugFiles(&__ctx, __del, __cookie);
    }

    bool end_PackDebugFiles(const ::Ice::AsyncResultPtr&);
    
private:

    bool PackDebugFiles(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_PackDebugFiles(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int FetchDebugPacket(::Ice::Int __p_index, ::VpsAgent::BinaryStream& __p_data)
    {
        return FetchDebugPacket(__p_index, __p_data, 0);
    }
    ::Ice::Int FetchDebugPacket(::Ice::Int __p_index, ::VpsAgent::BinaryStream& __p_data, const ::Ice::Context& __ctx)
    {
        return FetchDebugPacket(__p_index, __p_data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_FetchDebugPacket(::Ice::Int __p_index, const ::IceInternal::Function<void (::Ice::Int, const ::VpsAgent::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_FetchDebugPacket(__p_index, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_FetchDebugPacket(::Ice::Int __p_index, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_FetchDebugPacket(__p_index, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_FetchDebugPacket(::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::VpsAgent::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_FetchDebugPacket(__p_index, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_FetchDebugPacket(::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_FetchDebugPacket(__p_index, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_FetchDebugPacket(::Ice::Int __p_index, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::VpsAgent::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_FetchDebugPacket(::Ice::Int __p_index)
    {
        return begin_FetchDebugPacket(__p_index, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_FetchDebugPacket(::Ice::Int __p_index, const ::Ice::Context& __ctx)
    {
        return begin_FetchDebugPacket(__p_index, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_FetchDebugPacket(::Ice::Int __p_index, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_FetchDebugPacket(__p_index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_FetchDebugPacket(::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_FetchDebugPacket(__p_index, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_FetchDebugPacket(::Ice::Int __p_index, const ::VpsAgent::Callback_AgentReceiver_FetchDebugPacketPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_FetchDebugPacket(__p_index, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_FetchDebugPacket(::Ice::Int __p_index, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_FetchDebugPacketPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_FetchDebugPacket(__p_index, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_FetchDebugPacket(::VpsAgent::BinaryStream& __p_data, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int FetchDebugPacket(::Ice::Int, ::VpsAgent::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_FetchDebugPacket(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void DoRestore(const ::std::string& __p_json, const ::VpsAgent::RestorePrx& __p_prx)
    {
        DoRestore(__p_json, __p_prx, 0);
    }
    void DoRestore(const ::std::string& __p_json, const ::VpsAgent::RestorePrx& __p_prx, const ::Ice::Context& __ctx)
    {
        DoRestore(__p_json, __p_prx, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_DoRestore(const ::std::string& __p_json, const ::VpsAgent::RestorePrx& __p_prx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_DoRestore(__p_json, __p_prx, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_DoRestore(const ::std::string& __p_json, const ::VpsAgent::RestorePrx& __p_prx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_DoRestore(__p_json, __p_prx, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_DoRestore(const ::std::string& __p_json, const ::VpsAgent::RestorePrx& __p_prx, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_DoRestore(__p_json, __p_prx, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_DoRestore(const ::std::string& __p_json, const ::VpsAgent::RestorePrx& __p_prx, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_DoRestore(__p_json, __p_prx, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_DoRestore(const ::std::string& __p_json, const ::VpsAgent::RestorePrx& __p_prx, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_DoRestore(const ::std::string& __p_json, const ::VpsAgent::RestorePrx& __p_prx)
    {
        return begin_DoRestore(__p_json, __p_prx, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DoRestore(const ::std::string& __p_json, const ::VpsAgent::RestorePrx& __p_prx, const ::Ice::Context& __ctx)
    {
        return begin_DoRestore(__p_json, __p_prx, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DoRestore(const ::std::string& __p_json, const ::VpsAgent::RestorePrx& __p_prx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DoRestore(__p_json, __p_prx, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DoRestore(const ::std::string& __p_json, const ::VpsAgent::RestorePrx& __p_prx, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DoRestore(__p_json, __p_prx, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DoRestore(const ::std::string& __p_json, const ::VpsAgent::RestorePrx& __p_prx, const ::VpsAgent::Callback_AgentReceiver_DoRestorePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DoRestore(__p_json, __p_prx, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DoRestore(const ::std::string& __p_json, const ::VpsAgent::RestorePrx& __p_prx, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_DoRestorePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DoRestore(__p_json, __p_prx, &__ctx, __del, __cookie);
    }

    void end_DoRestore(const ::Ice::AsyncResultPtr&);
    
private:

    void DoRestore(const ::std::string&, const ::VpsAgent::RestorePrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_DoRestore(const ::std::string&, const ::VpsAgent::RestorePrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void CancelRestore()
    {
        CancelRestore(0);
    }
    void CancelRestore(const ::Ice::Context& __ctx)
    {
        CancelRestore(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_CancelRestore(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_CancelRestore(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_CancelRestore(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_CancelRestore(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_CancelRestore(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_CancelRestore(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_CancelRestore(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_CancelRestore(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_CancelRestore(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_CancelRestore()
    {
        return begin_CancelRestore(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CancelRestore(const ::Ice::Context& __ctx)
    {
        return begin_CancelRestore(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CancelRestore(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CancelRestore(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CancelRestore(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CancelRestore(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CancelRestore(const ::VpsAgent::Callback_AgentReceiver_CancelRestorePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CancelRestore(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CancelRestore(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_CancelRestorePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CancelRestore(&__ctx, __del, __cookie);
    }

    void end_CancelRestore(const ::Ice::AsyncResultPtr&);
    
private:

    void CancelRestore(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_CancelRestore(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetServiceList(::Box::ServiceInfoStatusS& __p_ServiceList)
    {
        return GetServiceList(__p_ServiceList, 0);
    }
    ::Ice::Int GetServiceList(::Box::ServiceInfoStatusS& __p_ServiceList, const ::Ice::Context& __ctx)
    {
        return GetServiceList(__p_ServiceList, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetServiceList(const ::IceInternal::Function<void (::Ice::Int, const ::Box::ServiceInfoStatusS&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetServiceList(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetServiceList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetServiceList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetServiceList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Box::ServiceInfoStatusS&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetServiceList(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetServiceList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetServiceList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetServiceList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Box::ServiceInfoStatusS&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetServiceList()
    {
        return begin_GetServiceList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetServiceList(const ::Ice::Context& __ctx)
    {
        return begin_GetServiceList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetServiceList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetServiceList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetServiceList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetServiceList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetServiceList(const ::VpsAgent::Callback_AgentReceiver_GetServiceListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetServiceList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetServiceList(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_GetServiceListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetServiceList(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetServiceList(::Box::ServiceInfoStatusS& __p_ServiceList, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetServiceList(::Box::ServiceInfoStatusS&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetServiceList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetTcpListenList(const ::Box::vectorINT& __p_portList, ::Box::vectorINT& __p_pidList)
    {
        return GetTcpListenList(__p_portList, __p_pidList, 0);
    }
    ::Ice::Int GetTcpListenList(const ::Box::vectorINT& __p_portList, ::Box::vectorINT& __p_pidList, const ::Ice::Context& __ctx)
    {
        return GetTcpListenList(__p_portList, __p_pidList, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetTcpListenList(const ::Box::vectorINT& __p_portList, const ::IceInternal::Function<void (::Ice::Int, const ::Box::vectorINT&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetTcpListenList(__p_portList, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetTcpListenList(const ::Box::vectorINT& __p_portList, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetTcpListenList(__p_portList, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetTcpListenList(const ::Box::vectorINT& __p_portList, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Box::vectorINT&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetTcpListenList(__p_portList, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetTcpListenList(const ::Box::vectorINT& __p_portList, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetTcpListenList(__p_portList, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetTcpListenList(const ::Box::vectorINT& __p_portList, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Box::vectorINT&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetTcpListenList(const ::Box::vectorINT& __p_portList)
    {
        return begin_GetTcpListenList(__p_portList, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetTcpListenList(const ::Box::vectorINT& __p_portList, const ::Ice::Context& __ctx)
    {
        return begin_GetTcpListenList(__p_portList, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetTcpListenList(const ::Box::vectorINT& __p_portList, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTcpListenList(__p_portList, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetTcpListenList(const ::Box::vectorINT& __p_portList, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTcpListenList(__p_portList, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetTcpListenList(const ::Box::vectorINT& __p_portList, const ::VpsAgent::Callback_AgentReceiver_GetTcpListenListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTcpListenList(__p_portList, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetTcpListenList(const ::Box::vectorINT& __p_portList, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_GetTcpListenListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTcpListenList(__p_portList, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetTcpListenList(::Box::vectorINT& __p_pidList, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetTcpListenList(const ::Box::vectorINT&, ::Box::vectorINT&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetTcpListenList(const ::Box::vectorINT&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int StartServiceSync(const ::std::string& __p_ServiceName)
    {
        return StartServiceSync(__p_ServiceName, 0);
    }
    ::Ice::Int StartServiceSync(const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx)
    {
        return StartServiceSync(__p_ServiceName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_StartServiceSync(const ::std::string& __p_ServiceName, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StartServiceSync(__p_ServiceName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StartServiceSync(const ::std::string& __p_ServiceName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StartServiceSync(__p_ServiceName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_StartServiceSync(const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StartServiceSync(__p_ServiceName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StartServiceSync(const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StartServiceSync(__p_ServiceName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_StartServiceSync(const ::std::string& __p_ServiceName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_StartServiceSync(const ::std::string& __p_ServiceName)
    {
        return begin_StartServiceSync(__p_ServiceName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartServiceSync(const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx)
    {
        return begin_StartServiceSync(__p_ServiceName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartServiceSync(const ::std::string& __p_ServiceName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartServiceSync(__p_ServiceName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartServiceSync(const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartServiceSync(__p_ServiceName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartServiceSync(const ::std::string& __p_ServiceName, const ::VpsAgent::Callback_AgentReceiver_StartServiceSyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartServiceSync(__p_ServiceName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartServiceSync(const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_StartServiceSyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartServiceSync(__p_ServiceName, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_StartServiceSync(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int StartServiceSync(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_StartServiceSync(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int StopServiceSync(const ::std::string& __p_ServiceName)
    {
        return StopServiceSync(__p_ServiceName, 0);
    }
    ::Ice::Int StopServiceSync(const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx)
    {
        return StopServiceSync(__p_ServiceName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_StopServiceSync(const ::std::string& __p_ServiceName, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StopServiceSync(__p_ServiceName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StopServiceSync(const ::std::string& __p_ServiceName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StopServiceSync(__p_ServiceName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_StopServiceSync(const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StopServiceSync(__p_ServiceName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StopServiceSync(const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StopServiceSync(__p_ServiceName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_StopServiceSync(const ::std::string& __p_ServiceName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_StopServiceSync(const ::std::string& __p_ServiceName)
    {
        return begin_StopServiceSync(__p_ServiceName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StopServiceSync(const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx)
    {
        return begin_StopServiceSync(__p_ServiceName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StopServiceSync(const ::std::string& __p_ServiceName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopServiceSync(__p_ServiceName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopServiceSync(const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopServiceSync(__p_ServiceName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopServiceSync(const ::std::string& __p_ServiceName, const ::VpsAgent::Callback_AgentReceiver_StopServiceSyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopServiceSync(__p_ServiceName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopServiceSync(const ::std::string& __p_ServiceName, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_StopServiceSyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopServiceSync(__p_ServiceName, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_StopServiceSync(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int StopServiceSync(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_StopServiceSync(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int StartHttpDServiceAsync(::Ice::Int __p_port, const ::VpsAgent::BinaryStream& __p_bs)
    {
        return StartHttpDServiceAsync(__p_port, __p_bs, 0);
    }
    ::Ice::Int StartHttpDServiceAsync(::Ice::Int __p_port, const ::VpsAgent::BinaryStream& __p_bs, const ::Ice::Context& __ctx)
    {
        return StartHttpDServiceAsync(__p_port, __p_bs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_StartHttpDServiceAsync(::Ice::Int __p_port, const ::VpsAgent::BinaryStream& __p_bs, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StartHttpDServiceAsync(__p_port, __p_bs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StartHttpDServiceAsync(::Ice::Int __p_port, const ::VpsAgent::BinaryStream& __p_bs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StartHttpDServiceAsync(__p_port, __p_bs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_StartHttpDServiceAsync(::Ice::Int __p_port, const ::VpsAgent::BinaryStream& __p_bs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StartHttpDServiceAsync(__p_port, __p_bs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StartHttpDServiceAsync(::Ice::Int __p_port, const ::VpsAgent::BinaryStream& __p_bs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StartHttpDServiceAsync(__p_port, __p_bs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_StartHttpDServiceAsync(::Ice::Int __p_port, const ::VpsAgent::BinaryStream& __p_bs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_StartHttpDServiceAsync(::Ice::Int __p_port, const ::VpsAgent::BinaryStream& __p_bs)
    {
        return begin_StartHttpDServiceAsync(__p_port, __p_bs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartHttpDServiceAsync(::Ice::Int __p_port, const ::VpsAgent::BinaryStream& __p_bs, const ::Ice::Context& __ctx)
    {
        return begin_StartHttpDServiceAsync(__p_port, __p_bs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartHttpDServiceAsync(::Ice::Int __p_port, const ::VpsAgent::BinaryStream& __p_bs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartHttpDServiceAsync(__p_port, __p_bs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartHttpDServiceAsync(::Ice::Int __p_port, const ::VpsAgent::BinaryStream& __p_bs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartHttpDServiceAsync(__p_port, __p_bs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartHttpDServiceAsync(::Ice::Int __p_port, const ::VpsAgent::BinaryStream& __p_bs, const ::VpsAgent::Callback_AgentReceiver_StartHttpDServiceAsyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartHttpDServiceAsync(__p_port, __p_bs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartHttpDServiceAsync(::Ice::Int __p_port, const ::VpsAgent::BinaryStream& __p_bs, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_StartHttpDServiceAsyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartHttpDServiceAsync(__p_port, __p_bs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_StartHttpDServiceAsync(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int StartHttpDServiceAsync(::Ice::Int, const ::VpsAgent::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_StartHttpDServiceAsync(::Ice::Int, const ::VpsAgent::BinaryStream&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetHttpDServiceListSync(::Box::vectorINT& __p_pidList)
    {
        return GetHttpDServiceListSync(__p_pidList, 0);
    }
    ::Ice::Int GetHttpDServiceListSync(::Box::vectorINT& __p_pidList, const ::Ice::Context& __ctx)
    {
        return GetHttpDServiceListSync(__p_pidList, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetHttpDServiceListSync(const ::IceInternal::Function<void (::Ice::Int, const ::Box::vectorINT&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetHttpDServiceListSync(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetHttpDServiceListSync(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetHttpDServiceListSync(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetHttpDServiceListSync(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Box::vectorINT&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetHttpDServiceListSync(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetHttpDServiceListSync(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetHttpDServiceListSync(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetHttpDServiceListSync(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::Box::vectorINT&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetHttpDServiceListSync()
    {
        return begin_GetHttpDServiceListSync(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetHttpDServiceListSync(const ::Ice::Context& __ctx)
    {
        return begin_GetHttpDServiceListSync(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetHttpDServiceListSync(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetHttpDServiceListSync(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetHttpDServiceListSync(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetHttpDServiceListSync(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetHttpDServiceListSync(const ::VpsAgent::Callback_AgentReceiver_GetHttpDServiceListSyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetHttpDServiceListSync(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetHttpDServiceListSync(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_GetHttpDServiceListSyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetHttpDServiceListSync(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetHttpDServiceListSync(::Box::vectorINT& __p_pidList, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetHttpDServiceListSync(::Box::vectorINT&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetHttpDServiceListSync(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int StopAllHttpDServiceSync()
    {
        return StopAllHttpDServiceSync(0);
    }
    ::Ice::Int StopAllHttpDServiceSync(const ::Ice::Context& __ctx)
    {
        return StopAllHttpDServiceSync(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_StopAllHttpDServiceSync(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StopAllHttpDServiceSync(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StopAllHttpDServiceSync(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StopAllHttpDServiceSync(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_StopAllHttpDServiceSync(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_StopAllHttpDServiceSync(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_StopAllHttpDServiceSync(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_StopAllHttpDServiceSync(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_StopAllHttpDServiceSync(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_StopAllHttpDServiceSync()
    {
        return begin_StopAllHttpDServiceSync(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StopAllHttpDServiceSync(const ::Ice::Context& __ctx)
    {
        return begin_StopAllHttpDServiceSync(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StopAllHttpDServiceSync(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopAllHttpDServiceSync(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopAllHttpDServiceSync(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopAllHttpDServiceSync(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopAllHttpDServiceSync(const ::VpsAgent::Callback_AgentReceiver_StopAllHttpDServiceSyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopAllHttpDServiceSync(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopAllHttpDServiceSync(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_StopAllHttpDServiceSyncPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopAllHttpDServiceSync(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_StopAllHttpDServiceSync(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int StopAllHttpDServiceSync(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_StopAllHttpDServiceSync(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int testdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors)
    {
        return testdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0);
    }
    ::Ice::Int testdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx)
    {
        return testdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_testdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_testdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_testdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_testdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_testdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_testdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_testdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_testdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_testdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_testdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors)
    {
        return begin_testdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_testdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx)
    {
        return begin_testdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_testdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_testdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_testdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_testdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_testdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::VpsAgent::Callback_AgentReceiver_testdiskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_testdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_testdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_testdiskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_testdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_testdisk(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int testdisk(::Ice::Int, ::Ice::Long, ::Ice::Short, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_testdisk(::Ice::Int, ::Ice::Long, ::Ice::Short, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int readdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, ::VpsAgent::BinaryStream& __p_bs)
    {
        return readdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, __p_bs, 0);
    }
    ::Ice::Int readdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, ::VpsAgent::BinaryStream& __p_bs, const ::Ice::Context& __ctx)
    {
        return readdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, __p_bs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_readdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::IceInternal::Function<void (::Ice::Int, const ::VpsAgent::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_readdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_readdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_readdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_readdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::VpsAgent::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_readdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_readdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_readdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_readdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::VpsAgent::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_readdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors)
    {
        return begin_readdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx)
    {
        return begin_readdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::VpsAgent::Callback_AgentReceiver_readdiskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readdisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSectors, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_readdiskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readdisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSectors, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_readdisk(::VpsAgent::BinaryStream& __p_bs, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int readdisk(::Ice::Int, ::Ice::Long, ::Ice::Short, ::VpsAgent::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_readdisk(::Ice::Int, ::Ice::Long, ::Ice::Short, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int writedisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::VpsAgent::BinaryStream& __p_bs)
    {
        return writedisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, 0);
    }
    ::Ice::Int writedisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::VpsAgent::BinaryStream& __p_bs, const ::Ice::Context& __ctx)
    {
        return writedisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_writedisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::VpsAgent::BinaryStream& __p_bs, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_writedisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_writedisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::VpsAgent::BinaryStream& __p_bs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writedisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_writedisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::VpsAgent::BinaryStream& __p_bs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_writedisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_writedisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::VpsAgent::BinaryStream& __p_bs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writedisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_writedisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::VpsAgent::BinaryStream& __p_bs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_writedisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::VpsAgent::BinaryStream& __p_bs)
    {
        return begin_writedisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writedisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::VpsAgent::BinaryStream& __p_bs, const ::Ice::Context& __ctx)
    {
        return begin_writedisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writedisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::VpsAgent::BinaryStream& __p_bs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writedisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writedisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::VpsAgent::BinaryStream& __p_bs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writedisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writedisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::VpsAgent::BinaryStream& __p_bs, const ::VpsAgent::Callback_AgentReceiver_writediskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writedisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writedisk(::Ice::Int __p_diskIndex, ::Ice::Long __p_sectorOffset, ::Ice::Short __p_numberOfSector, const ::VpsAgent::BinaryStream& __p_bs, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_writediskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writedisk(__p_diskIndex, __p_sectorOffset, __p_numberOfSector, __p_bs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_writedisk(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int writedisk(::Ice::Int, ::Ice::Long, ::Ice::Short, const ::VpsAgent::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writedisk(::Ice::Int, ::Ice::Long, ::Ice::Short, const ::VpsAgent::BinaryStream&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string JsonFuncV2(const ::std::string& __p_inputJson, const ::VpsAgent::BinaryStream& __p_inputBs, ::VpsAgent::BinaryStream& __p_outputBs)
    {
        return JsonFuncV2(__p_inputJson, __p_inputBs, __p_outputBs, 0);
    }
    ::std::string JsonFuncV2(const ::std::string& __p_inputJson, const ::VpsAgent::BinaryStream& __p_inputBs, ::VpsAgent::BinaryStream& __p_outputBs, const ::Ice::Context& __ctx)
    {
        return JsonFuncV2(__p_inputJson, __p_inputBs, __p_outputBs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_JsonFuncV2(const ::std::string& __p_inputJson, const ::VpsAgent::BinaryStream& __p_inputBs, const ::IceInternal::Function<void (const ::std::string&, const ::VpsAgent::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_JsonFuncV2(__p_inputJson, __p_inputBs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_JsonFuncV2(const ::std::string& __p_inputJson, const ::VpsAgent::BinaryStream& __p_inputBs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_JsonFuncV2(__p_inputJson, __p_inputBs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_JsonFuncV2(const ::std::string& __p_inputJson, const ::VpsAgent::BinaryStream& __p_inputBs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&, const ::VpsAgent::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_JsonFuncV2(__p_inputJson, __p_inputBs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_JsonFuncV2(const ::std::string& __p_inputJson, const ::VpsAgent::BinaryStream& __p_inputBs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_JsonFuncV2(__p_inputJson, __p_inputBs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_JsonFuncV2(const ::std::string& __p_inputJson, const ::VpsAgent::BinaryStream& __p_inputBs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&, const ::VpsAgent::BinaryStream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_JsonFuncV2(const ::std::string& __p_inputJson, const ::VpsAgent::BinaryStream& __p_inputBs)
    {
        return begin_JsonFuncV2(__p_inputJson, __p_inputBs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_JsonFuncV2(const ::std::string& __p_inputJson, const ::VpsAgent::BinaryStream& __p_inputBs, const ::Ice::Context& __ctx)
    {
        return begin_JsonFuncV2(__p_inputJson, __p_inputBs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_JsonFuncV2(const ::std::string& __p_inputJson, const ::VpsAgent::BinaryStream& __p_inputBs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFuncV2(__p_inputJson, __p_inputBs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_JsonFuncV2(const ::std::string& __p_inputJson, const ::VpsAgent::BinaryStream& __p_inputBs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFuncV2(__p_inputJson, __p_inputBs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_JsonFuncV2(const ::std::string& __p_inputJson, const ::VpsAgent::BinaryStream& __p_inputBs, const ::VpsAgent::Callback_AgentReceiver_JsonFuncV2Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFuncV2(__p_inputJson, __p_inputBs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_JsonFuncV2(const ::std::string& __p_inputJson, const ::VpsAgent::BinaryStream& __p_inputBs, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_AgentReceiver_JsonFuncV2Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_JsonFuncV2(__p_inputJson, __p_inputBs, &__ctx, __del, __cookie);
    }

    ::std::string end_JsonFuncV2(::VpsAgent::BinaryStream& __p_outputBs, const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string JsonFuncV2(const ::std::string&, const ::VpsAgent::BinaryStream&, ::VpsAgent::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_JsonFuncV2(const ::std::string&, const ::VpsAgent::BinaryStream&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_secure(bool __secure) const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_twoway() const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_oneway() const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_batchOneway() const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_datagram() const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_batchDatagram() const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_compress(bool __compress) const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_timeout(int __timeout) const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AgentReceiver> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<AgentReceiver*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Session : virtual public ::IceProxy::Ice::Object
{
public:

    ::std::string QueryName()
    {
        return QueryName(0);
    }
    ::std::string QueryName(const ::Ice::Context& __ctx)
    {
        return QueryName(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_QueryName(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QueryName(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QueryName(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QueryName(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_QueryName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QueryName(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QueryName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QueryName(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_QueryName(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_QueryName()
    {
        return begin_QueryName(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QueryName(const ::Ice::Context& __ctx)
    {
        return begin_QueryName(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QueryName(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryName(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryName(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryName(const ::VpsAgent::Callback_Session_QueryNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryName(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Session_QueryNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryName(&__ctx, __del, __cookie);
    }

    ::std::string end_QueryName(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string QueryName(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_QueryName(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string QueryIdentity()
    {
        return QueryIdentity(0);
    }
    ::std::string QueryIdentity(const ::Ice::Context& __ctx)
    {
        return QueryIdentity(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_QueryIdentity(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QueryIdentity(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QueryIdentity(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QueryIdentity(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_QueryIdentity(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QueryIdentity(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QueryIdentity(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QueryIdentity(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_QueryIdentity(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_QueryIdentity()
    {
        return begin_QueryIdentity(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QueryIdentity(const ::Ice::Context& __ctx)
    {
        return begin_QueryIdentity(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QueryIdentity(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryIdentity(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryIdentity(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryIdentity(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryIdentity(const ::VpsAgent::Callback_Session_QueryIdentityPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryIdentity(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryIdentity(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Session_QueryIdentityPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryIdentity(&__ctx, __del, __cookie);
    }

    ::std::string end_QueryIdentity(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string QueryIdentity(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_QueryIdentity(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string QuerySoftIdent()
    {
        return QuerySoftIdent(0);
    }
    ::std::string QuerySoftIdent(const ::Ice::Context& __ctx)
    {
        return QuerySoftIdent(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_QuerySoftIdent(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QuerySoftIdent(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QuerySoftIdent(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QuerySoftIdent(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_QuerySoftIdent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QuerySoftIdent(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QuerySoftIdent(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QuerySoftIdent(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_QuerySoftIdent(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_QuerySoftIdent()
    {
        return begin_QuerySoftIdent(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QuerySoftIdent(const ::Ice::Context& __ctx)
    {
        return begin_QuerySoftIdent(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QuerySoftIdent(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySoftIdent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QuerySoftIdent(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySoftIdent(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QuerySoftIdent(const ::VpsAgent::Callback_Session_QuerySoftIdentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySoftIdent(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QuerySoftIdent(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Session_QuerySoftIdentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QuerySoftIdent(&__ctx, __del, __cookie);
    }

    ::std::string end_QuerySoftIdent(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string QuerySoftIdent(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_QuerySoftIdent(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string QueryJsonData(const ::std::string& __p_inputJson)
    {
        return QueryJsonData(__p_inputJson, 0);
    }
    ::std::string QueryJsonData(const ::std::string& __p_inputJson, const ::Ice::Context& __ctx)
    {
        return QueryJsonData(__p_inputJson, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_QueryJsonData(const ::std::string& __p_inputJson, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QueryJsonData(__p_inputJson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QueryJsonData(const ::std::string& __p_inputJson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QueryJsonData(__p_inputJson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_QueryJsonData(const ::std::string& __p_inputJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_QueryJsonData(__p_inputJson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_QueryJsonData(const ::std::string& __p_inputJson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_QueryJsonData(__p_inputJson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_QueryJsonData(const ::std::string& __p_inputJson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_QueryJsonData(const ::std::string& __p_inputJson)
    {
        return begin_QueryJsonData(__p_inputJson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QueryJsonData(const ::std::string& __p_inputJson, const ::Ice::Context& __ctx)
    {
        return begin_QueryJsonData(__p_inputJson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_QueryJsonData(const ::std::string& __p_inputJson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryJsonData(__p_inputJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryJsonData(const ::std::string& __p_inputJson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryJsonData(__p_inputJson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryJsonData(const ::std::string& __p_inputJson, const ::VpsAgent::Callback_Session_QueryJsonDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryJsonData(__p_inputJson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_QueryJsonData(const ::std::string& __p_inputJson, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Session_QueryJsonDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_QueryJsonData(__p_inputJson, &__ctx, __del, __cookie);
    }

    ::std::string end_QueryJsonData(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string QueryJsonData(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_QueryJsonData(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void destroy()
    {
        destroy(0);
    }
    void destroy(const ::Ice::Context& __ctx)
    {
        destroy(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_destroy()
    {
        return begin_destroy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx)
    {
        return begin_destroy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::VpsAgent::Callback_Session_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Session_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    void end_destroy(const ::Ice::AsyncResultPtr&);
    
private:

    void destroy(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void initiateReceiver(const ::Ice::Identity& __p_ident)
    {
        initiateReceiver(__p_ident, 0);
    }
    void initiateReceiver(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx)
    {
        initiateReceiver(__p_ident, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_initiateReceiver(const ::Ice::Identity& __p_ident, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_initiateReceiver(__p_ident, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_initiateReceiver(const ::Ice::Identity& __p_ident, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initiateReceiver(__p_ident, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initiateReceiver(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_initiateReceiver(__p_ident, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_initiateReceiver(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initiateReceiver(__p_ident, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_initiateReceiver(const ::Ice::Identity& __p_ident, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_initiateReceiver(const ::Ice::Identity& __p_ident)
    {
        return begin_initiateReceiver(__p_ident, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initiateReceiver(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx)
    {
        return begin_initiateReceiver(__p_ident, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initiateReceiver(const ::Ice::Identity& __p_ident, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateReceiver(__p_ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateReceiver(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateReceiver(__p_ident, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateReceiver(const ::Ice::Identity& __p_ident, const ::VpsAgent::Callback_Session_initiateReceiverPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateReceiver(__p_ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateReceiver(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Session_initiateReceiverPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initiateReceiver(__p_ident, &__ctx, __del, __cookie);
    }

    void end_initiateReceiver(const ::Ice::AsyncResultPtr&);
    
private:

    void initiateReceiver(const ::Ice::Identity&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_initiateReceiver(const ::Ice::Identity&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void refresh()
    {
        refresh(0);
    }
    void refresh(const ::Ice::Context& __ctx)
    {
        refresh(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_refresh(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_refresh(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_refresh(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_refresh(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_refresh(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_refresh(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_refresh(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_refresh(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_refresh()
    {
        return begin_refresh(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::Context& __ctx)
    {
        return begin_refresh(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::VpsAgent::Callback_Session_refreshPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Session_refreshPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refresh(&__ctx, __del, __cookie);
    }

    void end_refresh(const ::Ice::AsyncResultPtr&);
    
private:

    void refresh(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_refresh(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reportRestoreStatus(const ::std::string& __p_token, const ::BoxLogic::RestoreProgress& __p_progress, bool __p_finished)
    {
        reportRestoreStatus(__p_token, __p_progress, __p_finished, 0);
    }
    void reportRestoreStatus(const ::std::string& __p_token, const ::BoxLogic::RestoreProgress& __p_progress, bool __p_finished, const ::Ice::Context& __ctx)
    {
        reportRestoreStatus(__p_token, __p_progress, __p_finished, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reportRestoreStatus(const ::std::string& __p_token, const ::BoxLogic::RestoreProgress& __p_progress, bool __p_finished, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_reportRestoreStatus(__p_token, __p_progress, __p_finished, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_reportRestoreStatus(const ::std::string& __p_token, const ::BoxLogic::RestoreProgress& __p_progress, bool __p_finished, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reportRestoreStatus(__p_token, __p_progress, __p_finished, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reportRestoreStatus(const ::std::string& __p_token, const ::BoxLogic::RestoreProgress& __p_progress, bool __p_finished, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_reportRestoreStatus(__p_token, __p_progress, __p_finished, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_reportRestoreStatus(const ::std::string& __p_token, const ::BoxLogic::RestoreProgress& __p_progress, bool __p_finished, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reportRestoreStatus(__p_token, __p_progress, __p_finished, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_reportRestoreStatus(const ::std::string& __p_token, const ::BoxLogic::RestoreProgress& __p_progress, bool __p_finished, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_reportRestoreStatus(const ::std::string& __p_token, const ::BoxLogic::RestoreProgress& __p_progress, bool __p_finished)
    {
        return begin_reportRestoreStatus(__p_token, __p_progress, __p_finished, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reportRestoreStatus(const ::std::string& __p_token, const ::BoxLogic::RestoreProgress& __p_progress, bool __p_finished, const ::Ice::Context& __ctx)
    {
        return begin_reportRestoreStatus(__p_token, __p_progress, __p_finished, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reportRestoreStatus(const ::std::string& __p_token, const ::BoxLogic::RestoreProgress& __p_progress, bool __p_finished, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportRestoreStatus(__p_token, __p_progress, __p_finished, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reportRestoreStatus(const ::std::string& __p_token, const ::BoxLogic::RestoreProgress& __p_progress, bool __p_finished, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportRestoreStatus(__p_token, __p_progress, __p_finished, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reportRestoreStatus(const ::std::string& __p_token, const ::BoxLogic::RestoreProgress& __p_progress, bool __p_finished, const ::VpsAgent::Callback_Session_reportRestoreStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportRestoreStatus(__p_token, __p_progress, __p_finished, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reportRestoreStatus(const ::std::string& __p_token, const ::BoxLogic::RestoreProgress& __p_progress, bool __p_finished, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Session_reportRestoreStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reportRestoreStatus(__p_token, __p_progress, __p_finished, &__ctx, __del, __cookie);
    }

    void end_reportRestoreStatus(const ::Ice::AsyncResultPtr&);
    
private:

    void reportRestoreStatus(const ::std::string&, const ::BoxLogic::RestoreProgress&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reportRestoreStatus(const ::std::string&, const ::BoxLogic::RestoreProgress&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::BoxLogic::LastCdpDetail queryLastCdpDetailByRestoreToken(const ::std::string& __p_token)
    {
        return queryLastCdpDetailByRestoreToken(__p_token, 0);
    }
    ::BoxLogic::LastCdpDetail queryLastCdpDetailByRestoreToken(const ::std::string& __p_token, const ::Ice::Context& __ctx)
    {
        return queryLastCdpDetailByRestoreToken(__p_token, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_queryLastCdpDetailByRestoreToken(const ::std::string& __p_token, const ::IceInternal::Function<void (const ::BoxLogic::LastCdpDetail&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryLastCdpDetailByRestoreToken(__p_token, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryLastCdpDetailByRestoreToken(const ::std::string& __p_token, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryLastCdpDetailByRestoreToken(__p_token, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_queryLastCdpDetailByRestoreToken(const ::std::string& __p_token, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::BoxLogic::LastCdpDetail&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryLastCdpDetailByRestoreToken(__p_token, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryLastCdpDetailByRestoreToken(const ::std::string& __p_token, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryLastCdpDetailByRestoreToken(__p_token, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_queryLastCdpDetailByRestoreToken(const ::std::string& __p_token, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::BoxLogic::LastCdpDetail&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_queryLastCdpDetailByRestoreToken(const ::std::string& __p_token)
    {
        return begin_queryLastCdpDetailByRestoreToken(__p_token, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryLastCdpDetailByRestoreToken(const ::std::string& __p_token, const ::Ice::Context& __ctx)
    {
        return begin_queryLastCdpDetailByRestoreToken(__p_token, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryLastCdpDetailByRestoreToken(const ::std::string& __p_token, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryLastCdpDetailByRestoreToken(__p_token, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryLastCdpDetailByRestoreToken(const ::std::string& __p_token, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryLastCdpDetailByRestoreToken(__p_token, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryLastCdpDetailByRestoreToken(const ::std::string& __p_token, const ::VpsAgent::Callback_Session_queryLastCdpDetailByRestoreTokenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryLastCdpDetailByRestoreToken(__p_token, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryLastCdpDetailByRestoreToken(const ::std::string& __p_token, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Session_queryLastCdpDetailByRestoreTokenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryLastCdpDetailByRestoreToken(__p_token, &__ctx, __del, __cookie);
    }

    ::BoxLogic::LastCdpDetail end_queryLastCdpDetailByRestoreToken(const ::Ice::AsyncResultPtr&);
    
private:

    ::BoxLogic::LastCdpDetail queryLastCdpDetailByRestoreToken(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_queryLastCdpDetailByRestoreToken(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool queryLastCdpDetailByCdpToken(const ::std::string& __p_token, ::BoxLogic::LastCdpDetail& __p_detail)
    {
        return queryLastCdpDetailByCdpToken(__p_token, __p_detail, 0);
    }
    bool queryLastCdpDetailByCdpToken(const ::std::string& __p_token, ::BoxLogic::LastCdpDetail& __p_detail, const ::Ice::Context& __ctx)
    {
        return queryLastCdpDetailByCdpToken(__p_token, __p_detail, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_queryLastCdpDetailByCdpToken(const ::std::string& __p_token, const ::IceInternal::Function<void (bool, const ::BoxLogic::LastCdpDetail&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryLastCdpDetailByCdpToken(__p_token, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryLastCdpDetailByCdpToken(const ::std::string& __p_token, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryLastCdpDetailByCdpToken(__p_token, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_queryLastCdpDetailByCdpToken(const ::std::string& __p_token, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::BoxLogic::LastCdpDetail&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_queryLastCdpDetailByCdpToken(__p_token, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_queryLastCdpDetailByCdpToken(const ::std::string& __p_token, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_queryLastCdpDetailByCdpToken(__p_token, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_queryLastCdpDetailByCdpToken(const ::std::string& __p_token, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::BoxLogic::LastCdpDetail&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_queryLastCdpDetailByCdpToken(const ::std::string& __p_token)
    {
        return begin_queryLastCdpDetailByCdpToken(__p_token, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryLastCdpDetailByCdpToken(const ::std::string& __p_token, const ::Ice::Context& __ctx)
    {
        return begin_queryLastCdpDetailByCdpToken(__p_token, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_queryLastCdpDetailByCdpToken(const ::std::string& __p_token, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryLastCdpDetailByCdpToken(__p_token, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryLastCdpDetailByCdpToken(const ::std::string& __p_token, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryLastCdpDetailByCdpToken(__p_token, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryLastCdpDetailByCdpToken(const ::std::string& __p_token, const ::VpsAgent::Callback_Session_queryLastCdpDetailByCdpTokenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryLastCdpDetailByCdpToken(__p_token, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_queryLastCdpDetailByCdpToken(const ::std::string& __p_token, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Session_queryLastCdpDetailByCdpTokenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_queryLastCdpDetailByCdpToken(__p_token, &__ctx, __del, __cookie);
    }

    bool end_queryLastCdpDetailByCdpToken(::BoxLogic::LastCdpDetail& __p_detail, const ::Ice::AsyncResultPtr&);
    
private:

    bool queryLastCdpDetailByCdpToken(const ::std::string&, ::BoxLogic::LastCdpDetail&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_queryLastCdpDetailByCdpToken(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPreReadBitmap(const ::std::string& __p_token, ::Ice::Long __p_index, const ::VpsAgent::BinaryStream& __p_bitmap)
    {
        setPreReadBitmap(__p_token, __p_index, __p_bitmap, 0);
    }
    void setPreReadBitmap(const ::std::string& __p_token, ::Ice::Long __p_index, const ::VpsAgent::BinaryStream& __p_bitmap, const ::Ice::Context& __ctx)
    {
        setPreReadBitmap(__p_token, __p_index, __p_bitmap, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPreReadBitmap(const ::std::string& __p_token, ::Ice::Long __p_index, const ::VpsAgent::BinaryStream& __p_bitmap, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPreReadBitmap(const ::std::string& __p_token, ::Ice::Long __p_index, const ::VpsAgent::BinaryStream& __p_bitmap, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPreReadBitmap(const ::std::string& __p_token, ::Ice::Long __p_index, const ::VpsAgent::BinaryStream& __p_bitmap, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPreReadBitmap(const ::std::string& __p_token, ::Ice::Long __p_index, const ::VpsAgent::BinaryStream& __p_bitmap, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setPreReadBitmap(const ::std::string& __p_token, ::Ice::Long __p_index, const ::VpsAgent::BinaryStream& __p_bitmap, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setPreReadBitmap(const ::std::string& __p_token, ::Ice::Long __p_index, const ::VpsAgent::BinaryStream& __p_bitmap)
    {
        return begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPreReadBitmap(const ::std::string& __p_token, ::Ice::Long __p_index, const ::VpsAgent::BinaryStream& __p_bitmap, const ::Ice::Context& __ctx)
    {
        return begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPreReadBitmap(const ::std::string& __p_token, ::Ice::Long __p_index, const ::VpsAgent::BinaryStream& __p_bitmap, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPreReadBitmap(const ::std::string& __p_token, ::Ice::Long __p_index, const ::VpsAgent::BinaryStream& __p_bitmap, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPreReadBitmap(const ::std::string& __p_token, ::Ice::Long __p_index, const ::VpsAgent::BinaryStream& __p_bitmap, const ::VpsAgent::Callback_Session_setPreReadBitmapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPreReadBitmap(const ::std::string& __p_token, ::Ice::Long __p_index, const ::VpsAgent::BinaryStream& __p_bitmap, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_Session_setPreReadBitmapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPreReadBitmap(__p_token, __p_index, __p_bitmap, &__ctx, __del, __cookie);
    }

    void end_setPreReadBitmap(const ::Ice::AsyncResultPtr&);
    
private:

    void setPreReadBitmap(const ::std::string&, ::Ice::Long, const ::VpsAgent::BinaryStream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPreReadBitmap(const ::std::string&, ::Ice::Long, const ::VpsAgent::BinaryStream&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Session> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_secure(bool __secure) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_twoway() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_oneway() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_batchOneway() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_datagram() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_batchDatagram() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_compress(bool __compress) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class SessionFactory : virtual public ::IceProxy::Ice::Object
{
public:

    ::VpsAgent::SessionPrx create(const ::VpsAgent::AgentIdentification& __p_id, const ::std::string& __p_info)
    {
        return create(__p_id, __p_info, 0);
    }
    ::VpsAgent::SessionPrx create(const ::VpsAgent::AgentIdentification& __p_id, const ::std::string& __p_info, const ::Ice::Context& __ctx)
    {
        return create(__p_id, __p_info, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_create(const ::VpsAgent::AgentIdentification& __p_id, const ::std::string& __p_info, const ::IceInternal::Function<void (const ::VpsAgent::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_create(__p_id, __p_info, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_create(const ::VpsAgent::AgentIdentification& __p_id, const ::std::string& __p_info, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_create(__p_id, __p_info, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_create(const ::VpsAgent::AgentIdentification& __p_id, const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::VpsAgent::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_create(__p_id, __p_info, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_create(const ::VpsAgent::AgentIdentification& __p_id, const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_create(__p_id, __p_info, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_create(const ::VpsAgent::AgentIdentification& __p_id, const ::std::string& __p_info, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::VpsAgent::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_create(const ::VpsAgent::AgentIdentification& __p_id, const ::std::string& __p_info)
    {
        return begin_create(__p_id, __p_info, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_create(const ::VpsAgent::AgentIdentification& __p_id, const ::std::string& __p_info, const ::Ice::Context& __ctx)
    {
        return begin_create(__p_id, __p_info, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_create(const ::VpsAgent::AgentIdentification& __p_id, const ::std::string& __p_info, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(__p_id, __p_info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::VpsAgent::AgentIdentification& __p_id, const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(__p_id, __p_info, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::VpsAgent::AgentIdentification& __p_id, const ::std::string& __p_info, const ::VpsAgent::Callback_SessionFactory_createPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(__p_id, __p_info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::VpsAgent::AgentIdentification& __p_id, const ::std::string& __p_info, const ::Ice::Context& __ctx, const ::VpsAgent::Callback_SessionFactory_createPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(__p_id, __p_info, &__ctx, __del, __cookie);
    }

    ::VpsAgent::SessionPrx end_create(const ::Ice::AsyncResultPtr&);
    
private:

    ::VpsAgent::SessionPrx create(const ::VpsAgent::AgentIdentification&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_create(const ::VpsAgent::AgentIdentification&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_secure(bool __secure) const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_twoway() const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_oneway() const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_batchOneway() const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_datagram() const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_batchDatagram() const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_compress(bool __compress) const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_timeout(int __timeout) const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SessionFactory> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<SessionFactory*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace VpsAgent
{

class Services : virtual public ::Ice::Object
{
public:

    typedef ServicesPrx ProxyType;
    typedef ServicesPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void ping(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ping(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Services& l, const Services& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Services& l, const Services& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Backup : virtual public ::Ice::Object
{
public:

    typedef BackupPrx ProxyType;
    typedef BackupPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void PostSectorData(::Ice::Int, const ::VpsAgent::SectorRange&, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___PostSectorData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void PostSectorDataEx(::Ice::Int, ::Ice::Int, const ::VpsAgent::SectorRange&, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___PostSectorDataEx(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void PostSectorDataExV2(const ::VpsAgent::PostSectors&, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___PostSectorDataExV2(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void PostBakDataExt(const ::VpsAgent::PostExtDataVector&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___PostBakDataExt(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool GetBakDataExt(const ::VpsAgent::GetExtDataVector&, ::VpsAgent::PostExtDataVector&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetBakDataExt(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void PostUsedBlockBitmap(::Ice::Int, const ::VpsAgent::BinaryStream&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___PostUsedBlockBitmap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void PostDuplicateFileSectors(::Ice::Int, const ::IMG::DuplicateFileSectors&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___PostDuplicateFileSectors(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void PostCurrentFileList(const ::VpsAgent::BinaryStream&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___PostCurrentFileList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool GetFileListFromDuplicateFilePool(::VpsAgent::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetFileListFromDuplicateFilePool(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void ReportStatus(const ::BoxLogic::BackupProgress&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ReportStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void Exit(::BoxLogic::BackupFinishCode, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Exit(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Backup& l, const Backup& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Backup& l, const Backup& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Restore : virtual public ::Ice::Object
{
public:

    typedef RestorePrx ProxyType;
    typedef RestorePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int getUesdBlockBitmap(const ::std::string&, ::Ice::Int, ::VpsAgent::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getUesdBlockBitmap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reportStatus(::BoxLogic::RestoreStageCode, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reportStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Restore& l, const Restore& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Restore& l, const Restore& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class AgentReceiver : virtual public ::Ice::Object
{
public:

    typedef AgentReceiverPrx ProxyType;
    typedef AgentReceiverPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void check(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___check(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string JsonFunc(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___JsonFunc(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string QuerySystemInfo(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___QuerySystemInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void QueryDisksStatus(::BoxLogic::Disks&, IceUtil::Optional< ::std::string>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___QueryDisksStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void DoBackup(const ::VpsAgent::SnapshotNames&, const ::VpsAgent::BackupPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___DoBackup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void DoBackupEx(const ::VpsAgent::SnapshotNames&, const ::VpsAgent::SnapshotConfigs&, const ::VpsAgent::BackupPrx&, const IceUtil::Optional< ::std::string>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___DoBackupEx(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string GetLastBackupError(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetLastBackupError(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string GetLastCdpError(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetLastCdpError(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int StartAgentPe(::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___StartAgentPe(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void CancelBackup(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___CancelBackup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void NotifyHighPriority(const ::std::string&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___NotifyHighPriority(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::BoxLogic::AgentStatus GetStatus(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void StopCdpStatus(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___StopCdpStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool PackDebugFiles(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___PackDebugFiles(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int FetchDebugPacket(::Ice::Int, ::VpsAgent::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___FetchDebugPacket(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void DoRestore(const ::std::string&, const ::VpsAgent::RestorePrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___DoRestore(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void CancelRestore(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___CancelRestore(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetServiceList(::Box::ServiceInfoStatusS&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetServiceList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetTcpListenList(const ::Box::vectorINT&, ::Box::vectorINT&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetTcpListenList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int StartServiceSync(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___StartServiceSync(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int StopServiceSync(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___StopServiceSync(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int StartHttpDServiceAsync(::Ice::Int, const ::VpsAgent::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___StartHttpDServiceAsync(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetHttpDServiceListSync(::Box::vectorINT&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetHttpDServiceListSync(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int StopAllHttpDServiceSync(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___StopAllHttpDServiceSync(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int testdisk(::Ice::Int, ::Ice::Long, ::Ice::Short, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___testdisk(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int readdisk(::Ice::Int, ::Ice::Long, ::Ice::Short, ::VpsAgent::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___readdisk(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int writedisk(::Ice::Int, ::Ice::Long, ::Ice::Short, const ::VpsAgent::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writedisk(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string JsonFuncV2(const ::std::string&, const ::VpsAgent::BinaryStream&, ::VpsAgent::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___JsonFuncV2(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const AgentReceiver& l, const AgentReceiver& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const AgentReceiver& l, const AgentReceiver& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Session : virtual public ::Ice::Object
{
public:

    typedef SessionPrx ProxyType;
    typedef SessionPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::std::string QueryName(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___QueryName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string QueryIdentity(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___QueryIdentity(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string QuerySoftIdent(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___QuerySoftIdent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string QueryJsonData(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___QueryJsonData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void destroy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___destroy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void initiateReceiver(const ::Ice::Identity&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___initiateReceiver(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void refresh(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___refresh(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reportRestoreStatus(const ::std::string&, const ::BoxLogic::RestoreProgress&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reportRestoreStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::BoxLogic::LastCdpDetail queryLastCdpDetailByRestoreToken(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___queryLastCdpDetailByRestoreToken(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool queryLastCdpDetailByCdpToken(const ::std::string&, ::BoxLogic::LastCdpDetail&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___queryLastCdpDetailByCdpToken(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPreReadBitmap(const ::std::string&, ::Ice::Long, const ::VpsAgent::BinaryStream&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPreReadBitmap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Session& l, const Session& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Session& l, const Session& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class SessionFactory : virtual public ::Ice::Object
{
public:

    typedef SessionFactoryPrx ProxyType;
    typedef SessionFactoryPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::VpsAgent::SessionPrx create(const ::VpsAgent::AgentIdentification&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___create(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const SessionFactory& l, const SessionFactory& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SessionFactory& l, const SessionFactory& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace VpsAgent
{

template<class T>
class CallbackNC_Services_ping : public Callback_Services_ping_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Services_ping(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Services_pingPtr
newCallback_Services_ping(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Services_ping<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Services_pingPtr
newCallback_Services_ping(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Services_ping<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Services_pingPtr
newCallback_Services_ping(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Services_ping<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Services_pingPtr
newCallback_Services_ping(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Services_ping<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Services_ping : public Callback_Services_ping_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Services_ping(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Services_pingPtr
newCallback_Services_ping(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Services_ping<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Services_pingPtr
newCallback_Services_ping(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Services_ping<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Services_pingPtr
newCallback_Services_ping(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Services_ping<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Services_pingPtr
newCallback_Services_ping(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Services_ping<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Backup_PostSectorData : public Callback_Backup_PostSectorData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Backup_PostSectorData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_PostSectorData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Backup_PostSectorDataPtr
newCallback_Backup_PostSectorData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostSectorData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_PostSectorDataPtr
newCallback_Backup_PostSectorData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostSectorData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Backup_PostSectorDataPtr
newCallback_Backup_PostSectorData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostSectorData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_PostSectorDataPtr
newCallback_Backup_PostSectorData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostSectorData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Backup_PostSectorData : public Callback_Backup_PostSectorData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Backup_PostSectorData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_PostSectorData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Backup_PostSectorDataPtr
newCallback_Backup_PostSectorData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostSectorData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostSectorDataPtr
newCallback_Backup_PostSectorData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostSectorData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostSectorDataPtr
newCallback_Backup_PostSectorData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostSectorData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostSectorDataPtr
newCallback_Backup_PostSectorData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostSectorData<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Backup_PostSectorDataEx : public Callback_Backup_PostSectorDataEx_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Backup_PostSectorDataEx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_PostSectorDataEx(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Backup_PostSectorDataExPtr
newCallback_Backup_PostSectorDataEx(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostSectorDataEx<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_PostSectorDataExPtr
newCallback_Backup_PostSectorDataEx(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostSectorDataEx<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Backup_PostSectorDataExPtr
newCallback_Backup_PostSectorDataEx(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostSectorDataEx<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_PostSectorDataExPtr
newCallback_Backup_PostSectorDataEx(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostSectorDataEx<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Backup_PostSectorDataEx : public Callback_Backup_PostSectorDataEx_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Backup_PostSectorDataEx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_PostSectorDataEx(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Backup_PostSectorDataExPtr
newCallback_Backup_PostSectorDataEx(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostSectorDataEx<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostSectorDataExPtr
newCallback_Backup_PostSectorDataEx(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostSectorDataEx<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostSectorDataExPtr
newCallback_Backup_PostSectorDataEx(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostSectorDataEx<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostSectorDataExPtr
newCallback_Backup_PostSectorDataEx(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostSectorDataEx<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Backup_PostSectorDataExV2 : public Callback_Backup_PostSectorDataExV2_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Backup_PostSectorDataExV2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_PostSectorDataExV2(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Backup_PostSectorDataExV2Ptr
newCallback_Backup_PostSectorDataExV2(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostSectorDataExV2<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_PostSectorDataExV2Ptr
newCallback_Backup_PostSectorDataExV2(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostSectorDataExV2<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Backup_PostSectorDataExV2Ptr
newCallback_Backup_PostSectorDataExV2(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostSectorDataExV2<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_PostSectorDataExV2Ptr
newCallback_Backup_PostSectorDataExV2(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostSectorDataExV2<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Backup_PostSectorDataExV2 : public Callback_Backup_PostSectorDataExV2_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Backup_PostSectorDataExV2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_PostSectorDataExV2(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Backup_PostSectorDataExV2Ptr
newCallback_Backup_PostSectorDataExV2(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostSectorDataExV2<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostSectorDataExV2Ptr
newCallback_Backup_PostSectorDataExV2(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostSectorDataExV2<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostSectorDataExV2Ptr
newCallback_Backup_PostSectorDataExV2(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostSectorDataExV2<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostSectorDataExV2Ptr
newCallback_Backup_PostSectorDataExV2(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostSectorDataExV2<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Backup_PostBakDataExt : public Callback_Backup_PostBakDataExt_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Backup_PostBakDataExt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_PostBakDataExt(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Backup_PostBakDataExtPtr
newCallback_Backup_PostBakDataExt(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostBakDataExt<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_PostBakDataExtPtr
newCallback_Backup_PostBakDataExt(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostBakDataExt<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Backup_PostBakDataExtPtr
newCallback_Backup_PostBakDataExt(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostBakDataExt<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_PostBakDataExtPtr
newCallback_Backup_PostBakDataExt(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostBakDataExt<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Backup_PostBakDataExt : public Callback_Backup_PostBakDataExt_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Backup_PostBakDataExt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_PostBakDataExt(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Backup_PostBakDataExtPtr
newCallback_Backup_PostBakDataExt(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostBakDataExt<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostBakDataExtPtr
newCallback_Backup_PostBakDataExt(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostBakDataExt<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostBakDataExtPtr
newCallback_Backup_PostBakDataExt(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostBakDataExt<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostBakDataExtPtr
newCallback_Backup_PostBakDataExt(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostBakDataExt<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Backup_GetBakDataExt : public Callback_Backup_GetBakDataExt_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::VpsAgent::PostExtDataVector&);

    CallbackNC_Backup_GetBakDataExt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        ::VpsAgent::PostExtDataVector extDataVector;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetBakDataExt(extDataVector, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, extDataVector);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Backup_GetBakDataExtPtr
newCallback_Backup_GetBakDataExt(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::VpsAgent::PostExtDataVector&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_GetBakDataExt<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_GetBakDataExtPtr
newCallback_Backup_GetBakDataExt(T* instance, void (T::*cb)(bool, const ::VpsAgent::PostExtDataVector&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_GetBakDataExt<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Backup_GetBakDataExt : public Callback_Backup_GetBakDataExt_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::VpsAgent::PostExtDataVector&, const CT&);

    Callback_Backup_GetBakDataExt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        ::VpsAgent::PostExtDataVector extDataVector;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetBakDataExt(extDataVector, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, extDataVector, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Backup_GetBakDataExtPtr
newCallback_Backup_GetBakDataExt(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::VpsAgent::PostExtDataVector&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_GetBakDataExt<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_GetBakDataExtPtr
newCallback_Backup_GetBakDataExt(T* instance, void (T::*cb)(bool, const ::VpsAgent::PostExtDataVector&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_GetBakDataExt<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Backup_PostUsedBlockBitmap : public Callback_Backup_PostUsedBlockBitmap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Backup_PostUsedBlockBitmap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_PostUsedBlockBitmap(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Backup_PostUsedBlockBitmapPtr
newCallback_Backup_PostUsedBlockBitmap(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostUsedBlockBitmap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_PostUsedBlockBitmapPtr
newCallback_Backup_PostUsedBlockBitmap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostUsedBlockBitmap<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Backup_PostUsedBlockBitmapPtr
newCallback_Backup_PostUsedBlockBitmap(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostUsedBlockBitmap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_PostUsedBlockBitmapPtr
newCallback_Backup_PostUsedBlockBitmap(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostUsedBlockBitmap<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Backup_PostUsedBlockBitmap : public Callback_Backup_PostUsedBlockBitmap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Backup_PostUsedBlockBitmap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_PostUsedBlockBitmap(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Backup_PostUsedBlockBitmapPtr
newCallback_Backup_PostUsedBlockBitmap(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostUsedBlockBitmap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostUsedBlockBitmapPtr
newCallback_Backup_PostUsedBlockBitmap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostUsedBlockBitmap<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostUsedBlockBitmapPtr
newCallback_Backup_PostUsedBlockBitmap(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostUsedBlockBitmap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostUsedBlockBitmapPtr
newCallback_Backup_PostUsedBlockBitmap(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostUsedBlockBitmap<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Backup_PostDuplicateFileSectors : public Callback_Backup_PostDuplicateFileSectors_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Backup_PostDuplicateFileSectors(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_PostDuplicateFileSectors(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Backup_PostDuplicateFileSectorsPtr
newCallback_Backup_PostDuplicateFileSectors(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostDuplicateFileSectors<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_PostDuplicateFileSectorsPtr
newCallback_Backup_PostDuplicateFileSectors(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostDuplicateFileSectors<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Backup_PostDuplicateFileSectorsPtr
newCallback_Backup_PostDuplicateFileSectors(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostDuplicateFileSectors<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_PostDuplicateFileSectorsPtr
newCallback_Backup_PostDuplicateFileSectors(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostDuplicateFileSectors<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Backup_PostDuplicateFileSectors : public Callback_Backup_PostDuplicateFileSectors_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Backup_PostDuplicateFileSectors(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_PostDuplicateFileSectors(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Backup_PostDuplicateFileSectorsPtr
newCallback_Backup_PostDuplicateFileSectors(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostDuplicateFileSectors<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostDuplicateFileSectorsPtr
newCallback_Backup_PostDuplicateFileSectors(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostDuplicateFileSectors<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostDuplicateFileSectorsPtr
newCallback_Backup_PostDuplicateFileSectors(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostDuplicateFileSectors<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostDuplicateFileSectorsPtr
newCallback_Backup_PostDuplicateFileSectors(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostDuplicateFileSectors<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Backup_PostCurrentFileList : public Callback_Backup_PostCurrentFileList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Backup_PostCurrentFileList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_PostCurrentFileList(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Backup_PostCurrentFileListPtr
newCallback_Backup_PostCurrentFileList(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostCurrentFileList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_PostCurrentFileListPtr
newCallback_Backup_PostCurrentFileList(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostCurrentFileList<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Backup_PostCurrentFileListPtr
newCallback_Backup_PostCurrentFileList(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostCurrentFileList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_PostCurrentFileListPtr
newCallback_Backup_PostCurrentFileList(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_PostCurrentFileList<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Backup_PostCurrentFileList : public Callback_Backup_PostCurrentFileList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Backup_PostCurrentFileList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_PostCurrentFileList(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Backup_PostCurrentFileListPtr
newCallback_Backup_PostCurrentFileList(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostCurrentFileList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostCurrentFileListPtr
newCallback_Backup_PostCurrentFileList(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostCurrentFileList<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostCurrentFileListPtr
newCallback_Backup_PostCurrentFileList(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostCurrentFileList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_PostCurrentFileListPtr
newCallback_Backup_PostCurrentFileList(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_PostCurrentFileList<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Backup_GetFileListFromDuplicateFilePool : public Callback_Backup_GetFileListFromDuplicateFilePool_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::VpsAgent::BinaryStream&);

    CallbackNC_Backup_GetFileListFromDuplicateFilePool(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        ::VpsAgent::BinaryStream bitmap;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetFileListFromDuplicateFilePool(bitmap, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, bitmap);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Backup_GetFileListFromDuplicateFilePoolPtr
newCallback_Backup_GetFileListFromDuplicateFilePool(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::VpsAgent::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_GetFileListFromDuplicateFilePool<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_GetFileListFromDuplicateFilePoolPtr
newCallback_Backup_GetFileListFromDuplicateFilePool(T* instance, void (T::*cb)(bool, const ::VpsAgent::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_GetFileListFromDuplicateFilePool<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Backup_GetFileListFromDuplicateFilePool : public Callback_Backup_GetFileListFromDuplicateFilePool_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::VpsAgent::BinaryStream&, const CT&);

    Callback_Backup_GetFileListFromDuplicateFilePool(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        ::VpsAgent::BinaryStream bitmap;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetFileListFromDuplicateFilePool(bitmap, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, bitmap, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Backup_GetFileListFromDuplicateFilePoolPtr
newCallback_Backup_GetFileListFromDuplicateFilePool(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::VpsAgent::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_GetFileListFromDuplicateFilePool<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_GetFileListFromDuplicateFilePoolPtr
newCallback_Backup_GetFileListFromDuplicateFilePool(T* instance, void (T::*cb)(bool, const ::VpsAgent::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_GetFileListFromDuplicateFilePool<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Backup_ReportStatus : public Callback_Backup_ReportStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Backup_ReportStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_ReportStatus(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Backup_ReportStatusPtr
newCallback_Backup_ReportStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_ReportStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_ReportStatusPtr
newCallback_Backup_ReportStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_ReportStatus<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Backup_ReportStatusPtr
newCallback_Backup_ReportStatus(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_ReportStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_ReportStatusPtr
newCallback_Backup_ReportStatus(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_ReportStatus<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Backup_ReportStatus : public Callback_Backup_ReportStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Backup_ReportStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_ReportStatus(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Backup_ReportStatusPtr
newCallback_Backup_ReportStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_ReportStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_ReportStatusPtr
newCallback_Backup_ReportStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_ReportStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_ReportStatusPtr
newCallback_Backup_ReportStatus(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_ReportStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_ReportStatusPtr
newCallback_Backup_ReportStatus(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_ReportStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Backup_Exit : public Callback_Backup_Exit_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Backup_Exit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_Exit(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Backup_ExitPtr
newCallback_Backup_Exit(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_Exit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_ExitPtr
newCallback_Backup_Exit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_Exit<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Backup_ExitPtr
newCallback_Backup_Exit(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_Exit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Backup_ExitPtr
newCallback_Backup_Exit(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Backup_Exit<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Backup_Exit : public Callback_Backup_Exit_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Backup_Exit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::BackupPrx __proxy = ::VpsAgent::BackupPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_Exit(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Backup_ExitPtr
newCallback_Backup_Exit(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_Exit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_ExitPtr
newCallback_Backup_Exit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_Exit<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_ExitPtr
newCallback_Backup_Exit(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_Exit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Backup_ExitPtr
newCallback_Backup_Exit(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Backup_Exit<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Restore_getUesdBlockBitmap : public Callback_Restore_getUesdBlockBitmap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::VpsAgent::BinaryStream&);

    CallbackNC_Restore_getUesdBlockBitmap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::RestorePrx __proxy = ::VpsAgent::RestorePrx::uncheckedCast(__result->getProxy());
        ::VpsAgent::BinaryStream bitmap;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getUesdBlockBitmap(bitmap, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, bitmap);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Restore_getUesdBlockBitmapPtr
newCallback_Restore_getUesdBlockBitmap(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::VpsAgent::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Restore_getUesdBlockBitmap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Restore_getUesdBlockBitmapPtr
newCallback_Restore_getUesdBlockBitmap(T* instance, void (T::*cb)(::Ice::Int, const ::VpsAgent::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Restore_getUesdBlockBitmap<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Restore_getUesdBlockBitmap : public Callback_Restore_getUesdBlockBitmap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::VpsAgent::BinaryStream&, const CT&);

    Callback_Restore_getUesdBlockBitmap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::RestorePrx __proxy = ::VpsAgent::RestorePrx::uncheckedCast(__result->getProxy());
        ::VpsAgent::BinaryStream bitmap;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getUesdBlockBitmap(bitmap, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, bitmap, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Restore_getUesdBlockBitmapPtr
newCallback_Restore_getUesdBlockBitmap(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::VpsAgent::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Restore_getUesdBlockBitmap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Restore_getUesdBlockBitmapPtr
newCallback_Restore_getUesdBlockBitmap(T* instance, void (T::*cb)(::Ice::Int, const ::VpsAgent::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Restore_getUesdBlockBitmap<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Restore_reportStatus : public Callback_Restore_reportStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Restore_reportStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::RestorePrx __proxy = ::VpsAgent::RestorePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_reportStatus(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Restore_reportStatusPtr
newCallback_Restore_reportStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Restore_reportStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Restore_reportStatusPtr
newCallback_Restore_reportStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Restore_reportStatus<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Restore_reportStatusPtr
newCallback_Restore_reportStatus(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Restore_reportStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Restore_reportStatusPtr
newCallback_Restore_reportStatus(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Restore_reportStatus<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Restore_reportStatus : public Callback_Restore_reportStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Restore_reportStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::RestorePrx __proxy = ::VpsAgent::RestorePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_reportStatus(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Restore_reportStatusPtr
newCallback_Restore_reportStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Restore_reportStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Restore_reportStatusPtr
newCallback_Restore_reportStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Restore_reportStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Restore_reportStatusPtr
newCallback_Restore_reportStatus(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Restore_reportStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Restore_reportStatusPtr
newCallback_Restore_reportStatus(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Restore_reportStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_check : public Callback_AgentReceiver_check_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AgentReceiver_check(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_check(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_checkPtr
newCallback_AgentReceiver_check(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_check<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_checkPtr
newCallback_AgentReceiver_check(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_check<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AgentReceiver_checkPtr
newCallback_AgentReceiver_check(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_check<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_checkPtr
newCallback_AgentReceiver_check(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_check<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_check : public Callback_AgentReceiver_check_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AgentReceiver_check(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_check(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_checkPtr
newCallback_AgentReceiver_check(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_check<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_checkPtr
newCallback_AgentReceiver_check(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_check<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_checkPtr
newCallback_AgentReceiver_check(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_check<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_checkPtr
newCallback_AgentReceiver_check(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_check<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_JsonFunc : public Callback_AgentReceiver_JsonFunc_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_AgentReceiver_JsonFunc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_JsonFunc(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_JsonFuncPtr
newCallback_AgentReceiver_JsonFunc(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_JsonFunc<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_JsonFuncPtr
newCallback_AgentReceiver_JsonFunc(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_JsonFunc<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_JsonFunc : public Callback_AgentReceiver_JsonFunc_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_AgentReceiver_JsonFunc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_JsonFunc(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_JsonFuncPtr
newCallback_AgentReceiver_JsonFunc(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_JsonFunc<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_JsonFuncPtr
newCallback_AgentReceiver_JsonFunc(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_JsonFunc<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_QuerySystemInfo : public Callback_AgentReceiver_QuerySystemInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_AgentReceiver_QuerySystemInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QuerySystemInfo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_QuerySystemInfoPtr
newCallback_AgentReceiver_QuerySystemInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_QuerySystemInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_QuerySystemInfoPtr
newCallback_AgentReceiver_QuerySystemInfo(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_QuerySystemInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_QuerySystemInfo : public Callback_AgentReceiver_QuerySystemInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_AgentReceiver_QuerySystemInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QuerySystemInfo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_QuerySystemInfoPtr
newCallback_AgentReceiver_QuerySystemInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_QuerySystemInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_QuerySystemInfoPtr
newCallback_AgentReceiver_QuerySystemInfo(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_QuerySystemInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_QueryDisksStatus : public Callback_AgentReceiver_QueryDisksStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::BoxLogic::Disks&, const IceUtil::Optional< ::std::string>&);

    CallbackNC_AgentReceiver_QueryDisksStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::BoxLogic::Disks disks;
        IceUtil::Optional< ::std::string> more;
        try
        {
            __proxy->end_QueryDisksStatus(disks, more, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(disks, more);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_QueryDisksStatusPtr
newCallback_AgentReceiver_QueryDisksStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::BoxLogic::Disks&, const IceUtil::Optional< ::std::string>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_QueryDisksStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_QueryDisksStatusPtr
newCallback_AgentReceiver_QueryDisksStatus(T* instance, void (T::*cb)(const ::BoxLogic::Disks&, const IceUtil::Optional< ::std::string>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_QueryDisksStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_QueryDisksStatus : public Callback_AgentReceiver_QueryDisksStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::BoxLogic::Disks&, const IceUtil::Optional< ::std::string>&, const CT&);

    Callback_AgentReceiver_QueryDisksStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::BoxLogic::Disks disks;
        IceUtil::Optional< ::std::string> more;
        try
        {
            __proxy->end_QueryDisksStatus(disks, more, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(disks, more, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_QueryDisksStatusPtr
newCallback_AgentReceiver_QueryDisksStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::BoxLogic::Disks&, const IceUtil::Optional< ::std::string>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_QueryDisksStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_QueryDisksStatusPtr
newCallback_AgentReceiver_QueryDisksStatus(T* instance, void (T::*cb)(const ::BoxLogic::Disks&, const IceUtil::Optional< ::std::string>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_QueryDisksStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_DoBackup : public Callback_AgentReceiver_DoBackup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AgentReceiver_DoBackup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_DoBackup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_DoBackupPtr
newCallback_AgentReceiver_DoBackup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_DoBackup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_DoBackupPtr
newCallback_AgentReceiver_DoBackup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_DoBackup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AgentReceiver_DoBackupPtr
newCallback_AgentReceiver_DoBackup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_DoBackup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_DoBackupPtr
newCallback_AgentReceiver_DoBackup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_DoBackup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_DoBackup : public Callback_AgentReceiver_DoBackup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AgentReceiver_DoBackup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_DoBackup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_DoBackupPtr
newCallback_AgentReceiver_DoBackup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_DoBackup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_DoBackupPtr
newCallback_AgentReceiver_DoBackup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_DoBackup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_DoBackupPtr
newCallback_AgentReceiver_DoBackup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_DoBackup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_DoBackupPtr
newCallback_AgentReceiver_DoBackup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_DoBackup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_DoBackupEx : public Callback_AgentReceiver_DoBackupEx_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AgentReceiver_DoBackupEx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_DoBackupEx(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_DoBackupExPtr
newCallback_AgentReceiver_DoBackupEx(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_DoBackupEx<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_DoBackupExPtr
newCallback_AgentReceiver_DoBackupEx(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_DoBackupEx<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AgentReceiver_DoBackupExPtr
newCallback_AgentReceiver_DoBackupEx(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_DoBackupEx<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_DoBackupExPtr
newCallback_AgentReceiver_DoBackupEx(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_DoBackupEx<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_DoBackupEx : public Callback_AgentReceiver_DoBackupEx_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AgentReceiver_DoBackupEx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_DoBackupEx(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_DoBackupExPtr
newCallback_AgentReceiver_DoBackupEx(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_DoBackupEx<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_DoBackupExPtr
newCallback_AgentReceiver_DoBackupEx(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_DoBackupEx<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_DoBackupExPtr
newCallback_AgentReceiver_DoBackupEx(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_DoBackupEx<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_DoBackupExPtr
newCallback_AgentReceiver_DoBackupEx(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_DoBackupEx<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_GetLastBackupError : public Callback_AgentReceiver_GetLastBackupError_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_AgentReceiver_GetLastBackupError(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_GetLastBackupError(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_GetLastBackupErrorPtr
newCallback_AgentReceiver_GetLastBackupError(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_GetLastBackupError<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_GetLastBackupErrorPtr
newCallback_AgentReceiver_GetLastBackupError(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_GetLastBackupError<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_GetLastBackupError : public Callback_AgentReceiver_GetLastBackupError_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_AgentReceiver_GetLastBackupError(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_GetLastBackupError(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_GetLastBackupErrorPtr
newCallback_AgentReceiver_GetLastBackupError(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_GetLastBackupError<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_GetLastBackupErrorPtr
newCallback_AgentReceiver_GetLastBackupError(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_GetLastBackupError<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_GetLastCdpError : public Callback_AgentReceiver_GetLastCdpError_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_AgentReceiver_GetLastCdpError(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_GetLastCdpError(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_GetLastCdpErrorPtr
newCallback_AgentReceiver_GetLastCdpError(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_GetLastCdpError<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_GetLastCdpErrorPtr
newCallback_AgentReceiver_GetLastCdpError(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_GetLastCdpError<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_GetLastCdpError : public Callback_AgentReceiver_GetLastCdpError_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_AgentReceiver_GetLastCdpError(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_GetLastCdpError(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_GetLastCdpErrorPtr
newCallback_AgentReceiver_GetLastCdpError(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_GetLastCdpError<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_GetLastCdpErrorPtr
newCallback_AgentReceiver_GetLastCdpError(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_GetLastCdpError<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_StartAgentPe : public Callback_AgentReceiver_StartAgentPe_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::std::string&);

    CallbackNC_AgentReceiver_StartAgentPe(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string peHostIdent;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StartAgentPe(peHostIdent, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, peHostIdent);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_StartAgentPePtr
newCallback_AgentReceiver_StartAgentPe(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_StartAgentPe<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_StartAgentPePtr
newCallback_AgentReceiver_StartAgentPe(T* instance, void (T::*cb)(::Ice::Int, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_StartAgentPe<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_StartAgentPe : public Callback_AgentReceiver_StartAgentPe_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::std::string&, const CT&);

    Callback_AgentReceiver_StartAgentPe(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::std::string peHostIdent;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StartAgentPe(peHostIdent, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, peHostIdent, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_StartAgentPePtr
newCallback_AgentReceiver_StartAgentPe(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_StartAgentPe<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_StartAgentPePtr
newCallback_AgentReceiver_StartAgentPe(T* instance, void (T::*cb)(::Ice::Int, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_StartAgentPe<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_CancelBackup : public Callback_AgentReceiver_CancelBackup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AgentReceiver_CancelBackup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_CancelBackup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_CancelBackupPtr
newCallback_AgentReceiver_CancelBackup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_CancelBackup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_CancelBackupPtr
newCallback_AgentReceiver_CancelBackup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_CancelBackup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AgentReceiver_CancelBackupPtr
newCallback_AgentReceiver_CancelBackup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_CancelBackup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_CancelBackupPtr
newCallback_AgentReceiver_CancelBackup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_CancelBackup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_CancelBackup : public Callback_AgentReceiver_CancelBackup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AgentReceiver_CancelBackup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_CancelBackup(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_CancelBackupPtr
newCallback_AgentReceiver_CancelBackup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_CancelBackup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_CancelBackupPtr
newCallback_AgentReceiver_CancelBackup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_CancelBackup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_CancelBackupPtr
newCallback_AgentReceiver_CancelBackup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_CancelBackup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_CancelBackupPtr
newCallback_AgentReceiver_CancelBackup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_CancelBackup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_NotifyHighPriority : public Callback_AgentReceiver_NotifyHighPriority_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AgentReceiver_NotifyHighPriority(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_NotifyHighPriority(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_NotifyHighPriorityPtr
newCallback_AgentReceiver_NotifyHighPriority(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_NotifyHighPriority<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_NotifyHighPriorityPtr
newCallback_AgentReceiver_NotifyHighPriority(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_NotifyHighPriority<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AgentReceiver_NotifyHighPriorityPtr
newCallback_AgentReceiver_NotifyHighPriority(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_NotifyHighPriority<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_NotifyHighPriorityPtr
newCallback_AgentReceiver_NotifyHighPriority(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_NotifyHighPriority<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_NotifyHighPriority : public Callback_AgentReceiver_NotifyHighPriority_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AgentReceiver_NotifyHighPriority(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_NotifyHighPriority(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_NotifyHighPriorityPtr
newCallback_AgentReceiver_NotifyHighPriority(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_NotifyHighPriority<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_NotifyHighPriorityPtr
newCallback_AgentReceiver_NotifyHighPriority(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_NotifyHighPriority<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_NotifyHighPriorityPtr
newCallback_AgentReceiver_NotifyHighPriority(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_NotifyHighPriority<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_NotifyHighPriorityPtr
newCallback_AgentReceiver_NotifyHighPriority(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_NotifyHighPriority<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_GetStatus : public Callback_AgentReceiver_GetStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::BoxLogic::AgentStatus&);

    CallbackNC_AgentReceiver_GetStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::BoxLogic::AgentStatus __ret;
        try
        {
            __ret = __proxy->end_GetStatus(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_GetStatusPtr
newCallback_AgentReceiver_GetStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::BoxLogic::AgentStatus&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_GetStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_GetStatusPtr
newCallback_AgentReceiver_GetStatus(T* instance, void (T::*cb)(const ::BoxLogic::AgentStatus&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_GetStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_GetStatus : public Callback_AgentReceiver_GetStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::BoxLogic::AgentStatus&, const CT&);

    Callback_AgentReceiver_GetStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::BoxLogic::AgentStatus __ret;
        try
        {
            __ret = __proxy->end_GetStatus(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_GetStatusPtr
newCallback_AgentReceiver_GetStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::BoxLogic::AgentStatus&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_GetStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_GetStatusPtr
newCallback_AgentReceiver_GetStatus(T* instance, void (T::*cb)(const ::BoxLogic::AgentStatus&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_GetStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_StopCdpStatus : public Callback_AgentReceiver_StopCdpStatus_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AgentReceiver_StopCdpStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AgentReceiver_StopCdpStatusPtr
newCallback_AgentReceiver_StopCdpStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_StopCdpStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_StopCdpStatusPtr
newCallback_AgentReceiver_StopCdpStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_StopCdpStatus<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AgentReceiver_StopCdpStatusPtr
newCallback_AgentReceiver_StopCdpStatus(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_StopCdpStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_StopCdpStatusPtr
newCallback_AgentReceiver_StopCdpStatus(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_StopCdpStatus<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_StopCdpStatus : public Callback_AgentReceiver_StopCdpStatus_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AgentReceiver_StopCdpStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AgentReceiver_StopCdpStatusPtr
newCallback_AgentReceiver_StopCdpStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_StopCdpStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_StopCdpStatusPtr
newCallback_AgentReceiver_StopCdpStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_StopCdpStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_StopCdpStatusPtr
newCallback_AgentReceiver_StopCdpStatus(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_StopCdpStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_StopCdpStatusPtr
newCallback_AgentReceiver_StopCdpStatus(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_StopCdpStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_PackDebugFiles : public Callback_AgentReceiver_PackDebugFiles_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_AgentReceiver_PackDebugFiles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_PackDebugFiles(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_PackDebugFilesPtr
newCallback_AgentReceiver_PackDebugFiles(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_PackDebugFiles<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_PackDebugFilesPtr
newCallback_AgentReceiver_PackDebugFiles(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_PackDebugFiles<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_PackDebugFiles : public Callback_AgentReceiver_PackDebugFiles_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_AgentReceiver_PackDebugFiles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_PackDebugFiles(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_PackDebugFilesPtr
newCallback_AgentReceiver_PackDebugFiles(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_PackDebugFiles<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_PackDebugFilesPtr
newCallback_AgentReceiver_PackDebugFiles(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_PackDebugFiles<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_FetchDebugPacket : public Callback_AgentReceiver_FetchDebugPacket_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::VpsAgent::BinaryStream&);

    CallbackNC_AgentReceiver_FetchDebugPacket(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::VpsAgent::BinaryStream data;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_FetchDebugPacket(data, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, data);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_FetchDebugPacketPtr
newCallback_AgentReceiver_FetchDebugPacket(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::VpsAgent::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_FetchDebugPacket<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_FetchDebugPacketPtr
newCallback_AgentReceiver_FetchDebugPacket(T* instance, void (T::*cb)(::Ice::Int, const ::VpsAgent::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_FetchDebugPacket<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_FetchDebugPacket : public Callback_AgentReceiver_FetchDebugPacket_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::VpsAgent::BinaryStream&, const CT&);

    Callback_AgentReceiver_FetchDebugPacket(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::VpsAgent::BinaryStream data;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_FetchDebugPacket(data, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, data, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_FetchDebugPacketPtr
newCallback_AgentReceiver_FetchDebugPacket(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::VpsAgent::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_FetchDebugPacket<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_FetchDebugPacketPtr
newCallback_AgentReceiver_FetchDebugPacket(T* instance, void (T::*cb)(::Ice::Int, const ::VpsAgent::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_FetchDebugPacket<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_DoRestore : public Callback_AgentReceiver_DoRestore_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AgentReceiver_DoRestore(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_DoRestore(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_DoRestorePtr
newCallback_AgentReceiver_DoRestore(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_DoRestore<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_DoRestorePtr
newCallback_AgentReceiver_DoRestore(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_DoRestore<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AgentReceiver_DoRestorePtr
newCallback_AgentReceiver_DoRestore(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_DoRestore<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_DoRestorePtr
newCallback_AgentReceiver_DoRestore(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_DoRestore<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_DoRestore : public Callback_AgentReceiver_DoRestore_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AgentReceiver_DoRestore(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_DoRestore(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_DoRestorePtr
newCallback_AgentReceiver_DoRestore(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_DoRestore<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_DoRestorePtr
newCallback_AgentReceiver_DoRestore(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_DoRestore<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_DoRestorePtr
newCallback_AgentReceiver_DoRestore(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_DoRestore<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_DoRestorePtr
newCallback_AgentReceiver_DoRestore(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_DoRestore<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_CancelRestore : public Callback_AgentReceiver_CancelRestore_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AgentReceiver_CancelRestore(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_CancelRestore(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_CancelRestorePtr
newCallback_AgentReceiver_CancelRestore(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_CancelRestore<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_CancelRestorePtr
newCallback_AgentReceiver_CancelRestore(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_CancelRestore<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AgentReceiver_CancelRestorePtr
newCallback_AgentReceiver_CancelRestore(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_CancelRestore<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_CancelRestorePtr
newCallback_AgentReceiver_CancelRestore(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_CancelRestore<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_CancelRestore : public Callback_AgentReceiver_CancelRestore_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AgentReceiver_CancelRestore(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_CancelRestore(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_CancelRestorePtr
newCallback_AgentReceiver_CancelRestore(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_CancelRestore<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_CancelRestorePtr
newCallback_AgentReceiver_CancelRestore(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_CancelRestore<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_CancelRestorePtr
newCallback_AgentReceiver_CancelRestore(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_CancelRestore<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_CancelRestorePtr
newCallback_AgentReceiver_CancelRestore(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_CancelRestore<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_GetServiceList : public Callback_AgentReceiver_GetServiceList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::Box::ServiceInfoStatusS&);

    CallbackNC_AgentReceiver_GetServiceList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::Box::ServiceInfoStatusS ServiceList;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetServiceList(ServiceList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, ServiceList);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_GetServiceListPtr
newCallback_AgentReceiver_GetServiceList(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Box::ServiceInfoStatusS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_GetServiceList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_GetServiceListPtr
newCallback_AgentReceiver_GetServiceList(T* instance, void (T::*cb)(::Ice::Int, const ::Box::ServiceInfoStatusS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_GetServiceList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_GetServiceList : public Callback_AgentReceiver_GetServiceList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::Box::ServiceInfoStatusS&, const CT&);

    Callback_AgentReceiver_GetServiceList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::Box::ServiceInfoStatusS ServiceList;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetServiceList(ServiceList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, ServiceList, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_GetServiceListPtr
newCallback_AgentReceiver_GetServiceList(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Box::ServiceInfoStatusS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_GetServiceList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_GetServiceListPtr
newCallback_AgentReceiver_GetServiceList(T* instance, void (T::*cb)(::Ice::Int, const ::Box::ServiceInfoStatusS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_GetServiceList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_GetTcpListenList : public Callback_AgentReceiver_GetTcpListenList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::Box::vectorINT&);

    CallbackNC_AgentReceiver_GetTcpListenList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::Box::vectorINT pidList;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetTcpListenList(pidList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, pidList);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_GetTcpListenListPtr
newCallback_AgentReceiver_GetTcpListenList(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Box::vectorINT&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_GetTcpListenList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_GetTcpListenListPtr
newCallback_AgentReceiver_GetTcpListenList(T* instance, void (T::*cb)(::Ice::Int, const ::Box::vectorINT&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_GetTcpListenList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_GetTcpListenList : public Callback_AgentReceiver_GetTcpListenList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::Box::vectorINT&, const CT&);

    Callback_AgentReceiver_GetTcpListenList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::Box::vectorINT pidList;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetTcpListenList(pidList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, pidList, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_GetTcpListenListPtr
newCallback_AgentReceiver_GetTcpListenList(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Box::vectorINT&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_GetTcpListenList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_GetTcpListenListPtr
newCallback_AgentReceiver_GetTcpListenList(T* instance, void (T::*cb)(::Ice::Int, const ::Box::vectorINT&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_GetTcpListenList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_StartServiceSync : public Callback_AgentReceiver_StartServiceSync_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AgentReceiver_StartServiceSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StartServiceSync(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_StartServiceSyncPtr
newCallback_AgentReceiver_StartServiceSync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_StartServiceSync<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_StartServiceSyncPtr
newCallback_AgentReceiver_StartServiceSync(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_StartServiceSync<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_StartServiceSync : public Callback_AgentReceiver_StartServiceSync_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AgentReceiver_StartServiceSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StartServiceSync(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_StartServiceSyncPtr
newCallback_AgentReceiver_StartServiceSync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_StartServiceSync<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_StartServiceSyncPtr
newCallback_AgentReceiver_StartServiceSync(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_StartServiceSync<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_StopServiceSync : public Callback_AgentReceiver_StopServiceSync_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AgentReceiver_StopServiceSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StopServiceSync(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_StopServiceSyncPtr
newCallback_AgentReceiver_StopServiceSync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_StopServiceSync<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_StopServiceSyncPtr
newCallback_AgentReceiver_StopServiceSync(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_StopServiceSync<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_StopServiceSync : public Callback_AgentReceiver_StopServiceSync_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AgentReceiver_StopServiceSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StopServiceSync(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_StopServiceSyncPtr
newCallback_AgentReceiver_StopServiceSync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_StopServiceSync<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_StopServiceSyncPtr
newCallback_AgentReceiver_StopServiceSync(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_StopServiceSync<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_StartHttpDServiceAsync : public Callback_AgentReceiver_StartHttpDServiceAsync_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AgentReceiver_StartHttpDServiceAsync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StartHttpDServiceAsync(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_StartHttpDServiceAsyncPtr
newCallback_AgentReceiver_StartHttpDServiceAsync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_StartHttpDServiceAsync<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_StartHttpDServiceAsyncPtr
newCallback_AgentReceiver_StartHttpDServiceAsync(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_StartHttpDServiceAsync<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_StartHttpDServiceAsync : public Callback_AgentReceiver_StartHttpDServiceAsync_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AgentReceiver_StartHttpDServiceAsync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StartHttpDServiceAsync(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_StartHttpDServiceAsyncPtr
newCallback_AgentReceiver_StartHttpDServiceAsync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_StartHttpDServiceAsync<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_StartHttpDServiceAsyncPtr
newCallback_AgentReceiver_StartHttpDServiceAsync(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_StartHttpDServiceAsync<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_GetHttpDServiceListSync : public Callback_AgentReceiver_GetHttpDServiceListSync_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::Box::vectorINT&);

    CallbackNC_AgentReceiver_GetHttpDServiceListSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::Box::vectorINT pidList;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetHttpDServiceListSync(pidList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, pidList);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_GetHttpDServiceListSyncPtr
newCallback_AgentReceiver_GetHttpDServiceListSync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Box::vectorINT&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_GetHttpDServiceListSync<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_GetHttpDServiceListSyncPtr
newCallback_AgentReceiver_GetHttpDServiceListSync(T* instance, void (T::*cb)(::Ice::Int, const ::Box::vectorINT&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_GetHttpDServiceListSync<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_GetHttpDServiceListSync : public Callback_AgentReceiver_GetHttpDServiceListSync_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::Box::vectorINT&, const CT&);

    Callback_AgentReceiver_GetHttpDServiceListSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::Box::vectorINT pidList;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetHttpDServiceListSync(pidList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, pidList, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_GetHttpDServiceListSyncPtr
newCallback_AgentReceiver_GetHttpDServiceListSync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::Box::vectorINT&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_GetHttpDServiceListSync<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_GetHttpDServiceListSyncPtr
newCallback_AgentReceiver_GetHttpDServiceListSync(T* instance, void (T::*cb)(::Ice::Int, const ::Box::vectorINT&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_GetHttpDServiceListSync<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_StopAllHttpDServiceSync : public Callback_AgentReceiver_StopAllHttpDServiceSync_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AgentReceiver_StopAllHttpDServiceSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StopAllHttpDServiceSync(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_StopAllHttpDServiceSyncPtr
newCallback_AgentReceiver_StopAllHttpDServiceSync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_StopAllHttpDServiceSync<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_StopAllHttpDServiceSyncPtr
newCallback_AgentReceiver_StopAllHttpDServiceSync(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_StopAllHttpDServiceSync<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_StopAllHttpDServiceSync : public Callback_AgentReceiver_StopAllHttpDServiceSync_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AgentReceiver_StopAllHttpDServiceSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StopAllHttpDServiceSync(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_StopAllHttpDServiceSyncPtr
newCallback_AgentReceiver_StopAllHttpDServiceSync(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_StopAllHttpDServiceSync<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_StopAllHttpDServiceSyncPtr
newCallback_AgentReceiver_StopAllHttpDServiceSync(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_StopAllHttpDServiceSync<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_testdisk : public Callback_AgentReceiver_testdisk_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AgentReceiver_testdisk(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_testdisk(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_testdiskPtr
newCallback_AgentReceiver_testdisk(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_testdisk<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_testdiskPtr
newCallback_AgentReceiver_testdisk(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_testdisk<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_testdisk : public Callback_AgentReceiver_testdisk_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AgentReceiver_testdisk(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_testdisk(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_testdiskPtr
newCallback_AgentReceiver_testdisk(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_testdisk<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_testdiskPtr
newCallback_AgentReceiver_testdisk(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_testdisk<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_readdisk : public Callback_AgentReceiver_readdisk_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::VpsAgent::BinaryStream&);

    CallbackNC_AgentReceiver_readdisk(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::VpsAgent::BinaryStream bs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_readdisk(bs, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, bs);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_readdiskPtr
newCallback_AgentReceiver_readdisk(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::VpsAgent::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_readdisk<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_readdiskPtr
newCallback_AgentReceiver_readdisk(T* instance, void (T::*cb)(::Ice::Int, const ::VpsAgent::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_readdisk<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_readdisk : public Callback_AgentReceiver_readdisk_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::VpsAgent::BinaryStream&, const CT&);

    Callback_AgentReceiver_readdisk(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::VpsAgent::BinaryStream bs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_readdisk(bs, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, bs, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_readdiskPtr
newCallback_AgentReceiver_readdisk(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::VpsAgent::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_readdisk<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_readdiskPtr
newCallback_AgentReceiver_readdisk(T* instance, void (T::*cb)(::Ice::Int, const ::VpsAgent::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_readdisk<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_writedisk : public Callback_AgentReceiver_writedisk_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AgentReceiver_writedisk(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_writedisk(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_writediskPtr
newCallback_AgentReceiver_writedisk(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_writedisk<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_writediskPtr
newCallback_AgentReceiver_writedisk(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_writedisk<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_writedisk : public Callback_AgentReceiver_writedisk_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AgentReceiver_writedisk(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_writedisk(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_writediskPtr
newCallback_AgentReceiver_writedisk(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_writedisk<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_writediskPtr
newCallback_AgentReceiver_writedisk(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_writedisk<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AgentReceiver_JsonFuncV2 : public Callback_AgentReceiver_JsonFuncV2_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&, const ::VpsAgent::BinaryStream&);

    CallbackNC_AgentReceiver_JsonFuncV2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::VpsAgent::BinaryStream outputBs;
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_JsonFuncV2(outputBs, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, outputBs);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_AgentReceiver_JsonFuncV2Ptr
newCallback_AgentReceiver_JsonFuncV2(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const ::VpsAgent::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_JsonFuncV2<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AgentReceiver_JsonFuncV2Ptr
newCallback_AgentReceiver_JsonFuncV2(T* instance, void (T::*cb)(const ::std::string&, const ::VpsAgent::BinaryStream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AgentReceiver_JsonFuncV2<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AgentReceiver_JsonFuncV2 : public Callback_AgentReceiver_JsonFuncV2_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const ::VpsAgent::BinaryStream&, const CT&);

    Callback_AgentReceiver_JsonFuncV2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::AgentReceiverPrx __proxy = ::VpsAgent::AgentReceiverPrx::uncheckedCast(__result->getProxy());
        ::VpsAgent::BinaryStream outputBs;
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_JsonFuncV2(outputBs, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, outputBs, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_AgentReceiver_JsonFuncV2Ptr
newCallback_AgentReceiver_JsonFuncV2(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const ::VpsAgent::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_JsonFuncV2<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AgentReceiver_JsonFuncV2Ptr
newCallback_AgentReceiver_JsonFuncV2(T* instance, void (T::*cb)(const ::std::string&, const ::VpsAgent::BinaryStream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AgentReceiver_JsonFuncV2<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_QueryName : public Callback_Session_QueryName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Session_QueryName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionPrx __proxy = ::VpsAgent::SessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QueryName(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_QueryNamePtr
newCallback_Session_QueryName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_QueryName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_QueryNamePtr
newCallback_Session_QueryName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_QueryName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_QueryName : public Callback_Session_QueryName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Session_QueryName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionPrx __proxy = ::VpsAgent::SessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QueryName(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_QueryNamePtr
newCallback_Session_QueryName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_QueryName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_QueryNamePtr
newCallback_Session_QueryName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_QueryName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_QueryIdentity : public Callback_Session_QueryIdentity_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Session_QueryIdentity(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionPrx __proxy = ::VpsAgent::SessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QueryIdentity(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_QueryIdentityPtr
newCallback_Session_QueryIdentity(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_QueryIdentity<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_QueryIdentityPtr
newCallback_Session_QueryIdentity(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_QueryIdentity<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_QueryIdentity : public Callback_Session_QueryIdentity_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Session_QueryIdentity(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionPrx __proxy = ::VpsAgent::SessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QueryIdentity(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_QueryIdentityPtr
newCallback_Session_QueryIdentity(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_QueryIdentity<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_QueryIdentityPtr
newCallback_Session_QueryIdentity(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_QueryIdentity<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_QuerySoftIdent : public Callback_Session_QuerySoftIdent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Session_QuerySoftIdent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionPrx __proxy = ::VpsAgent::SessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QuerySoftIdent(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_QuerySoftIdentPtr
newCallback_Session_QuerySoftIdent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_QuerySoftIdent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_QuerySoftIdentPtr
newCallback_Session_QuerySoftIdent(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_QuerySoftIdent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_QuerySoftIdent : public Callback_Session_QuerySoftIdent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Session_QuerySoftIdent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionPrx __proxy = ::VpsAgent::SessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QuerySoftIdent(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_QuerySoftIdentPtr
newCallback_Session_QuerySoftIdent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_QuerySoftIdent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_QuerySoftIdentPtr
newCallback_Session_QuerySoftIdent(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_QuerySoftIdent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_QueryJsonData : public Callback_Session_QueryJsonData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Session_QueryJsonData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionPrx __proxy = ::VpsAgent::SessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QueryJsonData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_QueryJsonDataPtr
newCallback_Session_QueryJsonData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_QueryJsonData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_QueryJsonDataPtr
newCallback_Session_QueryJsonData(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_QueryJsonData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_QueryJsonData : public Callback_Session_QueryJsonData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Session_QueryJsonData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionPrx __proxy = ::VpsAgent::SessionPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_QueryJsonData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_QueryJsonDataPtr
newCallback_Session_QueryJsonData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_QueryJsonData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_QueryJsonDataPtr
newCallback_Session_QueryJsonData(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_QueryJsonData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_destroy : public Callback_Session_destroy_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Session_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Session_destroyPtr
newCallback_Session_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_destroyPtr
newCallback_Session_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_destroy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Session_destroyPtr
newCallback_Session_destroy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_destroyPtr
newCallback_Session_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_destroy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_destroy : public Callback_Session_destroy_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Session_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Session_destroyPtr
newCallback_Session_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_destroyPtr
newCallback_Session_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Session_destroyPtr
newCallback_Session_destroy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_destroyPtr
newCallback_Session_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Session_initiateReceiver : public Callback_Session_initiateReceiver_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Session_initiateReceiver(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionPrx __proxy = ::VpsAgent::SessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_initiateReceiver(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_initiateReceiverPtr
newCallback_Session_initiateReceiver(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_initiateReceiver<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_initiateReceiverPtr
newCallback_Session_initiateReceiver(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_initiateReceiver<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Session_initiateReceiverPtr
newCallback_Session_initiateReceiver(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_initiateReceiver<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_initiateReceiverPtr
newCallback_Session_initiateReceiver(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_initiateReceiver<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_initiateReceiver : public Callback_Session_initiateReceiver_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Session_initiateReceiver(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionPrx __proxy = ::VpsAgent::SessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_initiateReceiver(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_initiateReceiverPtr
newCallback_Session_initiateReceiver(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_initiateReceiver<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_initiateReceiverPtr
newCallback_Session_initiateReceiver(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_initiateReceiver<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Session_initiateReceiverPtr
newCallback_Session_initiateReceiver(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_initiateReceiver<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_initiateReceiverPtr
newCallback_Session_initiateReceiver(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_initiateReceiver<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Session_refresh : public Callback_Session_refresh_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Session_refresh(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Session_refreshPtr
newCallback_Session_refresh(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_refresh<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_refreshPtr
newCallback_Session_refresh(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_refresh<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Session_refreshPtr
newCallback_Session_refresh(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_refresh<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_refreshPtr
newCallback_Session_refresh(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_refresh<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_refresh : public Callback_Session_refresh_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Session_refresh(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Session_refreshPtr
newCallback_Session_refresh(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_refresh<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_refreshPtr
newCallback_Session_refresh(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_refresh<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Session_refreshPtr
newCallback_Session_refresh(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_refresh<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_refreshPtr
newCallback_Session_refresh(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_refresh<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Session_reportRestoreStatus : public Callback_Session_reportRestoreStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Session_reportRestoreStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionPrx __proxy = ::VpsAgent::SessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_reportRestoreStatus(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_reportRestoreStatusPtr
newCallback_Session_reportRestoreStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_reportRestoreStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_reportRestoreStatusPtr
newCallback_Session_reportRestoreStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_reportRestoreStatus<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Session_reportRestoreStatusPtr
newCallback_Session_reportRestoreStatus(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_reportRestoreStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_reportRestoreStatusPtr
newCallback_Session_reportRestoreStatus(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_reportRestoreStatus<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_reportRestoreStatus : public Callback_Session_reportRestoreStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Session_reportRestoreStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionPrx __proxy = ::VpsAgent::SessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_reportRestoreStatus(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_reportRestoreStatusPtr
newCallback_Session_reportRestoreStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_reportRestoreStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_reportRestoreStatusPtr
newCallback_Session_reportRestoreStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_reportRestoreStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Session_reportRestoreStatusPtr
newCallback_Session_reportRestoreStatus(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_reportRestoreStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_reportRestoreStatusPtr
newCallback_Session_reportRestoreStatus(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_reportRestoreStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Session_queryLastCdpDetailByRestoreToken : public Callback_Session_queryLastCdpDetailByRestoreToken_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::BoxLogic::LastCdpDetail&);

    CallbackNC_Session_queryLastCdpDetailByRestoreToken(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionPrx __proxy = ::VpsAgent::SessionPrx::uncheckedCast(__result->getProxy());
        ::BoxLogic::LastCdpDetail __ret;
        try
        {
            __ret = __proxy->end_queryLastCdpDetailByRestoreToken(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_queryLastCdpDetailByRestoreTokenPtr
newCallback_Session_queryLastCdpDetailByRestoreToken(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::BoxLogic::LastCdpDetail&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_queryLastCdpDetailByRestoreToken<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_queryLastCdpDetailByRestoreTokenPtr
newCallback_Session_queryLastCdpDetailByRestoreToken(T* instance, void (T::*cb)(const ::BoxLogic::LastCdpDetail&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_queryLastCdpDetailByRestoreToken<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_queryLastCdpDetailByRestoreToken : public Callback_Session_queryLastCdpDetailByRestoreToken_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::BoxLogic::LastCdpDetail&, const CT&);

    Callback_Session_queryLastCdpDetailByRestoreToken(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionPrx __proxy = ::VpsAgent::SessionPrx::uncheckedCast(__result->getProxy());
        ::BoxLogic::LastCdpDetail __ret;
        try
        {
            __ret = __proxy->end_queryLastCdpDetailByRestoreToken(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_queryLastCdpDetailByRestoreTokenPtr
newCallback_Session_queryLastCdpDetailByRestoreToken(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::BoxLogic::LastCdpDetail&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_queryLastCdpDetailByRestoreToken<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_queryLastCdpDetailByRestoreTokenPtr
newCallback_Session_queryLastCdpDetailByRestoreToken(T* instance, void (T::*cb)(const ::BoxLogic::LastCdpDetail&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_queryLastCdpDetailByRestoreToken<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_queryLastCdpDetailByCdpToken : public Callback_Session_queryLastCdpDetailByCdpToken_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::BoxLogic::LastCdpDetail&);

    CallbackNC_Session_queryLastCdpDetailByCdpToken(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionPrx __proxy = ::VpsAgent::SessionPrx::uncheckedCast(__result->getProxy());
        ::BoxLogic::LastCdpDetail detail;
        bool __ret;
        try
        {
            __ret = __proxy->end_queryLastCdpDetailByCdpToken(detail, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, detail);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_queryLastCdpDetailByCdpTokenPtr
newCallback_Session_queryLastCdpDetailByCdpToken(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::BoxLogic::LastCdpDetail&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_queryLastCdpDetailByCdpToken<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_queryLastCdpDetailByCdpTokenPtr
newCallback_Session_queryLastCdpDetailByCdpToken(T* instance, void (T::*cb)(bool, const ::BoxLogic::LastCdpDetail&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_queryLastCdpDetailByCdpToken<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_queryLastCdpDetailByCdpToken : public Callback_Session_queryLastCdpDetailByCdpToken_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::BoxLogic::LastCdpDetail&, const CT&);

    Callback_Session_queryLastCdpDetailByCdpToken(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionPrx __proxy = ::VpsAgent::SessionPrx::uncheckedCast(__result->getProxy());
        ::BoxLogic::LastCdpDetail detail;
        bool __ret;
        try
        {
            __ret = __proxy->end_queryLastCdpDetailByCdpToken(detail, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, detail, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_queryLastCdpDetailByCdpTokenPtr
newCallback_Session_queryLastCdpDetailByCdpToken(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::BoxLogic::LastCdpDetail&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_queryLastCdpDetailByCdpToken<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_queryLastCdpDetailByCdpTokenPtr
newCallback_Session_queryLastCdpDetailByCdpToken(T* instance, void (T::*cb)(bool, const ::BoxLogic::LastCdpDetail&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_queryLastCdpDetailByCdpToken<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Session_setPreReadBitmap : public Callback_Session_setPreReadBitmap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Session_setPreReadBitmap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionPrx __proxy = ::VpsAgent::SessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setPreReadBitmap(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Session_setPreReadBitmapPtr
newCallback_Session_setPreReadBitmap(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_setPreReadBitmap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_setPreReadBitmapPtr
newCallback_Session_setPreReadBitmap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_setPreReadBitmap<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Session_setPreReadBitmapPtr
newCallback_Session_setPreReadBitmap(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_setPreReadBitmap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_setPreReadBitmapPtr
newCallback_Session_setPreReadBitmap(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_setPreReadBitmap<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_setPreReadBitmap : public Callback_Session_setPreReadBitmap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Session_setPreReadBitmap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionPrx __proxy = ::VpsAgent::SessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setPreReadBitmap(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Session_setPreReadBitmapPtr
newCallback_Session_setPreReadBitmap(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_setPreReadBitmap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_setPreReadBitmapPtr
newCallback_Session_setPreReadBitmap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_setPreReadBitmap<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Session_setPreReadBitmapPtr
newCallback_Session_setPreReadBitmap(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_setPreReadBitmap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_setPreReadBitmapPtr
newCallback_Session_setPreReadBitmap(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_setPreReadBitmap<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SessionFactory_create : public Callback_SessionFactory_create_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::VpsAgent::SessionPrx&);

    CallbackNC_SessionFactory_create(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionFactoryPrx __proxy = ::VpsAgent::SessionFactoryPrx::uncheckedCast(__result->getProxy());
        ::VpsAgent::SessionPrx __ret;
        try
        {
            __ret = __proxy->end_create(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_SessionFactory_createPtr
newCallback_SessionFactory_create(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::VpsAgent::SessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionFactory_create<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SessionFactory_createPtr
newCallback_SessionFactory_create(T* instance, void (T::*cb)(const ::VpsAgent::SessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionFactory_create<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SessionFactory_create : public Callback_SessionFactory_create_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::VpsAgent::SessionPrx&, const CT&);

    Callback_SessionFactory_create(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::VpsAgent::SessionFactoryPrx __proxy = ::VpsAgent::SessionFactoryPrx::uncheckedCast(__result->getProxy());
        ::VpsAgent::SessionPrx __ret;
        try
        {
            __ret = __proxy->end_create(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_SessionFactory_createPtr
newCallback_SessionFactory_create(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::VpsAgent::SessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionFactory_create<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SessionFactory_createPtr
newCallback_SessionFactory_create(T* instance, void (T::*cb)(const ::VpsAgent::SessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionFactory_create<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif

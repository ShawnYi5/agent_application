// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `img.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var Utils = require("utils").Utils;
    var Slice = Ice.Slice;

    var IMG = __M.module("IMG");
    Slice.defineSequence(IMG, "BinaryStreamHelper", "Ice.ByteHelper", true);

    IMG.DuplicateFileSector = Slice.defineStruct(
        function(diskByteOffset, diskBytes, fileByteOffset, fileIdent)
        {
            this.diskByteOffset = diskByteOffset !== undefined ? diskByteOffset : 0;
            this.diskBytes = diskBytes !== undefined ? diskBytes : 0;
            this.fileByteOffset = fileByteOffset !== undefined ? fileByteOffset : 0;
            this.fileIdent = fileIdent !== undefined ? fileIdent : "";
        },
        true,
        function(__os)
        {
            __os.writeLong(this.diskByteOffset);
            __os.writeLong(this.diskBytes);
            __os.writeLong(this.fileByteOffset);
            __os.writeString(this.fileIdent);
        },
        function(__is)
        {
            this.diskByteOffset = __is.readLong();
            this.diskBytes = __is.readLong();
            this.fileByteOffset = __is.readLong();
            this.fileIdent = __is.readString();
        },
        25, 
        false);
    Slice.defineSequence(IMG, "DuplicateFileSectorsHelper", "IMG.DuplicateFileSector", false);

    IMG.FileSector = Slice.defineStruct(
        function(diskByteOffset, diskBytes)
        {
            this.diskByteOffset = diskByteOffset !== undefined ? diskByteOffset : 0;
            this.diskBytes = diskBytes !== undefined ? diskBytes : 0;
        },
        true,
        function(__os)
        {
            __os.writeLong(this.diskByteOffset);
            __os.writeLong(this.diskBytes);
        },
        function(__is)
        {
            this.diskByteOffset = __is.readLong();
            this.diskBytes = __is.readLong();
        },
        16, 
        true);
    Slice.defineSequence(IMG, "FileSectorsHelper", "IMG.FileSector", true);

    IMG.ImageSnapshotIdent = Slice.defineStruct(
        function(path, snapshot)
        {
            this.path = path !== undefined ? path : "";
            this.snapshot = snapshot !== undefined ? snapshot : "";
        },
        true,
        function(__os)
        {
            __os.writeString(this.path);
            __os.writeString(this.snapshot);
        },
        function(__is)
        {
            this.path = __is.readString();
            this.snapshot = __is.readString();
        },
        2, 
        false);
    Slice.defineSequence(IMG, "ImageSnapshotIdentsHelper", "IMG.ImageSnapshotIdent", false);
    Slice.defineSequence(IMG, "BlockIndexesHelper", "Ice.LongHelper", true);

    IMG.ImgService = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 0,
        [
            "::IMG::ImgService",
            "::Ice::Object"
        ],
        -1, undefined, undefined, false);

    IMG.ImgServicePrx = Slice.defineProxy(Ice.ObjectPrx, IMG.ImgService.ice_staticId, undefined);

    Slice.defineOperations(IMG.ImgService, IMG.ImgServicePrx,
    {
        "create": [, , , , , [4], [[IMG.ImageSnapshotIdent], ["IMG.ImageSnapshotIdentsHelper"], [4], [7]], , 
        [
            Utils.SystemError
        ], , ],
        "setUsedBlockBitmap": [, , , , , [3], [[4], ["IMG.BinaryStreamHelper"], [1]], , 
        [
            Utils.SystemError
        ], , ],
        "cleanUsedBlockBitmap": [, 2, 2, , , [3], [[4], ["IMG.BlockIndexesHelper"]], , 
        [
            Utils.SystemError
        ], , ],
        "setDuplicateFileSectors": [, , , , , [3], [[4], ["IMG.DuplicateFileSectorsHelper"], [1]], , 
        [
            Utils.SystemError
        ], , ],
        "open": [, , , , , [4], [["IMG.ImageSnapshotIdentsHelper"], [7]], , 
        [
            Utils.SystemError
        ], , ],
        "getTotalUesdBlockBitmap": [, , , , , [3], [[4], [3]], [["IMG.BinaryStreamHelper"], [1]], 
        [
            Utils.SystemError
        ], , ],
        "getAllFileSectors": [, , , , , [4], [[4], [4]], [["IMG.FileSectorsHelper"], [1]], 
        [
            Utils.SystemError
        ], , ],
        "read": [, 2, 2, , , [3], [[4], [4], [3]], [["IMG.BinaryStreamHelper"]], 
        [
            Utils.SystemError
        ], , ],
        "readEx": [, 2, 2, , , [3], [[4], [4], [3]], [["IMG.BinaryStreamHelper"]], 
        [
            Utils.SystemError
        ], , ],
        "write": [, 2, 2, , , [3], [[4], [4], ["IMG.BinaryStreamHelper"]], , 
        [
            Utils.SystemError
        ], , ],
        "writeCdp": [, 2, 2, , , [3], [[4], [4], ["IMG.BinaryStreamHelper"], [1], [4], [3], [1]], , 
        [
            Utils.SystemError
        ], , ],
        "writeCdpByIndex": [, 2, 2, , , [3], [[4], [4], ["IMG.BinaryStreamHelper"], [4], [4], [4]], , 
        [
            Utils.SystemError
        ], , ],
        "writeCdpByTmeAndIndex": [, 2, 2, , , [3], [[4], [4], ["IMG.BinaryStreamHelper"], [1], [4], [3], [1], [4], [4], [4]], , 
        [
            Utils.SystemError
        ], , ],
        "close": [, 2, 2, , , , [[4], [1]], , 
        [
            Utils.SystemError
        ], , ],
        "GetSnSize": [, 2, 2, , , [4], [[4]], , 
        [
            Utils.SystemError
        ], , ],
        "DelSnaport": [, , , , , [3], [[IMG.ImageSnapshotIdent]], , 
        [
            Utils.SystemError
        ], , ],
        "RenameSnapshot": [, , , , , [3], [[IMG.ImageSnapshotIdent], [7]], , 
        [
            Utils.SystemError
        ], , ],
        "GetOnSnMapFile": [, , , , , [7], [[IMG.ImageSnapshotIdent]], , 
        [
            Utils.SystemError
        ], , ]
    });
    exports.IMG = IMG;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : window.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : window));

// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `vps_agent.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var Box = require("box_api").Box;
    var BoxLogic = require("logic").BoxLogic;
    var IMG = require("img").IMG;
    var Utils = require("utils").Utils;
    var Slice = Ice.Slice;

    var VpsAgent = __M.module("VpsAgent");

    VpsAgent.Services = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::VpsAgent::Services"
        ],
        -1, undefined, undefined, false);

    VpsAgent.ServicesPrx = Slice.defineProxy(Ice.ObjectPrx, VpsAgent.Services.ice_staticId, undefined);

    Slice.defineOperations(VpsAgent.Services, VpsAgent.ServicesPrx,
    {
        "ping": [, 2, 2, , , , , , , , ]
    });
    Slice.defineSequence(VpsAgent, "BinaryStreamHelper", "Ice.ByteHelper", true);

    VpsAgent.SectorRange = Slice.defineStruct(
        function(startSectorOffset, numberOfSectors)
        {
            this.startSectorOffset = startSectorOffset !== undefined ? startSectorOffset : 0;
            this.numberOfSectors = numberOfSectors !== undefined ? numberOfSectors : 0;
        },
        true,
        function(__os)
        {
            __os.writeLong(this.startSectorOffset);
            __os.writeInt(this.numberOfSectors);
        },
        function(__is)
        {
            this.startSectorOffset = __is.readLong();
            this.numberOfSectors = __is.readInt();
        },
        12, 
        true);

    VpsAgent.LargeSectorRange = Slice.defineStruct(
        function(startSectorOffset, numberOfSectors)
        {
            this.startSectorOffset = startSectorOffset !== undefined ? startSectorOffset : 0;
            this.numberOfSectors = numberOfSectors !== undefined ? numberOfSectors : 0;
        },
        true,
        function(__os)
        {
            __os.writeLong(this.startSectorOffset);
            __os.writeLong(this.numberOfSectors);
        },
        function(__is)
        {
            this.startSectorOffset = __is.readLong();
            this.numberOfSectors = __is.readLong();
        },
        16, 
        true);

    VpsAgent.DataLocation = Slice.defineStruct(
        function(diskIndex, diskBlockOffset)
        {
            this.diskIndex = diskIndex !== undefined ? diskIndex : 0;
            this.diskBlockOffset = diskBlockOffset !== undefined ? diskBlockOffset : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.diskIndex);
            __os.writeInt(this.diskBlockOffset);
        },
        function(__is)
        {
            this.diskIndex = __is.readInt();
            this.diskBlockOffset = __is.readInt();
        },
        8, 
        true);

    VpsAgent.DataBlock = Slice.defineStruct(
        function(location, data)
        {
            this.location = location !== undefined ? location : new VpsAgent.DataLocation();
            this.data = data !== undefined ? data : null;
        },
        true,
        function(__os)
        {
            VpsAgent.DataLocation.write(__os, this.location);
            VpsAgent.BinaryStreamHelper.write(__os, this.data);
        },
        function(__is)
        {
            this.location = VpsAgent.DataLocation.read(__is, this.location);
            this.data = VpsAgent.BinaryStreamHelper.read(__is);
        },
        9, 
        false);

    VpsAgent.PostSector = Slice.defineStruct(
        function(type, diskIndex, byteOffsetInBuffer, numberOfByteInBuffer, sectorOffset, numberOfSectors)
        {
            this.type = type !== undefined ? type : 0;
            this.diskIndex = diskIndex !== undefined ? diskIndex : 0;
            this.byteOffsetInBuffer = byteOffsetInBuffer !== undefined ? byteOffsetInBuffer : 0;
            this.numberOfByteInBuffer = numberOfByteInBuffer !== undefined ? numberOfByteInBuffer : 0;
            this.sectorOffset = sectorOffset !== undefined ? sectorOffset : 0;
            this.numberOfSectors = numberOfSectors !== undefined ? numberOfSectors : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.type);
            __os.writeInt(this.diskIndex);
            __os.writeInt(this.byteOffsetInBuffer);
            __os.writeInt(this.numberOfByteInBuffer);
            __os.writeLong(this.sectorOffset);
            __os.writeShort(this.numberOfSectors);
        },
        function(__is)
        {
            this.type = __is.readInt();
            this.diskIndex = __is.readInt();
            this.byteOffsetInBuffer = __is.readInt();
            this.numberOfByteInBuffer = __is.readInt();
            this.sectorOffset = __is.readLong();
            this.numberOfSectors = __is.readShort();
        },
        26, 
        true);
    Slice.defineSequence(VpsAgent, "PostSectorsHelper", "VpsAgent.PostSector", true);

    VpsAgent.PostExtData = Slice.defineStruct(
        function(diskIndex, sectorOffset, numberOfSectors, extType, extData)
        {
            this.diskIndex = diskIndex !== undefined ? diskIndex : 0;
            this.sectorOffset = sectorOffset !== undefined ? sectorOffset : 0;
            this.numberOfSectors = numberOfSectors !== undefined ? numberOfSectors : 0;
            this.extType = extType !== undefined ? extType : 0;
            this.extData = extData !== undefined ? extData : null;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.diskIndex);
            __os.writeLong(this.sectorOffset);
            __os.writeShort(this.numberOfSectors);
            __os.writeInt(this.extType);
            VpsAgent.BinaryStreamHelper.write(__os, this.extData);
        },
        function(__is)
        {
            this.diskIndex = __is.readInt();
            this.sectorOffset = __is.readLong();
            this.numberOfSectors = __is.readShort();
            this.extType = __is.readInt();
            this.extData = VpsAgent.BinaryStreamHelper.read(__is);
        },
        19, 
        false);
    Slice.defineSequence(VpsAgent, "PostExtDataVectorHelper", "VpsAgent.PostExtData", false);

    VpsAgent.GetExtData = Slice.defineStruct(
        function(diskIndex, extType, sectorOffset, bitCount)
        {
            this.diskIndex = diskIndex !== undefined ? diskIndex : 0;
            this.extType = extType !== undefined ? extType : 0;
            this.sectorOffset = sectorOffset !== undefined ? sectorOffset : 0;
            this.bitCount = bitCount !== undefined ? bitCount : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.diskIndex);
            __os.writeInt(this.extType);
            __os.writeLong(this.sectorOffset);
            __os.writeInt(this.bitCount);
        },
        function(__is)
        {
            this.diskIndex = __is.readInt();
            this.extType = __is.readInt();
            this.sectorOffset = __is.readLong();
            this.bitCount = __is.readInt();
        },
        20, 
        true);
    Slice.defineSequence(VpsAgent, "GetExtDataVectorHelper", "VpsAgent.GetExtData", true);

    VpsAgent.Backup = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::VpsAgent::Backup"
        ],
        -1, undefined, undefined, false);

    VpsAgent.BackupPrx = Slice.defineProxy(Ice.ObjectPrx, VpsAgent.Backup.ice_staticId, undefined);

    Slice.defineOperations(VpsAgent.Backup, VpsAgent.BackupPrx,
    {
        "PostSectorData": [, 2, 2, , , , [[3], [VpsAgent.SectorRange], ["VpsAgent.BinaryStreamHelper"]], , 
        [
            Utils.SystemError
        ], , ],
        "PostSectorDataEx": [, 2, 2, , , , [[3], [3], [VpsAgent.SectorRange], ["VpsAgent.BinaryStreamHelper"]], , 
        [
            Utils.SystemError
        ], , ],
        "PostSectorDataExV2": [, 2, 2, , , , [["VpsAgent.PostSectorsHelper"], ["VpsAgent.BinaryStreamHelper"]], , 
        [
            Utils.SystemError
        ], , ],
        "PostBakDataExt": [, 2, 2, , , , [["VpsAgent.PostExtDataVectorHelper"]], , 
        [
            Utils.SystemError
        ], , ],
        "GetBakDataExt": [, 2, 2, , , [1], [["VpsAgent.GetExtDataVectorHelper"]], [["VpsAgent.PostExtDataVectorHelper"]], 
        [
            Utils.SystemError
        ], , ],
        "PostUsedBlockBitmap": [, , , , , , [[3], ["VpsAgent.BinaryStreamHelper"], [1]], , 
        [
            Utils.SystemError
        ], , ],
        "PostDuplicateFileSectors": [, , , , , , [[3], ["IMG.DuplicateFileSectorsHelper"], [1]], , 
        [
            Utils.SystemError
        ], , ],
        "PostCurrentFileList": [, , , , , , [["VpsAgent.BinaryStreamHelper"], [1]], , 
        [
            Utils.SystemError
        ], , ],
        "GetFileListFromDuplicateFilePool": [, , , , , [1], , [["VpsAgent.BinaryStreamHelper"]], 
        [
            Utils.NeedRetryLaterError,
            Utils.SystemError
        ], , ],
        "ReportStatus": [, 2, 2, , , , [[BoxLogic.BackupProgress]], , 
        [
            Utils.SystemError
        ], , ],
        "Exit": [, 2, 2, , , , [[BoxLogic.BackupFinishCode.__helper]], , 
        [
            Utils.SystemError
        ], , ]
    });

    VpsAgent.Restore = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::VpsAgent::Restore"
        ],
        -1, undefined, undefined, false);

    VpsAgent.RestorePrx = Slice.defineProxy(Ice.ObjectPrx, VpsAgent.Restore.ice_staticId, undefined);

    Slice.defineOperations(VpsAgent.Restore, VpsAgent.RestorePrx,
    {
        "getUesdBlockBitmap": [, 2, 2, , , [3], [[7], [3]], [["VpsAgent.BinaryStreamHelper"]], 
        [
            Utils.SystemError
        ], , ],
        "reportStatus": [, 2, 2, , , , [[BoxLogic.RestoreStageCode.__helper], [7], [7]], , 
        [
            Utils.SystemError
        ], , ]
    });

    /**
     * 关键模块发生错误
     **/
    VpsAgent.AgentModuleError = Slice.defineUserException(
        function(description, debug, rawCode, moduleName, _cause)
        {
            Utils.SystemError.call(this, description, debug, rawCode, _cause);
            this.moduleName = moduleName !== undefined ? moduleName : "";
        },
        Utils.SystemError,
        "VpsAgent::AgentModuleError",
        function(__os)
        {
            __os.writeString(this.moduleName);
        },
        function(__is)
        {
            this.moduleName = __is.readString();
        },
        false,
        false);

    VpsAgent.SnapshotName = Slice.defineStruct(
        function(diskIndex, diskIdent, snapshot, startCDP, cdpConfig)
        {
            this.diskIndex = diskIndex !== undefined ? diskIndex : 0;
            this.diskIdent = diskIdent !== undefined ? diskIdent : "";
            this.snapshot = snapshot !== undefined ? snapshot : "";
            this.startCDP = startCDP !== undefined ? startCDP : false;
            this.cdpConfig = cdpConfig !== undefined ? cdpConfig : new BoxLogic.CDPConfig();
        },
        true,
        function(__os)
        {
            __os.writeInt(this.diskIndex);
            __os.writeString(this.diskIdent);
            __os.writeString(this.snapshot);
            __os.writeBool(this.startCDP);
            BoxLogic.CDPConfig.write(__os, this.cdpConfig);
        },
        function(__is)
        {
            this.diskIndex = __is.readInt();
            this.diskIdent = __is.readString();
            this.snapshot = __is.readString();
            this.startCDP = __is.readBool();
            this.cdpConfig = BoxLogic.CDPConfig.read(__is, this.cdpConfig);
        },
        24, 
        false);
    Slice.defineSequence(VpsAgent, "SnapshotNamesHelper", "VpsAgent.SnapshotName", false);

    VpsAgent.SnapshotConfig = Slice.defineStruct(
        function(diskIndex, jsonConfig)
        {
            this.diskIndex = diskIndex !== undefined ? diskIndex : 0;
            this.jsonConfig = jsonConfig !== undefined ? jsonConfig : "";
        },
        true,
        function(__os)
        {
            __os.writeInt(this.diskIndex);
            __os.writeString(this.jsonConfig);
        },
        function(__is)
        {
            this.diskIndex = __is.readInt();
            this.jsonConfig = __is.readString();
        },
        5, 
        false);
    Slice.defineSequence(VpsAgent, "SnapshotConfigsHelper", "VpsAgent.SnapshotConfig", false);

    VpsAgent.BackupErrorType = Slice.defineEnum([
        ['SystemError', 1], ['SbdError', 2], ['NetError', 3], ['DriverError', 4]]);

    VpsAgent.AgentReceiver = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::VpsAgent::AgentReceiver"
        ],
        -1, undefined, undefined, false);

    VpsAgent.AgentReceiverPrx = Slice.defineProxy(Ice.ObjectPrx, VpsAgent.AgentReceiver.ice_staticId, undefined);

    Slice.defineOperations(VpsAgent.AgentReceiver, VpsAgent.AgentReceiverPrx,
    {
        "check": [, 2, 2, , , , , , 
        [
            VpsAgent.AgentModuleError
        ], , ],
        "JsonFunc": [, 2, 2, , , [7], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "QuerySystemInfo": [, 2, 2, , , [7], , , 
        [
            Utils.SystemError
        ], , ],
        "QueryDisksStatus": [, 2, 2, , , , , [["BoxLogic.DisksHelper"], [7, , 1]], 
        [
            Utils.SystemError
        ], , ],
        "DoBackup": [, , , , , , [["VpsAgent.SnapshotNamesHelper"], ["VpsAgent.BackupPrx"]], , 
        [
            Utils.SystemError
        ], , ],
        "DoBackupEx": [, , , , , , [["VpsAgent.SnapshotNamesHelper"], ["VpsAgent.SnapshotConfigsHelper"], ["VpsAgent.BackupPrx"], [7, , 1]], , 
        [
            Utils.SystemError
        ], , ],
        "GetLastBackupError": [, 2, 2, , , [7], , , , , ],
        "GetLastCdpError": [, 2, 2, , , [7], , , , , ],
        "StartAgentPe": [, , , , , [3], , [[7]], 
        [
            Utils.SystemError
        ], , ],
        "CancelBackup": [, 2, 2, , , , , , 
        [
            Utils.SystemError
        ], , ],
        "NotifyHighPriority": [, 2, 2, , , , [[7], [4]], , 
        [
            Utils.SystemError
        ], , ],
        "GetStatus": [, 2, 2, , , ["BoxLogic.AgentStatusHelper"], , , , , ],
        "StopCdpStatus": [, 2, 2, , , , , , , , ],
        "PackDebugFiles": [, , , , , [1], , , , , ],
        "FetchDebugPacket": [, 2, 2, , , [3], [[3]], [["VpsAgent.BinaryStreamHelper"]], , , ],
        "DoRestore": [, , , , , , [[7], ["VpsAgent.RestorePrx"]], , 
        [
            Utils.SystemError
        ], , ],
        "CancelRestore": [, 2, 2, , , , , , 
        [
            Utils.SystemError
        ], , ],
        "GetServiceList": [, 2, 2, , , [3], , [["Box.ServiceInfoStatusSHelper"]], 
        [
            Utils.SystemError
        ], , ],
        "GetTcpListenList": [, 2, 2, , , [3], [["Box.vectorINTHelper"]], [["Box.vectorINTHelper"]], 
        [
            Utils.SystemError
        ], , ],
        "StartServiceSync": [, 2, 2, , , [3], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "StopServiceSync": [, 2, 2, , , [3], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "StartHttpDServiceAsync": [, 2, 2, , , [3], [[3], ["VpsAgent.BinaryStreamHelper"]], , 
        [
            Utils.SystemError
        ], , ],
        "GetHttpDServiceListSync": [, 2, 2, , , [3], , [["Box.vectorINTHelper"]], 
        [
            Utils.SystemError
        ], , ],
        "StopAllHttpDServiceSync": [, 2, 2, , , [3], , , 
        [
            Utils.SystemError
        ], , ],
        "testdisk": [, 2, 2, , , [3], [[3], [4], [2]], , 
        [
            Utils.SystemError
        ], , ],
        "readdisk": [, 2, 2, , , [3], [[3], [4], [2]], [["VpsAgent.BinaryStreamHelper"]], 
        [
            Utils.SystemError
        ], , ],
        "writedisk": [, 2, 2, , , [3], [[3], [4], [2], ["VpsAgent.BinaryStreamHelper"]], , 
        [
            Utils.SystemError
        ], , ],
        "JsonFuncV2": [, 2, 2, , , [7], [[7], ["VpsAgent.BinaryStreamHelper"]], [["VpsAgent.BinaryStreamHelper"]], 
        [
            Utils.SystemError
        ], , ]
    });

    VpsAgent.Session = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::VpsAgent::Session"
        ],
        -1, undefined, undefined, false);

    VpsAgent.SessionPrx = Slice.defineProxy(Ice.ObjectPrx, VpsAgent.Session.ice_staticId, undefined);

    Slice.defineOperations(VpsAgent.Session, VpsAgent.SessionPrx,
    {
        "QueryName": [, 2, 2, , , [7], , , , , ],
        "QueryIdentity": [, 2, 2, , , [7], , , , , ],
        "QuerySoftIdent": [, 2, 2, , , [7], , , , , ],
        "QueryJsonData": [, 2, 2, , , [7], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "destroy": [, , , , , , , , , , ],
        "initiateReceiver": [, , , , , , [[Ice.Identity]], , 
        [
            Utils.SystemError
        ], , ],
        "refresh": [, 2, 2, , , , , , , , ],
        "reportRestoreStatus": [, 2, 2, , , , [[7], [BoxLogic.RestoreProgress], [1]], , 
        [
            Utils.SystemError
        ], , ],
        "queryLastCdpDetailByRestoreToken": [, 2, 2, , , [BoxLogic.LastCdpDetail], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "queryLastCdpDetailByCdpToken": [, 2, 2, , , [1], [[7]], [[BoxLogic.LastCdpDetail]], 
        [
            Utils.SystemError
        ], , ],
        "setPreReadBitmap": [, 2, 2, , , , [[7], [4], ["VpsAgent.BinaryStreamHelper"]], , 
        [
            Utils.SystemError
        ], , ]
    });

    VpsAgent.AgentIdentification = Slice.defineStruct(
        function(ident, Identity)
        {
            this.ident = ident !== undefined ? ident : new BoxLogic.AgentIdentification();
            this.Identity = Identity !== undefined ? Identity : "";
        },
        true,
        function(__os)
        {
            BoxLogic.AgentIdentification.write(__os, this.ident);
            __os.writeString(this.Identity);
        },
        function(__is)
        {
            this.ident = BoxLogic.AgentIdentification.read(__is, this.ident);
            this.Identity = __is.readString();
        },
        3, 
        false);

    VpsAgent.SessionFactory = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::VpsAgent::SessionFactory"
        ],
        -1, undefined, undefined, false);

    VpsAgent.SessionFactoryPrx = Slice.defineProxy(Ice.ObjectPrx, VpsAgent.SessionFactory.ice_staticId, undefined);

    Slice.defineOperations(VpsAgent.SessionFactory, VpsAgent.SessionFactoryPrx,
    {
        "create": [, , , , , ["VpsAgent.SessionPrx"], [[VpsAgent.AgentIdentification], [7]], , 
        [
            Utils.SystemError
        ], , ]
    });
    exports.VpsAgent = VpsAgent;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : window.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : window));

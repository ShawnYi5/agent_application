// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `duplicate_file.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var Utils = require("utils").Utils;
    var Slice = Ice.Slice;

    var DuplicateFilePool = __M.module("DuplicateFilePool");
    Slice.defineSequence(DuplicateFilePool, "BinaryStreamHelper", "Ice.ByteHelper", true);

    DuplicateFilePool.FileFromClient = Slice.defineStruct(
        function(clientFileIdent, fileFullName, fileBytes)
        {
            this.clientFileIdent = clientFileIdent !== undefined ? clientFileIdent : 0;
            this.fileFullName = fileFullName !== undefined ? fileFullName : "";
            this.fileBytes = fileBytes !== undefined ? fileBytes : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.clientFileIdent);
            __os.writeString(this.fileFullName);
            __os.writeLong(this.fileBytes);
        },
        function(__is)
        {
            this.clientFileIdent = __is.readInt();
            this.fileFullName = __is.readString();
            this.fileBytes = __is.readLong();
        },
        13, 
        false);

    DuplicateFilePool.FileInPool = Slice.defineStruct(
        function(identInPool, clientFileIdent, fileHash, hashType)
        {
            this.identInPool = identInPool !== undefined ? identInPool : "";
            this.clientFileIdent = clientFileIdent !== undefined ? clientFileIdent : 0;
            this.fileHash = fileHash !== undefined ? fileHash : "";
            this.hashType = hashType !== undefined ? hashType : 0;
        },
        true,
        function(__os)
        {
            __os.writeString(this.identInPool);
            __os.writeInt(this.clientFileIdent);
            __os.writeString(this.fileHash);
            __os.writeInt(this.hashType);
        },
        function(__is)
        {
            this.identInPool = __is.readString();
            this.clientFileIdent = __is.readInt();
            this.fileHash = __is.readString();
            this.hashType = __is.readInt();
        },
        10, 
        false);

    DuplicateFilePool.UpdateProgressReceiver = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 0,
        [
            "::DuplicateFilePool::UpdateProgressReceiver",
            "::Ice::Object"
        ],
        -1, undefined, undefined, false);

    DuplicateFilePool.UpdateProgressReceiverPrx = Slice.defineProxy(Ice.ObjectPrx, DuplicateFilePool.UpdateProgressReceiver.ice_staticId, undefined);

    Slice.defineOperations(DuplicateFilePool.UpdateProgressReceiver, DuplicateFilePool.UpdateProgressReceiverPrx,
    {
        "ReportProgess": [, , , , , , [[1], [4], [4]], , , , ]
    });

    DuplicateFilePool.FilePool = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 0,
        [
            "::DuplicateFilePool::FilePool",
            "::Ice::Object"
        ],
        -1, undefined, undefined, false);

    DuplicateFilePool.FilePoolPrx = Slice.defineProxy(Ice.ObjectPrx, DuplicateFilePool.FilePool.ice_staticId, undefined);

    Slice.defineOperations(DuplicateFilePool.FilePool, DuplicateFilePool.FilePoolPrx,
    {
        "update": [, , , , , , [[7], [Ice.Identity]], , 
        [
            Utils.SystemError
        ], , ],
        "queryFilesFromClient": [, , , , , , [[7], [7]], , 
        [
            Utils.SystemError
        ], , ],
        "readFile": [, , , , , ["DuplicateFilePool.BinaryStreamHelper"], [[7], [4], [3]], , 
        [
            Utils.SystemError
        ], , ]
    });
    exports.DuplicateFilePool = DuplicateFilePool;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : window.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : window));

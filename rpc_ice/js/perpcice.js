// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `perpcice.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var Utils = require("utils").Utils;
    var Slice = Ice.Slice;

    var PerpcIce = __M.module("PerpcIce");
    Slice.defineSequence(PerpcIce, "BinaryStreamHelper", "Ice.ByteHelper", true);

    PerpcIce.ExcludeBrokenBlock = Slice.defineStruct(
        function(diskToken, blockOffset, bitmap)
        {
            this.diskToken = diskToken !== undefined ? diskToken : "";
            this.blockOffset = blockOffset !== undefined ? blockOffset : 0;
            this.bitmap = bitmap !== undefined ? bitmap : null;
        },
        true,
        function(__os)
        {
            __os.writeString(this.diskToken);
            __os.writeLong(this.blockOffset);
            PerpcIce.BinaryStreamHelper.write(__os, this.bitmap);
        },
        function(__is)
        {
            this.diskToken = __is.readString();
            this.blockOffset = __is.readLong();
            this.bitmap = PerpcIce.BinaryStreamHelper.read(__is);
        },
        10, 
        false);
    Slice.defineSequence(PerpcIce, "ExcludeBrokenBlocksHelper", "PerpcIce.ExcludeBrokenBlock", false);

    PerpcIce.ExcludeBlockRun = Slice.defineStruct(
        function(diskToken, blockOffset, blockCount)
        {
            this.diskToken = diskToken !== undefined ? diskToken : "";
            this.blockOffset = blockOffset !== undefined ? blockOffset : 0;
            this.blockCount = blockCount !== undefined ? blockCount : 0;
        },
        true,
        function(__os)
        {
            __os.writeString(this.diskToken);
            __os.writeLong(this.blockOffset);
            __os.writeLong(this.blockCount);
        },
        function(__is)
        {
            this.diskToken = __is.readString();
            this.blockOffset = __is.readLong();
            this.blockCount = __is.readLong();
        },
        17, 
        false);
    Slice.defineSequence(PerpcIce, "ExcludeBlockRunsHelper", "PerpcIce.ExcludeBlockRun", false);

    PerpcIce.PeDiskInfo = Slice.defineStruct(
        function(diskID, diskSecCount)
        {
            this.diskID = diskID !== undefined ? diskID : 0;
            this.diskSecCount = diskSecCount !== undefined ? diskSecCount : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.diskID);
            __os.writeLong(this.diskSecCount);
        },
        function(__is)
        {
            this.diskID = __is.readInt();
            this.diskSecCount = __is.readLong();
        },
        12, 
        true);
    Slice.defineSequence(PerpcIce, "PeDiskInfosHelper", "PerpcIce.PeDiskInfo", true);

    PerpcIce.PeGuestInfo = Slice.defineStruct(
        function(diskInfos, bootDiskId, loginType)
        {
            this.diskInfos = diskInfos !== undefined ? diskInfos : null;
            this.bootDiskId = bootDiskId !== undefined ? bootDiskId : 0;
            this.loginType = loginType !== undefined ? loginType : 0;
        },
        true,
        function(__os)
        {
            PerpcIce.PeDiskInfosHelper.write(__os, this.diskInfos);
            __os.writeInt(this.bootDiskId);
            __os.writeInt(this.loginType);
        },
        function(__is)
        {
            this.diskInfos = PerpcIce.PeDiskInfosHelper.read(__is);
            this.bootDiskId = __is.readInt();
            this.loginType = __is.readInt();
        },
        9, 
        false);

    PerpcIce.PeDiskToken = Slice.defineStruct(
        function(diskID, token, diskGUID)
        {
            this.diskID = diskID !== undefined ? diskID : 0;
            this.token = token !== undefined ? token : "";
            this.diskGUID = diskGUID !== undefined ? diskGUID : "";
        },
        true,
        function(__os)
        {
            __os.writeInt(this.diskID);
            __os.writeString(this.token);
            __os.writeString(this.diskGUID);
        },
        function(__is)
        {
            this.diskID = __is.readInt();
            this.token = __is.readString();
            this.diskGUID = __is.readString();
        },
        6, 
        false);
    Slice.defineSequence(PerpcIce, "PeDiskTokensHelper", "PerpcIce.PeDiskToken", false);

    PerpcIce.PeRestoreInfo = Slice.defineStruct(
        function(szServerIPAddr, dwServerPortNumber, dwSocketConnectCount, dwOsDiskID, tokens)
        {
            this.szServerIPAddr = szServerIPAddr !== undefined ? szServerIPAddr : "";
            this.dwServerPortNumber = dwServerPortNumber !== undefined ? dwServerPortNumber : 0;
            this.dwSocketConnectCount = dwSocketConnectCount !== undefined ? dwSocketConnectCount : 0;
            this.dwOsDiskID = dwOsDiskID !== undefined ? dwOsDiskID : 0;
            this.tokens = tokens !== undefined ? tokens : null;
        },
        true,
        function(__os)
        {
            __os.writeString(this.szServerIPAddr);
            __os.writeInt(this.dwServerPortNumber);
            __os.writeInt(this.dwSocketConnectCount);
            __os.writeInt(this.dwOsDiskID);
            PerpcIce.PeDiskTokensHelper.write(__os, this.tokens);
        },
        function(__is)
        {
            this.szServerIPAddr = __is.readString();
            this.dwServerPortNumber = __is.readInt();
            this.dwSocketConnectCount = __is.readInt();
            this.dwOsDiskID = __is.readInt();
            this.tokens = PerpcIce.PeDiskTokensHelper.read(__is);
        },
        14, 
        false);
    Slice.defineSequence(PerpcIce, "HardwareIdsHelper", "Ice.StringHelper", false);
    Slice.defineSequence(PerpcIce, "HardwareCompatIdsHelper", "Ice.StringHelper", false);

    PerpcIce.HWInfo = Slice.defineStruct(
        function(szDeviceInstanceID, szDescription, szLocationInfo, szContainerID, szMacAddress, szService, parentDevLevel, Address, UINumber, HWIds, CompatIds)
        {
            this.szDeviceInstanceID = szDeviceInstanceID !== undefined ? szDeviceInstanceID : "";
            this.szDescription = szDescription !== undefined ? szDescription : "";
            this.szLocationInfo = szLocationInfo !== undefined ? szLocationInfo : "";
            this.szContainerID = szContainerID !== undefined ? szContainerID : "";
            this.szMacAddress = szMacAddress !== undefined ? szMacAddress : "";
            this.szService = szService !== undefined ? szService : "";
            this.parentDevLevel = parentDevLevel !== undefined ? parentDevLevel : 0;
            this.Address = Address !== undefined ? Address : 0;
            this.UINumber = UINumber !== undefined ? UINumber : 0;
            this.HWIds = HWIds !== undefined ? HWIds : null;
            this.CompatIds = CompatIds !== undefined ? CompatIds : null;
        },
        true,
        function(__os)
        {
            __os.writeString(this.szDeviceInstanceID);
            __os.writeString(this.szDescription);
            __os.writeString(this.szLocationInfo);
            __os.writeString(this.szContainerID);
            __os.writeString(this.szMacAddress);
            __os.writeString(this.szService);
            __os.writeInt(this.parentDevLevel);
            __os.writeInt(this.Address);
            __os.writeInt(this.UINumber);
            PerpcIce.HardwareIdsHelper.write(__os, this.HWIds);
            PerpcIce.HardwareCompatIdsHelper.write(__os, this.CompatIds);
        },
        function(__is)
        {
            this.szDeviceInstanceID = __is.readString();
            this.szDescription = __is.readString();
            this.szLocationInfo = __is.readString();
            this.szContainerID = __is.readString();
            this.szMacAddress = __is.readString();
            this.szService = __is.readString();
            this.parentDevLevel = __is.readInt();
            this.Address = __is.readInt();
            this.UINumber = __is.readInt();
            this.HWIds = PerpcIce.HardwareIdsHelper.read(__is);
            this.CompatIds = PerpcIce.HardwareCompatIdsHelper.read(__is);
        },
        20, 
        false);
    Slice.defineSequence(PerpcIce, "HWInfosHelper", "PerpcIce.HWInfo", false);

    PerpcIce.NetAdapterInfo = Slice.defineStruct(
        function(szDeviceInstanceID, szDescription, szGuid, szNetType, szMacAddress, isConnected)
        {
            this.szDeviceInstanceID = szDeviceInstanceID !== undefined ? szDeviceInstanceID : "";
            this.szDescription = szDescription !== undefined ? szDescription : "";
            this.szGuid = szGuid !== undefined ? szGuid : "";
            this.szNetType = szNetType !== undefined ? szNetType : "";
            this.szMacAddress = szMacAddress !== undefined ? szMacAddress : "";
            this.isConnected = isConnected !== undefined ? isConnected : false;
        },
        true,
        function(__os)
        {
            __os.writeString(this.szDeviceInstanceID);
            __os.writeString(this.szDescription);
            __os.writeString(this.szGuid);
            __os.writeString(this.szNetType);
            __os.writeString(this.szMacAddress);
            __os.writeBool(this.isConnected);
        },
        function(__is)
        {
            this.szDeviceInstanceID = __is.readString();
            this.szDescription = __is.readString();
            this.szGuid = __is.readString();
            this.szNetType = __is.readString();
            this.szMacAddress = __is.readString();
            this.isConnected = __is.readBool();
        },
        6, 
        false);
    Slice.defineSequence(PerpcIce, "NetAdapterInfosHelper", "PerpcIce.NetAdapterInfo", false);

    PerpcIce.PeGuestReceiver = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::PerpcIce::PeGuestReceiver"
        ],
        -1, undefined, undefined, false);

    PerpcIce.PeGuestReceiverPrx = Slice.defineProxy(Ice.ObjectPrx, PerpcIce.PeGuestReceiver.ice_staticId, undefined);

    Slice.defineOperations(PerpcIce.PeGuestReceiver, PerpcIce.PeGuestReceiverPrx,
    {
        "ReadDisk": [, 2, 2, , , [3], [[7], [4], [3]], [["PerpcIce.BinaryStreamHelper"]], 
        [
            Utils.SystemError
        ], , ],
        "WriteDisk": [, 2, 2, , , [3], [[7], [4], [3], ["PerpcIce.BinaryStreamHelper"]], , 
        [
            Utils.SystemError
        ], , ],
        "SetRestoreExcludeInfo": [, 2, 2, , , , [["PerpcIce.ExcludeBrokenBlocksHelper"], ["PerpcIce.ExcludeBlockRunsHelper"]], , 
        [
            Utils.SystemError
        ], , ],
        "KvmEnd": [, 2, 2, , , , , , 
        [
            Utils.SystemError
        ], , ],
        "GetClassHWInfo": [, 2, 2, , , [3], [[7], [3]], [["PerpcIce.HWInfosHelper"]], 
        [
            Utils.SystemError
        ], , ],
        "GetNetAdapterInfo": [, 2, 2, , , [3], , [["PerpcIce.NetAdapterInfosHelper"]], 
        [
            Utils.SystemError
        ], , ],
        "SetRestoreInfo": [, 2, 2, , , , [[PerpcIce.PeRestoreInfo]], , 
        [
            Utils.SystemError
        ], , ],
        "JsonFunc": [, 2, 2, , , [7], [[7], ["PerpcIce.BinaryStreamHelper"]], [["PerpcIce.BinaryStreamHelper"]], 
        [
            Utils.SystemError
        ], , ]
    });

    PerpcIce.PeSession = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::PerpcIce::PeSession"
        ],
        -1, undefined, undefined, false);

    PerpcIce.PeSessionPrx = Slice.defineProxy(Ice.ObjectPrx, PerpcIce.PeSession.ice_staticId, undefined);

    Slice.defineOperations(PerpcIce.PeSession, PerpcIce.PeSessionPrx,
    {
        "InitiatePeReceiver": [, , , , , , [[Ice.Identity]], , 
        [
            Utils.SystemError
        ], , ],
        "GetPeHostIdent": [, 2, 2, , , , , [[7]], , , ],
        "UnInit": [, 2, 2, , , , [[3]], , , , ],
        "GetBootList": [, 2, 2, , , [3], [[3]], [[7]], 
        [
            Utils.NeedRetryLaterError,
            Utils.SystemError
        ], , ],
        "GetKvmBitmapFile": [, 2, 2, , , [3], [[3]], [["PerpcIce.BinaryStreamHelper"]], 
        [
            Utils.NeedRetryLaterError,
            Utils.SystemError
        ], , ],
        "ReadDiskData": [, 2, 2, , , [3], [[7], [4], [3]], [["PerpcIce.BinaryStreamHelper"]], 
        [
            Utils.SystemError
        ], , ],
        "ReadKvmBootData": [, 2, 2, , , [3], [[3], [3]], [[1], [1], [7], [4], [3], ["PerpcIce.BinaryStreamHelper"]], 
        [
            Utils.SystemError
        ], , ],
        "getUesdBlockBitmap": [, 2, 2, , , [3], [[7], [3]], [["PerpcIce.BinaryStreamHelper"]], 
        [
            Utils.SystemError
        ], , ],
        "Refresh": [, 2, 2, , , , , , , , ],
        "StartKvm": [, , , , , , , , , , ],
        "destroy": [, , , , , , , , , , ]
    });

    PerpcIce.PeSessionFactory = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::PerpcIce::PeSessionFactory"
        ],
        -1, undefined, undefined, false);

    PerpcIce.PeSessionFactoryPrx = Slice.defineProxy(Ice.ObjectPrx, PerpcIce.PeSessionFactory.ice_staticId, undefined);

    Slice.defineOperations(PerpcIce.PeSessionFactory, PerpcIce.PeSessionFactoryPrx,
    {
        "CreateSession": [, , , , , ["PerpcIce.PeSessionPrx"], [[PerpcIce.PeGuestInfo], [3], [7, , 1]], , 
        [
            Utils.SystemError
        ], , ]
    });
    exports.PerpcIce = PerpcIce;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : window.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : window));

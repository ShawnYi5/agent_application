// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `logic.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var PerpcIce = require("perpcice").PerpcIce;
    var Utils = require("utils").Utils;
    var Slice = Ice.Slice;

    var BoxLogic = __M.module("BoxLogic");
    Slice.defineSequence(BoxLogic, "MACsHelper", "Ice.StringHelper", false);

    BoxLogic.AgentIdentification = Slice.defineStruct(
        function(Name, Hardware)
        {
            this.Name = Name !== undefined ? Name : "";
            this.Hardware = Hardware !== undefined ? Hardware : null;
        },
        true,
        function(__os)
        {
            __os.writeString(this.Name);
            BoxLogic.MACsHelper.write(__os, this.Hardware);
        },
        function(__is)
        {
            this.Name = __is.readString();
            this.Hardware = BoxLogic.MACsHelper.read(__is);
        },
        2, 
        false);

    BoxLogic.DiskType = Slice.defineEnum([
        ['RAW', 0], ['MBR', 1], ['GPT', 2]]);

    BoxLogic.DiskStatus = Slice.defineEnum([
        ['ErrorOccurred', 0], ['Unsupported', 1], ['NotExistLastSnapshot', 2], ['Backuping', 3], ['CDPing', 4],
        ['LastSnapshotIsNormal', 5], ['LastSnapshotIsCDP', 6]]);

    BoxLogic.CDPSnapshot = Slice.defineStruct(
        function(setByRestore, token, seconds, microseconds)
        {
            this.setByRestore = setByRestore !== undefined ? setByRestore : false;
            this.token = token !== undefined ? token : "invalid";
            this.seconds = seconds !== undefined ? seconds : new Ice.Long(4294967295, 4294967295);
            this.microseconds = microseconds !== undefined ? microseconds : -1;
        },
        true,
        function(__os)
        {
            __os.writeBool(this.setByRestore);
            __os.writeString(this.token);
            __os.writeLong(this.seconds);
            __os.writeInt(this.microseconds);
        },
        function(__is)
        {
            this.setByRestore = __is.readBool();
            this.token = __is.readString();
            this.seconds = __is.readLong();
            this.microseconds = __is.readInt();
        },
        14, 
        false);

    BoxLogic.DiskDetail = Slice.defineStruct(
        function(name, status, type, numberOfSectors, bootDevice, lastSnapshot, cdpSnapshot)
        {
            this.name = name !== undefined ? name : "";
            this.status = status !== undefined ? status : BoxLogic.DiskStatus.ErrorOccurred;
            this.type = type !== undefined ? type : BoxLogic.DiskType.RAW;
            this.numberOfSectors = numberOfSectors !== undefined ? numberOfSectors : 0;
            this.bootDevice = bootDevice !== undefined ? bootDevice : false;
            this.lastSnapshot = lastSnapshot !== undefined ? lastSnapshot : "invalid";
            this.cdpSnapshot = cdpSnapshot !== undefined ? cdpSnapshot : new BoxLogic.CDPSnapshot();
        },
        true,
        function(__os)
        {
            __os.writeString(this.name);
            BoxLogic.DiskStatus.__write(__os, this.status);
            BoxLogic.DiskType.__write(__os, this.type);
            __os.writeLong(this.numberOfSectors);
            __os.writeBool(this.bootDevice);
            __os.writeString(this.lastSnapshot);
            BoxLogic.CDPSnapshot.write(__os, this.cdpSnapshot);
        },
        function(__is)
        {
            this.name = __is.readString();
            this.status = BoxLogic.DiskStatus.__read(__is);
            this.type = BoxLogic.DiskType.__read(__is);
            this.numberOfSectors = __is.readLong();
            this.bootDevice = __is.readBool();
            this.lastSnapshot = __is.readString();
            this.cdpSnapshot = BoxLogic.CDPSnapshot.read(__is, this.cdpSnapshot);
        },
        27, 
        false);

    BoxLogic.Disk = Slice.defineStruct(
        function(id, detail)
        {
            this.id = id !== undefined ? id : 0;
            this.detail = detail !== undefined ? detail : new BoxLogic.DiskDetail();
        },
        true,
        function(__os)
        {
            __os.writeInt(this.id);
            BoxLogic.DiskDetail.write(__os, this.detail);
        },
        function(__is)
        {
            this.id = __is.readInt();
            this.detail = BoxLogic.DiskDetail.read(__is, this.detail);
        },
        31, 
        false);
    Slice.defineSequence(BoxLogic, "DisksHelper", "BoxLogic.Disk", false);

    BoxLogic.AgentModuleError = Slice.defineStruct(
        function(moduleName, description, debug, rawCode)
        {
            this.moduleName = moduleName !== undefined ? moduleName : "";
            this.description = description !== undefined ? description : "";
            this.debug = debug !== undefined ? debug : "";
            this.rawCode = rawCode !== undefined ? rawCode : 0;
        },
        true,
        function(__os)
        {
            __os.writeString(this.moduleName);
            __os.writeString(this.description);
            __os.writeString(this.debug);
            __os.writeLong(this.rawCode);
        },
        function(__is)
        {
            this.moduleName = __is.readString();
            this.description = __is.readString();
            this.debug = __is.readString();
            this.rawCode = __is.readLong();
        },
        11, 
        false);

    BoxLogic.BackupProgressCode = Slice.defineEnum([
        ['UnknownBackupProgressCode', 0], ['ScanningDuplicateFile', 1], ['AnalyzingDuplicateFile', 2], ['CreatingDataBitmap', 3], ['CreatingDiskSnapshot', 4],
        ['TransitingData', 5]]);

    BoxLogic.BackupProgress = Slice.defineStruct(
        function(code, progressIndex, progressTotal)
        {
            this.code = code !== undefined ? code : BoxLogic.BackupProgressCode.UnknownBackupProgressCode;
            this.progressIndex = progressIndex !== undefined ? progressIndex : 0;
            this.progressTotal = progressTotal !== undefined ? progressTotal : 0;
        },
        true,
        function(__os)
        {
            BoxLogic.BackupProgressCode.__write(__os, this.code);
            __os.writeLong(this.progressIndex);
            __os.writeLong(this.progressTotal);
        },
        function(__is)
        {
            this.code = BoxLogic.BackupProgressCode.__read(__is);
            this.progressIndex = __is.readLong();
            this.progressTotal = __is.readLong();
        },
        17, 
        false);

    BoxLogic.BackupFinishCode = Slice.defineEnum([
        ['Successful', 0], ['UserCancel', 1], ['Failed', 2], ['Error', 3]]);

    BoxLogic.CDPConfig = Slice.defineStruct(
        function(mode, ip, port, socketNumber, cacheMaxBytes, netTimeouts, token)
        {
            this.mode = mode !== undefined ? mode : 0;
            this.ip = ip !== undefined ? ip : "invalid";
            this.port = port !== undefined ? port : -1;
            this.socketNumber = socketNumber !== undefined ? socketNumber : -1;
            this.cacheMaxBytes = cacheMaxBytes !== undefined ? cacheMaxBytes : -1;
            this.netTimeouts = netTimeouts !== undefined ? netTimeouts : -1;
            this.token = token !== undefined ? token : "invalid";
        },
        true,
        function(__os)
        {
            __os.writeByte(this.mode);
            __os.writeString(this.ip);
            __os.writeShort(this.port);
            __os.writeInt(this.socketNumber);
            __os.writeInt(this.cacheMaxBytes);
            __os.writeInt(this.netTimeouts);
            __os.writeString(this.token);
        },
        function(__is)
        {
            this.mode = __is.readByte();
            this.ip = __is.readString();
            this.port = __is.readShort();
            this.socketNumber = __is.readInt();
            this.cacheMaxBytes = __is.readInt();
            this.netTimeouts = __is.readInt();
            this.token = __is.readString();
        },
        17, 
        false);

    BoxLogic.RestoreProgress = Slice.defineStruct(
        function(remainingBytes, totalBytes)
        {
            this.remainingBytes = remainingBytes !== undefined ? remainingBytes : 0;
            this.totalBytes = totalBytes !== undefined ? totalBytes : 0;
        },
        true,
        function(__os)
        {
            __os.writeLong(this.remainingBytes);
            __os.writeLong(this.totalBytes);
        },
        function(__is)
        {
            this.remainingBytes = __is.readLong();
            this.totalBytes = __is.readLong();
        },
        16, 
        true);

    BoxLogic.RestoreStageCode = Slice.defineEnum([
        ['FinishFailed', 0], ['FinishOk', 1], ['UmountAllVolumes', 2], ['Started', 3]]);

    BoxLogic.LastCdpDetail = Slice.defineStruct(
        function(token, seconds, microseconds)
        {
            this.token = token !== undefined ? token : "";
            this.seconds = seconds !== undefined ? seconds : 0;
            this.microseconds = microseconds !== undefined ? microseconds : 0;
        },
        true,
        function(__os)
        {
            __os.writeString(this.token);
            __os.writeLong(this.seconds);
            __os.writeInt(this.microseconds);
        },
        function(__is)
        {
            this.token = __is.readString();
            this.seconds = __is.readLong();
            this.microseconds = __is.readInt();
        },
        13, 
        false);
    Slice.defineSequence(BoxLogic, "AgentStatusHelper", "Ice.StringHelper", false);

    BoxLogic.Logic = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 0,
        [
            "::BoxLogic::Logic",
            "::Ice::Object"
        ],
        -1, undefined, undefined, false);

    BoxLogic.LogicPrx = Slice.defineProxy(Ice.ObjectPrx, BoxLogic.Logic.ice_staticId, undefined);

    Slice.defineOperations(BoxLogic.Logic, BoxLogic.LogicPrx,
    {
        "ping": [, , , , , , , , , , ],
        "queryHostName": [, , , , , [7], [[BoxLogic.AgentIdentification], [7]], , 
        [
            Utils.SystemError
        ], , ],
        "login": [, , , , , [1], [[7], [7], [7], [3]], , 
        [
            Utils.SystemError
        ], , ],
        "logout": [, , , , , , [[7]], , , , ],
        "queryHostSoftIdent": [, , , , , [7], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "reportAgentModuleError": [, , , , , , [[7], [BoxLogic.AgentModuleError]], , , , ],
        "reportBackupProgress": [, , , , , , [[7], [BoxLogic.BackupProgress]], , , , ],
        "reportBackupFinish": [, , , , , , [[7], [BoxLogic.BackupFinishCode.__helper]], , 
        [
            Utils.SystemError
        ], , ],
        "reportVolumeRestoreStatus": [, , , , , , [[7], [BoxLogic.RestoreStageCode.__helper], [7], [7]], , 
        [
            Utils.SystemError
        ], , ],
        "clearAllHostSession": [, , , , , , , , , , ],
        "peLogin": [, , , , , [7], [[PerpcIce.PeGuestInfo], [7], [7], [3], [7, , 1]], , 
        [
            Utils.SystemError
        ], , ],
        "peLogout": [, , , , , , [[7]], , , , ],
        "updateCDPToken": [, , , , , , [[7], [7]], , 
        [
            Utils.SystemError
        ], , ],
        "updateTrafficControl": [, , , , , , [[7], [4]], , 
        [
            Utils.SystemError
        ], , ],
        "updateRestoreToken": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "closeCDPToken": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "refreshSnapshotToken": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "reportRestoreStatus": [, , , , , , [[7], [BoxLogic.RestoreProgress], [1], [7, , 1]], , 
        [
            Utils.SystemError
        ], , ],
        "QueryJsonData": [, , , , , [7], [[7], [7]], , 
        [
            Utils.SystemError
        ], , ],
        "startKvm": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "fetchProxyEndPoints": [, , , , , , , , 
        [
            Utils.SystemError
        ], , ],
        "queryLastCdpDetailByRestoreToken": [, , , , , [BoxLogic.LastCdpDetail], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "queryLastCdpDetailByCdpToken": [, , , , , [1], [[7], [7]], [[BoxLogic.LastCdpDetail]], 
        [
            Utils.SystemError
        ], , ],
        "queryNetworkTransmissionType": [, , , , , [7], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "dataQueuingReport": [, , , , , [3], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "getHashFilePathByRestoreToken": [, , , , , [7], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "VmwareAgentReport": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ]
    });
    Slice.defineSequence(BoxLogic, "PathsHelper", "Ice.StringHelper", false);
    Slice.defineSequence(BoxLogic, "StringListHelper", "Ice.StringHelper", false);

    BoxLogic.Hardware = Slice.defineStruct(
        function(Type, Vid, HWIds, CompatIds)
        {
            this.Type = Type !== undefined ? Type : "";
            this.Vid = Vid !== undefined ? Vid : "";
            this.HWIds = HWIds !== undefined ? HWIds : null;
            this.CompatIds = CompatIds !== undefined ? CompatIds : null;
        },
        true,
        function(__os)
        {
            __os.writeString(this.Type);
            __os.writeString(this.Vid);
            BoxLogic.StringListHelper.write(__os, this.HWIds);
            BoxLogic.StringListHelper.write(__os, this.CompatIds);
        },
        function(__is)
        {
            this.Type = __is.readString();
            this.Vid = __is.readString();
            this.HWIds = BoxLogic.StringListHelper.read(__is);
            this.CompatIds = BoxLogic.StringListHelper.read(__is);
        },
        4, 
        false);
    Slice.defineSequence(BoxLogic, "HardwaresHelper", "BoxLogic.Hardware", false);

    BoxLogic.IPConfig = Slice.defineStruct(
        function(ipAddress, subnetMask, gateway, nameServer, multiInfos, hardwareConfig)
        {
            this.ipAddress = ipAddress !== undefined ? ipAddress : "";
            this.subnetMask = subnetMask !== undefined ? subnetMask : "";
            this.gateway = gateway !== undefined ? gateway : "";
            this.nameServer = nameServer !== undefined ? nameServer : "";
            this.multiInfos = multiInfos !== undefined ? multiInfos : "";
            this.hardwareConfig = hardwareConfig !== undefined ? hardwareConfig : "";
        },
        true,
        function(__os)
        {
            __os.writeString(this.ipAddress);
            __os.writeString(this.subnetMask);
            __os.writeString(this.gateway);
            __os.writeString(this.nameServer);
            __os.writeString(this.multiInfos);
            __os.writeString(this.hardwareConfig);
        },
        function(__is)
        {
            this.ipAddress = __is.readString();
            this.subnetMask = __is.readString();
            this.gateway = __is.readString();
            this.nameServer = __is.readString();
            this.multiInfos = __is.readString();
            this.hardwareConfig = __is.readString();
        },
        6, 
        false);
    Slice.defineSequence(BoxLogic, "IPConfigsHelper", "BoxLogic.IPConfig", false);
    Slice.defineSequence(BoxLogic, "BinaryStreamHelper", "Ice.ByteHelper", true);

    BoxLogic.LogicInternal = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 0,
        [
            "::BoxLogic::LogicInternal",
            "::Ice::Object"
        ],
        -1, undefined, undefined, false);

    BoxLogic.LogicInternalPrx = Slice.defineProxy(Ice.ObjectPrx, BoxLogic.LogicInternal.ice_staticId, undefined);

    Slice.defineOperations(BoxLogic.LogicInternal, BoxLogic.LogicInternalPrx,
    {
        "pathJoin": [, , , , , [7], [["BoxLogic.PathsHelper"]], , , , ],
        "isFileExist": [, , , , , [1], [[7]], , , , ],
        "AllFilesExist": [, , , , , [1], [["BoxLogic.PathsHelper"]], , , , ],
        "isFolderExist": [, , , , , [1], [[7]], , , , ],
        "makeDirs": [, , , , , , [[7], [1], [2]], , , , ],
        "remove": [, , , , , , [[7]], , , , ],
        "copy": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "findFiles": [, , , , , , [[7]], [["BoxLogic.PathsHelper"]], , , ],
        "queryCdpTimestampRange": [, , , , , [7], [[7], [1]], , 
        [
            Utils.SystemError
        ], , ],
        "queryCdpTimestamp": [, , , , , [7], [[7], [7]], , 
        [
            Utils.SystemError
        ], , ],
        "formatCdpTimestamp": [, , , , , [7], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "mergeCdpFile": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "isHardwareDriverExist": [, , , , , [1], [[BoxLogic.Hardware], [7], [7]], , 
        [
            Utils.SystemError
        ], , ],
        "GetDriversVersions": [, , , , , [7], [[BoxLogic.Hardware], [7], [7]], , 
        [
            Utils.SystemError
        ], , ],
        "ChkIsSubId": [, , , , , [1], [[BoxLogic.Hardware]], , 
        [
            Utils.SystemError
        ], , ],
        "GetDriversSubList": [, , , , , [7], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "generatePeStageIso": [, , , , , , [[7], [7], ["BoxLogic.HardwaresHelper"], ["BoxLogic.IPConfigsHelper"], ["BoxLogic.StringListHelper"], [7], [7], [7], [7]], , 
        [
            Utils.SystemError
        ], , ],
        "runRestoreKvm": [, , , , , [7], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "getCurrentNetworkInfos": [, , , , , [7], , , 
        [
            Utils.SystemError
        ], , ],
        "setNetwork": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "enumStorageNodes": [, , , , , [7], , , 
        [
            Utils.SystemError
        ], , ],
        "getLocalIqn": [, , , , , [7], , , 
        [
            Utils.SystemError
        ], , ],
        "setLocalIqn": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "setGlobalDoubleChap": [, , , , , , [[7], [7]], , 
        [
            Utils.SystemError
        ], , ],
        "getGlobalDoubleChap": [, , , , , [1], , [[7], [7]], 
        [
            Utils.SystemError
        ], , ],
        "loginExternalDevice": [, , , , , [7], [[7], [3], [1], [7], [7]], , 
        [
            Utils.SystemError
        ], , ],
        "logoutExternalDevice": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "refreshExternalDevice": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "formatAndInitializeStorageNode": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "mountStorageNode": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "unmountStorageNode": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "runCmd": [, , , , , [3], [[7], [1]], [["BoxLogic.StringListHelper"]], 
        [
            Utils.SystemError
        ], , ],
        "CmdCtrl": [, , , , , [7], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "setPasswd": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "getPasswd": [, , , , , [7], , , 
        [
            Utils.SystemError
        ], , ],
        "calcClusterTime0Hash": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "generateClusterDiffImages": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "mergeCdpFiles": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "cutCdpFile": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "getRawDiskFiles": [, , , , , [3], [[7], [7]], , 
        [
            Utils.SystemError
        ], , ],
        "NbdFindUnusedReverse": [, , , , , [7], , , 
        [
            Utils.SystemError
        ], , ],
        "NbdSetUnused": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "NbdSetUsed": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "queryTakeOverHostInfo": [, , , , , [7], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "mergeQcowFile": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "startBackupOptimize": [, , , , , [7], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "stopBackupOptimize": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "mergeHashFile": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "generateBitMapFromQcowFile": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "fromMapGetQcowMaxSize": [, , , , , [4], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "reorganizeHashFile": [, , , , , , [["BoxLogic.BinaryStreamHelper"], [7]], , 
        [
            Utils.SystemError
        ], , ],
        "reorganizeHashFilev2": [, , , , , , [[7], [7]], , 
        [
            Utils.SystemError
        ], , ],
        "hash2Interval": [, , , , , [4], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "exportSnapshot": [, , , , , [7], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "getAllTapeJson": [, , , , , [7], , , 
        [
            Utils.SystemError
        ], , ],
        "getAllMediumxJson": [, , , , , [7], , , 
        [
            Utils.SystemError
        ], , ],
        "archiveMediaOperation": [, , , , , [7], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "getArchiveFileMetaData": [, , , , , [7], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "genArchiveQcowFile": [, , , , , [7], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "fileBackup": [, , , , , [7], [[7]], , 
        [
            Utils.SystemError
        ], , ],
        "kvmRpc": [, , , , , [7], [[7]], , 
        [
            Utils.SystemError
        ], , ]
    });

    BoxLogic.Setup = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 0,
        [
            "::BoxLogic::Setup",
            "::Ice::Object"
        ],
        -1, undefined, undefined, false);

    BoxLogic.SetupPrx = Slice.defineProxy(Ice.ObjectPrx, BoxLogic.Setup.ice_staticId, undefined);

    Slice.defineOperations(BoxLogic.Setup, BoxLogic.SetupPrx,
    {
        "startSetup": [, , , , , , [[7], [7]], , 
        [
            Utils.SystemError
        ], , ],
        "cancelSetup": [, , , , , , [[7]], , 
        [
            Utils.SystemError
        ], , ]
    });
    exports.BoxLogic = BoxLogic;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : window.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : window));
